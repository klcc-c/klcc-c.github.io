<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux-疑难杂症-01</title>
    <url>/klcc-c.github.io/62db15db.html</url>
    <content><![CDATA[<h2 id="Ubuntu扩容lvm"><a href="#Ubuntu扩容lvm" class="headerlink" title="Ubuntu扩容lvm"></a>Ubuntu扩容lvm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line">resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="测试硬盘灯"><a href="#测试硬盘灯" class="headerlink" title="测试硬盘灯"></a>测试硬盘灯</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">time dd if=/dev/sdb of=/dev/null bs=4k</span><br><span class="line"></span><br><span class="line">for i in `lsblk |grep -w sd[a-z] |grep T  |awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">do</span><br><span class="line">	nohup  dd if=/dev/$i of=/dev/null bs=4k &gt; /tmp/$&#123;i&#125;.log   &amp;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="CPU高压测试"><a href="#CPU高压测试" class="headerlink" title="CPU高压测试"></a>CPU高压测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in `seq 1 30`; do dd if=/dev/zero of=/dev/null &amp; done</span><br><span class="line">ps -ef |grep -v grep|grep &#x27;dd if=/dev/zero of=/dev/null&#x27;|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">top</span><br><span class="line">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"></span><br><span class="line">id 前面数值是空闲率</span><br></pre></td></tr></table></figure>


<h2 id="ip排序"><a href="#ip排序" class="headerlink" title="ip排序"></a>ip排序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort -t . -k 4,4n tt</span><br><span class="line">sort -t<span class="string">&#x27;.&#x27;</span> -k1,1n -k2,2n -k3,3n -k4,4n</span><br></pre></td></tr></table></figure>
<h2 id="mdadm软raid"><a href="#mdadm软raid" class="headerlink" title="mdadm软raid"></a>mdadm软raid</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mdadm -C /dev/md1 -l raid0 -n 2 /dev/nvme2n2 /dev/nvme3n1 </span><br></pre></td></tr></table></figure>
<h2 id="dpkg-error"><a href="#dpkg-error" class="headerlink" title="dpkg-error"></a>dpkg-error</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dpkg: error processing package</span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info /var/lib/dpkg/info.bak</span><br><span class="line">mkdir /var/lib/dpkg/info</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install sl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info       /var/lib/dpkg/info.ori</span><br><span class="line">mv /var/lib/dpkg/info.bak   /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line">apt install lrzsz </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CPU温度查看"><a href="#CPU温度查看" class="headerlink" title="CPU温度查看"></a>CPU温度查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt-get install lm-sensors sensors-applet -y</span><br><span class="line">yes| sensors-detect</span><br><span class="line"></span><br><span class="line">cat /sys/class/hwmon/hwmon0/device/hwmon/hwmon0/temp1_input</span><br><span class="line"></span><br><span class="line">sensors</span><br></pre></td></tr></table></figure>
<h2 id="无交互修改密码"><a href="#无交互修改密码" class="headerlink" title="无交互修改密码"></a>无交互修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:test123.&quot;</span>|chpasswd</span><br></pre></td></tr></table></figure>
<h2 id="开启yum缓存"><a href="#开启yum缓存" class="headerlink" title="开启yum缓存"></a>开启yum缓存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">修改为1</span></span><br><span class="line">keepcache=1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认存放目录在/var/cache</span></span><br></pre></td></tr></table></figure>
<h2 id="find找出的移动或删除"><a href="#find找出的移动或删除" class="headerlink" title="find找出的移动或删除"></a>find找出的移动或删除</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -name &#x27;means&#x27;|xargs -i mv &#123;&#125;  /k-means/</span><br><span class="line">find ./ -name &#x27;means&#x27;|xargs -i cp &#123;&#125;  /k-means/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">找出小于90G的文件</span></span><br><span class="line">find ./ -type f   -size -90G</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="bash错误修复"><a href="#bash错误修复" class="headerlink" title="-bash错误修复"></a>-bash错误修复</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash-4.2$</span><br><span class="line">cp /etc/skel/.bashrc  /home/user/</span><br><span class="line">cp /etc/skel/.bash_profile   /home/user</span><br></pre></td></tr></table></figure>
<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定目录</span></span><br><span class="line">-d </span><br></pre></td></tr></table></figure>
<h2 id="设置免密"><a href="#设置免密" class="headerlink" title="设置免密"></a>设置免密</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f ~/.ssh/id_rsa  -P &#x27;&#x27; -q</span><br><span class="line">sshpass -p123456</span><br><span class="line"></span><br><span class="line">ssh-copy-id -f -i ~/.ssh/id_rsa.pub &quot;-o StrictHostKeyChecking=no&quot; 10.0.0.100</span><br></pre></td></tr></table></figure>
<h2 id="rpm管理命令"><a href="#rpm管理命令" class="headerlink" title="rpm管理命令"></a>rpm管理命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ql  nginx		#列出所有相关目录</span><br><span class="line">rpm -qc  nginx		#列出配置目录</span><br><span class="line">rpm -e	 nginx		#单独卸载</span><br></pre></td></tr></table></figure>
<h2 id="输出格式化整理"><a href="#输出格式化整理" class="headerlink" title="输出格式化整理"></a>输出格式化整理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">column -t    <span class="comment">#格式化整理</span></span><br></pre></td></tr></table></figure>
<h2 id="自动补全命令"><a href="#自动补全命令" class="headerlink" title="自动补全命令"></a>自动补全命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install bash-completion #自动补全命令</span><br></pre></td></tr></table></figure>
<h2 id="VMware相关"><a href="#VMware相关" class="headerlink" title="VMware相关"></a>VMware相关</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">VM安装linux在docker中装mysql挂起再启动后无法连接解决方法</span></span><br><span class="line">vim /usr/lib/sysctl.d/00-system.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启网络服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看IPv4转发状态</span></span><br><span class="line">sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>
<h2 id="history设置"><a href="#history设置" class="headerlink" title="history设置"></a>history设置</h2><h3 id="历史命令显示时间"><a href="#历史命令显示时间" class="headerlink" title="历史命令显示时间"></a>历史命令显示时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">写入/etc/bashrc或者/etc/profile</span></span><br><span class="line">HISTFILESIZE=4000 #默认保存命令是1000条，这里修改为4000条</span><br><span class="line">HISTSIZE=4000</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;` #取得登录客户端的IP</span><br><span class="line">if [ -z $USER_IP ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">HISTTIMEFORMAT=&quot;%F %T $USER_IP:`whoami` &quot; #设置新的显示history的格式</span><br><span class="line">export HISTTIMEFORMAT</span><br><span class="line"></span><br><span class="line">. /etc/bashrc</span><br></pre></td></tr></table></figure>
<h3 id="记录用户bash"><a href="#记录用户bash" class="headerlink" title="记录用户bash"></a>记录用户bash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####记录用户bash######################################################</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER=`whoami`</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>|sed -e <span class="string">&#x27;s/[()]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$USER_IP</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line">chmod 777 /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date +<span class="string">&quot;%Y%m%d_%H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">&quot;/var/log/history/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;USER_IP&#125;</span>_<span class="variable">$DT</span>&quot;</span></span><br><span class="line">chmod 600 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span>/*<span class="built_in">history</span>* 2&gt;/dev/null</span><br><span class="line"><span class="comment">#######################################################################</span></span><br></pre></td></tr></table></figure>
<h2 id="vim设置"><a href="#vim设置" class="headerlink" title="vim设置"></a>vim设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">TAB 键为四个空格 永久显示行号</span></span><br><span class="line">vim /etc/vimrc</span><br><span class="line">set ts=4</span><br><span class="line">set sw=4</span><br><span class="line">set number</span><br></pre></td></tr></table></figure>
<h2 id="分区扩容"><a href="#分区扩容" class="headerlink" title="分区扩容"></a>分区扩容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umount /data/</span><br><span class="line">fdisk /dev/vdb</span><br><span class="line">d</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line"></span><br><span class="line">e2fsck -f /dev/vdb1</span><br><span class="line">resize2fs /dev/vdb1 </span><br><span class="line">mount /dev/vdb1 /data/</span><br><span class="line">df -h </span><br><span class="line">cd /data/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 3</span><br></pre></td></tr></table></figure>
<h2 id="tcpdump使用"><a href="#tcpdump使用" class="headerlink" title="tcpdump使用"></a>tcpdump使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">-i 指定网卡</span><br><span class="line">-c 指定抓包数量</span><br></pre></td></tr></table></figure>
<h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果不是北京时间先改成北京时间</span></span><br><span class="line">1.删除自带的localtime</span><br><span class="line">  rm -rf /etc/localtime</span><br><span class="line">2.创建软链接到localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">同步阿里云</span></span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">写入硬件主板</span></span><br><span class="line">hwclock -w</span><br></pre></td></tr></table></figure>
<h2 id="终端颜色"><a href="#终端颜色" class="headerlink" title="终端颜色"></a>终端颜色</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入到环境变量内</span></span><br><span class="line">RED:</span><br><span class="line">PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;31;40m\]\u\[\033[00;00;40m\]@\[\033[01;31;40m\]\h\[\033[00;31;40m\]:\[\033[00;00;40m\]\w \[\033[01;32;40m\]\$ \[\033[01;37;40m\]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">YELLOW:</span><br><span class="line">PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;33;40m\]\u\[\033[00;00;40m\]@\[\033[01;33;40m\]\h\[\033[00;33;40m\]:\[\033[00;00;40m\]\w \[\033[01;32;40m\]\$ \[\033[01;37;40m\]&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="linux格式问题"><a href="#linux格式问题" class="headerlink" title="linux格式问题"></a>linux格式问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查文件格式，如果带M即是Windows，需要使用dosunix转换</span></span><br><span class="line">cat -v filename</span><br><span class="line">apt install dosunix -y</span><br><span class="line">yum install dosunix -y</span><br><span class="line">dos2unix filename</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.cnblogs.com/chuyiwang/p/13823551.html</span><br></pre></td></tr></table></figure>
<h2 id="文件分割"><a href="#文件分割" class="headerlink" title="文件分割"></a>文件分割</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">split</span><br></pre></td></tr></table></figure>

<h2 id="hexo插件"><a href="#hexo插件" class="headerlink" title="hexo插件"></a>hexo插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-cname</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用</title>
    <url>/klcc-c.github.io/28cddff3.html</url>
    <content><![CDATA[<h2 id="1、Markdown"><a href="#1、Markdown" class="headerlink" title="1、Markdown"></a>1、Markdown</h2><h3 id="1-1-Typora软件"><a href="#1-1-Typora软件" class="headerlink" title="1.1 Typora软件"></a>1.1 Typora软件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Typora：最好用的Markdown语法编辑器</span></span><br><span class="line"><span class="comment">#官网</span></span><br><span class="line">https://www.typora.io</span><br><span class="line"><span class="comment">#下载地址</span></span><br><span class="line">https://www.typora.io/<span class="comment">#download</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源代码模式快捷键</span></span><br><span class="line">Windows系统 ctrl + /</span><br><span class="line">mac command + /</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="1-2-Markdown基础语法"><a href="#1-2-Markdown基础语法" class="headerlink" title="1.2 Markdown基础语法"></a>1.2 Markdown基础语法</h3><h4 id="1-2-1-生成目录"><a href="#1-2-1-生成目录" class="headerlink" title="1.2.1 生成目录"></a>1.2.1 生成目录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源代码模式下在文档最上方输入以下，就会在文档最上方根据标题生成目录</span></span><br><span class="line">[toc]</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-标题"><a href="#1-2-2-标题" class="headerlink" title="1.2.2 标题"></a>1.2.2 标题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-子标题"><a href="#1-2-3-子标题" class="headerlink" title="1.2.3 子标题"></a>1.2.3 子标题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无序子标题</span></span><br><span class="line">* 子标题<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有序子标题</span></span><br><span class="line"><span class="number">1.</span> 子标题<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源代码模式下上一级与下一级多敲三个空格即可</span></span><br><span class="line"><span class="comment">#Typora内使用Tab键即可</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-4-代码块"><a href="#1-2-4-代码块" class="headerlink" title="1.2.4 代码块"></a>1.2.4 代码块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&quot;\&quot; 是注释</span></span><br><span class="line">\```源码类型</span><br><span class="line">\```</span><br></pre></td></tr></table></figure>


<h4 id="1-2-5-制表"><a href="#1-2-5-制表" class="headerlink" title="1.2.5 制表"></a>1.2.5 制表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用管道符分割,Typora内可以使用如下</span></span><br><span class="line">|user|passwd|hostname|</span><br><span class="line"></span><br><span class="line"><span class="comment">#源码如下</span></span><br><span class="line">| user | passwd | hostname |</span><br><span class="line">| ---- | :------: | -------- |</span><br><span class="line">|root|<span class="number">123456</span>|test1|</span><br><span class="line"><span class="comment">#::这两个代表着表格内文字整体居中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-6-超链接"><a href="#1-2-6-超链接" class="headerlink" title="1.2.6 超链接"></a>1.2.6 超链接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文本超链接</span></span><br><span class="line">[文本](超链接) <span class="comment">#eg: [测试](www.baidu.com)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片超链接，插入图片</span></span><br><span class="line">![图片](超链接) <span class="comment">#此处超链接可以是本地图片地址或者图片的url</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-7-单选框"><a href="#1-2-7-单选框" class="headerlink" title="1.2.7 单选框"></a>1.2.7 单选框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- [ ] 单选框 <span class="comment">#创建完成后可点</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-8-字体"><a href="#1-2-8-字体" class="headerlink" title="1.2.8 字体"></a>1.2.8 字体</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*斜体*</span><br><span class="line">~~删除线~~</span><br><span class="line">~~***倾斜加粗删除线***~~</span><br></pre></td></tr></table></figure>

<h2 id="2、编程与编程语言"><a href="#2、编程与编程语言" class="headerlink" title="2、编程与编程语言"></a>2、编程与编程语言</h2><h3 id="2-1-语言"><a href="#2-1-语言" class="headerlink" title="2.1 语言"></a>2.1 语言</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中文、日文、韩文等等都是人类的语言，语言是为了人与人沟通的媒介</span><br></pre></td></tr></table></figure>



<h3 id="2-2-编程语言"><a href="#2-2-编程语言" class="headerlink" title="2.2 编程语言"></a>2.2 编程语言</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因此编程语言就是人与计算机之间沟通交流的媒介,为了让计算机代替人力无休止的干活</span><br></pre></td></tr></table></figure>



<h3 id="2-3-编程"><a href="#2-3-编程" class="headerlink" title="2.3 编程"></a>2.3 编程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">编程是程序员使用计算机能够读懂的语言<span class="string">&quot;将自己的思维逻辑和想法&quot;</span>写下来的过程</span><br></pre></td></tr></table></figure>



<h2 id="3、计算机基础"><a href="#3、计算机基础" class="headerlink" title="3、计算机基础"></a>3、计算机基础</h2><h3 id="3-1-计算机五大组成部分"><a href="#3-1-计算机五大组成部分" class="headerlink" title="3.1 计算机五大组成部分"></a>3.1 计算机五大组成部分</h3><h4 id="3-1-1-控制器"><a href="#3-1-1-控制器" class="headerlink" title="3.1.1 控制器"></a>3.1.1 控制器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">控制计算机各个硬件的工作</span><br><span class="line"><span class="comment">#相当于人的大脑</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-2-运算器"><a href="#3-1-2-运算器" class="headerlink" title="3.1.2 运算器"></a>3.1.2 运算器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">控制数学运算与逻辑运算</span><br><span class="line">  数学运算:数字相关的运算</span><br><span class="line">  逻辑运算:根据条件判断是否可行</span><br><span class="line"><span class="comment">#相当于人的大脑</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-3-存储设备"><a href="#3-1-3-存储设备" class="headerlink" title="3.1.3 存储设备"></a>3.1.3 存储设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内存:存取数据的速度很快，但是它是基于电工作的，断电后数据会立刻丢失，不能永久保存数据。<span class="comment">#eg:内存条,相当于人的短期记忆，</span></span><br><span class="line">  </span><br><span class="line">外存:存取数据的速度较慢，但是它断电之后数据也不受影响 可以永久保存数据。<span class="comment">#eg:磁带,磁盘,u盘,硬盘,相当于人的长期记忆</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-4-输入设备"><a href="#3-1-4-输入设备" class="headerlink" title="3.1.4 输入设备"></a>3.1.4 输入设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:将外界的数据传递给计算机</span><br><span class="line"><span class="comment">#eg:鼠标,键盘,麦克风</span></span><br><span class="line"><span class="comment">#相当于人的眼睛,嘴巴,耳朵</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-5-输出设备"><a href="#3-1-5-输出设备" class="headerlink" title="3.1.5 输出设备"></a>3.1.5 输出设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:将计算机内部的数据传递给外部</span><br><span class="line"><span class="comment">#eg:显示屏,音响,打印机</span></span><br><span class="line"><span class="comment">#相当于人的嘴巴...</span></span><br></pre></td></tr></table></figure>





<h3 id="3-2-计算机三大核心硬件"><a href="#3-2-计算机三大核心硬件" class="headerlink" title="3.2 计算机三大核心硬件"></a>3.2 计算机三大核心硬件</h3><h4 id="3-2-1-中央处理器"><a href="#3-2-1-中央处理器" class="headerlink" title="3.2.1 中央处理器"></a>3.2.1 中央处理器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CPU去内存中取程序的指令并运行，相当于控制器+运算器</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-内存"><a href="#3-2-2-内存" class="headerlink" title="3.2.2 内存"></a>3.2.2 内存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">程序要想运行必须先存在于内存中</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-硬盘"><a href="#3-2-3-硬盘" class="headerlink" title="3.2.3 硬盘"></a>3.2.3 硬盘</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">永久保存相应数据</span><br></pre></td></tr></table></figure>



<h3 id="3-3-操作系统"><a href="#3-3-操作系统" class="headerlink" title="3.3 操作系统"></a>3.3 操作系统</h3><h4 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1 概念"></a>3.3.1 概念</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:协调、管理、控制计算机各个硬件的工作</span><br><span class="line">计算机硬件--&gt;操作系统--&gt;应用程序</span><br><span class="line">我们日常生活中所使用的 程序员所编写的程序都必须基于操作系统之上</span><br></pre></td></tr></table></figure>



<h4 id="3-3-2-分类"><a href="#3-3-2-分类" class="headerlink" title="3.3.2 分类"></a>3.3.2 分类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PC端：</span><br><span class="line">windows</span><br><span class="line">linux</span><br><span class="line">macos</span><br><span class="line"></span><br><span class="line">移动端：</span><br><span class="line">安卓</span><br><span class="line">ios</span><br><span class="line">鸿蒙</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础-01</title>
    <url>/klcc-c.github.io/daf175dd.html</url>
    <content><![CDATA[<h2 id="1、Pycharm基本使用"><a href="#1、Pycharm基本使用" class="headerlink" title="1、Pycharm基本使用"></a>1、Pycharm基本使用</h2><h3 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h3><span id="more"></span>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Fg5CT2.png" alt="Fg5CT2"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/koHl29.png" alt="koHl29"></p>
<h3 id="1-2-主题设置"><a href="#1-2-主题设置" class="headerlink" title="1.2 主题设置"></a>1.2 主题设置</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Yr8VSa.png" alt="Yr8VSa"></p>
<h3 id="1-3-Pycharm切换解释器"><a href="#1-3-Pycharm切换解释器" class="headerlink" title="1.3 Pycharm切换解释器"></a>1.3 Pycharm切换解释器</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/xy5MbY.png" alt="xy5MbY"></p>
<h3 id="1-4-调整字体"><a href="#1-4-调整字体" class="headerlink" title="1.4 调整字体"></a>1.4 调整字体</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/kBm63I.png" alt="kBm63I"></p>
<h3 id="1-5-运行python脚本文件"><a href="#1-5-运行python脚本文件" class="headerlink" title="1.5 运行python脚本文件"></a>1.5 运行python脚本文件</h3><p>鼠标右键到项目目录之后可以创建文件夹与文件，在代码空白处右键选择如下的Run即可运行python脚本</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dI0FCk.png" alt="dI0FCk"></p>
<h2 id="2、Python的注释语法"><a href="#2、Python的注释语法" class="headerlink" title="2、Python的注释语法"></a>2、Python的注释语法</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;注释是代码之母&quot;&quot;&quot;</span></span><br><span class="line">注释：对代码的解释和说明，目的是为了让人们能够轻松的了解代码，注释不参与持续的运行</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用注释"><a href="#2-2-使用注释" class="headerlink" title="2.2 使用注释"></a>2.2 使用注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方式一:使用井号</span><br><span class="line">  <span class="comment"># 这是一行注释</span></span><br><span class="line">方式二:使用三引号(单引号和双引号)</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  这是多行注释</span></span><br><span class="line"><span class="string">  这是多行注释</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.3 Pycharm注释快捷键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Windows： ctrl + ?</span><br><span class="line">Mac:      command + ?</span><br><span class="line">选中多行代码之后执行快捷键就会被一起注释</span><br></pre></td></tr></table></figure>

<h2 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h2><h3 id="3-1-什么是变量"><a href="#3-1-什么是变量" class="headerlink" title="3.1 什么是变量"></a>3.1 什么是变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量即变化的量，用于记录事物的某种状态，是模仿人类事物记忆能力</span><br></pre></td></tr></table></figure>

<h3 id="3-2-使用变量"><a href="#3-2-使用变量" class="headerlink" title="3.2 使用变量"></a>3.2 使用变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">日常生活种:</span><br><span class="line">  姓名:xxx</span><br><span class="line">  年龄:<span class="number">28</span></span><br><span class="line">  爱好:学习</span><br><span class="line">程序中:</span><br><span class="line">  username = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  age      = <span class="number">18</span></span><br><span class="line">  hobby    = <span class="string">&#x27;music&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-语法格式"><a href="#3-3-语法格式" class="headerlink" title="3.3 语法格式"></a>3.3 语法格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">变量名  赋值号 变量值</span><br></pre></td></tr></table></figure>

<h3 id="3-4-变量三要素"><a href="#3-4-变量三要素" class="headerlink" title="3.4 变量三要素"></a>3.4 变量三要素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>变量的值 </span><br><span class="line"><span class="number">2.</span>变量的内存地址</span><br><span class="line"><span class="number">3.</span>变量的数据类型</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)         <span class="comment"># 变量值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(name))     <span class="comment"># 返回一串数字 相当于是内存地址编号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))   <span class="comment"># 返回数据类型  &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/I6iPWT.png" alt="I6iPWT"></p>
<h3 id="3-5-底层原理"><a href="#3-5-底层原理" class="headerlink" title="3.5 底层原理"></a>3.5 底层原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line">  age = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  遇到赋值号先看符号右边，再看到左边</span></span><br><span class="line"><span class="string">  1.在内存中申请到了一块内存空间来存储18这个数字</span></span><br><span class="line"><span class="string">  2.将18所在的内存空间地址指向绑定给变量名age</span></span><br><span class="line"><span class="string">  3.后续如果要访问18可以直接通过访问变量age</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/gyg2Ck.png" alt="gyg2Ck"></p>
<h3 id="3-6-Python底层优化"><a href="#3-6-Python底层优化" class="headerlink" title="3.6 Python底层优化"></a>3.6 Python底层优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当值数据量很小的时候 如果有多个变量名需要使用 那么会指向同一块地址</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一个变量名只能指向一个内存地址</span></span><br><span class="line"><span class="string">一个内存地址可以有多个变量名指向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、常量"><a href="#4、常量" class="headerlink" title="4、常量"></a>4、常量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">常量:主要记录一些不变的状态</span><br><span class="line">  </span><br><span class="line">在python中没有真正意义上的常量 我们墨守成规的将全大写的变量看成是常量</span><br><span class="line">	HOST = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment"># 一般情况下在配置文件中使用较多</span></span><br><span class="line">在其他编程语言中是存在真正意义上的常量 定义了就无法修改</span><br><span class="line"><span class="comment"># JavaScript代码</span></span><br><span class="line">	const pi = <span class="number">3.14</span>  <span class="comment"># 定义常量</span></span><br><span class="line">    pi = <span class="number">4</span>  <span class="comment"># 不支持修改</span></span><br><span class="line"><span class="comment"># golang常量声明</span></span><br><span class="line">const MAX = <span class="number">1024</span></span><br><span class="line">const (</span><br><span class="line">  a = iota</span><br><span class="line">  b = iota</span><br><span class="line">  c = iota</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="5、垃圾回收机制"><a href="#5、垃圾回收机制" class="headerlink" title="5、垃圾回收机制"></a>5、垃圾回收机制</h2><h3 id="5-1-垃圾数据的定义"><a href="#5-1-垃圾数据的定义" class="headerlink" title="5.1 垃圾数据的定义"></a>5.1 垃圾数据的定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在内存中没有任何变量名指向的数据</span><br></pre></td></tr></table></figure>

<h3 id="5-2-回收方案"><a href="#5-2-回收方案" class="headerlink" title="5.2 回收方案"></a>5.2 回收方案</h3><h4 id="5-2-1-引用记数"><a href="#5-2-1-引用记数" class="headerlink" title="5.2.1 引用记数"></a>5.2.1 引用记数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内存中变量值身上有几个变量名绑定引用计数就是几,只要不为<span class="number">0</span>就不是垃圾</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-标记清除"><a href="#5-2-2-标记清除" class="headerlink" title="5.2.2 标记清除"></a>5.2.2 标记清除</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当内存即将沾满的时候,python会自动暂停程序的执行,从头到尾将内存中数据进行扫描,并打上标记,之后一次性清除掉标记的数据</span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-分代回收"><a href="#5-2-3-分代回收" class="headerlink" title="5.2.3 分代回收"></a>5.2.3 分代回收</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">会将数据的监管分为三个层次,随着层级的下降监督的频率降低</span><br><span class="line">用时间换空间</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/CR2fkx.png" alt="CR2fkx"></p>
<h2 id="6、数据类型"><a href="#6、数据类型" class="headerlink" title="6、数据类型"></a>6、数据类型</h2><h3 id="6-1-什么是数据类型"><a href="#6-1-什么是数据类型" class="headerlink" title="6.1 什么是数据类型"></a>6.1 什么是数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">存储数据的方式和表现形式有很多种，例如文本文件，视频文件，音频文件......</span><br></pre></td></tr></table></figure>

<h3 id="6-2-int类型"><a href="#6-2-int类型" class="headerlink" title="6.2 int类型"></a>6.2 int类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int类型:整数类型,长度与其他语言对比无限</span></span><br><span class="line">作用:可以记录人的年龄，人数......</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">18</span>  <span class="comment"># 直接些整数就是整型</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-float类型"><a href="#6-3-float类型" class="headerlink" title="6.3 float类型"></a>6.3 float类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># float可以理解为小数</span></span><br><span class="line">作用:记录人的体重，薪资......</span><br><span class="line">eg:</span><br><span class="line">  salary = <span class="number">3.14</span>  <span class="comment"># 直接写小数就是浮点型</span></span><br></pre></td></tr></table></figure>

<h2 id="7、代码规范"><a href="#7、代码规范" class="headerlink" title="7、代码规范"></a>7、代码规范</h2><h3 id="7-1-注释规范"><a href="#7-1-注释规范" class="headerlink" title="7.1 注释规范"></a>7.1 注释规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.警号与注释文本之间一定要有一个空格</span></span><br><span class="line"><span class="string">2.如果单行注释跟在了一行代码的后面 需要先空两个再写</span></span><br><span class="line"><span class="string">pycharm也提供自动化格式代码的功能 </span></span><br><span class="line"><span class="string">code </span></span><br><span class="line"><span class="string">reformat code</span></span><br><span class="line"><span class="string">Windows快捷键：ctrl + alt + l</span></span><br><span class="line"><span class="string">Mac快捷键： option + command + L </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">python代码编写规范  &gt;&gt;&gt;: PEP8规范</span><br><span class="line"><span class="comment"># 如何快速掌握 借助于pycharm的自动化提示 前后对比 每天记忆</span></span><br></pre></td></tr></table></figure>



<h3 id="7-2-命名规范"><a href="#7-2-命名规范" class="headerlink" title="7.2 命名规范"></a>7.2 命名规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名规范</span></span><br><span class="line">	  <span class="number">1.</span>变量名只能由数字、字母、下划线任意组合</span><br><span class="line">    	user@name(不对)、_(可以)、pwd_123_aaa(可以)</span><br><span class="line">    <span class="number">2.</span>变量名不能以数字开头，下划线建议不要开头因为有特殊含义</span><br><span class="line">    <span class="number">3.</span>变量名不能与关键字冲突</span><br><span class="line">    <span class="number">4.</span>变量名的命名一定要做到见名知意(重要)</span><br><span class="line">    	<span class="string">&#x27;&#x27;&#x27;变量名见名知意是核心 无论变量多长&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 命名风格</span></span><br><span class="line">	<span class="number">1.</span>驼峰体  </span><br><span class="line">    	大驼峰  <span class="comment"># 所有单词首字母大写</span></span><br><span class="line">        	UserNameFromDb</span><br><span class="line">        小驼峰  <span class="comment"># 第一首字母小写其余首字母大写</span></span><br><span class="line">        	userNameFromDB</span><br><span class="line">        <span class="string">&quot;&quot;&quot;JavaScript推荐使用驼峰体&quot;&quot;&quot;</span></span><br><span class="line">    <span class="number">2.</span>下划线  <span class="comment"># 单词与单词之间下划线隔开</span></span><br><span class="line">    	user_name_from_db </span><br><span class="line">        <span class="string">&quot;&quot;&quot;python推荐使用下划线&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 好东西！！！输入中文即可给出对应英文命名</span></span><br><span class="line">https://unbug.github.io/codelf/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python解释器与Pycharm</title>
    <url>/klcc-c.github.io/c1fd5357.html</url>
    <content><![CDATA[<h1 id="1、Python解释器安装"><a href="#1、Python解释器安装" class="headerlink" title="1、Python解释器安装"></a>1、Python解释器安装</h1><h2 id="1-1-Python下载"><a href="#1-1-Python下载" class="headerlink" title="1.1 Python下载"></a>1.1 Python下载</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网，下载速度慢</span></span><br><span class="line">https://www.python.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#国内下载</span></span><br><span class="line">https://npm.taobao.org/mirrors/python</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<ol>
<li>找到下载位置并点击</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/NoHxoM.png" alt="NoHxoM"></p>
<ol start="2">
<li><p>选择对应的版本以及操作系统进行下载</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/enrDoA.png" alt="enrDoA"></p>
</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Se7Gmo.png" alt="Se7Gmo"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/J0BKed.png" alt="J0BKed"></p>
<h2 id="1-2-Python安装"><a href="#1-2-Python安装" class="headerlink" title="1.2 Python安装"></a>1.2 Python安装</h2><h3 id="1-2-1-Mac安装"><a href="#1-2-1-Mac安装" class="headerlink" title="1.2.1 Mac安装"></a>1.2.1 Mac安装</h3><p>根据提示下载的安装包如下：</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/LdenzD.png" alt="LdenzD"></p>
<p>双击打开之后直接继续即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Dl1wXm.png" alt="Dl1wXm"></p>
<h3 id="1-2-2-Windows安装"><a href="#1-2-2-Windows安装" class="headerlink" title="1.2.2 Windows安装"></a>1.2.2 Windows安装</h3><p>第一个红框选择自定义安装，可选择python安装路径。第二个红框是自动配置环境变量</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/tjeIhK.png" alt="tjeIhK"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/XhyZ3E.png" alt="XhyZ3E"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3YqU60.png" alt="d"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ja6EtC.png" alt="Ja6EtC"></p>
<p>环境变量设置</p>
<p>此时还无法直接使用python</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/A717xq.png" alt="A717xq"></p>
<p>此电脑右键，选择属性，选择高级系统设置，选择环境变量，选择Path，编辑，再变量最后使用英文状态下的 ; 进行结尾，将Python安装的路径复制出来，粘贴到最后然后选择确定。最后新打开命令提示符输入python即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dhoaNQ.png" alt="dhoaNQ"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/DGvRCE.png" alt="DGvRCE"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/KZmLEE.png" alt="KZmLEE"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/aOntw1.png" alt="aOntw1"></p>
<h3 id="1-2-3-多版本"><a href="#1-2-3-多版本" class="headerlink" title="1.2.3 多版本"></a>1.2.3 多版本</h3><ol>
<li><p>Mac系统下</p>
<p>可以使用pyenv进行多版本控制</p>
</li>
<li><p>Windows</p>
</li>
</ol>
<p>python2.7安装：</p>
<p>下载加速地址：<a href="https://npm.taobao.org/mirrors/python">https://npm.taobao.org/mirrors/python</a></p>
<p>下载完成后继续将Python2.7的路径放入到Path的最后，将对应版本的exe改名，最后在终端输入对应版本</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/cBrS1B.png" alt="cBrS1B">     </p>
<p>更对应版本的名称</p>
<p>此时就可以多版本试用</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ciyvlb.png" alt="Ciyvlb"></p>
<h1 id="2、Pycharm安装"><a href="#2、Pycharm安装" class="headerlink" title="2、Pycharm安装"></a>2、Pycharm安装</h1><ol>
<li>下载安装</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网</span></span><br><span class="line">https://www.jetbrains.com/pycharm/download/</span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/aJKd3J.png" alt="aJKd3J"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dag3R6.png" alt="dag3R6"></p>
<p>下载完成后下一步下一步安装即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/BJbgci.png" alt="BJbgci"></p>
<ol start="2">
<li><p>2021.3版本破解</p>
<p>无限期试用方法参考：<a href="https://www.macwk.com/article/jetbrains-crack">https://www.macwk.com/article/jetbrains-crack</a></p>
</li>
</ol>
<p>最新版本试用需要登录账号才可以</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3u8VVR.png" alt="3u8VVR"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ddVmoo.png" alt="ddVmoo"></p>
<p>破解：</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ZEJ0Od.png" alt="ZEJ0Od"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3kEn2a.png" alt="3kEn2a"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/kdhtq0.png" alt="kdhtq0"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/mKW9Nt.png" alt="mKW9Nt"></p>
<p>![image-20211101164144658](/Users/zhijinliu/Library/Application Support/typora-user-images/image-20211101164144658.png)</p>
<p>使用插件即可重置试用时间</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/p1l5h0.png" alt="p1l5h0"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础-02</title>
    <url>/klcc-c.github.io/43f82467.html</url>
    <content><![CDATA[<h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><h3 id="1-1-字符串str"><a href="#1-1-字符串str" class="headerlink" title="1.1 字符串str"></a>1.1 字符串str</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:主要记录描述性质的数据，例如姓名、地址、邮箱......</span><br><span class="line"></span><br><span class="line">定义:</span><br><span class="line">  方式<span class="number">1</span>:使用单引号,eg:</span><br><span class="line">      name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  方式<span class="number">2</span>:使用双引号,eg:</span><br><span class="line">      name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">  方式<span class="number">3</span>:使用三引号,eg:</span><br><span class="line">      name = <span class="string">&#x27;&#x27;&#x27;hello&#x27;&#x27;&#x27;</span></span><br><span class="line">  方式<span class="number">4</span>:使用三引号,eg:</span><br><span class="line">      name = <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line">      </span><br><span class="line">  类型查看:</span><br><span class="line">    str_a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br><span class="line">    结果:&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">      </span></span><br><span class="line"><span class="class">  三引号说明:</span></span><br><span class="line">    <span class="number">1.</span>两个三引号都支持换行</span><br><span class="line">    <span class="number">2.</span>定义字符的多种方式原因</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&#x27;鲁迅说：&#x27;</span>我没说过这句话<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 这语句就是错误的了</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;鲁迅说：&quot;我没说过这句话&quot;&#x27;</span>)  <span class="comment"># 这条语句就正确了</span></span><br><span class="line">    <span class="number">3.</span><span class="built_in">print</span>(<span class="string">&#x27;It\&#x27;s a dog&#x27;</span>)  <span class="comment"># 可以用\ 进行转义为本身含义</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-列表list"><a href="#1-2-列表list" class="headerlink" title="1.2 列表list"></a>1.2 列表list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:能够存储多个数据并且可以方便的取出任意个数</span><br><span class="line">特征:中括号括起来,内部可以存放多个元素,元素与元素之间用逗号隔开,元素可以是任意类型</span><br><span class="line">eg:</span><br><span class="line">  first_list = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">123</span>, <span class="number">12344</span>, [<span class="string">&quot;test&quot;</span>, <span class="number">555</span>, [<span class="string">&quot;two&quot;</span>, <span class="string">&quot;results&quot;</span>, <span class="number">777</span>]]]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(first_list))    <span class="comment"># 结果:&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">索引取值(从<span class="number">0</span>开始的连续数字)</span><br><span class="line">  <span class="built_in">print</span>(first_list[<span class="number">1</span>])  <span class="comment"># world</span></span><br><span class="line">  <span class="built_in">print</span>(first_list[<span class="number">3</span>])  <span class="comment"># 12344</span></span><br><span class="line">  </span><br><span class="line">取值练习:</span><br><span class="line">  取例中的results</span><br><span class="line">  方法一:逐一提取</span><br><span class="line">    l1 = first_list[<span class="number">4</span>]  <span class="comment"># [&#x27;test&#x27;, 555, [&#x27;two&#x27;, &#x27;results&#x27;, 777]]</span></span><br><span class="line">    l2 = l1[<span class="number">2</span>]  <span class="comment"># [&#x27;two&#x27;, &#x27;results&#x27;, 777]</span></span><br><span class="line">    l3 = l2[<span class="number">1</span>]  <span class="comment"># results</span></span><br><span class="line">    <span class="built_in">print</span>(l3)</span><br><span class="line">  方法二:熟悉之后一步到位</span><br><span class="line">    <span class="built_in">print</span>(first_list[<span class="number">4</span>][<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h3 id="1-3-字典dict"><a href="#1-3-字典dict" class="headerlink" title="1.3 字典dict"></a>1.3 字典dict</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:能够更加精准的存储数据</span><br><span class="line">定义:大括号括起来,内存可以存放多个元素,元素与元素之间逗号隔开,元素是K:V键值对的形式</span><br><span class="line">    K是对数据的描述,V是所存的数据</span><br><span class="line">eg:</span><br><span class="line">  first_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>: <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(first_dict))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">取值:</span><br><span class="line">  <span class="number">1.</span>字典无法索取值</span><br><span class="line">  <span class="number">2.</span>字典取值需要借助K,eg:</span><br><span class="line">    <span class="built_in">print</span>(first_dict[<span class="string">&#x27;username&#x27;</span>])  <span class="comment"># root</span></span><br><span class="line">    </span><br><span class="line">取值练习:</span><br><span class="line">info = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;addr&#x27;</span>: [<span class="string">&#x27;安徽&#x27;</span>, <span class="string">&#x27;芜湖&#x27;</span>, &#123;<span class="string">&#x27;国家&#x27;</span>: <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;编号&#x27;</span>: [<span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;中国最牛逼&#x27;</span>]&#125;]&#125;</span><br><span class="line">方式一:</span><br><span class="line">    d1 = info[<span class="string">&#x27;addr&#x27;</span>]  <span class="comment"># &#x27;安徽&#x27;, &#x27;芜湖&#x27;, &#123;&#x27;国家&#x27;: &#x27;中国&#x27;, &#x27;编号&#x27;: [11, 22, &#x27;中国最牛逼&#x27;]&#125;]</span></span><br><span class="line">  	d2 = d1[<span class="number">2</span>]  <span class="comment"># &#123;&#x27;国家&#x27;: &#x27;中国&#x27;, &#x27;编号&#x27;: [11, 22, &#x27;中国最牛逼&#x27;]&#125;</span></span><br><span class="line">    d3 = d2[<span class="string">&#x27;编号&#x27;</span>]  <span class="comment"># [11, 22, &#x27;中国最牛逼&#x27;]</span></span><br><span class="line">    d4 = d3[<span class="number">2</span>]  <span class="comment"># 中国最牛逼</span></span><br><span class="line">方式二:</span><br><span class="line">		<span class="built_in">print</span>(info[<span class="string">&#x27;addr&#x27;</span>][<span class="number">2</span>][<span class="string">&#x27;编号&#x27;</span>][<span class="number">2</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-4-布尔值-bool"><a href="#1-4-布尔值-bool" class="headerlink" title="1.4 布尔值 bool"></a>1.4 布尔值 bool</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:用于判断事物的对错</span><br><span class="line">定义:</span><br><span class="line">  <span class="literal">True</span>  <span class="comment"># 正确的</span></span><br><span class="line">  <span class="literal">False</span>  <span class="comment"># 错误的</span></span><br><span class="line">  <span class="comment">#ps: 首字母大写</span></span><br><span class="line">  </span><br><span class="line">布尔变量的命名一般采用<span class="keyword">is</span>开头,eg:</span><br><span class="line">  is_right = <span class="literal">True</span></span><br><span class="line">  is_delete = <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(is_right))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line">数据类型转换为布尔值的注意点:</span><br><span class="line">  <span class="number">0</span>, <span class="literal">None</span>, <span class="string">&#x27;&#x27;</span>, [], &#123;&#125;</span><br><span class="line">以上转换为布尔值的<span class="literal">False</span>,其他情况都是<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">其他:生活中数据存储的销户,很大概率并没有删除用户的数据,而是通过数据的唯一标识进行过滤掉,从而对外显示已删除</span><br></pre></td></tr></table></figure>

<h3 id="1-5-元组tuple"><a href="#1-5-元组tuple" class="headerlink" title="1.5 元组tuple"></a>1.5 元组tuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:与列表几乎一致,内部可以存放多个元素(可以看成是不可变的列表)</span><br><span class="line">定义:用小括号括起来,存放多个元素,元素与元素之间逗号隔开,元素不支持修改</span><br><span class="line">eg:</span><br><span class="line">  t = (<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>)  </span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(t))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-集合set"><a href="#1-6-集合set" class="headerlink" title="1.6 集合set"></a>1.6 集合set</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:去重和关系运算</span><br><span class="line">定义:用大括号括起来,内存可以存放多个元素,元素与元素之间逗号隔开,元素不是K:V键值对</span><br><span class="line">eg:</span><br><span class="line">  s = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line">定义空集合</span><br><span class="line">  s = <span class="built_in">set</span>()</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line">默认情况下使用&#123;&#125;是空字典</span><br><span class="line">  s = &#123;&#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、输入与输出"><a href="#2、输入与输出" class="headerlink" title="2、输入与输出"></a>2、输入与输出</h2><h3 id="2-1-输入"><a href="#2-1-输入" class="headerlink" title="2.1 输入"></a>2.1 输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入:程序接收用户输入的数据功能,使用内置函数<span class="built_in">input</span>()</span><br><span class="line">  <span class="built_in">input</span>()</span><br><span class="line">  	<span class="number">1.</span>接收到的任意输入的数据都会处理为字符串类型</span><br><span class="line">    <span class="number">2.</span>程序执行到<span class="built_in">input</span>时会等待输入数据才开始进行下一步操作</span><br><span class="line">eg: </span><br><span class="line">  username = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line">  age = <span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(username))		<span class="comment"># 查看username的数据类型</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(age))  <span class="comment"># 查看age的数据类型</span></span><br><span class="line">  <span class="built_in">print</span>(username, age)  <span class="comment"># 将输入的数据进行打印</span></span><br><span class="line">  </span><br><span class="line">res:</span><br><span class="line">  请输入你的名字:tom  <span class="comment"># 输入的tom</span></span><br><span class="line">  请输入你的年龄:<span class="number">18</span>   <span class="comment"># 输入的18</span></span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;  # 显示<span class="title">username</span>的数据类型为<span class="title">str</span></span></span><br><span class="line"><span class="class">  &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;  # 显示<span class="title">age</span>的数据类型也是<span class="title">str</span></span></span><br><span class="line"><span class="class">  <span class="title">tom</span> 18  # 输出结果与输入结果一致</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-输出"><a href="#2-2-输出" class="headerlink" title="2.2 输出"></a>2.2 输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出:程序输出内容给用户,内置函数<span class="built_in">print</span>()</span><br><span class="line">  <span class="built_in">print</span>()</span><br><span class="line">    <span class="number">1.</span>括号内可以使用逗号将多个元素一起打印</span><br><span class="line">    <span class="number">2.</span>自带end参数控制打印的排版</span><br><span class="line">    	eg:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>, end=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">      res:</span><br><span class="line">        test&amp;<span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-格式化输出"><a href="#2-3-格式化输出" class="headerlink" title="2.3 格式化输出"></a>2.3 格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式化输出:将字符串中某些内容替换掉再输出就是格式化输出</span><br><span class="line"><span class="number">1.</span>先使用占位符 %s</span><br><span class="line"><span class="number">2.</span>再使用%按照位置进行替换</span><br><span class="line">eg:</span><br><span class="line">  res = <span class="string">&#x27;亲爱的%s你好！你%s月的话费是%s，余额是%s&#x27;</span></span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;jason&#x27;</span>, <span class="number">11</span>, <span class="number">100</span>, <span class="number">999</span>))</span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;tony&#x27;</span>, <span class="number">11</span>, <span class="number">200</span>, -<span class="number">100</span>))</span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;kevin&#x27;</span>, <span class="number">11</span>, <span class="number">500</span>, -<span class="number">999</span>))</span><br><span class="line">res:</span><br><span class="line">  亲爱的jason你好！你<span class="number">11</span>月的话费是<span class="number">100</span>，余额是<span class="number">999</span></span><br><span class="line">	亲爱的tony你好！你<span class="number">11</span>月的话费是<span class="number">200</span>，余额是-<span class="number">100</span></span><br><span class="line">	亲爱的kevin你好！你<span class="number">11</span>月的话费是<span class="number">500</span>，余额是-<span class="number">999</span></span><br><span class="line">  </span><br><span class="line">%d占位符只能给数字占位</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%08d&#x27;</span> % <span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%08d&#x27;</span> % <span class="number">6666666666666</span>)</span><br><span class="line"></span><br><span class="line">res:</span><br><span class="line">  00000123</span><br><span class="line">  <span class="number">6666666666666</span></span><br><span class="line"><span class="comment"># 08导致输出结果会保留8位,不足的用0补齐,超过的直接显示源数据</span></span><br></pre></td></tr></table></figure>

<h2 id="3、基本运算符"><a href="#3、基本运算符" class="headerlink" title="3、基本运算符"></a>3、基本运算符</h2><h3 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h3><p>a = 10 , b = 20</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">两个对象相加</td>
<td>a + b 值为 30</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">得到负数或是一个数减去另一个数</td>
<td>a - b 值为 -10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 值为 200</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">x除以y</td>
<td>b / a 值为  2</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>
<td>9 // 2 值为 4</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模,返回除法的余数</td>
<td>b % a 输出结果 0</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">返回x的y次幂</td>
<td>2 ** 3 值为8</td>
</tr>
</tbody></table>
<h3 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2 比较运算符"></a>3.2 比较运算符</h3><table>
<thead>
<tr>
<th align="center">比较运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td>等于,两边相等为True,否则返回False</td>
</tr>
<tr>
<td align="center">!=</td>
<td>不等于,两边不相等为True,否则返回False</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td>大于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>小于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h3 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h3><h4 id="3-3-1-增量赋值"><a href="#3-3-1-增量赋值" class="headerlink" title="3.3.1 增量赋值"></a>3.3.1 增量赋值</h4><table>
<thead>
<tr>
<th>赋值运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单赋值运算</td>
<td>a = 10</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算</td>
<td>a +=1 相当于a = a+1</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算</td>
<td>a -= 1 相当于a = a-1</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算</td>
<td></td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算</td>
<td></td>
</tr>
<tr>
<td>//=</td>
<td>取整赋值运算</td>
<td></td>
</tr>
<tr>
<td>%=</td>
<td>取余赋值运算</td>
<td></td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算</td>
<td></td>
</tr>
</tbody></table>
<h4 id="3-3-2-链式赋值"><a href="#3-3-2-链式赋值" class="headerlink" title="3.3.2 链式赋值"></a>3.3.2 链式赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以把同一个值同时赋值个多个变量名</span><br><span class="line">eg:</span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  b = a</span><br><span class="line">  c = b</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 链式赋值可以一行解决</span></span><br><span class="line">  a = b = c = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-交叉赋值"><a href="#3-3-3-交叉赋值" class="headerlink" title="3.3.3 交叉赋值"></a>3.3.3 交叉赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg: </span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  b = <span class="number">22</span></span><br><span class="line">  </span><br><span class="line">  需要a和b交换</span><br><span class="line">  方式<span class="number">1</span>:</span><br><span class="line"> 		tmp = a  <span class="comment"># 引入第三变量暂存a的值</span></span><br><span class="line">		a = b  <span class="comment"># 变量a指向变量b,此时a的值为22</span></span><br><span class="line">		b = tmp  <span class="comment"># 变量b指向tmp,此时b的值就是10，完成互换吧</span></span><br><span class="line">		<span class="built_in">print</span>(a, b)    </span><br><span class="line">  方式<span class="number">2</span>:</span><br><span class="line">    a, b = <span class="number">22</span>, <span class="number">10</span>  <span class="comment"># 简单粗暴</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-解压赋值"><a href="#3-3-4-解压赋值" class="headerlink" title="3.3.4 解压赋值"></a>3.3.4 解压赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将列表中的多个值取出来依次赋值给多个变量名</span><br><span class="line">eg:</span><br><span class="line">  eg_list = [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">  a = eg_list[<span class="number">0</span>]</span><br><span class="line">  b = eg_list[<span class="number">1</span>]</span><br><span class="line">  c = eg_list[<span class="number">2</span>]</span><br><span class="line">  d = eg_list[<span class="number">3</span>]</span><br><span class="line">  <span class="built_in">print</span>(a, b, c, d,)  <span class="comment"># 输出为12 13 14 15</span></span><br><span class="line">  </span><br><span class="line">  解压赋值可以这样写:</span><br><span class="line">    a, b, c, d = eg_list</span><br><span class="line">    </span><br><span class="line">  解压赋值注意事项:</span><br><span class="line">    <span class="number">1.</span>等号左边的变量名格式化必须与右面包含的格式相同</span><br><span class="line">    <span class="number">2.</span>可以使用*_打破上述规则</span><br><span class="line">      eg:</span><br><span class="line">        a, *_, d = eg_list</span><br><span class="line">        <span class="built_in">print</span>(a, _, b)  <span class="comment"># 结果为 12 [13, 14] 15</span></span><br><span class="line">     说明:</span><br><span class="line">      * 可以接收多余的元素,组成列表赋值给后面的变量名</span><br><span class="line">      _ 作为单独变量名时,通常表达指向的值无用</span><br></pre></td></tr></table></figure>

<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在python逻辑运算符就三个</span><br><span class="line"><span class="keyword">and</span>	与:</span><br><span class="line">	用于连接多个条件并且多个条件必须都成立才可以</span><br><span class="line"><span class="keyword">or</span>	或:</span><br><span class="line">	用于连接多个条件并且多个条件只要有一个成立即可</span><br><span class="line"><span class="keyword">not</span> 非:</span><br><span class="line">	取反</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:三个连接符在混合使用的时候是有优先级的,但是我们在编写的时候应该人为的规定好优先级,()优先级最高</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-成员运算"><a href="#3-5-成员运算" class="headerlink" title="3.5 成员运算"></a>3.5 成员运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义:判断某个个体在不在某个群体内</span><br><span class="line">关键字: </span><br><span class="line">  <span class="keyword">in</span>  			(在)</span><br><span class="line">  <span class="keyword">not</span> <span class="keyword">in</span>    (不在)</span><br><span class="line">eg:</span><br><span class="line">   name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要查询的学生姓名&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name <span class="keyword">in</span> name_list)</span><br><span class="line">    <span class="built_in">print</span>(name <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br><span class="line">    <span class="comment"># 最终返回的是True或者False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#字典默认暴露给外界的只有K</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;jason&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;)  <span class="comment"># False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-身份运算"><a href="#3-6-身份运算" class="headerlink" title="3.6 身份运算"></a>3.6 身份运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义:判断两个数据 值和内存地址是否相等</span><br><span class="line">符号:</span><br><span class="line">  ==  (只判断值)</span><br><span class="line">  <span class="keyword">is</span>  (判断内存地址)</span><br><span class="line">eg:</span><br><span class="line">    s1 = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    s2 = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(s1 == s2)  <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(s1),<span class="built_in">id</span>(s2))  <span class="comment"># 查看相当于内存地址的数字</span></span><br><span class="line">    <span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)  <span class="comment"># False</span></span><br><span class="line">结论:</span><br><span class="line">  值相等内存地址不一定相等</span><br><span class="line">  内存地址相等值一定相等</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-流程控制</title>
    <url>/klcc-c.github.io/26ba1150.html</url>
    <content><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="1-定义及说明"><a href="#1-定义及说明" class="headerlink" title="1. 定义及说明"></a>1. 定义及说明</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">流程控制即控制事物的执行过程</span><br><span class="line">任何使用执行流程只有三种情况:</span><br><span class="line">  <span class="number">1.</span>顺序结构  <span class="comment"># 自上而下依次运行</span></span><br><span class="line">  <span class="number">2.</span>分支结构  <span class="comment"># 在运行过程中根据条件的不同可能会执行不同的流程</span></span><br><span class="line">  <span class="number">3.</span>循环结构  <span class="comment"># 在运行过程中有些代码需要反复执行</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>条件都会转成布尔值  从而决定子代码是否执行</span><br><span class="line"><span class="number">2.</span>在python中 使用缩进来表示代码的从属关系</span><br><span class="line"><span class="number">3.</span>并不是所有的代码都可以拥有子代码</span><br><span class="line"><span class="number">4.</span>同属于某个代码的多行子代码 必须要保持相同的缩进量</span><br><span class="line">	在python中推荐使用四个空格来缩进</span><br><span class="line">ps:小技巧 上一行代码的结尾如果是冒号 那么下一行代码必缩进</span><br></pre></td></tr></table></figure>

<h3 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.  顺序结构"></a>2.  顺序结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">从上到下依次执行</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/T8iFeL.png" alt="T8iFeL"></p>
<h3 id="3-分支结构"><a href="#3-分支结构" class="headerlink" title="3. 分支结构"></a>3. 分支结构</h3><h4 id="3-1-if基本使用"><a href="#3-1-if基本使用" class="headerlink" title="3.1 if基本使用"></a>3.1 if基本使用</h4><h5 id="3-1-1-if单分支"><a href="#3-1-1-if单分支" class="headerlink" title="3.1.1 if单分支"></a>3.1.1 if单分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立之后执行的子代码块</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;小姐姐好&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/sizMEI.png" alt="sizMEI"></p>
<h5 id="3-1-2-if-else使用"><a href="#3-1-2-if-else使用" class="headerlink" title="3.1.2 if-else使用"></a>3.1.2 if-else使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的子代码块</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># if与else连用情况下,两者子代码永远只会执行一个</span></span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小姐姐好&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;认错人了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/alOv1n.png" alt="alOv1n"></p>
<h5 id="3-1-3-if-elif-else使用"><a href="#3-1-3-if-elif-else使用" class="headerlink" title="3.1.3 if-elif-else使用"></a>3.1.3 if-elif-else使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>不成立 条件<span class="number">2</span>成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    条件<span class="number">1</span>和<span class="number">2</span>都不成立 条件<span class="number">3</span>成立之后执行的子代码块</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">   上述条件都不成立 执行的子代码块</span><br><span class="line">  <span class="comment"># elif 可以有多个,三者连用也只会执行其中一个子代码块</span></span><br><span class="line">eg:</span><br><span class="line">    score = <span class="number">79</span></span><br><span class="line">    <span class="keyword">if</span> score &gt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt; <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt; <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;一般&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score <span class="number">78</span>&gt; <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;及格&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;挂科重修&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/GYHxdd.png" alt="GYHxdd"></p>
<h4 id="3-2-if嵌套使用"><a href="#3-2-if嵌套使用" class="headerlink" title="3.2 if嵌套使用"></a>3.2 if嵌套使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>:</span><br><span class="line">	条件 <span class="number">1</span> 成立执行的代码</span><br><span class="line">	<span class="keyword">if</span> 条件 <span class="number">2</span>:</span><br><span class="line">		条件 <span class="number">2</span> 成立执行的代码</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">26</span></span><br><span class="line">  height = <span class="number">165</span></span><br><span class="line">  weight = <span class="number">99</span></span><br><span class="line">  is_beautiful = <span class="literal">True</span></span><br><span class="line">  is_success = <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span> <span class="keyword">and</span> height &gt; <span class="number">160</span> <span class="keyword">and</span> weight &lt; <span class="number">100</span> <span class="keyword">and</span> is_beautiful:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;小姐姐能否加个微信&#x27;</span>)</span><br><span class="line">      <span class="comment"># 判断小姐姐是否会给微信</span></span><br><span class="line">      <span class="keyword">if</span> is_success:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;吃饭 看电影 天黑了...&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;去你妹的 变态!&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;可惜了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/voz9xF.png" alt="voz9xF"></p>
<h4 id="3-3-小练习"><a href="#3-3-小练习" class="headerlink" title="3.3 小练习"></a>3.3 小练习</h4><p>1.编写一个用户登录功能 ,用户名是jaso, 密码是123,用户如果输入正确则打印来宾三位,否则登录失败</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义默认用户名和密码</span></span><br><span class="line">NAME = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">PASSWD = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户输入的用户名和密码传给username和passwd</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line">passwd = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断用户输入的用户名和密码是否和定义默认的用户名密码相同</span></span><br><span class="line"><span class="keyword">if</span> NAME == username <span class="keyword">and</span> PASSWD == passwd:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;来宾三位&quot;</span>)  <span class="comment"># 如果相同,则打印来宾三位</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)  <span class="comment"># 其中一个不同都会显示登录失败</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ma5Orf.png" alt="Ma5Orf"></p>
<p>2.根据用户名的不同打印不同的用户身份<br>jason管理员 tony安保人员 kevin财务 jack销售 其他普通员工</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将用户输入的用户名给变量username,然后判断</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&quot;jason&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;管理员&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;tony&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;安保人员&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;kevin&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;财务&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;jack&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;销售&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通员工&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/eqPxPs.png" alt="eqPxPs"></p>
<h3 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4. 循环结构"></a>4. 循环结构</h3><h4 id="4-1-while循环"><a href="#4-1-while循环" class="headerlink" title="4.1 while循环"></a>4.1 while循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立之后循环执行的子代码</span><br><span class="line">eg:</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">      username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">      password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">      <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">      <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line"> <span class="comment"># 含义:这段代码执行后,当用户输入用户名密码进行判断是否是jason和123,不管用户输入对错与否,都会一直执行下去,因为True一直成立,是个死循环</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/7bpWCy.png" alt="7bpWCy"></p>
<h4 id="4-2-while-break"><a href="#4-2-while-break" class="headerlink" title="4.2 while-break"></a>4.2 while-break</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>:结束本层循环</span><br><span class="line">eg:</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">     username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">     password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">     <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">     <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">         <span class="keyword">break</span>  <span class="comment"># 直接跳出本层循环</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="4-3-全局标志位"><a href="#4-3-全局标志位" class="headerlink" title="4.3 全局标志位"></a>4.3 全局标志位</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标志位的使用</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> flag:</span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的指令&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="comment"># 判断用户是否想退出</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在执行您的指令:%s&#x27;</span> % cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去你妹的 没钱滚蛋&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-练习"><a href="#5-练习" class="headerlink" title="5. 练习"></a>5. 练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">猜年龄的游戏</span><br><span class="line">	<span class="number">1.</span>要求<span class="number">1</span></span><br><span class="line">    	用户可以有三次猜错的机会 如果过程中猜对了直接退出</span><br><span class="line">  <span class="number">2.</span>要求<span class="number">2</span></span><br><span class="line">    	三次机会用完之后提示用户是否继续尝试 如果是则再给三次机会 如果否则直接结束</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据类型转换提示</span></span><br><span class="line">		age = <span class="built_in">input</span>(<span class="string">&#x27;age&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    real_age = <span class="number">18</span></span><br><span class="line">    <span class="comment"># 将字符串的数字转换成整型</span></span><br><span class="line">    age = <span class="built_in">int</span>(age)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求1:</span></span><br><span class="line">AGE = <span class="number">26</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你猜的年龄:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age == AGE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜对了,年龄是%s&quot;</span> % age)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求2:</span></span><br><span class="line">AGE = <span class="number">26</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你猜的年龄: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age == AGE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜对了,年龄是%s&quot;</span> % age)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            again = <span class="built_in">input</span>(<span class="string">&quot;已经答错三次,是否继续三次Y/N: &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> again == <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> again == <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入正确的字符&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;答错了请继续!&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>for循环及内置方法</title>
    <url>/klcc-c.github.io/5bfa71b5.html</url>
    <content><![CDATA[<h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><h4 id="1-1-continue"><a href="#1-1-continue" class="headerlink" title="1.1 continue"></a>1.1 continue</h4><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contiue可以让循环体代码直接回到条件判断处重新判断,相当于跳出本次循环</span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># 使用while循环打印0-10但是不打印4</span></span><br><span class="line">  num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> num &lt; <span class="number">11</span>:</span><br><span class="line">      <span class="keyword">if</span> num == <span class="number">4</span>:</span><br><span class="line">          num += <span class="number">1</span>  <span class="comment"># 跳出的时候将num加1到num为5,好继续下次的循环,否则会卡在4一直循环</span></span><br><span class="line">          <span class="keyword">continue</span>  <span class="comment"># 当num为4时跳出本次循环</span></span><br><span class="line">      <span class="built_in">print</span>(num)</span><br><span class="line">      num += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-else"><a href="#1-2-else" class="headerlink" title="1.2 else"></a>1.2 else</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当<span class="keyword">while</span>循环没有被人为中断(<span class="keyword">break</span>)的情况下才会走<span class="keyword">else</span></span><br><span class="line">eg:</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">print</span>(count)</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;被执行了&quot;</span>)  <span class="comment"># 结果:在打印了0-4之后,这段代码被执行了</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">print</span>(count)</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>  <span class="comment"># 遇到break之后跳出了循环</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;不被执行了&quot;</span>)  <span class="comment"># 这段就没有执行</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-死循环"><a href="#1-3-死循环" class="headerlink" title="1.3 死循环"></a>1.3 死循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一个靠自身控制无法终止的程序叫死循环,死循环会让CPU极度繁忙</span><br><span class="line">eg：</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">for</span>循环能做到的事情 <span class="keyword">while</span>循环都可以做到,但是<span class="keyword">for</span>循环语法更加简洁 并且在循环取值问题上更加方便</span><br><span class="line"><span class="number">2.</span><span class="keyword">for</span>循环一般用于遍历任意可迭代对象中的元素,可迭代对象包括字符串,列表,元组,集合和字典,字典默认只能取到K</span><br><span class="line"><span class="number">3.</span>变量名如果没有合适的名称,可以使用i,j,k,v,item</span><br><span class="line"><span class="number">4.</span>结构：</span><br><span class="line">  <span class="keyword">for</span> 变量 <span class="keyword">in</span> 迭代对象:</span><br><span class="line">      重复执行的代码</span><br><span class="line"> <span class="number">5.</span>eg:</span><br><span class="line">   name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line">   <span class="comment"># 循环打印列表中的每一个元素</span></span><br><span class="line">   <span class="comment"># while实现</span></span><br><span class="line">     count = <span class="number">0</span></span><br><span class="line">     <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">         <span class="built_in">print</span>(name_list[count])</span><br><span class="line">         count += <span class="number">1</span></span><br><span class="line">   <span class="comment"># for实现</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">         <span class="built_in">print</span>(i)</span><br><span class="line">   <span class="comment"># for循环打印字符串中每个字符</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">         <span class="built_in">print</span>(i)  <span class="comment"># 每个字母都会被打印,中间的空格也回被打印</span></span><br><span class="line">   <span class="comment"># for循环字典,默认只能取到K</span></span><br><span class="line">     d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">     <span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">         <span class="built_in">print</span>(k, d[k])  <span class="comment"># 结果:前面是K值,后面是V值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/uVzeKa.png" alt="uVzeKa"></p>
<h4 id="2-2-range"><a href="#2-2-range" class="headerlink" title="2.2 range"></a>2.2 range</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>第一种:一个参数,从零开始,顾头不顾尾</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印0-9</span></span><br><span class="line"><span class="number">2.</span>第二种:两个参数,自定义起始位置,顾头不顾尾</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印4-9</span></span><br><span class="line"><span class="number">3.</span>第三种:三个参数,第三个数字用来控制等差值</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印从2开始每隔10个数的值,2 12 22...92</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">扩展:</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250  第一页</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=25&amp;filter=  第二页 每页相差25</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=50&amp;filter=  第三页</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=75&amp;filter=  第四页</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">base_url = <span class="string">&#x27;https://movie.douban.com/top250?start=%s&amp;filter=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">  <span class="built_in">print</span>(base_url % i)  <span class="comment"># 打印出了豆瓣top250每页的url</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># range()在python2.x和python3.x返回值不同</span></span><br><span class="line">  在python2.x中<span class="built_in">range</span>()会生成一个列表,但有个xrange()也是迭代器</span><br><span class="line">  在python3.x中<span class="built_in">range</span>()是一个迭代器,相对于python2.x生成列表更加节省内存</span><br><span class="line"><span class="comment"># python2.x中的xrange()就是python3.x中的range()</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-break"><a href="#2-3-break" class="headerlink" title="2.3 break"></a>2.3 break</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结束本层循环</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 当i等于4的时候遇到了break,直接结束这层的for循环</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 结果是打印0-3</span></span><br></pre></td></tr></table></figure>



<h4 id="2-4-continue"><a href="#2-4-continue" class="headerlink" title="2.4 continue"></a>2.4 continue</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结束本次循环</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 当i等于4的时候,结束本次循环,不影响</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 打印0-3,5-9</span></span><br></pre></td></tr></table></figure>



<h4 id="2-5-else"><a href="#2-5-else" class="headerlink" title="2.5 else"></a>2.5 else</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在<span class="keyword">for</span>循环正常结束的情况下才会被执行</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rnage(<span class="number">10</span>)：</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这段被执行了&quot;</span>)  <span class="comment"># 在循环打印了0-9之后,会继续执行这段代码,打印 这段被执行了</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 在循环打印了0-3之后,就被跳出了本层循环</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这段代码没有被执行&quot;</span>)  <span class="comment">#这段代码就没有被执行</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h4 id="2-6-嵌套"><a href="#2-6-嵌套" class="headerlink" title="2.6 嵌套"></a>2.6 嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in range(3):</span></span><br><span class="line"><span class="comment">#     for j in range(5):</span></span><br><span class="line"><span class="comment">#         print(&quot;*&quot;, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#     print()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s*%s=%s&#x27;</span> % (i, j, i * j), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>



<h3 id="3-数据类型内置方法"><a href="#3-数据类型内置方法" class="headerlink" title="3. 数据类型内置方法"></a>3. 数据类型内置方法</h3><h4 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1 整型"></a>3.1 整型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>类型转换 <span class="built_in">int</span>()</span><br><span class="line"><span class="comment"># 只能转换成纯数字,且在转换的时候只识别整数,遇到其他类型的都会报错,如小数,带字母的等</span></span><br><span class="line">eg:</span><br><span class="line">  res = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res))  <span class="comment"># 输出结果是 str</span></span><br><span class="line">  <span class="built_in">int</span>(res)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res))  <span class="comment"># 输出结果是 int</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span>(<span class="number">123.123</span>)  <span class="comment"># 报错,不识别小数</span></span><br><span class="line">  <span class="built_in">int</span>(t123)  <span class="comment"># 报错，不识别除数字以外的</span></span><br><span class="line">  </span><br><span class="line"> <span class="number">2.</span>进制转换</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成二进制  0b1100100</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成八进制  0o144</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成十六进制  0x64</span></span><br><span class="line">  <span class="comment"># 0b开头为二进制数  0o开头为八进制数  0x开头为十六进制数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0b1100100&#x27;</span>, <span class="number">2</span>))  <span class="comment"># 使用int()将0b1100100以二进制的方式转换为十进制</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0o144&#x27;</span>, <span class="number">8</span>))  <span class="comment"># 使用int()将0o144以八进制的方式转换为十进制</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0x64&#x27;</span>, <span class="number">16</span>))  <span class="comment"># 使用int()将0x64以十六进制的方式转换为十进制</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-浮点型"><a href="#3-2-浮点型" class="headerlink" title="3.2 浮点型"></a>3.2 浮点型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类型转换 <span class="built_in">float</span>()</span><br><span class="line">可以转换成小数,在转换的时候可以识别整数和小数,遇到其他类型的都会报错</span><br><span class="line">eg:</span><br><span class="line">  res1 = <span class="string">&#x27;123.123&#x27;</span></span><br><span class="line">  res2 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res1))  <span class="comment"># 没被转换前类型是 str</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res2))  <span class="comment"># 没被转换前类型是 str</span></span><br><span class="line">  <span class="built_in">float</span>(res1)  <span class="comment"># 使用float()进行转换</span></span><br><span class="line">  <span class="built_in">float</span>(res2)  <span class="comment"># 使用float()进行转换</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res1))  <span class="comment"># 转换后res1类型是整型</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res2))  <span class="comment"># 转换后res2类型是整型</span></span><br><span class="line">  <span class="built_in">print</span>(res2)  <span class="comment"># res2的结果变成 123.0</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a>3.3 字符串</h4><h5 id="3-3-1-类型转换str"><a href="#3-3-1-类型转换str" class="headerlink" title="3.3.1 类型转换str()"></a>3.3.1 类型转换str()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">任何类型都可以转换成字符串类型 <span class="built_in">str</span>()</span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">str</span>(<span class="number">123.123</span>)</span><br><span class="line"><span class="built_in">str</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;paswd&#x27;</span>])</span><br><span class="line"><span class="built_in">str</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="number">123</span>&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="comment">#最终结果都会是str类型</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-2-索引取值"><a href="#3-3-2-索引取值" class="headerlink" title="3.3.2 索引取值"></a>3.3.2 索引取值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>])  <span class="comment"># 结果为e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还可以支持负数索引</span></span><br><span class="line"><span class="built_in">print</span>(res[-<span class="number">1</span>])  <span class="comment"># 结果为 ！ </span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-切片操作"><a href="#3-3-3-切片操作" class="headerlink" title="3.3.3 切片操作"></a>3.3.3 切片操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 结果为ell</span></span><br><span class="line"><span class="comment">#切片操作顾头不顾尾,左闭右开</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-4-步长操作"><a href="#3-3-4-步长操作" class="headerlink" title="3.3.4 步长操作"></a>3.3.4 步长操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>])  <span class="comment"># 结果为el ol</span></span><br><span class="line"><span class="comment">#先取到1到10的字符为在ello worl,同样顾头不顾尾</span></span><br><span class="line"><span class="comment">#再每隔两个取,结果就是el ol</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(res[-5:-1])  # orld  顾头不顾尾</span></span><br><span class="line"><span class="comment"># print(res[-5:-1:-1])  # 方向冲突</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-5-len"><a href="#3-3-5-len" class="headerlink" title="3.3.5 len()"></a>3.3.5 len()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">统计字符串内部字符的个数 <span class="built_in">len</span>()</span><br><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))  <span class="comment"># 结果为12</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-6-strip"><a href="#3-3-6-strip" class="headerlink" title="3.3.6 strip()"></a>3.3.6 strip()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">移除字符串首尾指定的字符,默认移除的是首位的空格 strip()</span><br><span class="line">eg1:</span><br><span class="line">  name = <span class="string">&#x27;  jason  &#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(name, <span class="built_in">len</span>(name))</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">len</span>(name.strip()))  <span class="comment"># 默认移除首尾的空格</span></span><br><span class="line">eg2:</span><br><span class="line">  name1 = <span class="string">&#x27;$$jason$$&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(name1.strip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除指定字符$ 结果为jason</span></span><br><span class="line">  <span class="built_in">print</span>(name1.lstrip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除左边的$$ 结果为jason$$  </span></span><br><span class="line">  <span class="built_in">print</span>(name1.rstrip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除右边的$$ 结果为$$jason</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在应用中,用户在输入的时候在首位手残输入了空格之后的解决办法</span></span><br><span class="line">  username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>).strip()  <span class="comment"># 用户在输入的时候前后输入了空格将不受影响</span></span><br><span class="line">  <span class="keyword">if</span> username == <span class="string">&#x27;root&#x27;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;用户名输入正确&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;用户名输入错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-7-split"><a href="#3-3-7-split" class="headerlink" title="3.3.7 split()"></a>3.3.7 split()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">按照指定的字符切割字符串,该方法返回的是一个列表 split()</span><br><span class="line">res = <span class="string">&#x27;root|123|test&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res.split(<span class="string">&#x27;|&#x27;</span>))  <span class="comment"># [&#x27;root&#x27;, &#x27;123&#x27;, &#x27;test&#x27;] 以|进行分割,返回列表</span></span><br><span class="line"><span class="built_in">print</span>(res.split(<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))  <span class="comment"># [&#x27;root&#x27;, &#x27;123|test&#x27;]  maxsplit用于控制切割的次数</span></span><br><span class="line"><span class="built_in">print</span>(res.rsplit(<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))  <span class="comment"># [&#x27;root|123&#x27;, &#x27;test&#x27;] 从右边开始分割</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-内置方法(二)</title>
    <url>/klcc-c.github.io/d645d15c.html</url>
    <content><![CDATA[<h2 id="1-字符串内置方法"><a href="#1-字符串内置方法" class="headerlink" title="1. 字符串内置方法"></a>1. 字符串内置方法</h2><h3 id="1-1-大小写转换"><a href="#1-1-大小写转换" class="headerlink" title="1.1 大小写转换"></a>1.1 大小写转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;jasOn123 JAsOn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>全转大写upper()</span><br><span class="line">  <span class="built_in">print</span>(res.upper())  <span class="comment"># JASON123 JASON</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>全转小写lower()</span><br><span class="line">  <span class="built_in">print</span>(res.lower())  <span class="comment"># jason123 jason</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>eg:</span><br><span class="line">  old_code = <span class="string">&#x27;jAson123&#x27;</span></span><br><span class="line">  code = <span class="built_in">input</span>(<span class="string">&quot;请输入验证码:%s&gt;&gt;&gt;:&quot;</span> % old_code).strip()</span><br><span class="line">  <span class="keyword">if</span> code.upper() == old_code.upper():  <span class="comment"># 这里也可以用lower()</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;验证码输入正确&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;验证码输入错误&quot;</span>)</span><br><span class="line"> <span class="comment"># 忽略大小写,全部转为大写或者小写</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-判断大小写"><a href="#1-2-判断大小写" class="headerlink" title="1.2 判断大小写"></a>1.2 判断大小写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res1 = <span class="string">&#x27;JASON&#x27;</span></span><br><span class="line">res2 = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>判断是否纯大写isupper()</span><br><span class="line">  <span class="built_in">print</span>(res1.isupper())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(res2.isupper())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>判断是否纯小写islower()</span><br><span class="line">  <span class="built_in">print</span>(res1.islower())  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(res2.islower())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-判断指定字符开头、结尾"><a href="#1-3-判断指定字符开头、结尾" class="headerlink" title="1.3 判断指定字符开头、结尾"></a>1.3 判断指定字符开头、结尾</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;jason 123 newapeman heiheihei oldgirl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>判断字符串是否以指定的字符开头startswith()</span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jon&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jas&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jason 123&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>判断字符串是否以指定的字符结尾endswith()</span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;oldboy&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;girl&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;hei oldgirl&#x27;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-格式化输出format"><a href="#1-4-格式化输出format" class="headerlink" title="1.4 格式化输出format"></a>1.4 格式化输出format</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>之前使用的是占位符 %s %d</span><br><span class="line"><span class="number">2.</span>字符串内置方法 <span class="built_in">format</span>()</span><br><span class="line"></span><br><span class="line">使用方式<span class="number">1</span>:相当于占位符</span><br><span class="line">  s1 = <span class="string">&#x27;my name is &#123;&#125; my age is &#123;&#125;&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s1.<span class="built_in">format</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>))  <span class="comment"># my name is jason my age is 18</span></span><br><span class="line"></span><br><span class="line">使用方式<span class="number">2</span>:大括号内写索引值可以打破顺序,并且可以反复使用相同位置的数据</span><br><span class="line">  s2 = <span class="string">&#x27;&#123;1&#125; my name is &#123;0&#125; my age is &#123;1&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>  <span class="comment"># 18 my name is jason my age is 18 18 jason</span></span><br><span class="line">  <span class="built_in">print</span>(s2.<span class="built_in">format</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line">使用方式<span class="number">3</span>:大括号内写变量名</span><br><span class="line">  s3 = <span class="string">&#x27; my name is &#123;name&#125; my age is  &#123;age&#125;&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s3.<span class="built_in">format</span>(name=<span class="string">&#x27;jason&#x27;</span>, age=<span class="number">18</span>))  <span class="comment"># my name is jason my age is  18</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-字符串的拼接"><a href="#1-5-字符串的拼接" class="headerlink" title="1.5 字符串的拼接"></a>1.5 字符串的拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用 +</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27;world&#x27;</span>)  <span class="comment"># hello world</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用join()</span><br><span class="line">  l = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(l[<span class="number">0</span>] + <span class="string">&#x27;|&#x27;</span> + l[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + l[<span class="number">2</span>])  <span class="comment"># jason|tony|kevin</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>.join(l))  <span class="comment"># jason|tony|kevin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 = [&#x27;jason&#x27;, 123, &#x27;tony&#x27;]</span></span><br><span class="line"><span class="comment"># print(&#x27;$&#x27;.join(l1))  # 报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;必须是字符串类型 (在python不同数据类型之间无法直接操作)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-替换字符串中指定的字符"><a href="#1-6-替换字符串中指定的字符" class="headerlink" title="1.6 替换字符串中指定的字符"></a>1.6 替换字符串中指定的字符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">replace()</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  s4 = <span class="string">&#x27;my name is tony tony tony my age is 18&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s4.replace(<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>))  <span class="comment"># my name is Bob Bob Bob my age is 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换指定字符的次数</span></span><br><span class="line">  s4 = <span class="string">&#x27;my name is tony tony tony my age is 18&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s4.replace(<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">1</span>))  <span class="comment"># my name is Bob tony tony my age is 18</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-判断是否纯数字"><a href="#1-7-判断是否纯数字" class="headerlink" title="1.7 判断是否纯数字"></a>1.7 判断是否纯数字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">isdigit()</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  s1 = <span class="string">&#x27;asd123&#x27;</span></span><br><span class="line">  s2 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s1.isdigit())  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s2.isdigit())  <span class="comment"># True</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 案例:判断用户输入的是否是纯数字</span></span><br><span class="line">  real_age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      age = <span class="built_in">input</span>(<span class="string">&quot;请输入猜测的年龄:&quot;</span>).strip()  <span class="comment"># 去除首尾的空格</span></span><br><span class="line">      <span class="keyword">if</span> age.isdigit():  <span class="comment"># 判断输入的是否是纯数字</span></span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">int</span>(age) == real_age:  <span class="comment"># 将输入的整数字符串转换为整型</span></span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line">              <span class="keyword">break</span>  <span class="comment"># 猜对了就退出循环</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;请输入正确的数字&quot;</span>)  <span class="comment"># 如果用户输入的不是纯数字提示并再次循环</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-字体格式相关"><a href="#1-8-字体格式相关" class="headerlink" title="1.8 字体格式相关"></a>1.8 字体格式相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;my namE iS Bob&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;but&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;tony123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>title()  <span class="comment"># 所有单词首字母大写</span></span><br><span class="line">  <span class="built_in">print</span>(str1.title())  <span class="comment"># My Name Is Bob</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>capitalize()  <span class="comment"># 第一个单词首字母大写</span></span><br><span class="line">  <span class="built_in">print</span>(str1.capitalize())  <span class="comment"># My name is bob</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>swapcase()  <span class="comment"># 大小写互换</span></span><br><span class="line">  <span class="built_in">print</span>(str1.swapcase())  <span class="comment"># MY NAMe Is bOB</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>find()  <span class="comment"># 查看指定字符对应的起始索引值,从左往右找到一个就结束</span></span><br><span class="line">  <span class="built_in">print</span>(str1.find(<span class="string">&#x27;n&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line">  <span class="built_in">print</span>(str1.find(<span class="string">&#x27;nam&#x27;</span>))  <span class="comment"># 3  返回的是第三个字母n的索引值</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>center()  <span class="comment"># 指定字符补齐指定个数,居中显示</span></span><br><span class="line">  <span class="built_in">print</span>(str2.center(<span class="number">15</span>, <span class="string">&#x27;$&#x27;</span>))  <span class="comment"># $$$$$$but$$$$$$</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>ljust()  <span class="comment"># 指定字符补齐指定个数,左对齐</span></span><br><span class="line">  <span class="built_in">print</span>(str2.ljust(<span class="number">15</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># but************</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>rjust()  <span class="comment"># 指定字符补齐指定个数,右对齐</span></span><br><span class="line">  <span class="built_in">print</span>(str2.rjust(<span class="number">15</span>, <span class="string">&#x27;%&#x27;</span>))  <span class="comment"># %%%%%%%%%%%%but</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>isalnum()  <span class="comment"># 字符串中即可以包含数字也可以包含字母,返回布尔值</span></span><br><span class="line">  <span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(str3.isalnum())  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>isalpha()  <span class="comment"># 字符串中只包含字母,返回布尔值</span></span><br><span class="line">  <span class="built_in">print</span>(str2.isalpha())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(str3.isalpha())  <span class="comment"># False	</span></span><br></pre></td></tr></table></figure>

<h2 id="2-列表内置方法"><a href="#2-列表内置方法" class="headerlink" title="2.列表内置方法"></a>2.列表内置方法</h2><h3 id="2-1-基本方法"><a href="#2-1-基本方法" class="headerlink" title="2.1 基本方法"></a>2.1 基本方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>列表内一般都会存储相同数据类型的数据</span><br><span class="line"><span class="number">2.</span><span class="built_in">list</span>()  转换为列表类型,可以将支持<span class="keyword">for</span>循环的数据类型转换成列表</span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># print(list(123))  # 报错</span></span><br><span class="line">  <span class="comment"># print(list(123.21))  # 报错</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;))  <span class="comment"># [&#x27;username&#x27;, &#x27;pwd&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>((<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)))  <span class="comment"># [11, 22, 33]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;))  <span class="comment"># [33, 11, 22]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-列表增改数据"><a href="#2-2-列表增改数据" class="headerlink" title="2.2 列表增改数据"></a>2.2 列表增改数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>改</span><br><span class="line">  name_list[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [666, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>增</span><br><span class="line">  方式<span class="number">1</span>: append()</span><br><span class="line">    <span class="comment"># 尾部追加</span></span><br><span class="line">    name_list.appernd(<span class="number">666</span>)</span><br><span class="line">    <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, 666]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尾部追加(将括号内的数据当成一个整体追加到列表末尾)</span></span><br><span class="line">    name_list.append([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]) </span><br><span class="line">	  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, [111, 222, 333]]</span></span><br><span class="line">    </span><br><span class="line">  方式<span class="number">2</span>: insert()</span><br><span class="line">    <span class="comment"># 可以在指定索引值插入元素</span></span><br><span class="line">    name_list.insert(<span class="number">3</span>, <span class="string">&#x27;vae&#x27;</span>)</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;vae&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 元素会被当成一个整体插入到指定索引位置</span></span><br><span class="line">    name_list.insert(<span class="number">2</span>, [<span class="number">11</span>, <span class="number">22</span>])</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, [11, 22], &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"> </span><br><span class="line"> 方式<span class="number">3</span>: extend()</span><br><span class="line">    <span class="comment"># 扩展元素</span></span><br><span class="line">    name_list.extend([<span class="number">11</span>, <span class="number">22</span>])</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, 11, 22]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 相当于for循环+append()</span></span><br><span class="line">    l1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">    l2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l2:</span><br><span class="line">    		l1.append(i)</span><br><span class="line">		<span class="built_in">print</span>(l1)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-列表删除数据"><a href="#2-3-列表删除数据" class="headerlink" title="2.3 列表删除数据"></a>2.3 列表删除数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"><span class="number">1.</span>通过<span class="keyword">del</span>删除</span><br><span class="line">  <span class="keyword">del</span> name_list[<span class="number">0</span>]  <span class="comment"># 直接删除索引为0的值</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>remove()</span><br><span class="line">  <span class="comment"># 移除括号内的元素值</span></span><br><span class="line">  name_list.remove(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(name_list.remove(<span class="string">&#x27;jack&#x27;</span>))  <span class="comment"># None</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>pop()</span><br><span class="line">  <span class="comment"># 弹出括号内的元素索引值,如果括号没有值,则默认弹出列表尾部的元素</span></span><br><span class="line">  <span class="built_in">print</span>(name_list.pop(<span class="number">0</span>))  <span class="comment"># jason</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br></pre></td></tr></table></figure>



<h2 id="可变类型与不可变类型"><a href="#可变类型与不可变类型" class="headerlink" title="可变类型与不可变类型"></a>可变类型与不可变类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可变类型: 列表</span><br><span class="line">    值改变,内存地址不变,修改的是原值</span><br><span class="line">不可变类型: 整型 浮点型 字符串</span><br><span class="line">    值改变,内存地址肯定变,产生了新值</span><br><span class="line">    </span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># 不可变类型</span></span><br><span class="line">  str1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(str1.title())  <span class="comment"># Hello World 结果操作之后的值,是一个新的值</span></span><br><span class="line">  <span class="built_in">print</span>(str1)  <span class="comment"># hello world 原值并没有改变</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 可变类型</span></span><br><span class="line">  name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">id</span>(name_list))  <span class="comment"># 现在的值为 140618704502856 (不固定值)</span></span><br><span class="line">	name_list[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [666, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">id</span>(name_list))  <span class="comment"># 修改之后值还是 140618704502856 </span></span><br></pre></td></tr></table></figure>

<h2 id="实现队列与堆栈"><a href="#实现队列与堆栈" class="headerlink" title="实现队列与堆栈"></a>实现队列与堆栈</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line">    <span class="built_in">print</span>(list1)  <span class="comment"># 一个个进,从0开始</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列 先进先出</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">del</span> list1[<span class="number">0</span>]  <span class="comment"># 一个个删除,相当于一个个出来,每次出来都从索引0开始,从0开始删除到9</span></span><br><span class="line">    <span class="built_in">print</span>(list1)  <span class="comment"># 根据循环打印出过程,可以直观看出先进先出</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆栈 先进后出</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.pop()  <span class="comment"># 从尾部开始删除,相当于最后进来的先删除</span></span><br><span class="line">    <span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-内置方法(三)</title>
    <url>/klcc-c.github.io/bb5f959.html</url>
    <content><![CDATA[<h3 id="1-列表其他方法"><a href="#1-列表其他方法" class="headerlink" title="1. 列表其他方法"></a>1. 列表其他方法</h3><h4 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">11</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"><span class="number">1.</span>sort()  <span class="comment"># 默认是升序</span></span><br><span class="line">  l1.sort()</span><br><span class="line">  <span class="built_in">print</span>(l1)  <span class="comment"># [11, 22, 33, 44, 55, 77, 88, 99]</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>sort(reverse=<span class="literal">True</span>)  <span class="comment"># 降序</span></span><br><span class="line">  l1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">  <span class="built_in">print</span>(l1)  <span class="comment"># [99, 88, 77, 55, 44, 33, 22, 11]</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>revers()  <span class="comment"># 顺序颠倒</span></span><br><span class="line">  l1.reverse()</span><br><span class="line">	<span class="built_in">print</span>(l1)  <span class="comment"># [55, 44, 88, 11, 99, 77, 22, 33]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-切片"><a href="#1-2-切片" class="headerlink" title="1.2 切片"></a>1.2 切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">11</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># [22, 77]</span></span><br><span class="line"><span class="built_in">print</span>(l1[:])  <span class="comment"># [33, 22, 77, 99, 11, 88, 44, 55]</span></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">3</span>:])  <span class="comment"># [99, 11, 88, 44, 55]</span></span><br><span class="line"><span class="built_in">print</span>(l1[:<span class="number">3</span>])  <span class="comment"># [33, 22, 77]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-比较"><a href="#1-3-比较" class="headerlink" title="1.3 比较"></a>1.3 比较</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">99</span>, <span class="number">22</span>]</span><br><span class="line">l2 = [<span class="number">88</span>, <span class="number">44</span>, <span class="number">33</span>]</span><br><span class="line"><span class="built_in">print</span>(l1 &gt; l2)  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 列表比较运算采用相同索引的元素进行比较,只要有一个比出了结果就直接得出结论</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s2)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 字符串比较也会根据索引位置内部转成ASCII对应的数字进行比较</span></span><br></pre></td></tr></table></figure>

<h3 id="2-字典内置方法"><a href="#2-字典内置方法" class="headerlink" title="2. 字典内置方法"></a>2. 字典内置方法</h3><h4 id="2-1-取值"><a href="#2-1-取值" class="headerlink" title="2.1 取值"></a>2.1 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>按K取值,K不存在会直接报错,不太推荐此方式</span><br><span class="line">  <span class="built_in">print</span>(dic[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">#	jason</span></span><br><span class="line">  <span class="built_in">print</span>(dic[<span class="string">&#x27;pwd&#x27;</span>])  <span class="comment"># 报错</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>get() 键值不存在返回<span class="literal">None</span>,不会报错</span><br><span class="line">	<span class="built_in">print</span>(dic.get(<span class="string">&#x27;xxx&#x27;</span>))  <span class="comment"># None  键不存在 不会报错返回None</span></span><br><span class="line">  <span class="built_in">print</span>(dic.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;哈哈哈&#x27;</span>))  <span class="comment"># 第二个参数 可以在k不存在的时候自定义返回信息</span></span><br><span class="line">  <span class="built_in">print</span>(dic.get(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;哈哈哈&#x27;</span>))  <span class="comment"># 第二个参数 可以在k不存在的时候自定义返回信息</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改值"><a href="#2-2-修改值" class="headerlink" title="2.2 修改值"></a>2.2 修改值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>键值存在则修改</span><br><span class="line">dic[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;jasonxx&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jasonxx&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>键不存在就新增键值对</span><br><span class="line">dic[<span class="string">&#x27;pwd&#x27;</span>] = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;, &#x27;read&#x27;], &#x27;pwd&#x27;: 123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>hobbies的 V 是一个列表,可以用append()为列表增加一个值</span><br><span class="line">dic[<span class="string">&#x27;hobbies&#x27;</span>].append(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;, &#x27;read&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-统计"><a href="#2-3-统计" class="headerlink" title="2.3 统计"></a>2.3 统计</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">统计字典内部键值对的个数</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dic))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-成员运算"><a href="#2-4-成员运算" class="headerlink" title="2.4 成员运算"></a>2.4 成员运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> dic)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;jason&#x27;</span> <span class="keyword">in</span> dic)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 默认只暴露K</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-删除元素"><a href="#2-5-删除元素" class="headerlink" title="2.5 删除元素"></a>2.5 删除元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>方式<span class="number">1</span> <span class="keyword">del</span> 根据K删除键值对</span><br><span class="line">	<span class="keyword">del</span> dic[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">	<span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>方式<span class="number">2</span> 弹出指定K的键值对pop()</span><br><span class="line">  <span class="built_in">print</span>(dic.pop(<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># 18</span></span><br><span class="line">  <span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>方式<span class="number">3</span> 直接弹出键值对,组织成元组的形式,第一个元素K,第二个元素是V</span><br><span class="line">  <span class="built_in">print</span>(dic.popitem())  <span class="comment"># (&#x27;hobbies&#x27;, [&#x27;play game&#x27;, &#x27;basketball&#x27;])</span></span><br><span class="line">  <span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-取值"><a href="#2-6-取值" class="headerlink" title="2.6 取值"></a>2.6 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>keys()</span><br><span class="line"><span class="built_in">print</span>(dic.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;hobbies&#x27;])  获取字典所有的键 看成列表即可</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>values()</span><br><span class="line"><span class="built_in">print</span>(dic.values())  <span class="comment"># dict_values([&#x27;jason&#x27;, 18, [&#x27;play game&#x27;, &#x27;basketball&#x27;]])  获取字典所有的值 看成列表即可</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>items()</span><br><span class="line"><span class="built_in">print</span>(dic.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;jason&#x27;), (&#x27;age&#x27;, 18), (&#x27;hobbies&#x27;, [&#x27;play game&#x27;, &#x27;basketball&#x27;])])</span></span><br><span class="line"><span class="comment"># 获取字典里面所有的键值对 组织成列表套元组的形式 元组内有两个元素 第一个是k第二个是v</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-更新字典"><a href="#2-7-更新字典" class="headerlink" title="2.7 更新字典"></a>2.7 更新字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update()  键存在则修改 不存在则创建</span><br><span class="line">dic.update(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jasonNB&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jasonNB&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;], &#x27;pwd&#x27;: 123&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-初始化字典"><a href="#2-8-初始化字典" class="headerlink" title="2.8 初始化字典"></a>2.8 初始化字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>], []))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;笔试题&#x27;&#x27;&#x27;</span></span><br><span class="line">res = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>], [])</span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">111</span>)</span><br><span class="line">res[<span class="string">&#x27;k2&#x27;</span>].append(<span class="number">222</span>)</span><br><span class="line">res[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">333</span>)</span><br><span class="line"><span class="comment"># V 是相同的一个列表,对该列表操作,V的值是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当对k1对应的V重新赋值后,就会被单独出来了</span></span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>] = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]</span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">444</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h4 id="2-9-setdefault"><a href="#2-9-setdefault" class="headerlink" title="2.9 setdefault()"></a>2.9 setdefault()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当键存在的情况下 不修改而是获取该键对应的值</span><br><span class="line"><span class="comment"># print(dic.setdefault(&#x27;name&#x27;, &#x27;jasonNB&#x27;))</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 当键不存在的情况下 新增一组键值对 并且该方法的结果是新增的值</span></span><br><span class="line"><span class="built_in">print</span>(dic.setdefault(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure>



<h3 id="3-元组内置方法"><a href="#3-元组内置方法" class="headerlink" title="3. 元组内置方法"></a>3. 元组内置方法</h3><h4 id="3-1-类型转换"><a href="#3-1-类型转换" class="headerlink" title="3.1 类型转换"></a>3.1 类型转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>能够支持<span class="keyword">for</span>循环的数据都可以转换成元组</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># (&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]))  <span class="comment"># (11, 22, 33)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="number">123</span>&#125;))  <span class="comment"># (&#x27;name&#x27;, &#x27;pwd&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>元组类型的定义</span><br><span class="line">t1 = (<span class="number">111</span>)  <span class="comment"># 整型</span></span><br><span class="line">t2 = (<span class="number">11.11</span>)  <span class="comment"># 浮点型</span></span><br><span class="line">t3 = (<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 字符串</span></span><br><span class="line">t1 = (<span class="number">11</span>, )  <span class="comment"># 第一个元素后一定需要加逗号才会被定义为元组,否则就不是元组类型</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-取值"><a href="#3-2-取值" class="headerlink" title="3.2 取值"></a>3.2 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>])  <span class="comment"># 222</span></span><br><span class="line"><span class="built_in">print</span>(t[-<span class="number">1</span>])  <span class="comment"># 555</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-切片"><a href="#3-3-切片" class="headerlink" title="3.3 切片"></a>3.3 切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># (222, 333)</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># (222, 444)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-统计元素个数"><a href="#3-4-统计元素个数" class="headerlink" title="3.4 统计元素个数"></a>3.4 统计元素个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-for循环取值"><a href="#3-5-for循环取值" class="headerlink" title="3.5 for循环取值"></a>3.5 for循环取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">		<span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-计数"><a href="#3-6-计数" class="headerlink" title="3.6 计数"></a>3.6 计数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count()</span><br><span class="line"><span class="built_in">print</span>(t.cont(<span class="number">111</span>))  <span class="comment"># 1  111只出现一次</span></span><br></pre></td></tr></table></figure>

<h3 id="4-集合操作"><a href="#4-集合操作" class="headerlink" title="4. 集合操作"></a>4. 集合操作</h3><h4 id="4-1-类型转换"><a href="#4-1-类型转换" class="headerlink" title="4.1 类型转换"></a>4.1 类型转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">能够支持<span class="keyword">for</span>循环的数据类型都可以转成集合(元素要是不可变类型)</span><br><span class="line">集合内元素是无序的</span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>



<h4 id="4-2-去重"><a href="#4-2-去重" class="headerlink" title="4.2 去重"></a>4.2 去重</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>去重练习<span class="number">1</span></span><br><span class="line">name_list = [<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">s2 = <span class="built_in">set</span>(name_list)</span><br><span class="line">l1 = <span class="built_in">list</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(l1)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>练习<span class="number">2</span></span><br><span class="line">  ll = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">77</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>]</span><br><span class="line">  <span class="comment"># 基本要求:去重即可</span></span><br><span class="line">  s3 = <span class="built_in">set</span>(ll)</span><br><span class="line">  ll1 = <span class="built_in">list</span>(s3)</span><br><span class="line">  <span class="built_in">print</span>(ll1)  <span class="comment"># [33, 66, 11, 44, 77, 22, 55]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 拔高要求:去重并保留原来的顺序</span></span><br><span class="line">    l2 = []  <span class="comment"># 定义一个新列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ll:  <span class="comment"># 循环取值列表ll</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> l2:  <span class="comment"># 判断取到的值是不是在新列表l2里,如果在说明重复,则不操作</span></span><br><span class="line">            l2.append(i)  <span class="comment"># 如果值不在新列表里就追加进去,达到去重且按顺序</span></span><br><span class="line">    <span class="built_in">print</span>(l2)  <span class="comment"># [33, 22, 11, 44, 55, 66, 77]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-关系运算"><a href="#4-3-关系运算" class="headerlink" title="4.3 关系运算"></a>4.3 关系运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">两个群体之间做差异比较</span><br><span class="line"></span><br><span class="line">friends1 = &#123;<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;kevin&quot;</span>, <span class="string">&quot;jason&quot;</span>, <span class="string">&quot;eg&quot;</span>&#125;  <span class="comment"># 用户1的好友们</span></span><br><span class="line">friends2 = &#123;<span class="string">&quot;Jy&quot;</span>, <span class="string">&quot;ricky&quot;</span>, <span class="string">&quot;jason&quot;</span>, <span class="string">&quot;eg&quot;</span>&#125;  <span class="comment"># 用户2的好友们</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-1-交集"><a href="#4-3-1-交集" class="headerlink" title="4.3.1 交集"></a>4.3.1 交集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 共同的好友</span></span><br><span class="line"><span class="built_in">print</span>(friends1 &amp; friends2)  <span class="comment">#&#123;&#x27;jason&#x27;, &#x27;eg&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-2-并集"><a href="#4-3-2-并集" class="headerlink" title="4.3.2 并集"></a>4.3.2 并集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个用户所有的好友</span></span><br><span class="line"><span class="built_in">print</span>(friends1 | friends2)  <span class="comment"># &#123;&#x27;kevin&#x27;, &#x27;ricky&#x27;, &#x27;jason&#x27;, &#x27;zero&#x27;, &#x27;Jy&#x27;, &#x27;eg&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-3-差集"><a href="#4-3-3-差集" class="headerlink" title="4.3.3 差集"></a>4.3.3 差集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求用户1独有的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends1 - friends2)  <span class="comment"># &#123;&#x27;zero&#x27;, &#x27;kevin&#x27;&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 求用户2独有的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends2 - friends1)  <span class="comment"># &#123;&#x27;ricky&#x27;, &#x27;Jy&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-4-对称差集"><a href="#4-3-4-对称差集" class="headerlink" title="4.3.4 对称差集"></a>4.3.4 对称差集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求用户1和用户2各自的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends1 ^ friends2)  <span class="comment"># &#123;&#x27;Jy&#x27;, &#x27;zero&#x27;, &#x27;kevin&#x27;, &#x27;ricky&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-5-父集与子集"><a href="#4-3-5-父集与子集" class="headerlink" title="4.3.5 父集与子集"></a>4.3.5 父集与子集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">11</span>, <span class="number">33</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s2)  <span class="comment"># 判断s1是否是s2的父集   True</span></span><br><span class="line"><span class="built_in">print</span>(s2 &lt; s1)  <span class="comment"># 判断s2是否是s1的子集   True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装</title>
    <url>/klcc-c.github.io/60b500c7.html</url>
    <content><![CDATA[<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><table>
<thead>
<tr>
<th>IP</th>
<th>Hostname</th>
<th>配置</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.0.11</td>
<td>master1</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>192.168.0.12</td>
<td>node1</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>192.168.0.13</td>
<td>node2</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.0.11 master1</span><br><span class="line">192.168.0.12 node1</span><br><span class="line">192.168.0.13 node2</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙及selinux"><a href="#关闭防火墙及selinux" class="headerlink" title="关闭防火墙及selinux"></a>关闭防火墙及selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i  s<span class="comment">#enforcing#disabled#g /etc/selinux/config</span></span><br></pre></td></tr></table></figure>

<h3 id="加载内核模块"><a href="#加载内核模块" class="headerlink" title="加载内核模块"></a>加载内核模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由于开启内核 ipv4 转发需要加载 br_netfilter 模块，所以加载下该模块：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="安装ipvs"><a href="#安装ipvs" class="headerlink" title="安装ipvs"></a>安装ipvs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ipset ipvsadm wget vim net-tools curl chrony  -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#同步服务器时间</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line">systemctl start chronyd</span><br><span class="line">chronyc sources</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap</span></span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#修改/etc/fstab文件，注释掉 SWAP 的自动挂载</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Containerd"><a href="#安装Containerd" class="headerlink" title="安装Containerd"></a>安装Containerd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#国内会被限制下载</span></span><br><span class="line"><span class="comment">#wget https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有限制，也可以替换成下面的 URL 加速下载</span></span><br><span class="line">wget https://download.fastgit.org/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接将压缩包解压到系统的各个目录中</span></span><br><span class="line">tar -C / -xzf cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后要将 /usr/local/bin 和 /usr/local/sbin 追加到 ~/.bashrc 文件的 PATH 环境变量中：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/bin:/usr/local/sbin&#x27;</span> &gt;&gt; /root/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令生成一个默认的配置</span></span><br><span class="line">mkdir -p /etc/containerd</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改一:</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">    SystemdCgroup = <span class="literal">true</span></span><br><span class="line"><span class="comment">#修改二:配置加速器</span></span><br><span class="line"> [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># sandbox_image = &quot;k8s.gcr.io/pause:3.5&quot;</span></span><br><span class="line">  sandbox_image = <span class="string">&quot;registry.aliyuncs.com/k8sxio/pause:3.5&quot;</span></span><br><span class="line">  ...</span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">        endpoint = [<span class="string">&quot;https://bqr1dr1n.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">        endpoint = [<span class="string">&quot;https://registry.aliyuncs.com/k8sxio&quot;</span>]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd --now</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本情况</span></span><br><span class="line">ctr version</span><br><span class="line">crictl version</span><br></pre></td></tr></table></figure>


<h3 id="下载kubeadm、kubelet"><a href="#下载kubeadm、kubelet" class="headerlink" title="下载kubeadm、kubelet"></a>下载kubeadm、kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line"><span class="comment"># --disableexcludes 禁掉除了kubernetes之外的别的仓库</span></span><br><span class="line">yum makecache fast -y</span><br><span class="line">yum install -y kubelet-1.22.2 kubeadm-1.22.2 kubectl-1.22.2 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">kubeadm version</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>

<h3 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --component-configs KubeletConfiguration &gt; kubeadm.yaml</span><br></pre></td></tr></table></figure>
<p>kubeadm.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>  <span class="comment"># 指定master节点内网IP</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/run/containerd/containerd.sock</span>  <span class="comment"># 使用 containerd的Unix socket 地址</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">taints:</span>  <span class="comment"># 给master添加污点，master节点不能调度应用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;node-role.kubernetes.io/master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span>  <span class="comment"># kube-proxy 模式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span> &#123;&#125;</span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/k8sxio</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="number">1.22</span><span class="number">.2</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span>  <span class="comment"># 指定 pod 子网</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">anonymous:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">x509:</span></span><br><span class="line">    <span class="attr">clientCAFile:</span> <span class="string">/etc/kubernetes/pki/ca.crt</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">Webhook</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheAuthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">cacheUnauthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">clusterDNS:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line"><span class="attr">clusterDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">cpuManagerReconcilePeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">evictionPressureTransitionPeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">fileCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">healthzPort:</span> <span class="number">10248</span></span><br><span class="line"><span class="attr">httpCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">imageMinimumGCAge:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span>  <span class="comment"># 配置 cgroup driver</span></span><br><span class="line"><span class="attr">logging:</span> &#123;&#125;</span><br><span class="line"><span class="attr">memorySwap:</span> &#123;&#125;</span><br><span class="line"><span class="attr">nodeStatusReportFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">nodeStatusUpdateFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">rotateCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runtimeRequestTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">shutdownGracePeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">shutdownGracePeriodCriticalPods:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">staticPodPath:</span> <span class="string">/etc/kubernetes/manifests</span></span><br><span class="line"><span class="attr">streamingConnectionIdleTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">syncFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">volumeStatsAggPeriod:</span> <span class="string">0s</span></span><br></pre></td></tr></table></figure>

<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只下载镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面coredns镜像有问题需要单独拉</span></span><br><span class="line">ctr -n k8s.io i pull docker.io/coredns/coredns:1.8.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉下来后进行改名</span></span><br><span class="line">ctr -n k8s.io i tag docker.io/coredns/coredns:1.8.4 registry.aliyuncs.com/k8sxio/coredns:v1.8.4</span><br></pre></td></tr></table></figure>

<h3 id="初始化集群-1"><a href="#初始化集群-1" class="headerlink" title="初始化集群"></a>初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --config kubeadm.yaml</span><br><span class="line"></span><br><span class="line"> mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"> sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"> sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#在初始化完成后会出现其他节点加入进来的命令</span></span><br><span class="line"> kubeadm join 192.168.31.31:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:ca0c87226c69309d7779096c15b6a41e14b077baf4650bfdb6f9d3178d4da645</span><br></pre></td></tr></table></figure>

<h3 id="查看是否初始化成功"><a href="#查看是否初始化成功" class="headerlink" title="查看是否初始化成功"></a>查看是否初始化成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h3 id="安装flannel"><a href="#安装flannel" class="headerlink" title="安装flannel"></a>安装flannel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 如果有节点是多网卡，则需要在资源清单文件中指定内网网卡</span></span><br><span class="line"><span class="comment"># 搜索到名为 kube-flannel-ds 的 DaemonSet，在kube-flannel容器下面</span></span><br><span class="line">vim kube-flannel.yml</span><br><span class="line">......</span><br><span class="line">containers:</span><br><span class="line">- name: kube-flannel</span><br><span class="line">  image: quay.io/coreos/flannel:v0.15.0</span><br><span class="line">  <span class="built_in">command</span>:</span><br><span class="line">  - /opt/bin/flanneld</span><br><span class="line">  args:</span><br><span class="line">  - --ip-masq</span><br><span class="line">  - --kube-subnet-mgr</span><br><span class="line">  - --iface=eth0  <span class="comment"># 如果是多网卡的话，指定内网网卡的名称</span></span><br><span class="line">......</span><br><span class="line">kubectl apply -f kube-flannel.yml  <span class="comment"># 安装 flannel 网络插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看flannel情况</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>

<h3 id="Dashboard安装"><a href="#Dashboard安装" class="headerlink" title="Dashboard安装"></a>Dashboard安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用下面这种方式</span></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br><span class="line">➜  ~ vi recommended.yaml</span><br><span class="line"><span class="comment"># 修改Service为NodePort类型</span></span><br><span class="line">......</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  <span class="built_in">type</span>: NodePort  <span class="comment"># 加上type=NodePort变成NodePort类型的服务</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kubernetes-dashboard -o wide</span><br></pre></td></tr></table></figure>

<h3 id="更换cni网络"><a href="#更换cni网络" class="headerlink" title="更换cni网络"></a>更换cni网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个节点都需要操作</span></span><br><span class="line">mv /etc/cni/net.d/10-containerd-net.conflist /etc/cni/net.d/10-containerd-net.conflist.bak</span><br><span class="line"></span><br><span class="line">ifconfig cni0 down &amp;&amp; ip link delete cni0</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart containerd kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除coredns达到重启目的</span></span><br><span class="line">kubectl  -n kube-system delete pod coredns-7568f67dbd-9wcv4</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启dashboard</span></span><br><span class="line">kubectl delete -f recommended.yaml</span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>

<h3 id="进入Dashboard"><a href="#进入Dashboard" class="headerlink" title="进入Dashboard"></a>进入Dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看dashboard的端口</span></span><br><span class="line">kubectl get svc -n kubernetes-dashboard</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建权限</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>创建并生成token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f admin.yaml</span><br><span class="line"></span><br><span class="line">kubectl get secret -n kubernetes-dashboard|grep admin-token</span><br><span class="line"><span class="comment">#得到一个以 admin-token-xxx 的一个</span></span><br><span class="line"></span><br><span class="line">kubectl get secret &#123;admin-token-xxx&#125; -o jsonpath=&#123;.data.token&#125; -n kubernetes-dashboard |base64 -d</span><br><span class="line"><span class="comment"># 会生成一串很长的base64后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#谷歌浏览器访问的时候会打不开</span></span><br><span class="line"><span class="comment">#解决方法一: 更换火狐浏览器</span></span><br><span class="line"><span class="comment">#解决方法二: 谷歌浏览器非安全页面,空白处输入thisisunsafe即可</span></span><br></pre></td></tr></table></figure>

<h3 id="kubectl命令补全"><a href="#kubectl命令补全" class="headerlink" title="kubectl命令补全"></a>kubectl命令补全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bash-completion*</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Kuberneters</category>
      </categories>
      <tags>
        <tag>Kuberneters</tag>
        <tag>kubeadm</tag>
      </tags>
  </entry>
  <entry>
    <title>python-编码和文件操作</title>
    <url>/klcc-c.github.io/b8f382b7.html</url>
    <content><![CDATA[<h3 id="1-字符编码"><a href="#1-字符编码" class="headerlink" title="1. 字符编码"></a>1. 字符编码</h3><p>只跟文本和字符串有关<br>由于计算机内部只是别二进制,但是用户在使用计算机的时候却可以看到各种语言字符,字符编码就是内部记录了人类字符与数字对应关系的数据</p>
<span id="more"></span>
<h4 id="1-1-字符编码史"><a href="#1-1-字符编码史" class="headerlink" title="1.1 字符编码史"></a>1.1 字符编码史</h4><ol>
<li>一家独大<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">计算机由美国发明,因此美国人为了能让计算机识别英文字符诞生了ASCII码表</span><br><span class="line">特点:</span><br><span class="line">  只有英文字符与数字的一一对应关系</span><br><span class="line">  一个英文字符对应1Bytes,1Bytes=8bit,8bit最多包含<span class="number">256</span>个数字,可以对应<span class="number">256</span>个字符,足够表示所有的英文字符,目前只用到<span class="number">127</span>个,剩下的为了后续发现新的语言</span><br><span class="line">需要记住的是:</span><br><span class="line">  A-Z: <span class="number">65</span>-<span class="number">90</span></span><br><span class="line">  a-z: <span class="number">97</span>-<span class="number">122</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/L7G4SM.jpg" alt="L7G4SM"></p>
<ol start="2">
<li>群雄割据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中国:</span><br><span class="line">  GBK码:记录了英文中文与数字的对应关系</span><br><span class="line">        对于英文还是使用一个字节</span><br><span class="line">        中文使用了两个字节甚至更多字节,两个字节也不能够全部表示出所有的中文,需要生僻字需要更多位</span><br><span class="line">        </span><br><span class="line">日本:</span><br><span class="line">  shift_JIS码:记录了日文英文与数字的对应关系</span><br><span class="line">韩国</span><br><span class="line">  Euc_kr码:记录了韩文英文与数字的对应关系</span><br></pre></td></tr></table></figure></li>
<li>分久必合</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为了能够实现不同国家之间的文本数据能够彼此无障碍交流需要对编码统一</span><br><span class="line">unicode(万国码)出现了</span><br><span class="line">  特点:统一使用两个及以上字符记录字符与数字的对应关系</span><br><span class="line">    </span><br><span class="line">utf8(万国码的优化版)</span><br><span class="line">  英文还是用一个字节存储,中文使用三个字节或更多字节存储</span><br><span class="line"> </span><br><span class="line">现在默认使用的编码是uft8</span><br></pre></td></tr></table></figure>

<h4 id="1-2-编码操作"><a href="#1-2-编码操作" class="headerlink" title="1.2 编码操作"></a>1.2 编码操作</h4><ol>
<li>如何解决文件乱码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件当初以什么编码编的,打开的时候就以什么编码解</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>python解释器不同版本的编码差异</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2.x内部使用的编码默认是ASCII</span><br><span class="line">  <span class="number">1.</span>文件头</span><br><span class="line">  <span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span>在python2中定义字符串前面需要加一个u</span><br><span class="line">    s = <span class="string">u&#x27;你&#x27;</span></span><br><span class="line">  </span><br><span class="line">python3.x内部使用utf8</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Pycharm定义文件模板内容</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/uJTsDP.png" alt="uJTsDP"></p>
<ol start="4">
<li>编码与解码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">编码</span><br><span class="line">  将人类能够读懂的字符按照指定的编码转换成数字</span><br><span class="line">解码</span><br><span class="line">  将数字按照指定的编码转换成人类能够读懂的字符</span><br><span class="line">  </span><br><span class="line">eg:</span><br><span class="line"> <span class="comment"># 编码</span></span><br><span class="line">   s = <span class="string">&#x27;这是一段文字&#x27;</span></span><br><span class="line">   res = s.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(res, <span class="built_in">type</span>(res))  <span class="comment"># b&#x27;\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe6\xae\xb5\xe6\x96\x87\xe5\xad\x97&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 解码</span></span><br><span class="line">  res1 = res.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res1)  <span class="comment"># 这是一段文字</span></span><br></pre></td></tr></table></figure>

<h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2. 文件"></a>2. 文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件其实是操作系统暴露给用户操作硬盘的接口</span><br></pre></td></tr></table></figure>

<h4 id="2-1-文件操作"><a href="#2-1-文件操作" class="headerlink" title="2.1 文件操作"></a>2.1 文件操作</h4><h5 id="2-1-1-如何操作文件"><a href="#2-1-1-如何操作文件" class="headerlink" title="2.1.1 如何操作文件"></a>2.1.1 如何操作文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关键字<span class="built_in">open</span>()</span><br><span class="line">    <span class="number">1.</span><span class="built_in">open</span>()打开文件</span><br><span class="line">    <span class="number">2.</span>其他方法操作文件</span><br><span class="line">    <span class="number">3.</span>关闭文件</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-路径斜杠"><a href="#2-1-2-路径斜杠" class="headerlink" title="2.1.2 路径斜杠"></a>2.1.2 路径斜杠</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在路径中出现字母与斜杠的组合产生了特殊含义如何取消</span><br><span class="line">在路径字符串前面加一个r</span><br><span class="line">  <span class="string">r&#x27;D:\py20\day08\a.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-操作文件"><a href="#2-1-3-操作文件" class="headerlink" title="2.1.3 操作文件"></a>2.1.3 操作文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="built_in">open</span>(文件路径,读写模式,字符编码)</span><br><span class="line">       文件路径与读写模式是必须的</span><br><span class="line">       字符编码是可选的(有些模式需要编码)</span><br><span class="line">      </span><br><span class="line">  eg:</span><br><span class="line">    res = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.read())</span><br><span class="line">    res.close()</span><br></pre></td></tr></table></figure>

<h5 id="2-1-4-with上下文管理"><a href="#2-1-4-with上下文管理" class="headerlink" title="2.1.4 with上下文管理"></a>2.1.4 with上下文管理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以自动close()</span><br><span class="line">eg:</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">       <span class="built_in">print</span>(f1.read())</span><br></pre></td></tr></table></figure>

<h4 id="2-2-读写模式"><a href="#2-2-读写模式" class="headerlink" title="2.2 读写模式"></a>2.2 读写模式</h4><h5 id="2-2-1-只读模式-r"><a href="#2-2-1-只读模式-r" class="headerlink" title="2.2.1 只读模式 r"></a>2.2.1 只读模式 r</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">只能查看不能修改</span><br><span class="line"><span class="comment"># 当路径不存在时,直接报错</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 运行代码报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当路劲存在时,读取没有问题,写操作时报错</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(f1.read())  <span class="comment"># 能读取文件内容</span></span><br><span class="line">    f1.write(<span class="string">&#x27;123&#x27;</span>)  <span class="comment"># 报错,无法写入</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-2-只写模式-w"><a href="#2-2-2-只写模式-w" class="headerlink" title="2.2.2 只写模式 w"></a>2.2.2 只写模式 w</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当路劲不存在时,不会报错,会创建该文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路劲存在时,写入会先清空文件内容,再写入内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(f1.read())  <span class="comment"># 读取会报错</span></span><br><span class="line">    f1.write(<span class="string">&#x27;123&#x27;</span>)  <span class="comment"># 写入的都会在一行,不会自动换行</span></span><br><span class="line">    f1.write(<span class="string">&#x27;\n123\n&#x27;</span>)  <span class="comment"># 需要加入换行符</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-只追加模式-a"><a href="#2-2-3-只追加模式-a" class="headerlink" title="2.2.3 只追加模式 a"></a>2.2.3 只追加模式 a</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当路劲不存在时,不会报错,同样会创建该文件</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f3:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 当路劲存在时,写入不会清空文件</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">      f1.write(<span class="string">&#x27;\nwoooooo&#x27;</span>)  <span class="comment"># 需要加入换行符,否则都会在一行</span></span><br><span class="line">      f1.write(<span class="string">&#x27;\nwoooooo&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(f1.read())  <span class="comment"># 读取会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="3-debug代码调试"><a href="#3-debug代码调试" class="headerlink" title="3. debug代码调试"></a>3. debug代码调试</h3><ol>
<li>在代码右侧使用右键标记，空白处右键出现在Run下面有Debug运行</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/JSfh9B.png" alt="JSfh9B"></p>
<ol start="2">
<li>debug运行的时候会一步步执行,并给出每一步的结果</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/AMmZCZ.png" alt="AMmZCZ"></p>
<ol start="3">
<li>停止debug</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/BrFJ9l.png" alt="BrFJ9l"></p>
<p>取消小点</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/xfnoQa.png" alt="xfnoQa"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
