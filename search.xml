<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python从入门到放弃</title>
    <url>/c1ca5201.html</url>
    <content><![CDATA[<h4 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h4><span id="more"></span>
<p> <a href="https://klcc.cc/c1fd5357.html">Python解释器与Pycharm</a><br> <a href="https://klcc.cc/daf175dd.html">pycharm使用及python变量、命名规范</a><br> <a href="https://klcc.cc/43f82467.html">数据类型、输入输出、基本运算符</a><br> <a href="https://klcc.cc/26ba1150.html">流程控制</a><br> <a href="https://klcc.cc/5bfa71b5.html">for循环及内置方法</a><br> <a href="https://klcc.cc/d645d15c.html">内置方法二</a><br> <a href="https://klcc.cc/bb5f959.html">内置方法三</a><br> <a href="https://klcc.cc/b8f382b7.html">编码和文件操作</a><br> <a href="https://klcc.cc/19603b60.html">文件操作</a><br> <a href="https://klcc.cc/a7f42e80.html">文件操作与函数</a><br> <a href="https://klcc.cc/c86b83ee.html">函数参数</a><br> <a href="https://klcc.cc/abc4492a.html">函数使用</a><br> <a href="https://klcc.cc/3a5cdcf8.html">装饰器</a><br> <a href="https://klcc.cc/d5376901.html">函数使用和生成式</a><br> <a href="https://klcc.cc/ccf84d2b.html">迭代器</a><br> <a href="https://klcc.cc/ae4233d7.html">生成器</a><br> <a href="https://klcc.cc/5c1fe23f.html">模块一</a><br> <a href="https://klcc.cc/26f31071.html">软件目录规范、正则表达式</a><br> <a href="https://klcc.cc/f32e795d.html">模块二</a><br> <a href="https://klcc.cc/8ddd5976.html">模块三</a><br> <a href="https://klcc.cc/779eb679.html">模块四</a></p>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p> <a href="https://klcc.cc/152c7478.html">类和对象、属性查找及绑定方法</a><br> <a href="https://klcc.cc/9d01c62a.html">类和数据类型、类的继承</a><br> <a href="https://klcc.cc/2327de81.html">派生、继承、分类及菱形问题</a><br> <a href="https://klcc.cc/3b14afe5.html">调用父类、super()、多态</a><br> <a href="https://klcc.cc/84aad6a1.html">封装和property特性</a><br> <a href="https://klcc.cc/4b65bd78.html">绑定方法及面向对象小结</a><br> <a href="https://klcc.cc/47a473e6.html">反射和魔术方法(一)</a><br> <a href="https://klcc.cc/bf389a0f.html">描述符</a><br> <a href="https://klcc.cc/9b629203.html">魔术方法(二)</a><br> <a href="https://klcc.cc/75c8d1ab.html">迭代器、with、元类</a><br> <a href="https://klcc.cc/">面向对象高级小结</a></p>
<h4 id="网络和并发"><a href="#网络和并发" class="headerlink" title="网络和并发"></a>网络和并发</h4><p> <a href="https://klcc.cc/e67db240.html">网络编程</a><br> <a href="https://klcc.cc/59b85335.html">并发编程</a></p>
<h4 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h4><p><a href="https://klcc.cc/e173abca.html">HTML基础</a><br><a href="https://klcc.cc/599b70c0.html">CSS基础</a><br><a href="https://klcc.cc/a9ba4134.html">JavaScript基础</a><br><a href="https://klcc.cc/889563.html">jQuery基础</a><br><a href="https://klcc.cc/f2f17718.html">Bootstrap框架</a></p>
<h4 id="MySQL补充"><a href="#MySQL补充" class="headerlink" title="MySQL补充"></a>MySQL补充</h4><p><a href="https://klcc.cc/be17b709.html">MySQL数据类型</a><br><a href="https://klcc.cc/66126033.html">MySQL外键与查询</a><br><a href="https://klcc.cc/44264759.html">多表查询和pymysql</a></p>
<h4 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h4><p><a href="https://klcc.cc/34975bbc.html">手撸简易的web框架</a><br><a href="https://klcc.cc/42260158.html">Django的安装及三板斧</a><br><a href="https://klcc.cc/b3b90dfb.html">静态文件、request方法、连接MySQL、ORM</a><br><a href="https://klcc.cc/e9898668.html">路由匹配和路由分发</a><br><a href="https://klcc.cc/802acd93.html">模板语法与Django部分源码</a><br><a href="https://klcc.cc/540723fb.html">ORM常用查询操作(一)</a><br><a href="https://klcc.cc/fb36b899.html">ORM常用查询操作(二)</a><br><a href="https://klcc.cc/94e8d53e.html">Ajax</a><br><a href="https://klcc.cc/7cb7dbab.html">分页器</a><br><a href="https://klcc.cc/b81883d7.html">Forms组件</a><br><a href="https://klcc.cc/e919b2cc.html">Cookie和Session</a><br><a href="https://klcc.cc/8dabf6aa.html">Django中间件</a><br><a href="https://klcc.cc/3d30357f.html">Auth组件</a></p>
<h4 id="DRF"><a href="#DRF" class="headerlink" title="DRF"></a>DRF</h4><p><a href="https://klcc.cc/ed2d6155.html">DRF初探</a><br><a href="https://klcc.cc/73f3258a.html">序列化器与请求响应</a><br><a href="https://klcc.cc/"></a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Kuberneters从入门到入土</title>
    <url>/30dd6ee6.html</url>
    <content><![CDATA[<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><span id="more"></span>
<p><a href="https://klcc.cc/cd988ed5.html">Docker使用</a></p>
<h4 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h4><p><a href="https://klcc.cc/4610149.html">Containerd相关使用</a></p>
<h4 id="Kuberneters基础"><a href="#Kuberneters基础" class="headerlink" title="Kuberneters基础"></a>Kuberneters基础</h4><p><a href="https://klcc.cc/60b500c7.html">kubeadm安装</a><br><a href="https://klcc.cc/2391e1e4.html">yaml资源清单格式</a><br><a href="https://klcc.cc/be528f81.html">Pod的基本使用</a></p>
<h4 id="配置管理安全"><a href="#配置管理安全" class="headerlink" title="配置管理安全"></a>配置管理安全</h4><h4 id="Kuberneters网络"><a href="#Kuberneters网络" class="headerlink" title="Kuberneters网络"></a>Kuberneters网络</h4><h4 id="调度器与CRD"><a href="#调度器与CRD" class="headerlink" title="调度器与CRD"></a>调度器与CRD</h4><h4 id="Kuberneters存储"><a href="#Kuberneters存储" class="headerlink" title="Kuberneters存储"></a>Kuberneters存储</h4><h4 id="Helm管理工具"><a href="#Helm管理工具" class="headerlink" title="Helm管理工具"></a>Helm管理工具</h4><h4 id="应用可观测性"><a href="#应用可观测性" class="headerlink" title="应用可观测性"></a>应用可观测性</h4><h4 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h4><h4 id="Service-Mesh"><a href="#Service-Mesh" class="headerlink" title="Service Mesh"></a>Service Mesh</h4><h4 id="集群维护"><a href="#集群维护" class="headerlink" title="集群维护"></a>集群维护</h4>]]></content>
      <categories>
        <category>Kuberneters</category>
      </categories>
      <tags>
        <tag>Kuberneters</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库从入门到放弃</title>
    <url>/77f70f41.html</url>
    <content><![CDATA[<h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><span id="more"></span>
<p> <a href="https://klcc.cc/f88e38d3.html">二进制安装</a><br> <a href="https://klcc.cc/318aa70a.html">登录及密码管理</a><br> <a href="https://klcc.cc/3c4a0863.html">体系结构介绍</a><br> <a href="https://klcc.cc/d7227a45.html">用户权限等基础管理</a><br> <a href="https://klcc.cc/37f9f562.html">初始化配置</a><br> <a href="https://klcc.cc/8da0cafb.html">SQL基础应用</a><br> <a href="https://klcc.cc/5c917bb6.html">索引管理</a><br> <a href="https://klcc.cc/ff3d77ac">InnoDB存储引擎</a><br> <a href="https://klcc.cc/2386d3bc.html">日志管理</a><br> <a href="https://klcc.cc/2c2a11ca.html">备份恢复与迁移</a><br> <a href="https://klcc.cc/c813917a.html">主从复制</a><br> <a href="https://klcc.cc/2c9a5c07.html">基本优化</a></p>
<h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p> <a href="https://klcc.cc/99ace97a.html">MongoDB简介</a><br> <a href="https://klcc.cc/55c06d78.html">安装部署</a><br> <a href="https://klcc.cc/ff4ef26d.html">用户管理</a><br> <a href="https://klcc.cc/3358d614.html">远程连接方式</a><br> <a href="https://klcc.cc/cb1bd433.html">基本的CRUD操作</a><br> <a href="https://klcc.cc/3bf43096.html">聚合框架</a><br> <a href="https://klcc.cc/37db6981.html">MongoDB复制集</a><br> <a href="https://klcc.cc/d8bf061a.html">分片集群搭建及扩容</a><br> <a href="https://klcc.cc/ec5ee46f.html">两地三中心部署</a><br> <a href="https://klcc.cc/2a426223.html">全球多写</a><br> <a href="https://klcc.cc/d4437f91.html">备份与恢复迁移</a><br> <a href="https://klcc.cc/8ba5944d.html">MongoDB监控</a></p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux从运维到放弃</title>
    <url>/a4a81253.html</url>
    <content><![CDATA[<h4 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h4><span id="more"></span>
<p> <a href="https://klcc.cc/20cf8e98.html">Linux安装、远程连接</a><br> <a href="https://klcc.cc/5e2eb880.html">Linux目录结构</a><br> <a href="https://klcc.cc/627226e0.html">vim的使用</a><br> <a href="https://klcc.cc/684b776b.html">Linux系统目录结构</a><br> <a href="https://klcc.cc/117ba17a.html">Linux文件管理</a><br> <a href="https://klcc.cc/ef277b25.html">Linux用户管理</a><br> <a href="https://klcc.cc/ad5612ad.html">Linux文件权限管理</a><br> <a href="https://klcc.cc/891d6bd.html">Linux包管理及压缩命令</a><br> <a href="https://klcc.cc/c3540fc.html">Linux系统优化及定时任务</a><br> <a href="https://klcc.cc/47edf33b.html">Linux文本处理和find命令</a><br> <a href="https://klcc.cc/bfa86649.html">Linux三剑客</a><br> <a href="https://klcc.cc/51ea15a6.html">Linux命令总结</a><br> <a href="https://klcc.cc/f9ef965d.html">Linux磁盘挂载分区</a><br> <a href="https://klcc.cc/2efe136b.html">Linux防火墙iptables</a><br> <a href="https://klcc.cc/7efc43b.html">VPN搭建使用</a><br> <a href="https://klcc.cc/340a13f1.html">Rsync使用</a><br> <a href="https://klcc.cc/e15f268d.html">NFS搭建使用</a><br> <a href="https://klcc.cc/37ea497d.html">LNMP架构</a><br> <a href="https://klcc.cc/a72f05d4.html">Nginx介绍</a><br> <a href="https://klcc.cc/5a8f3b66.html">Nginx代理</a><br> <a href="https://klcc.cc/2211e793.html">Nginx动静分离</a><br> <a href="https://klcc.cc/3cb7076b.html">Keepalived高可用</a></p>
<h4 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h4><p> <a href="https://klcc.cc/1452b361.html">简介安装</a><br> <a href="https://klcc.cc/6beab3d3.html">常用模块</a><br> <a href="https://klcc.cc/c3cdc4c2.html">Playbook的使用</a><br> <a href="https://klcc.cc/27816ec8.html">变量和Register的使用</a><br> <a href="https://klcc.cc/d30594ae.html">Task控制</a><br> <a href="https://klcc.cc/658bdd20.html">jinja2和Role</a></p>
<h4 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h4><p><a href="https://klcc.cc/ca675cd4.html">Git使用</a><br><a href="https://klcc.cc/82fee27f.html">GitLab安装使用</a><br><a href="https://klcc.cc/5d15ec84.html">Jenkins安装</a></p>
<h4 id="python-shell"><a href="#python-shell" class="headerlink" title="python-shell"></a>python-shell</h4><p><a href="https://klcc.cc/b7b3c952.html">简单的小脚本</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的小脚本</title>
    <url>/b7b3c952.html</url>
    <content><![CDATA[<h3 id="时间间隔执行命令"><a href="#时间间隔执行命令" class="headerlink" title="时间间隔执行命令"></a>时间间隔执行命令</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始日期和结束日期填写</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">begin = datetime.datetime(<span class="number">2022</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>)</span><br><span class="line">end = datetime.datetime(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>)</span><br><span class="line"></span><br><span class="line">d = begin</span><br><span class="line">delta = datetime.timedelta(seconds=<span class="number">600</span>)  <span class="comment"># 间隔，按秒算，600s  10分钟</span></span><br><span class="line">time_list = []</span><br><span class="line"><span class="keyword">while</span> d &lt;= end:</span><br><span class="line">    interval_time = d.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    time_list.append(interval_time)</span><br><span class="line">    d += delta</span><br><span class="line"></span><br><span class="line">time_list2 = time_list.copy()</span><br><span class="line">time_list3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(time_list2)):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(time_list2) - <span class="number">1</span>:</span><br><span class="line">        time_list3.append((time_list2[i], time_list2[i + <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础命令，密码自己修改</span></span><br><span class="line">base_cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    influx -username &#x27;admin&#x27; -database location -password &#x27;admin&#x27; -execute \</span></span><br><span class="line"><span class="string">    &quot;SELECT * INTO llocation FROM location_bak \</span></span><br><span class="line"><span class="string">    where time&gt;=&#x27;%s&#x27; \</span></span><br><span class="line"><span class="string">    AND time&lt;=&#x27;%s&#x27; \</span></span><br><span class="line"><span class="string">    GROUP BY * TZ(&#x27;Asia/Shanghai&#x27;) &amp;&amp; docker restart influxdb &amp;&amp; sleep 60&quot;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> time_list3:</span><br><span class="line">    command = base_cmd % (j[<span class="number">0</span>], j[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># print(base_cmd % (j[0], j[1])) 在终端打印命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行命令</span></span><br><span class="line">    res = subprocess.Popen(</span><br><span class="line">        command,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;stdout&#x27;</span>, res.stdout.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 获取正确命令执行之后的结果 终端打印</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;stderr&#x27;</span>, res.stderr.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 获取错误命令执行之后的结果 终端打印</span></span><br><span class="line">    <span class="comment"># 写入文件操作  当前目录下的 command.sh</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;command.sh&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(command)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Web服务器-Nginx介绍</title>
    <url>/a72f05d4.html</url>
    <content><![CDATA[<h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><h3 id="什么是web服务"><a href="#什么是web服务" class="headerlink" title="什么是web服务"></a>什么是web服务</h3><p>​    web就是B/S架构</p>
<ul>
<li><p>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以处理浏览器等Web客户端的请求并返回相应响应，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</p>
</li>
<li><p>WEB服务器也称为WWW(WORLD WIDE WEB)服务器，主要功能是提供网上信息浏览服务。WWW 是 Internet 的多媒体信息查询工具，是 Internet 上近年才发展起来的服务，也是发展最快和目前用的最广泛的服务。正是因为有了WWW工具，才使得近年来 Internet 迅速发展，且用户数量飞速增长。</p>
<span id="more"></span>
<h3 id="网络模型（IO多路复用之select、poll、epoll）"><a href="#网络模型（IO多路复用之select、poll、epoll）" class="headerlink" title="网络模型（IO多路复用之select、poll、epoll）"></a>网络模型（IO多路复用之select、poll、epoll）</h3></li>
</ul>
<p>epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，<code>其中epoll是Linux所特有，而select则应该是POSIX所规定</code>，一般操作系统均有实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">  - 基本原理：select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</span><br><span class="line">  </span><br><span class="line">  - select目前几乎在所有的平台上支持，`其良好跨平台支持也是它的一个优点`。`select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制`，在Linux上一般为1024，`可以通过修改宏定义甚至重新编译内核的方式提升这一限制`，但是这样也会造成效率的降低。</span><br><span class="line">  </span><br><span class="line">poll</span><br><span class="line">  - *基本原理：`poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间`，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。</span><br><span class="line"></span><br><span class="line">epoll</span><br><span class="line">  - 基本原理：`epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次`。还有一个特点是，`epoll使用“事件”的就绪通知方式`，通过epoll_ctl注册fd，`一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd`，epoll_wait便可以收到通知。</span><br><span class="line">  </span><br><span class="line">  - epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。`epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次`。</span><br></pre></td></tr></table></figure>



<p>参考链接：<a href="https://www.cnblogs.com/Anker/p/3265058.html">https://www.cnblogs.com/Anker/p/3265058.html</a></p>
<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。<code>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</code>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。关于这三种IO多路复用的用法，链接如下所示：</p>
<p>select：<a href="http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html">http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html</a></p>
<p>poll：<a href="http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html">http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html</a></p>
<p>epoll：<a href="http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html">http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html</a></p>
<h1 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h1><h2 id="1、apache"><a href="#1、apache" class="headerlink" title="1、apache"></a>1、apache</h2><ul>
<li>Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl/Python等解释器编译到服务器中。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Apache 和 Nginx 功能对比</span></span><br><span class="line">   Nginx和Apache一样，都是HTTP服务器软件，在功能实现上都采用模块化结构设计，都支持通用的语言接口，如PHP、Perl、Python等，同时还支持正向和反向代理、虚拟主机、URL重写、压缩传输、SSL加密传输等。</span><br><span class="line"></span><br><span class="line">1.在功能实现上，Apache的所有模块都支持动、静态编译，而Nginx模块都是静态编译的，</span><br><span class="line">2.对FastCGI的支持，Apache对Fcgi的支持不好，而Nginx对Fcgi的支持非常好；</span><br><span class="line">3.在处理连接方式上，Nginx支持epoll，而Apache却不支持；</span><br><span class="line">4.在空间使用上，Nginx安装包仅仅只有几百K，和Nginx比起来Apache绝对是庞然大物。</span><br></pre></td></tr></table></figure>

<h2 id="2、Nginx"><a href="#2、Nginx" class="headerlink" title="2、Nginx"></a>2、Nginx</h2><ul>
<li>Nginx (engine x) 是一个很强大的、高性能的HTTP和反向代理web服务器，同时也提供IMAP/POP3/SMTP服务。Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</li>
<li>Nginx代码完全用C语言从头写成，已经移植到许多体系结构和操作系统，包括：Linux、FreeBSD、Solaris、Mac OS X、AIX以及Microsoft Windows。Nginx有自己的函数库，并且除了zlib、PCRE和OpenSSL之外，标准模块只使用系统C库函数。而且，如果不需要或者考虑到潜在的授权冲突，可以不使用这些第三方库。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择Nginx的优势所在</span></span><br><span class="line">1. 作为Web服务器: Nginx处理静态文件、索引文件，自动索引的效率非常高。</span><br><span class="line">2. 作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度。</span><br><span class="line">3. 作为负载均衡服务器，Nginx既可以在内部直接支持Rails和PHP，也可以支持HTTP代理服务器对外进行服务，同时还支持简单的容错和利用算法进行负载均衡。</span><br><span class="line">4. 在性能方面，Nginx是专门为性能优化而开发的，在实现上非常注重效率。它采用内核Poll模型(epoll and kqueue )，可以支持更多的并发连接，最大可以支持对50 000个并发连接数的响应，而且只占用很低的内存资源。</span><br><span class="line">5. 在稳定性方面，Nginx采取了分阶段资源分配技术，使得CPU与内存的占用率非常低。Nginx官方表示，Nginx保持10 000个没有活动的连接，而这些连接只占用2.5MB内存，因此，类似DOS这样的攻击对Nginx来说基本上是没有任何作用的。</span><br><span class="line">6. 在高可用性方面，Nginx支持热部署，启动速度特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到7×24小时不间断地运行。</span><br></pre></td></tr></table></figure>



<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p> <img src="https://gitee.com/gengff/blogimage/raw/master/images/d21fa.jpg" alt="d21fa"></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>官网：<a href="https://nginx.org/">https://nginx.org/</a><br>软件：<a href="https://nginx.org/download/">https://nginx.org/download/</a></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1、yum安装</span><br><span class="line"> [root@<span class="attribute">web01</span> ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">   [nginx-stable]</span><br><span class="line">   name=nginx stable repo</span><br><span class="line">   baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">   gpgcheck=<span class="number">1</span></span><br><span class="line">   enabled=<span class="number">1</span></span><br><span class="line">   gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">   module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">   [nginx-mainline]</span><br><span class="line">   name=nginx mainline repo</span><br><span class="line">   baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">   gpgcheck=<span class="number">1</span></span><br><span class="line">   enabled=<span class="number">0</span></span><br><span class="line">   gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">   module_hotfixes=<span class="literal">true</span></span><br><span class="line"> [root@web01 ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line"> [root@web01 ~]<span class="comment"># systemctl stop httpd</span></span><br><span class="line"> [root@web01 ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、二进制安装</span><br><span class="line">    略.....</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、编译安装</span><br><span class="line"> [root@web01 ~]<span class="comment">#  wget https://nginx.org/download/nginx-1.20.2.tar.gz</span></span><br><span class="line"> [root@web01 ~]<span class="comment"># tar -xf nginx-1.20.2.tar.gz</span></span><br><span class="line"> [root@web01 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># ./configure</span></span><br><span class="line"> [root@web01 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make</span></span><br><span class="line"> [root@web01 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<h2 id="平滑增加Nginx模块"><a href="#平滑增加Nginx模块" class="headerlink" title="平滑增加Nginx模块"></a>平滑增加Nginx模块</h2><ul>
<li><p>众所周知Nginx是分成一个个模块的，比如core模块，gzip模块，proxy模块，每个模块负责不同的功能，除了基本的模块，有些模块可以选择编译或不编译进Nginx。官网文档中的Modules reference部分列出了nginx源码包的所有模块。我们可以按照自己服务器的需要来定制出一个最适合自己的Nginx服务器。</p>
</li>
<li><p>除了Nginx官网源码包提供了各种模块，Nginx还有各种各样的第三方模块。官方文档NGINX 3rd Party Modules也列出了Nginx的很多第三方模块，除此官网列出的之外，还有很多很有用的模块也能在Github等网站上找到。</p>
</li>
<li><p>这些模块提供着各种各样意想不到的功能，灵活使用Nginx的第三方模块，可能会有非常大的意外收获。</p>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加模块必须重新编译。</span></span><br><span class="line"> [root@<span class="attribute">web01</span> ~]<span class="comment">#  wget https://nginx.org/download/nginx-1.20.2.tar.gz</span></span><br><span class="line"> [root@web02 ~]<span class="comment"># tar -xf nginx-1.20.2.tar.gz</span></span><br><span class="line"> [root@web02 ~]<span class="comment"># cd nginx-1.20.2</span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment">#./configure  --with-http_ssl_module</span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make </span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装无法自动添加到环境变量，需要带上路径查看版本</span></span><br><span class="line"> [root@web01 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># /usr/local/nginx/sbin/nginx -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置参数</span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># ./configure --help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加模块，报错直接yum增加依赖即可</span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># ./configure --with-http_ssl_module</span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make </span></span><br><span class="line"> [root@web02 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># make install </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以看见模块已经增加进去了</span></span><br><span class="line"> [root@web01 nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># /usr/local/nginx/sbin/nginx -V</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx的命令"><a href="#Nginx的命令" class="headerlink" title="Nginx的命令"></a>Nginx的命令</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -?,-h : 帮助</span></span><br><span class="line"> [root@<span class="attribute">web01</span> ~]<span class="comment"># nginx -h</span></span><br><span class="line">  nginx version: nginx/<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line">  Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class="line">               [-e filename] [-c filename] [-g directives]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line">  </span><br><span class="line"> <span class="number">1</span>、-v : 版本信息</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -v</span></span><br><span class="line">   nginx version: nginx/<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>、-V : 版本和配置选项信息</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -V</span></span><br><span class="line">   nginx version: nginx/<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line">   built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">44</span>) (GCC) </span><br><span class="line">   built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">   TLS SNI support enabled</span><br><span class="line">   configure arguments: --prefix=/etc/nginx </span><br><span class="line">   ......</span><br><span class="line">  </span><br><span class="line"> <span class="number">3</span>、-t : 检查配置文件是否有语法错误</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">   nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">   nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line"> <span class="number">4</span>、-T : 测试配置文件并启动</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -T</span></span><br><span class="line">   nginx: the configuration file /etc/nginx/nginx.conf syntax is onginx: the configuration           file /etc/nginx/nginx.conf syntax is oTk</span><br><span class="line">   nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">   <span class="comment"># configuration file /etc/nginx/nginx.conf:</span></span><br><span class="line"></span><br><span class="line">   user  nginx;</span><br><span class="line">   <span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">notice</span>;</span><br><span class="line">   <span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line">   ......</span><br><span class="line"> </span><br><span class="line"> 5、-<span class="attribute">q</span> : 打印错误日志</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -q</span></span><br><span class="line">   nginx: [emerg] bind() to <span class="number">0.0.0.0:80</span> failed (<span class="number">98</span>: Address already in use)</span><br><span class="line">   nginx: [emerg] bind() to <span class="number">0.0.0.0:80</span> failed (<span class="number">98</span>: Address already in use)</span><br><span class="line">   nginx: [emerg] bind() to <span class="number">0.0.0.0:80</span> failed (<span class="number">98</span>: Address already in use)</span><br><span class="line"></span><br><span class="line"> <span class="number">6</span>、-s : 指定Nginx启动配置（给nginx主进程发送信号）</span><br><span class="line">    stop : 停止（快速关闭）</span><br><span class="line">     [root@web01 ~]<span class="comment"># nginx -s stop</span></span><br><span class="line">    quit : 退出（正常关闭）</span><br><span class="line">     [root@web01 ~]<span class="comment"># nginx -s quit</span></span><br><span class="line">    reopen : 重启</span><br><span class="line">     [root@web01 ~]<span class="comment"># nginx -s reopen</span></span><br><span class="line">    reload : 重载</span><br><span class="line">     [root@web01 ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line"> <span class="number">7</span>、-p : 指定nginx的安装路径（默认是：/etc/nginx/）</span><br><span class="line"></span><br><span class="line"> <span class="number">8</span>、-e : 指定错误日志路径</span><br><span class="line"></span><br><span class="line"> <span class="number">9</span>、-c : 指定配置文件的路径（默认是：/etc/nginx/nginx.conf）</span><br><span class="line"></span><br><span class="line"> <span class="number">10</span>、-g : 设置一个全局的Nginx配置项</span><br><span class="line">  [root@web01 ~]<span class="comment"># nginx -g &#x27;daemon off;&#x27;  #前端启动</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><ul>
<li>nginx分为全局配置和模块配置</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/etc/nginx/nginx.conf</span></span><br><span class="line">-------------------- 全局配置(全局生效) -----------------</span><br><span class="line"><span class="attribute">user</span>  www;	<span class="comment">#启动nginx work进程的用户名</span></span><br><span class="line"><span class="attribute">worker_processes</span>  auto;  <span class="comment">#启动的worker进程数，auto === CPU数量</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">notice</span>;  <span class="comment">#错误日志路径</span></span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;  <span class="comment">#pid的存放文件文件路径</span></span><br><span class="line"></span><br><span class="line">-------------- 系统事件配置模块(全局生效) ---------------</span><br><span class="line"><span class="section">events</span> &#123;	<span class="comment">#事件配置模块</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;  <span class="comment">#最大连接数（每一个worker进程最多同时接入多少个请求）</span></span><br><span class="line">    <span class="attribute">use</span> epool;  <span class="comment">#指定Nginx的网络模型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------- Http请求模块(处理Http请求的模块) --------------</span><br><span class="line"><span class="section">http</span> &#123;  <span class="comment">#web服务的模块</span></span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;  <span class="comment">#加载外部的配置项（Nginx可以处理的文件类型）</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;  <span class="comment">#如果找不到文件的类型，则按照指定默认类型处理</span></span><br><span class="line">    <span class="comment">#设置的日志格式，下方详解</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;	<span class="comment">#访问日志</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;	 <span class="comment">#tcp连接配置（高效读取文件）</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;  <span class="comment">#长链接配置（HTTP 1.0 短链接，HTTP 1.1 长连接）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;  #压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;  <span class="comment">#包含其他文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;  <span class="comment">#网址模块</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;  <span class="comment">#监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;	<span class="comment">#定义域名</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;  <span class="comment">#访问路径</span></span><br><span class="line">	<span class="attribute">root</span> /blog;  <span class="comment">#指定的站点目录（网址路径）</span></span><br><span class="line">	<span class="attribute">index</span> index.php;  <span class="comment">#指定网址的索引文件</span></span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>





<h2 id="超级玛丽和象棋"><a href="#超级玛丽和象棋" class="headerlink" title="超级玛丽和象棋"></a>超级玛丽和象棋</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1、上传代码</span><br><span class="line"> <span class="comment"># 定义目录</span></span><br><span class="line"> [root@<span class="attribute">web01</span> ~]<span class="comment"># cd /opt</span></span><br><span class="line"> [root@web01 opt]<span class="comment"># mkdir Super_Marie</span></span><br><span class="line">  <span class="comment"># 此时需要手动上传文件</span></span><br><span class="line"> [root@web01 opt]<span class="comment"># ll Super_Marie/</span></span><br><span class="line">  总用量 <span class="number">176</span></span><br><span class="line">  drwxr-xr-x <span class="number">2</span> root root   <span class="number">329</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> images</span><br><span class="line">  -rw-r--r-- <span class="number">1</span> root root  <span class="number">1703</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> index.html</span><br><span class="line">  -rw-r--r-- <span class="number">1</span> root root <span class="number">72326</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> jquery.js</span><br><span class="line">  -rw-r--r-- <span class="number">1</span> root root <span class="number">78982</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> QAuIByrkL.js</span><br><span class="line">  -rw-r--r-- <span class="number">1</span> root root  <span class="number">4777</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> VNkyVaVxUV.css</span><br><span class="line">  -rw-r--r-- <span class="number">1</span> root root  <span class="number">9539</span> <span class="number">1</span>月   <span class="number">3</span> <span class="number">21</span>:<span class="number">44</span> wNGu2CtEMx.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、编辑配置文件</span><br><span class="line">[root@web01 opt]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> game.test.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、测试配置文件是否正常</span><br><span class="line">[root@<span class="attribute">web01</span> opt]<span class="comment"># nginx -t</span></span><br><span class="line"> nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line"> nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、重启Nginx</span><br><span class="line">[root@web01 opt]<span class="comment"># systemctl restart nginx </span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、Windows域名解析</span><br><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br><span class="line"><span class="number">172.16.1.7</span> game.test.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、Mac域名解析</span><br><span class="line"><span class="comment"># 切换到root权限</span></span><br><span class="line">  sudo -i</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编辑/etc/hosts文件，在后面追加内容即可，:wq保存退出</span></span><br><span class="line">  vim /etc/hosts</span><br><span class="line">  <span class="number">172.16.1.7</span> game.test.com</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Nginx配置虚拟主机"><a href="#Nginx配置虚拟主机" class="headerlink" title="Nginx配置虚拟主机"></a>Nginx配置虚拟主机</h1><p><strong>可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</strong></p>
<p>虚拟主机技术是互联网服务器采用的节省服务器硬件成本的技术，虚拟主机技术主要应用于HTTP服务，将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器，从而充分利用服务器硬件资源。</p>
<p>虚拟主机是使用特殊的软硬件技术，把一台真实的物理服务器主机分割成多个逻辑存储单元。每个逻辑单元都没有物理实体，但是每一个逻辑单元都能像真实的物理主机一样在网络上工作，具有单独的IP地址（或共享的IP地址）、独立的域名以及完整的Internet服务器（支持WWW、FTP、E-mail等）功能。</p>
<p>虚拟主机的关键技术在于，即使在同一台硬件、同一个操作系统上，运行着为多个用户打开的不同的服务器程式，也互不干扰。而各个用户拥有自己的一部分系统资源（IP地址、文档存储空间、内存、CPU等）。各个虚拟主机之间完全独立，在外界看来，每一台虚拟主机和一台单独的主机的表现完全相同。所以这种被虚拟化的逻辑主机被形象地称为“虚拟主机”。</p>
<ul>
<li>基于多IP的方式</li>
<li>基于多端口的方式</li>
<li>基于多域名的方式</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1、基于多IP的方式</span><br><span class="line">[root@<span class="attribute">web01</span> conf.d]<span class="comment"># vim game.conf </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># cat game.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.7</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">172.16.1.7</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/tank;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 测试：浏览器访问</span></span><br><span class="line">192.168.15.7</span><br><span class="line">172.16.1.7</span><br><span class="line"></span><br><span class="line">2、基于多端口的方式</span><br><span class="line">[root@<span class="attribute">web01</span> conf.d]<span class="comment"># vim game1.conf </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># cat game1.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.7</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.7</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/tank;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：浏览器访问</span></span><br><span class="line">192.168.15.7</span><br><span class="line">192.168.15.7:81</span><br><span class="line"></span><br><span class="line">3、基于多域名的方式</span><br><span class="line">[root@<span class="attribute">web01</span> conf.d]<span class="comment"># vim game2.conf </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># cat game2.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.game.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.game1.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/tank;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：浏览器访问</span></span><br><span class="line">www.game.<span class="attribute">com</span></span><br><span class="line">www.game1.com</span><br></pre></td></tr></table></figure>

<h1 id="Nginx日志"><a href="#Nginx日志" class="headerlink" title="Nginx日志"></a>Nginx日志</h1><ul>
<li><p>nginx的log日志分为access log 和 error log</p>
<ul>
<li><p>其中access log 记录了哪些用户，哪些页面以及用户浏览器、ip和其他的访问信息</p>
</li>
<li><p>error log 则是记录服务器错误日志</p>
</li>
</ul>
</li>
<li><p>Nginx有非常灵活的日志记录模式，每个级别的配置可以有各自独立的访问日志。日志格式通过log_format<strong>命令定义格式</strong></p>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="attribute">access_log</span>  	<span class="comment">#日志的模块</span></span><br><span class="line">/var/log/nginx/access.log  	<span class="comment">#日志的路径</span></span><br><span class="line">main;	<span class="comment">#日志的格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">日志的格式</span><br><span class="line"> <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$<span class="attribute">remote_addr</span>        <span class="comment"># 记录客户端IP地址</span></span><br><span class="line">$remote_user        <span class="comment"># 记录客户端用户名</span></span><br><span class="line">$time_local         <span class="comment"># 记录通用的本地时间</span></span><br><span class="line">$time_iso8601       <span class="comment"># 记录ISO8601标准格式下的本地时间</span></span><br><span class="line">$request            <span class="comment"># 记录请求的方法以及请求的http协议</span></span><br><span class="line">$status             <span class="comment"># 记录请求状态码(用于定位错误信息)</span></span><br><span class="line">$body_bytes_sent    <span class="comment"># 发送给客户端的资源字节数，不包括响应头的大小</span></span><br><span class="line">$bytes_sent         <span class="comment"># 发送给客户端的总字节数</span></span><br><span class="line">$msec               <span class="comment"># 日志写入时间。单位为秒，精度是毫秒。</span></span><br><span class="line">$http_referer       <span class="comment"># 记录从哪个页面链接访问过来的</span></span><br><span class="line">$http_user_agent    <span class="comment"># 记录客户端浏览器相关信息</span></span><br><span class="line">$http_x_forwarded_for <span class="comment">#记录经过的所有服务器的IP地址（在反向代理中生效）</span></span><br><span class="line">$X-Real-IP		   <span class="comment">#记录起始的客户端IP地址和上一层客户端的IP地址</span></span><br><span class="line">$request_length     <span class="comment"># 请求的长度（包括请求行， 请求头和请求正文）。</span></span><br><span class="line">$request_time       <span class="comment"># 请求花费的时间，单位为秒，精度毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:如果Nginx位于负载均衡器，nginx反向代理之后， web服务器无法直接获取到客户端真实的IP地址。</span></span><br><span class="line"><span class="comment"># $remote_addr获取的是反向代理的IP地址。 反向代理服务器在转发请求的http头信息中，</span></span><br><span class="line"><span class="comment"># 增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址。</span></span><br><span class="line"></span><br><span class="line">ps:出现报错等问题首先应该查看报错日志</span><br><span class="line">排错：</span><br><span class="line"> [root@web01 ~]<span class="comment"># systemctl status nginx.service -l</span></span><br><span class="line">查看报错日志：</span><br><span class="line"> [root@web01 ~]<span class="comment"># cat /var/log/nginx/error.log</span></span><br></pre></td></tr></table></figure>

<h3 id="json日志模板"><a href="#json日志模板" class="headerlink" title="json日志模板"></a>json日志模板</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">log_format</span> json <span class="string">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;service&quot;:&quot;nginxTest&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;trace&quot;:&quot;$upstream_http_ctx_transaction_id&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;log&quot;:&quot;log&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;remote_user&quot;:&quot;$remote_user&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;request&quot;:&quot;$request&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class="line">               <span class="string">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;</span><br><span class="line"> 		<span class="attribute">access_log</span> /var/log/nginx/access.log json;</span><br></pre></td></tr></table></figure>





<h1 id="Nginx模块介绍"><a href="#Nginx模块介绍" class="headerlink" title="Nginx模块介绍"></a>Nginx模块介绍</h1><p><a href="http://nginx.org/en/docs/">Nginx模块官方文档TP</a></p>
<h2 id="Nginx访问控制模块"><a href="#Nginx访问控制模块" class="headerlink" title="Nginx访问控制模块"></a>Nginx访问控制模块</h2><ul>
<li>ngx_http_access_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">允许或者拒绝某些客户端地址的访问</span><br><span class="line"><span class="attribute">deny</span>  : 拒绝</span><br><span class="line">allow : 允许</span><br><span class="line"></span><br><span class="line">案例<span class="number">1</span>：允许<span class="number">192.168.15.1</span>访问，不允许其他IP访问</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.game.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.15.1</span>; </span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">案例2：允许192.168.15.0这个网段访问，不允许其他网段访问</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.game.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.15.0</span>/<span class="number">24</span>; </span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例3：只允许通过VPN来访问</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.game.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">172.16.1.81</span>; </span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ps:每次修改完配置需要重启<span class="attribute">nginx</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx </span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx访问认证模块"><a href="#Nginx访问认证模块" class="headerlink" title="Nginx访问认证模块"></a>Nginx访问认证模块</h2><ul>
<li>ngx_http_auth_basic_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">访问之前需要登录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注釋</span></span><br><span class="line"><span class="attribute">auth_basic</span> <span class="string">&quot;Welcome To Login&quot;</span>;</span><br><span class="line"><span class="comment"># 指定认证的文件</span></span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /etc/nginx/auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、安装httpd-<span class="attribute">tools</span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install httpd-tools -y</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、生成用户名密码文件</span><br><span class="line">[root@web01 ~]<span class="comment"># htpasswd -c /etc/nginx/auth gengfeng</span></span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user gengfeng</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、查看密码文件内容</span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/auth </span></span><br><span class="line">gengfeng:$apr1$b5wYYZ9b$PzcNn9gq.fgYUR4l0M3OL/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、将文件路径加入Nginx配置</span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> game.test.com;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">                <span class="attribute">index</span> index.html;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="attribute">auth_basic</span> <span class="string">&quot;Welcome To Login&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/auth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、重启<span class="attribute">Nginx</span></span><br><span class="line">[root@web01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx </span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、测试</span><br><span class="line"> 浏览器访问 http://game.test.com</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220104174024762.png" alt="image-20220104174024762"></p>
<h2 id="Nginx目录索引模块"><a href="#Nginx目录索引模块" class="headerlink" title="Nginx目录索引模块"></a>Nginx目录索引模块</h2><ul>
<li>ngx_http_autoindex_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">展示目录索引</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用或禁用目录列表输出。(默认off)</span></span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示具体大小 off 显示K/M/G单位   on 单位就是 bytes (默认on)</span></span><br><span class="line"><span class="attribute">autoindex_exact_size</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示文件最后修改时间  如果是 off 需要加8小时（默认off）</span></span><br><span class="line"><span class="attribute">autoindex_localtime</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置目录列表的格式（默认html）</span></span><br><span class="line"><span class="attribute">autoindex_format</span> html | xml | json | jsonp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> game.test.com;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">autoindex_format</span> html;</span><br><span class="line">        &#125;</span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># systemctl restart nginx </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试：</span></span><br><span class="line"> 浏览器访问 http://game.test.com</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220104185038699.png" alt="image-20220104185038699"></p>
<h2 id="Nginx状态监控模块"><a href="#Nginx状态监控模块" class="headerlink" title="Nginx状态监控模块"></a>Nginx状态监控模块</h2><ul>
<li>ngx_http_stub_status_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">监控Nginx运行状态</span><br><span class="line"></span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/game.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> game.test.com;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">                <span class="attribute">index</span> index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> /status &#123;</span><br><span class="line">                stub_status;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@<span class="attribute">web01</span> down]<span class="comment"># nginx -s reload  #重载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试：浏览器访问 http://game.test.com/status</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220104194138460.png" alt="image-20220104194138460"></p>
<h3 id="Nginx的七种状态"><a href="#Nginx的七种状态" class="headerlink" title="Nginx的七种状态"></a>Nginx的七种状态</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Active</span> connections</span><br><span class="line">   当前活动客户端连接数，包括Waiting连接数。</span><br><span class="line">accepts</span><br><span class="line">   接受的客户端连接总数。</span><br><span class="line">handled</span><br><span class="line">   处理的连接总数。通常，accepts 除非达到某些资源</span><br><span class="line">   限制（例如，worker_connections限制），否则 该参数值是相同的。</span><br><span class="line">requests</span><br><span class="line">   客户端请求的总数。</span><br><span class="line">Reading</span><br><span class="line">   nginx 正在读取请求头的当前连接数。</span><br><span class="line">Writing</span><br><span class="line">   nginx 将响应写回客户端的当前连接数。</span><br><span class="line">Waiting</span><br><span class="line">   当前等待请求的空闲客户端连接数。</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：一次tcp连接，可以发起多次请求；</span></span><br><span class="line">keepalive_timeout  <span class="number">0</span>;   <span class="comment">#类似于关闭长连接</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;	<span class="comment">#最长65秒没有活动则断开连接</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx连接限制模块"><a href="#Nginx连接限制模块" class="headerlink" title="Nginx连接限制模块"></a>Nginx连接限制模块</h2><ul>
<li>ngx_http_limit_conn_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">用于限制每个定义的键的连接数，特别是来自单个IP地址的连接数。</span><br><span class="line"></span><br><span class="line"><span class="attribute">limit_conn</span> : 该指令指定每个给定键值的最大同时连接数，当超过这个数字时返回<span class="number">503</span>错误</span><br><span class="line">limit_conn_log_level : 当达到最大限制连接数后，记录日志的等级，默认<span class="literal">error</span>级别</span><br><span class="line">limit_conn_status : 指定当超过限制时，返回的状态码。默认是<span class="number">503</span>。</span><br><span class="line">limit_conn_zone : 主要用来定义变量、zone名称、共享内存大小</span><br><span class="line">  $remote_addr</span><br><span class="line">      变量的长度为<span class="number">7</span>字节到<span class="number">15</span>字节，而存储状态在<span class="number">32</span>位平台中占用<span class="number">32</span>字节或<span class="number">64</span>字节，</span><br><span class="line">      在<span class="number">64</span>位平台中占用<span class="number">64</span>字节。</span><br><span class="line">  $binary_remote_addr</span><br><span class="line">      变量的长度是固定的<span class="number">4</span>字节，存储状态在<span class="number">32</span>位平台中占用<span class="number">32</span>字节或<span class="number">64</span>字节，</span><br><span class="line">      在<span class="number">64</span>位平台中占用<span class="number">64</span>字节。</span><br><span class="line"></span><br><span class="line">ps:<span class="number">1M</span>共享空间可以保存<span class="number">3</span>.<span class="number">2</span>万个<span class="number">32</span>位的状态，<span class="number">1</span>.<span class="number">6</span>万个<span class="number">64</span>位的状态。如果共享内存空间被耗尽，</span><br><span class="line">   服务器将会对后续所有的请求返回 <span class="number">503</span> (Service Temporarily Unavailable) 错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">控制Nginx连接数</span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/game.conf</span></span><br><span class="line">limit_conn_zone $remote_addr zone=addr:<span class="number">1m</span>;</span><br><span class="line"><span class="attribute">limit_conn_log_level</span> <span class="literal">error</span>;</span><br><span class="line"><span class="attribute">limit_conn_status</span> <span class="number">503</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.8</span>;</span><br><span class="line">    <span class="attribute">limit_conn</span> addr <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@<span class="attribute">web01</span> down]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">  <span class="number">1</span>、安装ab压力测试命令</span><br><span class="line">  [root@web01 ~]<span class="comment"># yum install httpd-tools -y </span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>、ab 参数</span><br><span class="line">     -n : 总共需要访问多少次</span><br><span class="line">     -c : 每次访问多少个</span><br><span class="line"></span><br><span class="line">测试结果:</span><br><span class="line">[root@web01 ~]<span class="comment"># ab -n 10000 -c 1000 http://192.168.15.8/</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">Benchmarking <span class="number">192.168.15.8</span> (be patient)</span><br><span class="line">Completed <span class="number">1000</span> requests</span><br><span class="line">Completed <span class="number">2000</span> requests</span><br><span class="line">Completed <span class="number">3000</span> requests</span><br><span class="line">Completed <span class="number">4000</span> requests</span><br><span class="line">Completed <span class="number">5000</span> requests</span><br><span class="line">Completed <span class="number">6000</span> requests</span><br><span class="line">Completed <span class="number">7000</span> requests</span><br><span class="line">Completed <span class="number">8000</span> requests</span><br><span class="line">Completed <span class="number">9000</span> requests</span><br><span class="line">Completed <span class="number">10000</span> requests</span><br><span class="line">Finished <span class="number">10000</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line">Server Hostname:        <span class="number">192.168.15.8</span></span><br><span class="line">Server Port:            <span class="number">80</span></span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        <span class="number">1703</span> bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      <span class="number">1000</span></span><br><span class="line">Time taken for tests:   <span class="number">6</span>.<span class="number">416</span> seconds</span><br><span class="line">Complete requests:      <span class="number">10000</span>  <span class="comment">#总共访问1万次</span></span><br><span class="line">Failed requests:        <span class="number">128</span>    <span class="comment">#失败次数128次</span></span><br><span class="line">   (Connect: <span class="number">0</span>, Receive: <span class="number">0</span>, Length: <span class="number">64</span>, Exceptions: <span class="number">64</span>)</span><br><span class="line">Write errors:           <span class="number">0</span></span><br><span class="line">Total transferred:      <span class="number">19246032</span> bytes</span><br><span class="line">HTML transferred:       <span class="number">16921008</span> bytes</span><br><span class="line">Requests per second:    <span class="number">1558</span>.<span class="number">69</span> [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       <span class="number">641</span>.<span class="number">562</span> [ms] (mean)</span><br><span class="line">Time per request:       <span class="number">0</span>.<span class="number">642</span> [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          <span class="number">2929</span>.<span class="number">56</span> [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        <span class="number">0</span>  <span class="number">243</span> <span class="number">253</span>.<span class="number">4</span>    <span class="number">203</span>    <span class="number">1310</span></span><br><span class="line">Processing:    <span class="number">75</span>  <span class="number">371</span> <span class="number">111</span>.<span class="number">0</span>    <span class="number">365</span>     <span class="number">656</span></span><br><span class="line">Waiting:        <span class="number">0</span>  <span class="number">311</span> <span class="number">106</span>.<span class="number">6</span>    <span class="number">310</span>     <span class="number">612</span></span><br><span class="line">Total:        <span class="number">173</span>  <span class="number">613</span> <span class="number">270</span>.<span class="number">2</span>    <span class="number">569</span>    <span class="number">1752</span></span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  <span class="number">50</span>%    <span class="number">569</span></span><br><span class="line">  <span class="number">66</span>%    <span class="number">599</span></span><br><span class="line">  <span class="number">75</span>%    <span class="number">654</span></span><br><span class="line">  <span class="number">80</span>%    <span class="number">667</span></span><br><span class="line">  <span class="number">90</span>%    <span class="number">719</span></span><br><span class="line">  <span class="number">95</span>%   <span class="number">1479</span></span><br><span class="line">  <span class="number">98</span>%   <span class="number">1637</span></span><br><span class="line">  <span class="number">99</span>%   <span class="number">1718</span></span><br><span class="line"> <span class="number">100</span>%   <span class="number">1752</span> (longest request)</span><br></pre></td></tr></table></figure>

<h2 id="Nginx请求限制模块"><a href="#Nginx请求限制模块" class="headerlink" title="Nginx请求限制模块"></a>Nginx请求限制模块</h2><ul>
<li>ngx_http_limit_req_module</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">基于漏桶算法实现的请求限流模块，用于对指定KEY对应的请求进行限流，比如按照IP维度限制请求速率</span><br><span class="line"></span><br><span class="line"><span class="attribute">limit_req</span> : 配置限流区域、桶容量（突发容量，默认<span class="number">0</span>）、是否延迟模式（默认延迟）</span><br><span class="line">limit_req_log_level : 配置记录被限流后的日志级别，默认<span class="literal">error</span>级别</span><br><span class="line">limit_req_status : 配置被限流后返回的状态码，默认返回<span class="number">503</span></span><br><span class="line">limit_req_zone : 配置限流KEY、及存放KEY对应信息的共享内存区域大小、固定请求速率</span><br><span class="line">    $binary_remote_addr</span><br><span class="line">       变量，可以将每条状态记录的大小减少到<span class="number">64</span>个字节，这样<span class="number">1M</span>的内存可以保存大约<span class="number">1</span>万<span class="number">6</span>千个<span class="number">64</span>字节的记录。</span><br><span class="line">    zone=one:<span class="number">10m</span>  </span><br><span class="line">       区域名称为one，大小为<span class="number">10m</span></span><br><span class="line">    固定请求速率</span><br><span class="line">       使用rate参数配置，支持10r/s和60r/m，即每秒<span class="number">10</span>个请求和每分钟<span class="number">60</span>个请求，不过最终都会转换</span><br><span class="line">       为每秒的固定请求速率（10r/s为每<span class="number">100</span>毫秒处理一个请求；60r/m，即每<span class="number">1000</span>毫秒处理一个请求）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">控制Nginx访问量</span><br><span class="line"></span><br><span class="line">	<span class="number">1</span>、连接池</span><br><span class="line">		limit_req_zone $remote_addr zone=one:<span class="number">10m</span> rate=1r/s;</span><br><span class="line">		声明连接池       变量          名称 连接池的大小  速率</span><br><span class="line"></span><br><span class="line">	2、限制数</span><br><span class="line"></span><br><span class="line">案例：要求每秒只能有一个访问。</span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># vim /etc/nginx/conf.d/game.conf</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/game.conf</span></span><br><span class="line">limit_req_zone $remote_addr zone=one:<span class="number">10m</span> rate=1r/s;</span><br><span class="line"><span class="attribute">limit_req_log_level</span> <span class="literal">error</span>;</span><br><span class="line"><span class="attribute">limit_req_status</span> <span class="number">503</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> game.test.com;</span><br><span class="line">    <span class="attribute">limit_req</span> zone=one burst=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@<span class="attribute">web01</span> down]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220104210224831.png" alt="image-20220104210224831"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx动静分离</title>
    <url>/2211e793.html</url>
    <content><![CDATA[<h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><ul>
<li><p>在弄清动静分离之前，我们要先明白什么是动，什么是静。</p>
<p>在Web开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指HTML，JavaScript，CSS，img等文件。</p>
<p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在Nginx上，当一个请求来的时候，如果是静态资源的请求，就直接到nginx配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p>
<p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间 。</p>
<span id="more"></span>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1、创建NFS挂载点（在nfs服务器上进行）</span><br><span class="line">  ①.创建并授权static目录</span><br><span class="line">   [root@<span class="attribute">nfs</span> ~]<span class="comment"># mkdir /static</span></span><br><span class="line">   [root@nfs ~]<span class="comment"># chown -R www.www /static/</span></span><br><span class="line"> </span><br><span class="line">  ②.增加挂载点（编辑/etc/exports配置文件）</span><br><span class="line">   [root@nfs ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">    /static      <span class="number">172.16.1.0</span>/<span class="number">20</span>(rw,sync,all_squash,anonuid=<span class="number">666</span>,anongid=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line">  ③.重启nfs服务端</span><br><span class="line">   [root@nfs ~]<span class="comment"># systemctl restart nfs-server</span></span><br><span class="line"></span><br><span class="line">  ④.检查服务端是否正常</span><br><span class="line">   [root@nfs ~]<span class="comment"># showmount -e</span></span><br><span class="line">    /static <span class="number">172.16.1.0</span>/<span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、将web01服务器的静态资源放置于挂载点内（在web01服务器上进行）</span><br><span class="line">  ①.创建目录</span><br><span class="line">   [root@web01 ~]<span class="comment"># mkdir /opt/static</span></span><br><span class="line"></span><br><span class="line">  ②.挂载</span><br><span class="line">   [root@web01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/static /opt/static/</span></span><br><span class="line"></span><br><span class="line">  ③.将项目的静态资源放置于挂载点内</span><br><span class="line">   [root@web01 ~]<span class="comment"># cp -r /opt/bbs/static/* /opt/static/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、挂载到lb01(在代理服务器上进行操作)</span><br><span class="line">  ①.安装nfs-utils </span><br><span class="line">   [root@lb01 ~]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line">  ②.创建挂载点</span><br><span class="line">   [root@lb01 ~]<span class="comment"># mkdir /opt/static/</span></span><br><span class="line">  ③.挂载</span><br><span class="line">   [root@lb01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/static /opt/static/</span></span><br><span class="line">   [root@lb01 ~]<span class="comment"># df -h</span></span><br><span class="line"></span><br><span class="line">  ④.修改nginx配置文件</span><br><span class="line">   [root@lb01 ~]<span class="comment"># vim /etc/nginx/conf.d/test.conf </span></span><br><span class="line">   [root@lb01 ~]<span class="comment"># cat /etc/nginx/conf.d/test.conf  </span></span><br><span class="line">upstream bbs &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.1.7:80</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.1.8:80</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.1.9:80</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.test.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://bbs;</span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_500 http_502 http_503 http_404; </span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /static &#123;</span><br><span class="line">        <span class="attribute">alias</span> /opt/static;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  ⑤.测试重载<span class="attribute">nginx</span></span><br><span class="line">   [root@lb01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">   [root@lb01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、测试</span><br><span class="line"> 浏览器访问：bbs.test.com</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h1><ul>
<li>Rewrite主要实现url地址重写，以及重定向，就是把传入web的请求重定向到其他url的过程。</li>
</ul>
<h2 id="Rewrite基本概述"><a href="#Rewrite基本概述" class="headerlink" title="Rewrite基本概述"></a>Rewrite基本概述</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.地址跳转，用户访问www.linux.com这个URL是，将其定向至一个新的域名www.baidu.com。</span><br><span class="line">2.协议跳转，用户通过http协议请求网站时，将其重新跳转至https协议方式。</span><br><span class="line">3.伪静态，将动态页面显示为静态页面方式的一种技术，便于搜索引擎的录入，同时建上动态URL地址对外暴露过多的参数，提升更高的安全性。</span><br><span class="line">4.搜索引擎，SEO优化依赖于url路径，好记的url便于搜索引擎录入。</span><br></pre></td></tr></table></figure>

<h2 id="rewrite语法"><a href="#rewrite语法" class="headerlink" title="rewrite语法"></a>rewrite语法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax: rewrite regex replacement [flag];</span><br><span class="line">Default:    —</span><br><span class="line">Context:    server, location, <span class="keyword">if</span></span><br><span class="line"> </span><br><span class="line">rewrite         <span class="comment"># 模块命令</span></span><br><span class="line">regex           <span class="comment"># 请求的链接（支持正则表达式）</span></span><br><span class="line">replacement     <span class="comment"># 跳转的链接</span></span><br><span class="line">[flag];         <span class="comment"># 标签</span></span><br><span class="line"> </span><br><span class="line">location /download/ &#123;</span><br><span class="line">    rewrite ^(/download/.*)/media/(.*)\..*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3 <span class="built_in">break</span>;</span><br><span class="line">    rewrite ^(/download/.*)/audio/(.*)\..*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.ra  <span class="built_in">break</span>;</span><br><span class="line">    <span class="built_in">return</span>  403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Rewrite标记Flag"><a href="#Rewrite标记Flag" class="headerlink" title="Rewrite标记Flag"></a>Rewrite标记Flag</h2><ul>
<li>rewrite指令根据表达式来重定向URL，或者修改字符串，可以应用于server，location，if环境下，每行rewrite指令最后跟一个flag标记，支持的flag标记有如下表格所示：</li>
</ul>
<table>
<thead>
<tr>
<th>flag</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>last</td>
<td>本条规则匹配完成后，停止匹配，不再匹配后面的规则</td>
</tr>
<tr>
<td>break</td>
<td>本条规则匹配完成后，停止匹配，不再匹配后面的规则</td>
</tr>
<tr>
<td>redirect</td>
<td>返回302临时重定向，地址栏会显示跳转后的地址</td>
</tr>
<tr>
<td>permanent</td>
<td>返回301永久重定向，地址栏会显示跳转后的地址</td>
</tr>
</tbody></table>
<h3 id="1、last和break的区别"><a href="#1、last和break的区别" class="headerlink" title="1、last和break的区别"></a>1、last和break的区别</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">[root@<span class="attribute">lb01</span> ~]<span class="comment"># cat /etc/nginx/conf.d/rewrite.conf </span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/break</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /test <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/last</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /test <span class="literal">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /test &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/html;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">break</span> 只要匹配到规则，则会去本地配置路径的目录中寻找请求的文件；</span><br><span class="line">而<span class="literal">last</span>只要匹配到规则，会对其所在的server(...)标签重新发起请求。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="literal">break</span>请求：</span><br><span class="line"><span class="number">1</span>.请求linux.rewrite.com/break</span><br><span class="line"><span class="number">2</span>.匹配 location <span class="regexp">~ ^/break</span> 会跳转到 linux.rewrite.com/test</span><br><span class="line"><span class="number">3</span>.请求跳转后，回去查找本地站点目录下的 /test</span><br><span class="line"><span class="number">4</span>.如果找到了，则返回/code/test/index.html的内容；</span><br><span class="line"><span class="number">5</span>.如果没找到该目录则报错<span class="number">404</span>，如果找到该目录没找到对应的文件则<span class="number">403</span></span><br><span class="line"> </span><br><span class="line"><span class="literal">last</span>请求:</span><br><span class="line"><span class="number">1</span>.请求linux.rewrite.com/last</span><br><span class="line"><span class="number">2</span>.匹配 location <span class="regexp">~ ^/last</span> 会跳转到 linux.rewrite.com/test</span><br><span class="line"><span class="number">3</span>.如果找到了，则返回/code/test/index.html的内容；</span><br><span class="line"><span class="number">4</span>.如果没有找到，会重新对当前server发起请求，这个时候访问地址就变成 linux.rewrite.com/test</span><br><span class="line"><span class="number">5</span>.重新请求server会匹配到 location /test/ 直接返回该location的内容</span><br><span class="line"><span class="number">6</span>.如果也没有location匹配，再返回<span class="number">404</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2、redirect和permanent的区别"><a href="#2、redirect和permanent的区别" class="headerlink" title="2、redirect和permanent的区别"></a>2、redirect和permanent的区别</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">重定向</span><br><span class="line"><span class="attribute">location</span> /redirect &#123;</span><br><span class="line">	<span class="attribute">rewrite</span> (.*) http://www.baidu.com <span class="literal">redirect</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /permanent &#123;</span><br><span class="line">    <span class="attribute">rewrite</span> (.*) http://www.baidu.com <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line">redirect: 每次请求都会询问服务器，如果当服务器不可用时，则会跳转失败。</span><br><span class="line">permanent: 第一次请求会询问，浏览器会记录跳转的地址，第二次则不再询问服务器，直接通过浏览器缓存的地址跳转。</span><br></pre></td></tr></table></figure>

<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><ul>
<li><p>为什么需要使用HTTPS，因为HTTP不安全，当我们使用http网站时，会遭到劫持和篡改，如果采用https协议，那么数据在传输过程中是加密的，所以黑客无法窃取或者篡改数据报文信息，同时也避免网站传输时信息泄露。</p>
</li>
<li><p>那么我们在实现https时，需要了解ssl协议，但我们现在使用的更多的是TLS加密协议。</p>
</li>
<li><p>那么TLS是怎么保证明文消息被加密的呢？在OSI七层模型中，应用层是http协议，那么在应用层协议之下，我们的表示层，是ssl协议所发挥作用的一层，他通过（握手、交换秘钥、告警、加密）等方式，是应用层http协议没有感知的情况下做到了数据的安全加密</p>
</li>
</ul>
<h2 id="模拟网站劫持"><a href="#模拟网站劫持" class="headerlink" title="模拟网站劫持"></a>模拟网站劫持</h2><h3 id="1、正常的页面"><a href="#1、正常的页面" class="headerlink" title="1、正常的页面"></a>1、正常的页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.新建html文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mkdir /opt/code</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cd /opt/code</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim index.html</span></span><br><span class="line"><span class="comment">#复制粘贴下方内容</span></span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;学生信息注册页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;学生信息注册&lt;/h3&gt;</span><br><span class="line">&lt;form  name=<span class="string">&quot;stu&quot;</span>action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;姓名:&lt;/td&gt;&lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>name=<span class="string">&quot;stuName&quot;</span>/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;性别:&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span>name=<span class="string">&quot;stuSex&quot;</span>checked=<span class="string">&quot;checked&quot;</span>&gt;男</span><br><span class="line">          &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span>name=<span class="string">&quot;stuSex&quot;</span>&gt;女</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;&lt;td&gt;出生日期&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>name=<span class="string">&quot;stuBirthday&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;按格式yyyy-mm-dd&lt;/td&gt;</span><br><span class="line">       &lt;/tr&gt;</span><br><span class="line">       &lt;tr&gt;&lt;td&gt;学校:&lt;/td&gt;&lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>name=<span class="string">&quot;stuSchool&quot;</span>&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">       &lt;tr&gt;&lt;td&gt;专业:&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;&lt;select name=<span class="string">&quot;stuSelect2&quot;</span>&gt;</span><br><span class="line">               &lt;option selected&gt;计算机科学与技术&lt;/option&gt;</span><br><span class="line">               &lt;option&gt;网络工程&lt;/option&gt;</span><br><span class="line">               &lt;option&gt;物联网工程&lt;/option&gt;</span><br><span class="line">               &lt;option&gt;应用数学&lt;/option&gt;</span><br><span class="line">               &lt;/select&gt;</span><br><span class="line">               &lt;/td&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;tr&gt;&lt;td&gt;体育特长:&lt;/td&gt;</span><br><span class="line">                   &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                      &lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span>name=<span class="string">&quot;stuCheck&quot;</span> &gt;篮球</span><br><span class="line">                      &lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span>name=<span class="string">&quot;stuCheck&quot;</span> &gt;足球</span><br><span class="line">                      &lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span>name=<span class="string">&quot;stuCheck&quot;</span> &gt;排球</span><br><span class="line">                      &lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span>name=<span class="string">&quot;stuCheck&quot;</span> &gt;游泳</span><br><span class="line">                   &lt;/td&gt; </span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;tr&gt;&lt;td&gt;上传照片:&lt;/td&gt;&lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> &gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">               &lt;tr&gt;&lt;td&gt;密码:&lt;/td&gt;&lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span>name=<span class="string">&quot;stuPwd&quot;</span> &gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">               &lt;tr&gt;&lt;td&gt;个人介绍:&lt;/td&gt;</span><br><span class="line">                   &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;&lt;textarea name=<span class="string">&quot;Letter&quot;</span>rows=<span class="string">&quot;4&quot;</span>cols=<span class="string">&quot;40&quot;</span>&gt;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>value=<span class="string">&quot;提交&quot;</span> &gt;&lt;input <span class="built_in">type</span>=<span class="string">&quot;reset&quot;</span>value=<span class="string">&quot;取消&quot;</span> &gt;&lt;/td&gt;</span><br><span class="line">                 &lt;/tr&gt;</span><br><span class="line">                 &lt;/table&gt;</span><br><span class="line">                 &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.压缩下之前web01的配置，没有可以忽略</span></span><br><span class="line">[root@web01 ~]<span class="comment"># gzip /etc/nginx/conf.d/game.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建新的配置文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/http.conf</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /opt/code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试重载nginx</span></span><br><span class="line">[root@web01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.浏览器访问：http://192.168.15.8/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220111040645557.png" alt="image-20220111040645557"></p>
<h3 id="2、网站劫持"><a href="#2、网站劫持" class="headerlink" title="2、网站劫持"></a>2、网站劫持</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将之前的nginx代理负载均衡配置压缩（没有可忽略该操作）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># gzip /etc/nginx/conf.d/test.conf </span></span><br><span class="line"><span class="comment"># 创建新的nginx配置文件</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># vim /etc/nginx/conf.d/http.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.15.8;</span><br><span class="line">     </span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;title&gt;学生信息注册页面&lt;/title&gt;&#x27;</span> <span class="string">&#x27;&lt;title&gt;澳门首家线上赌场&lt;/title&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;h3 align=&quot;center&quot;&gt;学生信息注册&lt;/h3&gt;&#x27;</span> <span class="string">&#x27;&lt;h3 align=&quot;center&quot;&gt;VIP用户信息注册&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;性别:&lt;/td&gt;&#x27;</span> <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;爱好:&lt;/td&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;option selected&gt;计算机科学与技术&lt;/option&gt;&#x27;</span> <span class="string">&#x27;&lt;option selected&gt;按摩&lt;/option&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;option&gt;网络工程&lt;/option&gt;&#x27;</span> <span class="string">&#x27;&lt;option&gt;抽烟&lt;/option&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;option&gt;物联网工程&lt;/option&gt;&#x27;</span> <span class="string">&#x27;&lt;option&gt;喝酒&lt;/option&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;option&gt;应用数学&lt;/option&gt;&#x27;</span> <span class="string">&#x27;&lt;option&gt;烫头&lt;/option&gt;&#x27;</span>;</span><br><span class="line">        sub_filter <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;上传照片:&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;file&quot; &gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span> <span class="string">&#x27;&lt;img src=&quot;https://blog.driverzeng.com/zenglaoshi/xingganheguan.gif&quot;&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx服务 </span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">浏览器访问：http://192.168.15.5/</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220111044404939.png" alt="image-20220111044404939"></p>
<h2 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h2><ul>
<li>1、浏览器发起往服务器的443端口发起请求，请求携带了浏览器支持的加密算法和哈希算法。 </li>
<li>2、服务器收到请求，选择浏览器支持的加密算法和哈希算法。 </li>
<li>3、服务器下将数字证书返回给浏览器，这里的数字证书可以是向某个可靠机构申请的，也可以是自制的。 </li>
<li>4、浏览器进入数字证书认证环节，这一部分是浏览器内置的TLS完成的：<ul>
<li>4.1 首先浏览器会从内置的证书列表中索引，找到服务器下发证书对应的机构，如果没有找到，此时就会提示用户该证书是不是由权威机构颁发，是不可信任的。如果查到了对应的机构，则取出该机构颁发的公钥。 </li>
<li>4.2 用机构的证书公钥解密得到证书的内容和证书签名，内容包括网站的网址、网站的公钥、证书的有效期等。浏览器会先验证证书签名的合法性（验证过程类似上面Bob和Susan的通信）。签名通过后，浏览器验证证书记录的网址是否和当前网址是一致的，不一致会提示用户。如果网址一致会检查证书有效期，证书过期了也会提示用户。这些都通过认证时，浏览器就可以安全使用证书中的网站公钥了。 </li>
<li>4.3 浏览器生成一个随机数R，并使用网站公钥对R进行加密。</li>
</ul>
</li>
<li>5、浏览器将加密的R传送给服务器。 </li>
<li>6、服务器用自己的私钥解密得到R。 </li>
<li>7、服务器以R为密钥使用了对称加密算法加密网页内容并传输给浏览器。 </li>
<li>8、浏览器以R为密钥使用之前约定好的解密算法获取网页内容。</li>
</ul>
<h2 id="证书对比"><a href="#证书对比" class="headerlink" title="证书对比"></a>证书对比</h2><table>
<thead>
<tr>
<th>对比</th>
<th>域名型 DV</th>
<th>企业型 OV</th>
<th>增强型 EV</th>
</tr>
</thead>
<tbody><tr>
<td>绿色地址栏</td>
<td><img src="https://blog.driverzeng.com/zenglaoshi/02.jpg" alt="img">小锁标记+https</td>
<td><img src="https://blog.driverzeng.com/zenglaoshi/03.jpg" alt="img">小锁标记+https</td>
<td><img src="https://gitee.com/gengff/blogimage/raw/master/images/04.jpg" alt="img">小锁标记+企业名称+https</td>
</tr>
<tr>
<td>一般用途</td>
<td>个人站点和应用； 简单的https加密需求</td>
<td>电子商务站点和应用； 中小型企业站点</td>
<td>大型金融平台； 大型企业和政府机构站点</td>
</tr>
<tr>
<td>审核内容</td>
<td>域名所有权验证</td>
<td>全面的企业身份验证； 域名所有权验证</td>
<td>最高等级的企业身份验证； 域名所有权验证</td>
</tr>
<tr>
<td>颁发时长</td>
<td>10分钟-24小时</td>
<td>3-5个工作日</td>
<td>5-7个工作日</td>
</tr>
<tr>
<td>单次申请年限</td>
<td>1年</td>
<td>1-2年</td>
<td>1-2年</td>
</tr>
<tr>
<td>赔付保障金</td>
<td>——</td>
<td>125-175万美金</td>
<td>150-175万美金</td>
</tr>
</tbody></table>
<h2 id="自签证书"><a href="#自签证书" class="headerlink" title="自签证书"></a>自签证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@web01 nginx]<span class="comment"># mkdir ssl_key</span></span><br><span class="line">[root@web01 nginx]<span class="comment"># cd ssl_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用openssl命令充当CA权威机构创建证书（生产不使用此方式生成证书，不被互联网认可的黑户证书）</span></span><br><span class="line">[root@web01 ssl_key]<span class="comment"># openssl genrsa -idea -out server.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..............+++</span><br><span class="line">..................................+++</span><br><span class="line"></span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> server.key: 123456</span><br><span class="line">Verifying - Enter pass phrase <span class="keyword">for</span> server.key: 123456</span><br><span class="line"> </span><br><span class="line">[root@web01 ssl_key]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 1739 Dec  9 11:27 server.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成自签证书(公钥)，同时去掉私钥的密码</span></span><br><span class="line">[root@web01 ssl_key]<span class="comment"># openssl req -days 36500 -x509 -sha256 -nodes -newkey rsa:2048 -keyout server.key -out server.crt</span></span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">.....................................+++ </span><br><span class="line">............+++</span><br><span class="line">writing new private key to <span class="string">&#x27;server.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:china       </span><br><span class="line">string is too long, it needs to be less than  2 bytes long</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:meiguo</span><br><span class="line">Locality Name (eg, city) [Default City]:riben</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:heishoudang</span><br><span class="line">Organizational Unit Name (eg, section) []:oldboy</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:oldboy</span></span><br><span class="line"><span class="string">Email Address []:123@qq.com</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># req  --&gt; 用于创建新的证书</span></span><br><span class="line"><span class="string"># new  --&gt; 表示创建的是新证书    </span></span><br><span class="line"><span class="string"># x509 --&gt; 表示定义证书的格式为标准格式</span></span><br><span class="line"><span class="string"># key  --&gt; 表示调用的私钥文件信息</span></span><br><span class="line"><span class="string"># out  --&gt; 表示输出证书文件信息</span></span><br><span class="line"><span class="string"># days --&gt; 表示证书的有效期</span></span><br><span class="line"><span class="string"># sha256 --&gt; 加密方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#1.开启证书</span></span><br><span class="line"><span class="string">Syntax: ssl on | off;</span></span><br><span class="line"><span class="string">Default:    ssl off;</span></span><br><span class="line"><span class="string">Context:    http, server</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#2.指定证书文件</span></span><br><span class="line"><span class="string">Syntax: ssl_certificate file;</span></span><br><span class="line"><span class="string">Default:    —</span></span><br><span class="line"><span class="string">Context:    http, server</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#3.指定私钥文件</span></span><br><span class="line"><span class="string">Syntax: ssl_certificate_key file;</span></span><br><span class="line"><span class="string">Default:    —</span></span><br><span class="line"><span class="string">Context:    http, server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#4.修改nginx配置文件(如果负载均衡配置了就不需要下面的配置了)</span></span><br><span class="line"><span class="string">[root@web01 ~]# cat /etc/nginx/conf.d/https.conf </span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 443 ssl;</span></span><br><span class="line"><span class="string">    server_name _;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ssl_certificate /etc/nginx/ssl_key/server.crt;</span></span><br><span class="line"><span class="string">    ssl_certificate_key /etc/nginx/ssl_key/server.key;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        root /opt/code;</span></span><br><span class="line"><span class="string">        index index.html;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#5.重启nignx服务</span></span><br><span class="line"><span class="string">[root@lb01 ~]# systemctl restart nginx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#6.测试</span></span><br><span class="line"><span class="string">浏览器访问：https://192.168.15.8/</span></span><br></pre></td></tr></table></figure>

<h4 id="证书加载到代理"><a href="#证书加载到代理" class="headerlink" title="证书加载到代理"></a>证书加载到代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将web01的ssl配置同步到代理lb01</span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># scp https.conf 192.168.15.5:/etc/nginx/conf.d/https.conf </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># scp /etc/nginx/ssl_key 192.168.15.5:/etc/nginx/conf.d/https.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改lb01的nginx配置文件</span></span><br><span class="line">[root@lb01 conf.d]<span class="comment"># cat /etc/nginx/conf.d/https.conf </span></span><br><span class="line">upstream ssl &#123;</span><br><span class="line">    server 172.16.1.7;</span><br><span class="line">    server 172.16.1.8;</span><br><span class="line">    server 172.16.1.9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl_key/server.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://ssl;</span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    rewrite (.*) https://192.168.15.5 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试重启nignx服务</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">浏览器访问：https://192.168.15.5/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived高可用</title>
    <url>/3cb7076b.html</url>
    <content><![CDATA[<h1 id="keepalived高可用"><a href="#keepalived高可用" class="headerlink" title="keepalived高可用"></a>keepalived高可用</h1><h3 id="什么是高可用"><a href="#什么是高可用" class="headerlink" title="什么是高可用"></a>什么是高可用</h3><ul>
<li>一般是指2台机器启动着完全相同的业务系统，当有一台机器down机了，另外一台服务器就能快速的接管，对于访问的用户是无感知的。<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">比如公司的网络是通过网关进行上网的，那么如果该路由器故障了，网关无法转发报文了，此时所有人都无法上网了，</span><br><span class="line">怎么办？</span><br><span class="line"></span><br><span class="line">通常做法是给路由器增加一台备节点，但是问题是，如果我们的主网关master故障了，用户是需要手动指向backup的，</span><br><span class="line">如果用户过多修改起来会非常麻烦。</span><br><span class="line"></span><br><span class="line">问题一：假设用户将指向都修改为backup路由器，那么master路由器修好了怎么办？</span><br><span class="line">问题二：假设Master网关故障，我们将backup网关配置为master网关的ip是否可以？</span><br><span class="line"> </span><br><span class="line">其实是不行的，因为PC第一次通过ARP广播寻找到Master网关的MAC地址与IP地址后，会将信息写到ARP的缓存表中，</span><br><span class="line">那么PC之后连接都是通过那个缓存表的信息去连接，然后进行数据包的转发，即使我们修改了IP但是Mac地址是唯一的，</span><br><span class="line">pc的数据包依然会发送给master。（除非是PC的ARP缓存表过期，再次发起ARP广播的时候才能获取新的backup对应</span><br><span class="line">的Mac地址与IP地址）</span><br><span class="line"></span><br><span class="line">如何才能做到出现故障自动转移，我们往下看</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="高可用常用的工具"><a href="#高可用常用的工具" class="headerlink" title="高可用常用的工具"></a>高可用常用的工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.硬件通常使用 F5</span><br><span class="line">2.软件通常使用 keepalived</span><br></pre></td></tr></table></figure>

<p>keepalived是如何实现的？</p>
<h3 id="VRRP协议"><a href="#VRRP协议" class="headerlink" title="VRRP协议"></a>VRRP协议</h3><ul>
<li>VRRP协议会在一个局域网中进行广播</li>
<li>keepalived软件是基于VRRP协议实现的，VRRP是虚拟路由冗余协议，主要用于解决单点故障问题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如何才能做到出现故障自动转移，此时VRRP就出现了，我们的VRRP其实是通过软件或者硬件的形式在Master和</span><br><span class="line">Backup外面增加一个虚拟的MAC地址（VMAC）与虚拟IP地址（VIP），那么在这种情况下，PC请求VIP的时候，</span><br><span class="line">无论是Master处理还是Backup处理，PC仅会在ARP缓存表中记录VMAC与VIP的信息。</span><br></pre></td></tr></table></figure>

<h3 id="高可用keepalived的核心概念"><a href="#高可用keepalived的核心概念" class="headerlink" title="高可用keepalived的核心概念"></a>高可用keepalived的核心概念</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、如何确定谁是主节点谁是备节点（选举投票，优先级）</span><br><span class="line">2、如果Master故障，Backup自动接管，那么Master恢复后会夺权吗（抢占试、非抢占式）</span><br><span class="line">3、如果两台服务器都认为自己是Master会出现什么问题（脑裂）</span><br></pre></td></tr></table></figure>

<h1 id="部署keepalived"><a href="#部署keepalived" class="headerlink" title="部署keepalived"></a>部署keepalived</h1><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
<th align="left">身份</th>
</tr>
</thead>
<tbody><tr>
<td align="left">lb01</td>
<td align="left">192.168.15.5</td>
<td align="left">master</td>
</tr>
<tr>
<td align="left">lb02</td>
<td align="left">192.168.15.6</td>
<td align="left">backup</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">192.168.15.3</td>
<td align="left">VIP</td>
</tr>
</tbody></table>
<h3 id="2、保证lb01和lb02配置完全一致"><a href="#2、保证lb01和lb02配置完全一致" class="headerlink" title="2、保证lb01和lb02配置完全一致"></a>2、保证lb01和lb02配置完全一致</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb02 conf.d]<span class="comment"># scp -r /etc/nginx/ssl_key 172.16.1.5:/etc/nginx/</span></span><br><span class="line">[root@lb02 conf.d]<span class="comment"># scp ./* 172.16.1.5:/etc/nginx/conf.d/</span></span><br></pre></td></tr></table></figure>

<h3 id="3、安装Keepalived"><a href="#3、安装Keepalived" class="headerlink" title="3、安装Keepalived"></a>3、安装Keepalived</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# yum install keepalived -y</span><br><span class="line">[root@lb02 conf.d]# yum install keepalived -y</span><br></pre></td></tr></table></figure>

<h3 id="4、Keepalived配置"><a href="#4、Keepalived配置" class="headerlink" title="4、Keepalived配置"></a>4、Keepalived配置</h3><h4 id="主"><a href="#主" class="headerlink" title="主"></a>主</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 身份验证，当前keepalived的唯一标识</span></span><br><span class="line">   router_id lb01</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测脚本:每5秒执行一次脚本，脚本执行完成时间不能超过5秒，否则会重新执行脚本，死循环</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">	<span class="comment"># 指定脚本路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/checkNG.sh&quot;</span></span><br><span class="line">    <span class="comment"># 执行间隔</span></span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置VRRP协议</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 状态，只有MASTER和BACKUP，MASTER是主，BACKUP是备</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment"># 绑定网卡</span></span><br><span class="line">    interface eth0</span><br><span class="line">    <span class="comment"># 虚拟路由标示，可以理解为分组id，把master和backup判断为一组</span></span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    <span class="comment"># 优先级（真正判断是主是从的条件）（值越大优先级越高）</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment"># 监测心跳间隔时间（单位是秒）</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 配置认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="comment"># 认证类型</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        <span class="comment"># 认证的密码</span></span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment"># 虚拟的VIP地址</span></span><br><span class="line">        192.168.15.3</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 调用检查</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl enable --now keepalived</span></span><br></pre></td></tr></table></figure>

<h4 id="备"><a href="#备" class="headerlink" title="备"></a>备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 身份验证，当前keepalived的唯一标识</span></span><br><span class="line">   router_id lb02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测脚本</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">	<span class="comment"># 指定脚本路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/checkNG.sh&quot;</span></span><br><span class="line">    <span class="comment"># 执行间隔</span></span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置VRRP协议</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 状态，只有MASTER和BACKUP，MASTER是主，BACKUP是备</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment"># 绑定网卡，主备必须一致</span></span><br><span class="line">    interface eth0</span><br><span class="line">    <span class="comment"># 虚拟路由标示，可以理解为分组id，把master和backup判断为一组</span></span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    <span class="comment"># 优先级（真正判断是主是从的条件）（值越大优先级越高）</span></span><br><span class="line">    priority 80</span><br><span class="line">    <span class="comment"># 监测心跳间隔时间（单位是秒）</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 配置认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="comment"># 认证类型</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        <span class="comment"># 认证的密码</span></span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment"># 虚拟的VIP地址</span></span><br><span class="line">        192.168.15.3</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 调用检查</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">[root@lb02 ~]<span class="comment"># systemctl enable --now keepalived</span></span><br></pre></td></tr></table></figure>

<h1 id="高可用keepalived的脑裂"><a href="#高可用keepalived的脑裂" class="headerlink" title="高可用keepalived的脑裂"></a>高可用keepalived的脑裂</h1><ul>
<li>两台高可用服务器在指定时间内，无法互相检查到对方的心跳而各自启动故障转移功能。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、如果Nginx宕机怎么办？</span><br><span class="line">想办法告诉keepalived，Nginx的情况。</span><br><span class="line"></span><br><span class="line">2、局域网之内，keepalived无法相互广播，怎么办？</span><br><span class="line">判断VIP是否可以ping的通</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$?  : 上一条命令执行的结果。</span><br></pre></td></tr></table></figure>

<p>1、Nginx故障切换脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># cat checkNG.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决Nginx无法正常启动</span></span><br><span class="line">ps -ef | grep -q [n]ginx </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">	<span class="comment"># 代表Nginx未正常启动</span></span><br><span class="line">	systemctl start nginx &amp;&gt;/dev/null</span><br><span class="line">	sleep 2</span><br><span class="line">	ps -ef | grep -q [n]ginx</span><br><span class="line">	<span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">		systemctl stop keepalived </span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局域网之内，keepalived无法相互广播，怎么办？</span></span><br><span class="line"><span class="comment"># VIP=192.168.15.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ping -c 1 $VIP &amp;&gt;/dev/null </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if [ $? -eq 0 ];then</span></span><br><span class="line">	<span class="comment"># 代表VIP还可以访问</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; : 正确的标准输出和错误的标准输出</span></span><br></pre></td></tr></table></figure>

<p>2、测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭lb01的nginx</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl stop nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lb01的nginx启动状态可以发现已经自启动了</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl status nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改lb01的nginx配置造成故障</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启lb01的nginx发现无法启动</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl stop nginx</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后再查看lb01的keepalived的启动状态发现也关掉了</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl status keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后再浏览器访问192.168.15.3发现并不影响我们页面的正常访问，做到了真正的高可用</span></span><br></pre></td></tr></table></figure>

<p>3、抢占式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看主节点lb01的ip（窗口1）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ip addr</span></span><br><span class="line">inet 192.168.15.3/32 scope global eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环执行，可以发现正常访问（窗口2）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># while ture; do curl -I 192.168.15.3; done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭主节点lb01的keepalived（窗口1）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl stop keepalived</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看备节点lb02的ip发现跳转到lb02这边来了</span></span><br><span class="line">[root@lb02 ~]<span class="comment"># ip addr</span></span><br><span class="line">inet 192.168.15.3/32 scope global eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次启动主节点lb01的keepalived（窗口2）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl start keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看主节点lb01的ip（窗口1）</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ip addr</span></span><br><span class="line">inet 192.168.15.3/32 scope global eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看备节点lb02的ip已经没有了192.168.15.3/32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次启动主节点lb01的keepalived，我们可以发现lb01（窗口2）访问出现了卡顿现象</span></span><br><span class="line"><span class="comment"># 这是由于keepalived在切换ip的时候极其的不稳定会导致用户访问页面时出现报错极大影响客户的体验，</span></span><br><span class="line"><span class="comment"># 这就用到了非抢占式</span></span><br></pre></td></tr></table></figure>

<h1 id="keepalived的非抢占式"><a href="#keepalived的非抢占式" class="headerlink" title="keepalived的非抢占式"></a>keepalived的非抢占式</h1><ul>
<li>实现非抢占式，避免keepalived在切换IP的时候出现问题，我们一般配置的都是非抢占式的，因为宕机这种行为一次就够了<ul>
<li>1、状态全部都设置成backup</li>
<li>2、增加 nopreempt </li>
</ul>
</li>
</ul>
<h2 id="主-1"><a href="#主-1" class="headerlink" title="主"></a>主</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># cat /etc/keepalived/keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id lb01</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测脚本</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    <span class="comment"># 指定脚本路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/checkNG.sh&quot;</span></span><br><span class="line">    <span class="comment"># 执行间隔</span></span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置VRRP协议</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#状态，MASTER和BACKUP</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment"># 开启非抢占式</span></span><br><span class="line">    nopreempt</span><br><span class="line">    <span class="comment">#绑定网卡</span></span><br><span class="line">    interface eth0</span><br><span class="line">    <span class="comment">#虚拟路由标示，可以理解为分组</span></span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    <span class="comment">#优先级</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment">#监测心跳间隔时间</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#配置认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="comment">#认证类型</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        <span class="comment">#认证的密码</span></span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#设置VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment">#虚拟的VIP地址</span></span><br><span class="line">        192.168.15.3</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 调用检查</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="备-1"><a href="#备-1" class="headerlink" title="备"></a>备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]<span class="comment"># cat /etc/keepalived/keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id lb02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测脚本</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    <span class="comment"># 指定脚本路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/checkNG.sh&quot;</span></span><br><span class="line">    <span class="comment"># 执行间隔</span></span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置VRRP协议</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#状态，MASTER和BACKUP</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment"># 开启非抢占式</span></span><br><span class="line">    nopreempt</span><br><span class="line">    <span class="comment">#绑定网卡</span></span><br><span class="line">    interface eth0</span><br><span class="line">    <span class="comment">#虚拟路由标示，可以理解为分组</span></span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    <span class="comment">#优先级</span></span><br><span class="line">    priority 80</span><br><span class="line">    <span class="comment">#监测心跳间隔时间</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#配置认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="comment">#认证类型</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        <span class="comment">#认证的密码</span></span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#设置VIP</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment">#虚拟的VIP地址</span></span><br><span class="line">        192.168.15.3</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 调用检查</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx代理</title>
    <url>/5a8f3b66.html</url>
    <content><![CDATA[<h1 id="Nginx代理"><a href="#Nginx代理" class="headerlink" title="Nginx代理"></a>Nginx代理</h1><p>代理一词往往并不陌生。可以理解为中介，比如在生活中我们处理法律问题、房产交易都会请专业人士代为处理。从网络角度讲，就是为事务参与双方提供连接通道的第三方网络服务器。在没有代理的模式的情况下，都是客户端直接请求的服务端，在实际的情况下，为了安全，客户端往往无法直接向服务端发起请求，就需要用到代理服务，来实现通信。</p>
<ul>
<li><p>nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器。同时也是一个IMAP、POP3、SMTP代理服务器。nginx可以作为一个HTTP服务器进行网站的发布处理，同时nginx可以作为反向代理进行负载均衡的实现。</p>
<span id="more"></span>
<h2 id="代理的模式"><a href="#代理的模式" class="headerlink" title="代理的模式"></a>代理的模式</h2></li>
<li><h3 id="1、正向代理（VPN）"><a href="#1、正向代理（VPN）" class="headerlink" title="1、正向代理（VPN）"></a>1、正向代理（VPN）</h3><p>找完代理之后，还需要找服务器</p>
<p>用于内部上网，<strong>客户端 &lt;—-&gt; 代理 —-&gt; 服务端</strong></p>
<ul>
<li>正向代理是指对客户端提供的代理服务，在客户端无法直接访问原始服务器的情况下，通过配置代理服务器的方式，客户端向代理服务器发送一个请求并指定目标原始服务器，然后代理服务器向原始服务器转交请求并将获得的内容返回给客户端。</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/bdd57.png" alt="bdd57"></p>
<ul>
<li><h4 id="2、反向代理（负载均衡）"><a href="#2、反向代理（负载均衡）" class="headerlink" title="2、反向代理（负载均衡）"></a>2、反向代理（负载均衡）</h4><p>只需要找代理，不需要服务器。</p>
<p>用于公司的集群架构中，<strong>客户端 —-&gt; 代理 &lt;—-&gt; 服务端</strong></p>
<ul>
<li>反向代理是指对服务端提供的代理服务，反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端。</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/3099a7.png" alt="3099a7"></p>
<p>区别:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正向代理代理客户端，服务端认为请求来自代理服务器；反向代理代理服务端，客户端认为提供服务的是代理服务器。</span><br><span class="line">正向代理通常由客户端架设，与客户端同处一个局域网；反向代理由服务端架设，与服务端同处一个局域网。</span><br><span class="line">正向代理通常解决访问限制的问题，反向代理通常解决对外服务和负载均衡的问题。</span><br></pre></td></tr></table></figure>



<h2 id="Nginx代理服务支持的协议"><a href="#Nginx代理服务支持的协议" class="headerlink" title="Nginx代理服务支持的协议"></a>Nginx代理服务支持的协议</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ngx_http_uwsgi_module		: Python</span><br><span class="line">ngx_http_fastcgi_module		: PHP </span><br><span class="line">ngx_http_scgi_module		: Java</span><br><span class="line">ngx_http_v2_module			: Golang</span><br><span class="line">ngx_http_proxy_module		: HTTP</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">反向代理模式</th>
<th align="left">Nginx配置模块</th>
</tr>
</thead>
<tbody><tr>
<td align="left">uwsgi（Python）</td>
<td align="left">ngx_http_uwsgi_module</td>
</tr>
<tr>
<td align="left">fastcgi（PHP）</td>
<td align="left">ngx_http_fastcgi_module</td>
</tr>
<tr>
<td align="left">grpc（Golang）</td>
<td align="left">ngx_http_v2_module</td>
</tr>
<tr>
<td align="left">scgi（Java）</td>
<td align="left">ngx_http_scgi_module</td>
</tr>
<tr>
<td align="left">proxy（http，https，websocket）</td>
<td align="left">ngx_http_proxy_module</td>
</tr>
</tbody></table>
<h2 id="Nginx反向代理实践"><a href="#Nginx反向代理实践" class="headerlink" title="Nginx反向代理实践"></a>Nginx反向代理实践</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lb01  ---&gt;  web01</span><br><span class="line">lb01：192.168.15.5</span><br><span class="line">web01:192.168.15.8</span><br><span class="line">以超级玛丽小游戏为例</span><br></pre></td></tr></table></figure>

<h3 id="1、部署web01"><a href="#1、部署web01" class="headerlink" title="1、部署web01"></a>1、部署web01</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment">#  vim /etc/nginx/conf.d/ game5.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.8</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/Super_Marie;</span><br><span class="line">	<span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /images</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、部署lb01"><a href="#2、部署lb01" class="headerlink" title="2、部署lb01"></a>2、部署lb01</h3><ul>
<li>编译安装nginx</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Nginx源代码包</span></span><br><span class="line"></span><br><span class="line">[root@lb01 ~]<span class="comment"># wget https://nginx.org/download/nginx-1.20.2.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># tar -xf nginx-1.20.2.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源代码目录</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># cd nginx-1.20.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">[root@lb01 nginx-1.20.2]<span class="comment"># yum install openssl openssl-devel zlib zlib-devel -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译参数</span></span><br><span class="line">[root@lb01 nginx-1.20.2]<span class="comment"># ./configure  --with-http_gzip_static_module  --with-stream  --with-http_ssl_module  --with-http_sub_module</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">[root@lb01 nginx-1.20.2]<span class="comment"># make </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">[root@lb01 nginx-1.20.2]<span class="comment"># make install </span></span><br></pre></td></tr></table></figure>

<ul>
<li>nginx编译安装优化</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换至安装路径</span></span><br><span class="line">[root@<span class="attribute">lb01</span> nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span>]<span class="comment"># cd /usr/local/nginx/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/etc/nginx目录</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># mkdir /etc/nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动nginx配置文件至/etc/nginx/</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># mv /usr/local/nginx/conf/* /etc/nginx/</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/etc/nginx/conf.d</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># mkdir /etc/nginx/conf.d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空配置文件内容</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># &gt;nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下方内容复制粘贴进去</span></span><br><span class="line">user  www;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span> json <span class="string">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;service&quot;:&quot;nginxTest&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;trace&quot;:&quot;$upstream_http_ctx_transaction_id&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;log&quot;:&quot;log&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;remote_user&quot;:&quot;$remote_user&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;request&quot;:&quot;$request&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log json;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ：wq! 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">[root@<span class="attribute">lb01</span> nginx]<span class="comment"># groupadd www -g 666</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># useradd www -u 666 -g 666 -M -r -s /sbin/nologin</span></span><br><span class="line"></span><br><span class="line">[root@lb01 nginx]<span class="comment"># vim /usr/lib/systemd/system/nginx.service</span></span><br><span class="line"><span class="comment"># 下方内容复制粘贴进去</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx - high performance web server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class="line">ExecReload=/bin/sh -c <span class="string">&quot;/bin/kill -s HUP $(/bin/cat /var/run/nginx.pid)&quot;</span></span><br><span class="line">ExecStop=/bin/sh -c <span class="string">&quot;/bin/kill -s TERM $(/bin/cat /var/run/nginx.pid)&quot;</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续优化</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># cd /usr/local/nginx/sbin/</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># mv /usr/local/nginx/sbin/nginx /usr/sbin/</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># mkdir /var/log/nginx</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># systemctl start nginx </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出无法正常显示</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># nginx -t</span></span><br><span class="line"> nginx: [emerg] open() <span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span> failed (<span class="number">2</span>: No such file or directory)</span><br><span class="line"> nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样可以正常显示，但是比较麻烦</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># nginx -t -c /etc/nginx/nginx.conf    </span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立软链接进行优化</span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># ln -s /etc/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 可以正常显示    </span></span><br><span class="line">[root@lb01 sbin]<span class="comment"># nginx -t</span></span><br><span class="line"> nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line"> nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>部署反向代理<ul>
<li>proxy_pass：设置代理服务器的地址，可以是主机名称、IP地址加端口号等形式。</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]<span class="comment"># cat /etc/nginx/conf.d/game.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.15.8:80;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查配置文件</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># nginx -t</span></span><br><span class="line"> nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line"> nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment">#重载配置文件</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># nginx -s reload		</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"> 浏览器访问：192.168.15.5</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20220107173331323.png" alt="image-20220107173331323"></p>
<h2 id="Nginx代理常用参数"><a href="#Nginx代理常用参数" class="headerlink" title="Nginx代理常用参数"></a>Nginx代理常用参数</h2><h4 id="1、添加请求头信息发往后端服务器"><a href="#1、添加请求头信息发往后端服务器" class="headerlink" title="1、添加请求头信息发往后端服务器"></a>1、添加请求头信息发往后端服务器</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:    <span class="attribute">proxy_set_header</span> field value;   <span class="comment">#将value的值赋值给field字段</span></span><br><span class="line">Default:    <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection close;</span><br><span class="line">Context:    http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">示例配置：在lb01配置 /etc/nginx/conf.d/game.conf</span><br><span class="line"><span class="comment"># 传递域名给后端服务器，不设置此项，默认传递ip给后端服务器。</span></span><br><span class="line"><span class="comment"># 用户请求的时候HOST的值是linux.proxy.com, 那么代理服务会像后端传递请求的还是linux.proxy.com</span></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一层代理的IP地址。多层代理会覆盖，只显示最后一层代理IP地址。</span></span><br><span class="line"><span class="comment"># 将$remote_addr的值放进变量X-Real-IP中，$remote_addr的值为客户端的ip</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端通过代理服务访问后端服务, 后端服务通过该变量会记录真实客户端地址。多层代理会追加。</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"><span class="comment"># 在web01监控下nginx日志</span></span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># tail -f /var/log/nginx/access.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问代理服务器地址</span></span><br><span class="line"><span class="number">192.168.15.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志变化</span></span><br></pre></td></tr></table></figure>

<h4 id="2、代理到后端的TCP连接、响应、返回等超时时间"><a href="#2、代理到后端的TCP连接、响应、返回等超时时间" class="headerlink" title="2、代理到后端的TCP连接、响应、返回等超时时间"></a>2、代理到后端的TCP连接、响应、返回等超时时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx代理服务器与后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">Syntax: proxy_connect_timeout time;</span><br><span class="line">Default: proxy_connect_timeout 60s;</span><br><span class="line">Context: http, server, location</span><br><span class="line"> </span><br><span class="line"><span class="comment">#nginx代理服务器等待后端服务器响应的超时时间</span></span><br><span class="line">Syntax:    proxy_read_timeout time;</span><br><span class="line">Default:    proxy_read_timeout 60s;</span><br><span class="line">Context:    http, server, location</span><br><span class="line"> </span><br><span class="line"><span class="comment">#后端服务器数据回传给nginx代理服务器超时时间</span></span><br><span class="line">Syntax: proxy_send_timeout time;</span><br><span class="line">Default: proxy_send_timeout 60s;</span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置示例：</span></span><br><span class="line">proxy_connect_timeout 1s;</span><br><span class="line">proxy_read_timeout 3s;</span><br><span class="line">proxy_send_timeout 3s;</span><br></pre></td></tr></table></figure>

<h4 id="3、proxy-buffer代理缓冲区"><a href="#3、proxy-buffer代理缓冲区" class="headerlink" title="3、proxy_buffer代理缓冲区"></a>3、proxy_buffer代理缓冲区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启内容缓冲，nignx会把后端返回的内容先放到缓冲区当中，</span></span><br><span class="line"><span class="comment">#然后再返回给客户端，边收边传, 不是全部接收完再传给客户端</span></span><br><span class="line">Syntax: proxy_buffering on | off;</span><br><span class="line">Default: proxy_buffering on;</span><br><span class="line">Context: http, server, location</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置nginx代理保存用户头信息的缓冲区大小，</span></span><br><span class="line"><span class="comment">#这个参数并不受proxy_buffering开启或关闭的影响，它始终都是生效的。</span></span><br><span class="line">Syntax: proxy_buffer_size size;</span><br><span class="line">Default: proxy_buffer_size 4k|8k;</span><br><span class="line">Context: http, server, location</span><br><span class="line"> </span><br><span class="line"><span class="comment">#响应缓冲区的个数和大小，响应内容先写入缓冲区，写满或者写完，立即发送给客户端。</span></span><br><span class="line"><span class="comment">#这里设置的缓冲区大小是针对每个请求连接而言的。</span></span><br><span class="line">Syntax: proxy_buffers number size;</span><br><span class="line">Default: proxy_buffers 8 4k|8k;</span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置示例</span></span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 64k;</span><br><span class="line">proxy_busy_buffers_size 96k;</span><br></pre></td></tr></table></figure>

<h4 id="4、配置代理优化文件"><a href="#4、配置代理优化文件" class="headerlink" title="4、配置代理优化文件"></a>4、配置代理优化文件</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1.创建代理优化文件</span><br><span class="line">[root@<span class="attribute">lb01</span> sbin]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># vim proxy_params</span></span><br><span class="line"><span class="comment">#将下方内容复制粘贴进去即可</span></span><br><span class="line">proxy_set_header Host $http_host;  <span class="comment">#传递ip给被代理(后端)服务器</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">10s</span>;  <span class="comment">#nginx服务器与被代理(后端)服务器建立连接的超时时间(默认60秒)</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">10s</span>;     <span class="comment">#连接成功后，被代理(后端)服务器响应时间(代理接收超时)</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">10s</span>;     <span class="comment">#被代理(后端)服务器数据回传时间(代理发送超时)</span></span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;         <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">8k</span>;       <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">8</span> <span class="number">8k</span>;         <span class="comment">#缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方可以选择性配置</span></span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">8k</span>;   <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line"><span class="attribute">client_max_body_size</span>       <span class="number">8k</span>;   <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line"><span class="attribute">client_body_buffer_size</span>    <span class="number">8k</span>;   <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.添加配置</span><br><span class="line">[root@<span class="attribute">lb01</span> ~]<span class="comment"># cat /etc/nginx/game.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://172.16.1.7:80;</span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/proxy_params;  <span class="comment">#只需要添加代理优化文件路径即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.重载nginx即可</span><br><span class="line">[root@<span class="attribute">lb01</span> nginx]<span class="comment"># nginx -t</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.测试（该小游戏无法测试到超时，后面可以用python项目测试）</span><br><span class="line"><span class="comment"># 在web01监控下nginx的日志</span></span><br><span class="line">[root@web01 ~]<span class="comment"># tail -f /var/log/nginx/access.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问代理服务器地址</span></span><br><span class="line"><span class="number">192.168.15.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在web01查看日志可以发现&quot;xff&quot;:&quot;192.168.15.1&quot;记录到了真实的IP地址，说明设置生效了</span></span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2022-01-07T19:51:00+08:00&quot;,</span><br><span class="line"> &quot;host&quot;:&quot;192.168.15.8&quot;,&quot;service&quot;:&quot;nginxTest&quot;,&quot;trace&quot;:&quot;-&quot;,&quot;log&quot;:&quot;log&quot;,</span><br><span class="line"> &quot;clientip&quot;:&quot;192.168.15.5&quot;,&quot;remote_user&quot;:&quot;-&quot;,&quot;request&quot;:&quot;<span class="attribute">GET</span> /sounds/stomp.mp3 HTTP/<span class="number">1</span>.<span class="number">0</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">  &quot;</span>http_user_agent<span class="string">&quot;:&quot;</span>Mozilla/<span class="number">5</span>.<span class="number">0</span> (Macintosh; <span class="attribute">Intel</span> Mac OS X 10_15_7) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Chrome/<span class="number">96</span>.<span class="number">0</span>.<span class="number">4664</span>.<span class="number">110</span> Safari/<span class="number">537</span>.<span class="number">36</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">  &quot;</span>size<span class="string">&quot;:555,&quot;</span>responsetime<span class="string">&quot;:0.000,&quot;</span>upstreamtime<span class="string">&quot;:&quot;</span>-<span class="string">&quot;,&quot;</span>upstreamhost<span class="string">&quot;:&quot;</span>-<span class="string">&quot;,</span></span><br><span class="line"><span class="string">  &quot;</span>http_host<span class="string">&quot;:&quot;</span><span class="number">192.168.15.5</span><span class="string">&quot;,&quot;</span>url<span class="string">&quot;:&quot;</span>/sounds/stomp.mp3<span class="string">&quot;,&quot;</span>domain<span class="string">&quot;:&quot;</span><span class="number">192.168.15.5</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">   &quot;</span>xff<span class="string">&quot;:&quot;</span><span class="number">192.168.15.1</span><span class="string">&quot;,&quot;</span>referer<span class="string">&quot;:&quot;</span>http://192.168.15.5/&quot;,&quot;status&quot;:&quot;404&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><ul>
<li><p>上面我们介绍了 Nginx 一个很重要的功能——代理，包括正向代理和反向代理。这两个代理的核心区别是：正向代理代理的是客户端，而反向代理代理的是服务器。其中我们又重点介绍了反向代理，以及如何通过 Nginx 来实现反向代理。那么了解了Nginx的反向代理之后，我们要通过Nginx的反向代理实现另一个重要功能——负载均衡。</p>
<p>为什么要用负载均衡？</p>
</li>
<li><p>负载均衡是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案。</p>
</li>
</ul>
<h2 id="负载均衡的架构"><a href="#负载均衡的架构" class="headerlink" title="负载均衡的架构"></a>负载均衡的架构</h2><p>通过代理将流量按照一定的比例，转发到后端。</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/fuzaijunheng.png" alt="fuzaijunheng"></p>
<h2 id="负载均衡的实现"><a href="#负载均衡的实现" class="headerlink" title="负载均衡的实现"></a>负载均衡的实现</h2><h3 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将后端服务打包成一个IP连接池。</span><br><span class="line"></span><br><span class="line">1、反向代理</span><br><span class="line">server &#123;</span><br><span class="line">   	listen 80;</span><br><span class="line">   	server_name _;</span><br><span class="line">   	location / &#123;</span><br><span class="line">        proxy_pass http://[连接池];</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2、IP连接池</span><br><span class="line">upstream [连接池名称] &#123;</span><br><span class="line">    server [ip]:[port];</span><br><span class="line">    server [ip]:[port];</span><br><span class="line">    server [ip]:[port];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、配置</span><br><span class="line">[root@lb01 conf.d]<span class="comment"># cat test.conf </span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">    server 172.16.1.9:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://supermarie;  <span class="comment">#反向代理IP连接池</span></span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2、负载均衡的比例"><a href="#2、负载均衡的比例" class="headerlink" title="2、负载均衡的比例"></a>2、负载均衡的比例</h3><h4 id="2-1、轮询"><a href="#2-1、轮询" class="headerlink" title="2.1、轮询"></a>2.1、轮询</h4><ul>
<li>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<ul>
<li>客户端发送一条请求，第一条请求转发给了web1服务器处理，下一条请求则会转发给web2 ，如果再有一条请求来，则发给web3，还有一条请求来则又给web1，最后的结果则是web1、web2、web3、web1实现了轮询访问</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，Nginx负载均衡的轮询状态。</span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">    server 172.16.1.9:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2、权重"><a href="#2-2、权重" class="headerlink" title="2.2、权重"></a>2.2、权重</h4><ul>
<li> Nginx中的weight权重，默认为1，weight越大，负载的权重就越大，表示访问几率越大，用于后端服务器性能不均的情况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权重0-100，数字越大，权重越高，流量也就最多。</span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80 weight=9;</span><br><span class="line">    server 172.16.1.8:80 weight=5;</span><br><span class="line">    server 172.16.1.9:80 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3、ip-hash"><a href="#2-3、ip-hash" class="headerlink" title="2.3、ip_hash"></a>2.3、ip_hash</h4><ul>
<li>nginx提供的ip_hash策略。既能满足每个用户请求到同一台服务器，又能满足不同用户之间负载均衡。<ul>
<li>通过客户端请求ip进行hash，再通过hash值选择后端server（每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每一个IP固定访问某一个后端。</span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">    server 172.16.1.9:80;</span><br><span class="line">    ip_hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、负载均衡后端状态"><a href="#3、负载均衡后端状态" class="headerlink" title="3、负载均衡后端状态"></a>3、负载均衡后端状态</h3><table>
<thead>
<tr>
<th><strong>状态</strong></th>
<th><strong>概述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>down</td>
<td>表示当前的Web Server暂时不参与负载均衡</td>
</tr>
<tr>
<td>backup</td>
<td>预留的备份服务器</td>
</tr>
<tr>
<td>max_fails</td>
<td>允许请求失败的次数</td>
</tr>
<tr>
<td>fail_timeout</td>
<td>经过max_fails失败后， 服务暂停时间</td>
</tr>
</tbody></table>
<h4 id="3-1、down"><a href="#3-1、down" class="headerlink" title="3.1、down"></a>3.1、down</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂时不分配流量</span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80 down;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">    server 172.16.1.9:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://supermarie;</span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2、backup"><a href="#3-2、backup" class="headerlink" title="3.2、backup"></a>3.2、backup</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只有当所有的机器全部宕机，才能启动。</span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80 backup;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">    server 172.16.1.9:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://supermarie;</span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3、max-fails、fail-timeout"><a href="#3-3、max-fails、fail-timeout" class="headerlink" title="3.3、max_fails、fail_timeout"></a>3.3、max_fails、fail_timeout</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server IP:端口 max_fails=3 fail_timeout=3s</span><br><span class="line"><span class="comment"># 允许请求失败3次，失败后服务暂停3秒。max_fails 和 fail_timeout 两个必须一起使用。</span></span><br><span class="line"><span class="comment"># proxy_next_upstream 后端错误标识</span></span><br><span class="line"></span><br><span class="line">[root@lb01 ~]<span class="comment"># cat /etc/nginx/conf.d/game.conf </span></span><br><span class="line">upstream supermarie &#123;</span><br><span class="line">    server 172.16.1.7:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">    server 172.16.1.8:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">    server 172.16.1.9:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://supermarie;</span><br><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_404; </span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">注意：proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; </span><br><span class="line"></span><br><span class="line">error             <span class="comment"># 与服务器建立连接，向其传递请求或读取响应头时发生错误;</span></span><br><span class="line">timeout           <span class="comment"># 在与服务器建立连接，向其传递请求或读取响应头时发生超时;</span></span><br><span class="line">invalid_header    <span class="comment"># 服务器返回空的或无效的响应;</span></span><br><span class="line">http_500          <span class="comment"># 服务器返回代码为500的响应;</span></span><br><span class="line">http_502          <span class="comment"># 服务器返回代码为502的响应;</span></span><br><span class="line">http_503          <span class="comment"># 服务器返回代码为503的响应;</span></span><br><span class="line">http_504          <span class="comment"># 服务器返回代码504的响应;</span></span><br><span class="line">http_403          <span class="comment"># 服务器返回代码为403的响应;</span></span><br><span class="line">http_404          <span class="comment"># 服务器返回代码为404的响应;</span></span><br><span class="line">http_429          <span class="comment"># 服务器返回代码为429的响应（1.11.13）;</span></span><br><span class="line">non_idempotent    <span class="comment"># 通常，请求与 非幂等 方法（POST，LOCK，PATCH）不传递到请求是否已被发送到上游服务器（1.9.13）的下一个服务器; 启用此选项显式允许重试此类请求;</span></span><br><span class="line">off               <span class="comment"># 禁用将请求传递给下一个服务器。</span></span><br></pre></td></tr></table></figure>

<h2 id="负载均衡部署BBS"><a href="#负载均衡部署BBS" class="headerlink" title="负载均衡部署BBS"></a>负载均衡部署BBS</h2><h3 id="1、部署后端服务"><a href="#1、部署后端服务" class="headerlink" title="1、部署后端服务"></a>1、部署后端服务</h3><h4 id="1、部署Python"><a href="#1、部署Python" class="headerlink" title="1、部署Python"></a>1、部署Python</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、创建用户</span><br><span class="line">[root@web01 opt]<span class="comment"># groupadd django -g 888</span></span><br><span class="line">[root@web01 opt]<span class="comment"># useradd django -u 888 -g 888 -r -M -s /bin/sh</span></span><br><span class="line"></span><br><span class="line">2、安装依赖软件</span><br><span class="line">[root@web01 opt]<span class="comment"># yum install python3 libxml* python-devel gcc* pcre-devel openssl-devel python3-devel -y</span></span><br></pre></td></tr></table></figure>

<h4 id="2、部署Django和uwsgi"><a href="#2、部署Django和uwsgi" class="headerlink" title="2、部署Django和uwsgi"></a>2、部署Django和uwsgi</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3、安装Django和uwsgi</span><br><span class="line">[root@web01 opt]<span class="comment"># pip3 install django==1.11</span></span><br><span class="line">[root@web01 opt]<span class="comment"># pip3 install uwsgi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据需求安装相应缺少模块</span></span><br><span class="line">[root@web01 opt]<span class="comment"># pip3 install pymysql</span></span><br><span class="line"></span><br><span class="line">4、创建项目</span><br><span class="line">[root@web01 opt]<span class="comment"># unzip bbs.zip </span></span><br><span class="line">[root@web03 bbs]<span class="comment"># pwd</span></span><br><span class="line">/opt/bbs</span><br><span class="line">[root@web03 bbs]<span class="comment"># vim bbs/settings.py </span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>] </span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;bbs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;172.16.1.61&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: 3306,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动测试</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># python3 manage.py runserver 0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>

<h4 id="3、配置并启动"><a href="#3、配置并启动" class="headerlink" title="3、配置并启动"></a>3、配置并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5、编辑项目配置文件</span><br><span class="line">[root@web01 ~]<span class="comment"># cat /opt/bbs/myweb_uwsgi.ini </span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">socket = :8000</span><br><span class="line"><span class="comment"># 指定项目的目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /opt/bbs</span><br><span class="line"><span class="comment"># wsgi文件路径</span></span><br><span class="line">wsgi-file = bbs/wsgi.py</span><br><span class="line"><span class="comment"># 模块wsgi路径</span></span><br><span class="line">module = bbs.wsgi</span><br><span class="line"><span class="comment"># 是否开启master进程</span></span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 工作进程的最大数目</span></span><br><span class="line">processes = 4</span><br><span class="line"><span class="comment"># 结束后是否清理文件</span></span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">6、启动uwsgi</span><br><span class="line">[root@web01 ~]<span class="comment"># uwsgi -d --ini /opt/bbs/myweb_uwsgi.ini --uid 666</span></span><br><span class="line"></span><br><span class="line">-d 	  : 以守护进程方式运行</span><br><span class="line">--ini : 指定配置文件路径</span><br><span class="line">--uid : 指定uid</span><br><span class="line"></span><br><span class="line">7、编辑Nginx配置文件</span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/python.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name py.test.com;</span><br><span class="line">    location / &#123; </span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">        uwsgi_param UWSGI_SCRIPT bbs.wsgi;</span><br><span class="line">        uwsgi_param UWSGI_CHDIR /opt/bbs;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        client_max_body_size 35m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8、重启Nginx配置</span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure>

<h3 id="2、部署负载均衡"><a href="#2、部署负载均衡" class="headerlink" title="2、部署负载均衡"></a>2、部署负载均衡</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># cat /etc/nginx/conf.d/test.conf  </span></span><br><span class="line">upstream bbs &#123;</span><br><span class="line">    server 172.16.1.7:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">    server 172.16.1.8:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">    server 172.16.1.9:80 max_fails=3 fail_timeout=3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name bbs.test.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://bbs;</span><br><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_404; </span><br><span class="line">        include /etc/nginx/proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试重载nginx</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 如果访问不到，说明访问web的nginx配置为默认的配置可以在web内禁用掉默认配置</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mv /etc/nginx/conf.d/default.conf default.conf.bak</span></span><br><span class="line">[root@web01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在web01、web02监控下nginx的日志</span></span><br><span class="line">[root@web01 ~]<span class="comment"># tail -f /var/log/nginx/access.log</span></span><br><span class="line"></span><br><span class="line">浏览器输入：bbs.test.com</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/6671641645008_.pic_hd_gaitubao_461x523.jpg" alt="6671641645008_.pic_hd_gaitubao_461x523"></p>
<h1 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h1><ul>
<li>1、四层 +七层来做负载均衡，四层可以保证七层的负载均衡的高可用性；如：nginx就无法保证自己的服务高可用，需要依赖LVS或者keepalived。</li>
<li>2、tcp协议的负载均衡，有些请求是TCP协议的（mysql、ssh），或者说这些请求只需要使用四层进行端口的转发就可以了，所以使用四层负载均衡。</li>
<li>3、四层可以做：<ul>
<li>mysql读从库的负载均衡</li>
<li>跳板机的端口映射</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">假设有三台MySQL数据库，请问怎样负载均衡？</span><br><span class="line"></span><br><span class="line">在非HTTP协议的情况下，采用的四层负载均衡的方式负载服务。</span><br><span class="line"></span><br><span class="line">注意：四层负载均衡中不支持域名。</span><br></pre></td></tr></table></figure>

<h2 id="四层负载均衡配置"><a href="#四层负载均衡配置" class="headerlink" title="四层负载均衡配置"></a>四层负载均衡配置</h2><ul>
<li> 配置四层负载均衡nginx必须有–with-stream模块，之前已经装过了</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 四层负载均衡stream模块跟http模块同级别，不能配置在http里面</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user  www;</span><br><span class="line">worker_processes  10;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置四层负载均衡stream</span></span><br><span class="line">stream &#123;</span><br><span class="line">    include /etc/nginx/stream/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"><span class="comment"># ......略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到nginx目录</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># pwd</span></span><br><span class="line"> /etc/nginx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建切换到stream目录</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># mkdir stream</span></span><br><span class="line">[root@lb01 nginx]<span class="comment"># cd stream</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建编辑stream配置文件</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># vim mysql.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：四层负载均衡中不支持域名。没有server_name</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 3306;</span><br><span class="line">    proxy_pass 192.168.15.61:3306;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># nginx -t</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:成功利用nginx负载均衡转发</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysql -h192.168.15.5 -uroot -p123456</span></span><br><span class="line"> MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>

<p>案例：使用四层负载均衡实现SSH的代理，端口为1122</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># cat ssh.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 1122;</span><br><span class="line">    proxy_pass 172.16.1.5:22;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># netstart -nutlp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># nginx -t</span></span><br><span class="line">[root@lb01 stream]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试在web02登录</span></span><br><span class="line">[root@web02 ~]<span class="comment"># ssh root@192.168.15.5 -p1122</span></span><br><span class="line"></span><br><span class="line"> root@192.168.15.5<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@lb01 ~]# </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-localtion配置和LNMP架构</title>
    <url>/37ea497d.html</url>
    <content><![CDATA[<h1 id="Nginx的location配置"><a href="#Nginx的location配置" class="headerlink" title="Nginx的location配置"></a>Nginx的location配置</h1><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用Nginx location可以控制访问网站的路径, 但一个server可以有多个location配置, 多个location的优先级该如何区分。</span><br><span class="line"></span><br><span class="line">location 的匹配顺序其实是“先匹配普通，再匹配正则”。</span><br><span class="line">   nginx 是“先匹配正则 location 再匹配普通 location ”，其实这是一个误区， nginx 其实</span><br><span class="line">   是“先匹配普通 location ，再匹配正则 location ”。</span><br><span class="line">   但是普通 location 的匹配结果又分两种：</span><br><span class="line">     一种是“严格精确匹配”，官方英文说法是“ 准确匹配 ”；</span><br><span class="line">     一种是“最大前缀匹配”，官方英文说法是“ 字面值字符串匹配开始部分 查询的-将使用最具体的匹配 ”。</span><br><span class="line"></span><br><span class="line">location 匹配的优先级(与location在配置文件中的顺序无关)</span><br><span class="line">  = 精确匹配会第一个被处理。如果发现精确匹配，nginx停止搜索其他匹配。</span><br><span class="line">  普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有</span><br><span class="line">  没有正则表达式匹配和更长的匹配。</span><br><span class="line">  ^~ 则只匹配该规则，nginx停止搜索其他匹配，否则nginx会继续处理其他location指令。最后匹配</span><br><span class="line">  带有<span class="string">&quot;~&quot;</span>和<span class="string">&quot;~*&quot;</span>的指令，如果找到相应的匹配，则nginx停止搜索其他匹配；当没有正则表达式或者没有</span><br><span class="line">  正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用</span><br></pre></td></tr></table></figure>

<h4 id="location语法"><a href="#location语法" class="headerlink" title="location语法"></a>location语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:	location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">Default:	—</span><br><span class="line">Context:	server, location</span><br></pre></td></tr></table></figure>

<h4 id="location匹配符号"><a href="#location匹配符号" class="headerlink" title="location匹配符号"></a>location匹配符号</h4><table>
<thead>
<tr>
<th><strong>匹配符</strong></th>
<th><strong>匹配规则</strong></th>
<th><strong>优先级</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>精确匹配</td>
<td>1</td>
</tr>
<tr>
<td>^~</td>
<td>以某个字符串开头，一般用来匹配目录</td>
<td>2</td>
</tr>
<tr>
<td>~</td>
<td>区分大小写的正则匹配</td>
<td>3</td>
</tr>
<tr>
<td>~*</td>
<td>不区分大小写的正则匹配</td>
<td>4</td>
</tr>
<tr>
<td>/</td>
<td>通用匹配，任何请求都会匹配到</td>
<td>5</td>
</tr>
</tbody></table>
<h4 id="优先级认证"><a href="#优先级认证" class="headerlink" title="优先级认证"></a>优先级认证</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># cat /etc/nginx/conf.d/text.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">192.168.15.8</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /python</span> &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/html;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Location ~*&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /Python</span> &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/html;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Location ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /python &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/html;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Location ^~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /python &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/html;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Location =&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">[root@<span class="attribute">web01</span> ~]<span class="comment"># cat /etc/nginx/conf.d/text1.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span> <span class="number">192.168.15.8</span>;</span><br><span class="line">	<span class="comment"># 访问站点根目录</span></span><br><span class="line">	 <span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">		<span class="attribute">index</span> index.html;</span><br><span class="line">	 &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 访问图片</span></span><br><span class="line">	 <span class="attribute">location</span> <span class="regexp">~* \.(jpg|gif|png|jpeg)</span> &#123;</span><br><span class="line">	 <span class="attribute">deny</span> all;</span><br><span class="line">	 &#125;</span><br><span class="line">	<span class="comment"># 访问监控，需要输入用户名密码</span></span><br><span class="line">	 <span class="attribute">location</span> =/status &#123;</span><br><span class="line">		<span class="attribute">auth_basic</span>           <span class="string">&quot;closed site&quot;</span>;</span><br><span class="line">		<span class="attribute">auth_basic_user_file</span> /etc/nginx/auth_basic;</span><br><span class="line">		stub_status;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="location应用场景"><a href="#location应用场景" class="headerlink" title="location应用场景"></a>location应用场景</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通用匹配，任何请求都会匹配到</span></span><br><span class="line">location / &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#严格区分大小写，匹配以.py结尾的都走这个location    </span></span><br><span class="line">location ~ \.py$ &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#严格区分大小写，匹配以.html结尾的都走这个location </span></span><br><span class="line">location ~ \.html$ &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#不区分大小写匹配，只要用户访问.jpg,gif,png,js,css结尾的都走这条location</span></span><br><span class="line">location ~* .*\.(jpg|gif|png|js|css)$ &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#不区分大小写匹配</span></span><br><span class="line">location ~* <span class="string">&quot;\.(sql|bak|tgz|tar.gz|.git)$&quot;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h1><ul>
<li><p>此次LNMP架构采用 Linux + Nginx + MySQL + Python，在学习之前我们需要先了解下uWSGI的知识。</p>
</li>
<li><p><strong>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi协议 和 http 服务协议</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WebApp采用 Python 的web框架 Django 开发</span><br><span class="line"></span><br><span class="line">因为Nginx不支持WSGI协议，无法直接调用 Python 开发的WebApp。所以需要借助uWSGI,</span><br><span class="line">在 Nginx + uWSGI + Django 的框架里，nginx代理+WebServer，uWSGI是WSGI server，</span><br><span class="line">Django是webApp。Nginx接收用户请求，并判定哪些转发到uWSGI，uWSGI再去调用pyWebApp。</span><br><span class="line"></span><br><span class="line">由于apache、nginx等，它们自己都没有解析动态语言如php的功能，而是分派给其他模块来做，比如apache就</span><br><span class="line">可以说是内置模块，让人感觉apache就支持php一样</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>这里一定要注意 WSGI , uwsgi , uWSGI 这三个概念的区分:</strong></p>
<ul>
<li><p><strong>WSGI</strong>: 是一种接口标准协议/规范，实现了python web程序与web服务器之间交互的通用性。利用它django等python web开发框架就可以部署不同的web server上了，目的是制定标准，以保证不同Web服务器可以和不同的Python程序之间相互通信</p>
</li>
<li><p><strong>uwsgi</strong>: 是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。</p>
</li>
<li><p><strong>uWSGI</strong>：是基于自有uwsgi协议、WSGI协议和http服务协议的web网关或服务器。负责响应 python 的web请求。</p>
<p><a href="https://blog.csdn.net/weixin_44826484/article/details/108588997">参考文档</a></p>
</li>
</ul>
</li>
<li><p>uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型，每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。uwsgi是一种线路协议而不是通信协议，在此常用于在uwsgi服务器与其他网络服务器的数据通信。uwsgi协议是一个uwsgi服务器自有的协议，它用于定义传输信息的类型。</p>
</li>
<li><p>uwsgi实现了WSGI的所有接口，是一个快速、自我修复、开发人员和系统管理员友好的服务器。uwsgi代码完全<br>用C编写，效率高、性能稳定。</p>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/3173921.jpg" alt="3173921"></p>
<h1 id="LNMP架构"><a href="#LNMP架构" class="headerlink" title="LNMP架构"></a>LNMP架构</h1><ul>
<li><p>LNMP是一套技术的组合，L=Linux、N=Nginx、M=MySQL、P=Python</p>
<ul>
<li><p>Linux是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。</p>
</li>
<li><p>Nginx是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。</p>
</li>
<li><p>Mysql是一个小型关系型数据库管理系统。</p>
</li>
<li><p>Python-Django是一个开源的web应用框架。采用了MVC的软件设计模式，即模型M，视图V和控制器C。</p>
<p>这四种软件均为免费开源软件，组合到一起，成为一个免费、高效、扩展性强的网站服务系统。</p>
</li>
</ul>
</li>
</ul>
<h2 id="LNMP工作流程"><a href="#LNMP工作流程" class="headerlink" title="LNMP工作流程"></a>LNMP工作流程</h2><ul>
<li><p>首先Nginx服务是不能处理动态请求，那么当用户发起动态请求时, Nginx又是如何进行处理的。</p>
<ul>
<li>1.静态请求：请求的内容是静态文件就是静态请求<ul>
<li>1）静态文件：文件上传到服务器，永远不会改变的文件就是静态文件</li>
<li>2）html 就是一个标准的静态文件</li>
</ul>
</li>
<li>2.动态请求：请求的内容是动态的就是动态请求<ul>
<li>1）不是真实存在服务器上的内容，是通过数据库或者其他服务拼凑成的数据</li>
</ul>
</li>
</ul>
</li>
<li><p>当用户发起http请求，请求会被Nginx处理，如果是静态资源请求Nginx则直接返回，如果是动态请求Nginx则通过uwsgi协议转交给后端的Python程序处理</p>
</li>
</ul>
<h2 id="LNMP访问流程"><a href="#LNMP访问流程" class="headerlink" title="LNMP访问流程"></a>LNMP访问流程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、客户端(PC)向web服务器发起http请求服务资源</span><br><span class="line"></span><br><span class="line">2、nginx作为直接对外的服务接口，接收到客户端发送过来的http请求，会解包、分析，如果是静态文件</span><br><span class="line">   请求则根据nginx配置的静态文件目录，并返回请求的资源给客户端,不是则通过nginx就通过配置文件，</span><br><span class="line">   将请求传递给uWSGI；uWSGI 将接收到的包进行处理，并转发给WSGI，WSGI协议将请求丢给web框架</span><br><span class="line">   (django)代码处理</span><br><span class="line"></span><br><span class="line">3、看web框架是否启动django中间件，如果启用，则依据中间件对请求进行修改，如果不启用，则进入下一步</span><br><span class="line"></span><br><span class="line">4、web框架中的路由程序将根据请求中的url文件名将请求路由至相应py文件</span><br><span class="line"></span><br><span class="line">5、相应py文件收到请求后根据用户提交的参数进行计算(期间可能会调用数据库)，然后返回计算后的结果和自</span><br><span class="line">   定义头部信息以及状态码返回</span><br><span class="line"></span><br><span class="line">6、web框架将返回的数据打上通用标识符(头部信息)后返回给WSGI</span><br><span class="line"></span><br><span class="line">7、WSGI将返回数据进行打包，转发给uWSGI，uWSGI接收后转发给nginx，nginx最终将返回值返回给客户端(PC)。</span><br><span class="line"></span><br><span class="line">8、客户端收到返回的数据</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/720056.png" alt="720056"></p>
<h1 id="LNMP搭建"><a href="#LNMP搭建" class="headerlink" title="LNMP搭建"></a>LNMP搭建</h1><table>
<thead>
<tr>
<th align="left">服务器</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">lb01</td>
<td align="left">192.168.15.5</td>
</tr>
<tr>
<td align="left">db01</td>
<td align="left">192.168.15.7</td>
</tr>
<tr>
<td align="left">web01</td>
<td align="left">192.168.15.8</td>
</tr>
</tbody></table>
<h2 id="uwsgi服务部署"><a href="#uwsgi服务部署" class="headerlink" title="uwsgi服务部署"></a>uwsgi服务部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、创建用户</span><br><span class="line">[root@web01 ~]<span class="comment"># cd /opt</span></span><br><span class="line">[root@web01 opt]<span class="comment"># groupadd django -g 888</span></span><br><span class="line">[root@web01 opt]<span class="comment"># useradd django -u 888 -g 888 -r -M -s /bin/sh</span></span><br><span class="line"></span><br><span class="line">2、安装python依赖软件</span><br><span class="line">[root@web01 opt]<span class="comment"># yum install python3 libxml* python-devel gcc* pcre-devel openssl-devel python3-devel -y</span></span><br><span class="line"></span><br><span class="line">3、安装Django和uwsgi</span><br><span class="line">[root@web01 opt]<span class="comment"># pip3 install django</span></span><br><span class="line">[root@web01 opt]<span class="comment"># pip3 install uwsgi</span></span><br><span class="line"></span><br><span class="line">4、创建项目：linux</span><br><span class="line">[root@web01 opt]<span class="comment"># django-admin startproject linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">[root@web01 opt]<span class="comment"># cd linux</span></span><br><span class="line">[root@web01 linux]<span class="comment"># django-admin startapp app01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@web01 linux]<span class="comment"># vim linux/settings.py</span></span><br><span class="line"> ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]  <span class="comment">#允许所有IP都可以访问</span></span><br><span class="line"> DATABASES = &#123;&#125;  <span class="comment"># 将数据库配置置空</span></span><br><span class="line"><span class="comment"># 启动测试</span></span><br><span class="line">[root@web01 linux]<span class="comment"># python3 manage.py runserver 0.0.0.0:8000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、编辑项目配置文件</span><br><span class="line">[root@web01 linux]<span class="comment"># vim /opt/linux/myweb_uwsgi.ini </span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">socket = :8000</span><br><span class="line"><span class="comment"># 指定项目的目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /opt/linux</span><br><span class="line"><span class="comment"># wsgi文件路径</span></span><br><span class="line">wsgi-file = linux/wsgi.py</span><br><span class="line"><span class="comment"># 模块wsgi路径</span></span><br><span class="line">module = linux.wsgi</span><br><span class="line"><span class="comment"># 是否开启master进程</span></span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 工作进程的最大数目</span></span><br><span class="line">processes = 4</span><br><span class="line"><span class="comment"># 结束后是否清理文件</span></span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">6、后台启动uwsgi(不建议用root运行，所以指定给其他用户）</span><br><span class="line">[root@web01 linux]<span class="comment"># uwsgi -d --ini myweb_uwsgi.ini --uid 666</span></span><br><span class="line"></span><br><span class="line">-d 	  : 以守护进程方式运行</span><br><span class="line">--ini : 指定配置文件路径</span><br><span class="line">--uid : 指定uid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用该方式查看uwsgi是否在后台运行</span></span><br><span class="line">[root@web01 linux]<span class="comment"># ps -ef | grep uwsgi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时的 uwsgi 是一个TCP服务，包含http，但是http不包含TCP服务</span></span><br><span class="line"><span class="comment"># 需要用nginx 将uwsgi服务转换成http服务来实现通信</span></span><br><span class="line"></span><br><span class="line">7、编辑Nginx配置文件</span><br><span class="line">[root@web01 linux]<span class="comment"># cat /etc/nginx/conf.d/python.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name py.test.com;</span><br><span class="line">    location / &#123; </span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">        uwsgi_param UWSGI_SCRIPT linux.wsgi;</span><br><span class="line">        uwsgi_param UWSGI_CHDIR /opt/linux;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        client_max_body_size 35m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8、重启Nginx配置</span><br><span class="line">[root@web01 linux]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure>

<h2 id="BBS项目部署"><a href="#BBS项目部署" class="headerlink" title="BBS项目部署"></a>BBS项目部署</h2><h3 id="部署数据库"><a href="#部署数据库" class="headerlink" title="部署数据库"></a>部署数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装数据库</span><br><span class="line">[root@db01 ~]<span class="comment"># yum install mariadb* -y</span></span><br><span class="line"></span><br><span class="line">2、启动数据库</span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl start mariadb </span></span><br><span class="line"></span><br><span class="line">3、远程连接MySQL数据</span><br><span class="line"><span class="comment"># 数据库添加用户语句：创建用户，授权（全部数据库权限）</span></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库 bbs ，将该库的默认编码格式设置为utf8格式，数据库校对规则</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE `bbs` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库校对规则，utf8_bin将字符串中的每一个字符用二进制数据存储，区分大小写。</span></span><br><span class="line"><span class="comment"># utf8_genera_ci不区分大小写，ci为case insensitive的缩写，即大小写不敏感。</span></span><br><span class="line"><span class="comment"># utf8_general_cs区分大小写，cs为case sensitive的缩写，即大小写敏感。</span></span><br></pre></td></tr></table></figure>

<h3 id="部署BBS"><a href="#部署BBS" class="headerlink" title="部署BBS"></a>部署BBS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、上传代码</span><br><span class="line">[root@db01 ~]<span class="comment"># unzip bbs.zip</span></span><br><span class="line"><span class="comment"># 将解压后的项目移动到opt目录</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mv bbs /opt/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、数据库迁移</span><br><span class="line"><span class="comment"># 切换到项目app的migrations目录</span></span><br><span class="line">[root@db01 ~]<span class="comment"># cd /opt/bbs/app01/migrations</span></span><br><span class="line">[root@web01 migrations]<span class="comment"># pwd</span></span><br><span class="line"> /opt/bbs/app01/migrations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库迁移配置</span></span><br><span class="line">[root@web01 migrations]<span class="comment"># rm -rf 00*</span></span><br><span class="line"><span class="comment"># 删除数据库缓存</span></span><br><span class="line">[root@web01 migrations]<span class="comment"># rm -rf __pycache__/</span></span><br><span class="line"></span><br><span class="line">[root@web01 migrations]<span class="comment"># cd /opt/bbs/</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># pwd</span></span><br><span class="line">/opt/bbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据报错信息判断是否修改Django版本,如果版本对应无需卸载安装新版本</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># pip3 uninstall django</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># pip3 install django==1.11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MySQL数据库插件</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># pip3 install pymysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装项目所需要的模块和依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据连接</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># vim bbs/settings.py</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>, <span class="comment">#数据库</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;bbs&#x27;</span>,          <span class="comment">#数据库名</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,         <span class="comment">#数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,   <span class="comment">#数据库密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;192.168.15.7&#x27;</span>,  <span class="comment">#数据库ip地址</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: 3306,           <span class="comment">#数据库端口号</span></span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>       <span class="comment">#数据编码格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库迁移文件</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># python3 manage.py makemigrations</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库迁移</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># python3 manage.py migrate</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、配置并启动uwsgi</span><br><span class="line">[root@web01 bbs]<span class="comment"># vim /opt/bbs/myweb_uwsgi.ini</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># cat /opt/bbs/myweb_uwsgi.ini </span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">socket = :8002</span><br><span class="line"><span class="comment"># 指定项目的目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /opt/bbs</span><br><span class="line"><span class="comment"># wsgi文件路径</span></span><br><span class="line">wsgi-file = bbs/wsgi.py</span><br><span class="line"><span class="comment"># 模块wsgi路径</span></span><br><span class="line">module = bbs.wsgi</span><br><span class="line"><span class="comment"># 是否开启master进程</span></span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 工作进程的最大数目</span></span><br><span class="line">processes = 4</span><br><span class="line"><span class="comment"># 结束后是否清理文件</span></span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动uwsgi</span></span><br><span class="line">[root@web01 bbs]<span class="comment"># uwsgi -d --ini myweb_uwsgi.ini --uid 666</span></span><br><span class="line"></span><br><span class="line">4、配置Nginx</span><br><span class="line">[root@web01 bbs]<span class="comment"># cat /etc/nginx/conf.d/python.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name bbs.test.com;</span><br><span class="line">    location / &#123; </span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8002;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">        uwsgi_param UWSGI_SCRIPT bbs.wsgi;</span><br><span class="line">        uwsgi_param UWSGI_CHDIR /opt/bbs;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        client_max_body_size 35m;</span><br><span class="line">    &#125;</span><br><span class="line">    location /s &#123;</span><br><span class="line">                <span class="built_in">alias</span> /opt/bbs/static;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@web01 bbs]<span class="comment"># systemctl restart nginx  #重启nginx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、测试访问BBS</span><br><span class="line"></span><br><span class="line">浏览器输入 bbs.test.com</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/a9ba4134.html</url>
    <content><![CDATA[<h3 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JavaScript是Netscape公司创造的，该语言被提交到ECMA国际标准化组织，改名为了ECMAScript，目前使用的最多的版本是ECMAScript5或者ECMAScript5</span><br><span class="line">JavaScript是脚本语言</span><br><span class="line">JavaScript是一种轻量级的编程语言</span><br><span class="line">JavaScript 是可插入 HTML 页面的编程代码</span><br><span class="line">JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="引入方式及注释"><a href="#引入方式及注释" class="headerlink" title="引入方式及注释"></a>引入方式及注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">引入方式:</span><br><span class="line">1.标签内编写</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.引入js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">注释:</span><br><span class="line">1.单行注释</span><br><span class="line">  //</span><br><span class="line">2.多行注释</span><br><span class="line">  /**/</span><br><span class="line"></span><br><span class="line">结束符是 ;</span><br></pre></td></tr></table></figure>

<h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">声明变量需要使用关键字</span><br><span class="line">老版本(ES5)  var</span><br><span class="line">新版本(ES6)  let</span><br><span class="line">区别: var是声明全局变量，let是声明局部变量</span><br><span class="line">var str1=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">let str2=<span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line">// 全局变量，因此最终结果是<span class="number">9</span></span><br><span class="line">var a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(var a=<span class="number">0</span>;a&lt;<span class="number">10</span>;a++)&#123;</span><br><span class="line">	console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">// 局部变量，此时结果是<span class="number">2</span></span><br><span class="line">let b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(let b=<span class="number">0</span>;b&lt;<span class="number">10</span>;b++)&#123;</span><br><span class="line">	console.log(b)</span><br><span class="line">&#125;</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">声明常量关键字 const</span><br><span class="line">const pi=<span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">基本数据类型有: number string boolean undfined <span class="built_in">object</span>()</span><br><span class="line"></span><br><span class="line">var a=<span class="number">1</span>;</span><br><span class="line">var b=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">var c=true;</span><br><span class="line">var d;</span><br><span class="line">var e=[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>];</span><br><span class="line">typeof a; //<span class="string">&#x27;number&#x27;</span></span><br><span class="line">typeof b; //<span class="string">&#x27;string&#x27;</span></span><br><span class="line">typeof c; //<span class="string">&#x27;boolean&#x27;</span></span><br><span class="line">typeof d; //<span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">typeof e; //<span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a>number类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不区分整型与浮点型</span><br><span class="line">var a=<span class="number">10.1</span>;</span><br><span class="line">var b=<span class="number">20</span>;</span><br><span class="line">typeof a;</span><br><span class="line">typeof b;</span><br><span class="line"></span><br><span class="line">有一个特殊的数字类型NaN，表示Not a Number</span><br><span class="line"></span><br><span class="line">类型转换</span><br><span class="line">parseInt(<span class="string">&quot;123&quot;</span>);  //<span class="number">123</span></span><br><span class="line">parseInt(<span class="string">&quot;abc&quot;</span>);  // NaN</span><br><span class="line">parseFloat(<span class="string">&quot;12.34&quot;</span>);  //<span class="number">12.34</span></span><br></pre></td></tr></table></figure>

<h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">var b=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">var c=a+b;</span><br><span class="line">console.log(c);</span><br><span class="line"></span><br><span class="line">符号可以是单引号双引号，没有三引号</span><br><span class="line">使用 `` 做多行定义</span><br><span class="line">var d=`</span><br><span class="line">dadsad</span><br><span class="line">dadsad</span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<p>常用方法:</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.length</td>
<td>返回长度</td>
</tr>
<tr>
<td>.trim()</td>
<td>移除空白</td>
</tr>
<tr>
<td>.trimLeft()</td>
<td>移除左边的空白</td>
</tr>
<tr>
<td>.trimRight()</td>
<td>移除右边的空白</td>
</tr>
<tr>
<td>.charAt(n)</td>
<td>返回第n个字符</td>
</tr>
<tr>
<td>.concat(value, …)</td>
<td>拼接</td>
</tr>
<tr>
<td>.indexOf(substring, start)</td>
<td>子序列位置</td>
</tr>
<tr>
<td>.substring(from, to)</td>
<td>根据索引获取子序列</td>
</tr>
<tr>
<td>.slice(start, end)</td>
<td>切片</td>
</tr>
<tr>
<td>.toLowerCase()</td>
<td>小写</td>
</tr>
<tr>
<td>.toUpperCase()</td>
<td>大写</td>
</tr>
<tr>
<td>.split(delimiter, limit)</td>
<td>分割</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;  XxxXX  &quot;</span>;</span><br><span class="line"></span><br><span class="line">str1.length  <span class="comment">//11</span></span><br><span class="line">str2.trim();  <span class="comment">//&#x27;XxxXX&#x27;</span></span><br><span class="line">str2.trimLeft()  <span class="comment">//&#x27;XxxXX  &#x27;</span></span><br><span class="line">str2.trimRight();  <span class="comment">//&#x27;  XxxXX&#x27;</span></span><br><span class="line">str1.charAt(<span class="number">4</span>)  <span class="comment">//&#x27;o&#x27;</span></span><br><span class="line">str1.concat(<span class="string">&#x27;Javastript&#x27;</span>);  <span class="comment">//&#x27;hello worldJavastript&#x27;</span></span><br><span class="line">str1.indexOf(<span class="string">&quot;d&quot;</span>);  <span class="comment">//10</span></span><br><span class="line">str1.substring(<span class="number">2</span>,<span class="number">5</span>);  <span class="comment">//&#x27;llo&#x27;</span></span><br><span class="line">str1.slice(<span class="number">2</span>,<span class="number">5</span>);  <span class="comment">//&#x27;llo&#x27;</span></span><br><span class="line">str1.toLowerCase();  <span class="comment">//&#x27;hello world&#x27;</span></span><br><span class="line">str1.toUpperCase()  <span class="comment">//&#x27;HELLO WORLD&#x27;</span></span><br><span class="line">str1.split(<span class="string">&quot; &quot;</span>);  <span class="comment">//(2) [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串推荐使用 + </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> c=<span class="string">`</span></span><br><span class="line"><span class="string">name is <span class="subst">$&#123;name&#125;</span>,age is <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">c</span><br><span class="line"><span class="string">&#x27;\nname is Bob,age is 18\n&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=true;</span><br><span class="line">var b=false;</span><br><span class="line"></span><br><span class="line">空字符串、<span class="number">0</span>、null、undefined、NaN都是false</span><br></pre></td></tr></table></figure>

<h3 id="null与undefined类型"><a href="#null与undefined类型" class="headerlink" title="null与undefined类型"></a>null与undefined类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null 值是空的，一般在需要指定或清空一个变量时才会使用</span><br><span class="line">		var a=null;</span><br><span class="line">undefined 声明了一个变量但是没有被初始化，该变量的默认值是undefined</span><br><span class="line">		var b;</span><br></pre></td></tr></table></figure>

<h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">JavaScript 中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript 允许自定义对象</span><br><span class="line">JavaScript 提供多个内建对象，比如 String、Date、Array 等等</span><br><span class="line">对象只是带有属性和方法的特殊数据类型</span><br></pre></td></tr></table></figure>

<h3 id="对象类型之数组"><a href="#对象类型之数组" class="headerlink" title="对象类型之数组"></a>对象类型之数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=[<span class="number">123</span>,<span class="string">&quot;abc&quot;</span>];</span><br><span class="line">console.log(a[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>常用方法:</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.length</td>
<td>数组的大小</td>
</tr>
<tr>
<td>.push(ele)</td>
<td>尾部追加元素</td>
</tr>
<tr>
<td>.pop()</td>
<td>获取尾部的元素</td>
</tr>
<tr>
<td>.unshift(ele)</td>
<td>头部插入元素</td>
</tr>
<tr>
<td>.shift()</td>
<td>头部移除元素</td>
</tr>
<tr>
<td>.slice(start, end)</td>
<td>切片</td>
</tr>
<tr>
<td>.reverse()</td>
<td>反转</td>
</tr>
<tr>
<td>.join(seq)</td>
<td>将数组元素连接成字符串</td>
</tr>
<tr>
<td>.concat(val, …)</td>
<td>连接数组</td>
</tr>
<tr>
<td>.sort()</td>
<td>排序</td>
</tr>
<tr>
<td>.forEach()</td>
<td>将数组的每个元素传递给回调函数</td>
</tr>
<tr>
<td>.splice()</td>
<td>删除元素，并向数组添加新元素。</td>
</tr>
<tr>
<td>.map()</td>
<td>返回一个数组元素调用函数处理后的值的新数组</td>
</tr>
</tbody></table>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">基本运算符</span><br><span class="line">+ - * / % ++ --</span><br><span class="line"></span><br><span class="line">比较运算符</span><br><span class="line">&gt; &gt;= &lt; &lt;= != == === !==</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> == “<span class="number">1</span>”  // true  弱等于</span><br><span class="line"><span class="number">1</span> === <span class="string">&quot;1&quot;</span>  // false 强等于</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">&amp;&amp; || !</span><br><span class="line"></span><br><span class="line">赋值运算符</span><br><span class="line">= += -= *= /=</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a><code>if判断</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span>句式</span><br><span class="line"></span><br><span class="line">var a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">5</span>)&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;no&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>-<span class="keyword">else</span></span><br><span class="line">var a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">5</span>)&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;大于5&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;<span class="number">5</span>)&#123;</span><br><span class="line">   console.log(<span class="string">&#x27;小于5&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;other&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=<span class="number">1</span>;</span><br><span class="line">switch (a) &#123;</span><br><span class="line">  case <span class="number">1</span>:</span><br><span class="line">  console.log(<span class="string">&#x27;星期一&#x27;</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  case <span class="number">2</span>:</span><br><span class="line">  console.log(<span class="string">&#x27;星期二&#x27;</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  case <span class="number">3</span>:</span><br><span class="line">  console.log(<span class="string">&#x27;星期三&#x27;</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">defaule:</span><br><span class="line">  console.log(<span class="string">&#x27;其他&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var a=<span class="number">0</span>;a&lt;<span class="number">10</span>;a++)&#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">10</span>)&#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">  a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var a=<span class="number">1</span>;</span><br><span class="line">var b=<span class="number">2</span>;</span><br><span class="line">var c=a&gt;b?a:b;</span><br><span class="line">console.log(c)</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 函数定义</span><br><span class="line">function 函数名(参数<span class="number">1</span>,参数<span class="number">2</span>)&#123;</span><br><span class="line">    函数体代码</span><br><span class="line">  	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function f2(a, b) &#123;</span><br><span class="line">  console.log(arguments);  // 内置的arguments对象,可以获取传入的所有数据,也支持<span class="keyword">return</span>和匿名函数</span><br><span class="line">  console.log(arguments.length);</span><br><span class="line">  console.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line">f2(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">// 匿名函数定义</span><br><span class="line">function(参数<span class="number">1</span>,参数<span class="number">2</span>)&#123;</span><br><span class="line">  函数体代码</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">sum</span> = function(a, b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">//立即执行函数在两边都使用()</span><br><span class="line">(function(a, b)&#123;<span class="keyword">return</span> a + b;&#125;)(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">//ES6中可以使用 =&gt; 定义函数</span><br><span class="line">var f = v =&gt; v;</span><br><span class="line">// 等同于</span><br><span class="line">var f = function(v)&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">相当于python中的字典类型</span><br><span class="line">	方式<span class="number">1</span>: var d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">  方式<span class="number">2</span>: var d = Object(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;)</span><br><span class="line">    </span><br><span class="line">var d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">typeof d  //<span class="string">&#x27;object&#x27;</span></span><br><span class="line">d[<span class="string">&#x27;name&#x27;</span>]  //<span class="string">&#x27;jason&#x27;</span></span><br><span class="line">d.name  //<span class="string">&#x27;jason&#x27;</span></span><br><span class="line">// 支持<span class="keyword">for</span>循环 </span><br><span class="line"><span class="keyword">for</span>(let i <span class="keyword">in</span> d)&#123;</span><br><span class="line">  console.log(i,d[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//增加元素</span><br><span class="line">d.hobby = <span class="string">&#x27;play&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 使用 . 拿到value</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">res = MyDict(name=<span class="string">&#x27;jason&#x27;</span>,age=<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(res.name)</span><br><span class="line"><span class="built_in">print</span>(res.age)</span><br><span class="line">res.xxx = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(res.xxx)</span><br><span class="line"><span class="built_in">print</span>(res)    </span><br></pre></td></tr></table></figure>

<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a><code>Date</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建Date对象</span><br><span class="line">let d = new Date()</span><br><span class="line">d.toLocaleString()</span><br><span class="line"></span><br><span class="line">Date对象的方法</span><br><span class="line">var d = new Date(); </span><br><span class="line">//getDate()                 获取日</span><br><span class="line">//getDay ()                 获取星期</span><br><span class="line">//getMonth ()               获取月（<span class="number">0</span>-<span class="number">11</span>）</span><br><span class="line">//getFullYear ()            获取完整年份</span><br><span class="line">//getYear ()                获取年</span><br><span class="line">//getHours ()               获取小时</span><br><span class="line">//getMinutes ()             获取分钟</span><br><span class="line">//getSeconds ()             获取秒</span><br><span class="line">//getMilliseconds ()        获取毫秒</span><br><span class="line">//getTime ()                返回累计毫秒数(从<span class="number">1970</span>/<span class="number">1</span>/<span class="number">1</span>午夜)</span><br></pre></td></tr></table></figure>

<h4 id="Json对象"><a href="#Json对象" class="headerlink" title="Json对象"></a><code>Json</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python中</span><br><span class="line">  dumps  序列化</span><br><span class="line">  loads  反序列化</span><br><span class="line">JS中</span><br><span class="line">  JSON.stringify()  序列化</span><br><span class="line">  JSON.parse()  反序列化</span><br><span class="line">  </span><br><span class="line">let js=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;;</span><br><span class="line">res = JSON.stringify(js)  //<span class="string">&#x27;&#123;&quot;name&quot;:&quot;jason&quot;,&quot;age&quot;:18&#125;&#x27;</span>  序列化</span><br><span class="line">JSON.parse(res)  // &#123;name: <span class="string">&#x27;jason&#x27;</span>, age: <span class="number">18</span>&#125;  反序列化</span><br></pre></td></tr></table></figure>

<h4 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a><code>RegExp</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在python中使用正则，需要使用re模块</span><br><span class="line">在JavaScript中需要创建正则对象</span><br><span class="line"></span><br><span class="line">//第一种方式</span><br><span class="line">let reg1 = new RegExp(<span class="string">&quot;^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">//第二种方式</span><br><span class="line">let reg2 = /^[a-zA-Z][a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">5</span>,<span class="number">9</span>&#125;/;</span><br><span class="line"></span><br><span class="line">//匹配内容</span><br><span class="line">reg1.test(<span class="string">&#x27;jsdsa123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">let str1 = <span class="string">&#x27;jsdsa123 dsa teqwds&#x27;</span></span><br><span class="line">//获取字符里所有的字母s</span><br><span class="line">str1.match(/s/)  //获取到第一个就停止了</span><br><span class="line">str1.match(/s/g)  // g 全局匹配所有</span><br><span class="line"></span><br><span class="line">// 全局匹配模式的问题</span><br><span class="line">let reg3 = /^[a-zA-Z][a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">5</span>,<span class="number">9</span>&#125;/g;</span><br><span class="line">reg3.test(<span class="string">&#x27;jason123asd&#x27;</span>)</span><br><span class="line">reg3.test(<span class="string">&#x27;jason123asd&#x27;</span>)  // 第二次是false，下一次是true </span><br><span class="line"></span><br><span class="line">//全局模式有一个lastIndex属性</span><br><span class="line">reg3.lastIndex</span><br><span class="line">reg3.test(<span class="string">&#x27;jason123asd&#x27;</span>)</span><br><span class="line">reg3.lastIndex</span><br><span class="line">reg3.test(<span class="string">&#x27;jason123asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let reg4 = /^[a-zA-Z][a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">5</span>,<span class="number">9</span>&#125;/;</span><br><span class="line">reg4.test()  // 结果是true 什么都不传，默认传的是undefined</span><br></pre></td></tr></table></figure>

<h3 id="BOM与DOM操作"><a href="#BOM与DOM操作" class="headerlink" title="BOM与DOM操作"></a>BOM与DOM操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BOM（Browser Object Model）是指浏览器对象模型，它使 JavaScript 有能力与浏览器进行“对话”</span><br><span class="line">DOM （Document Object Model）是指文档对象模型，通过它，可以访问HTML文档的所有元素</span><br></pre></td></tr></table></figure>

<h4 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h4><h5 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a><code>window</code>对象</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">window对象指代的就是浏览器窗口</span><br><span class="line"></span><br><span class="line">window.innerHeight  //浏览器窗口当前的高度</span><br><span class="line">window.innerWidth  //浏览器窗口当前的宽度</span><br><span class="line">window.<span class="built_in">open</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;height=200px,width=200px&#x27;</span>)  //新的窗口打开网站</span><br><span class="line">window.close()  //关闭当前窗口</span><br></pre></td></tr></table></figure>

<h5 id="window子对象"><a href="#window子对象" class="headerlink" title="window子对象"></a><code>window</code>子对象</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>navigator对象，获取浏览器相关信息</span><br><span class="line">navigator.appName　　   // Web浏览器全称</span><br><span class="line">navigator.appVersion　　// Web浏览器厂商和版本的详细字符串</span><br><span class="line">navigator.userAgent　　 // 客户端绝大部分信息</span><br><span class="line">navigator.platform　　　// 浏览器运行所在的操作系统</span><br><span class="line"></span><br><span class="line">//如果是window的子对象，window可以省略不写</span><br><span class="line"></span><br><span class="line">history对象</span><br><span class="line">history.forward()  // 前进一页</span><br><span class="line">history.back()  // 后退一页</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>location对象</span><br><span class="line">location.href  //获取URL</span><br><span class="line">location.href=<span class="string">&quot;URL&quot;</span>  // 跳转到指定页面</span><br><span class="line">location.reload()  //重新加载页面</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>弹出框</span><br><span class="line">  警告框</span><br><span class="line">  alert(<span class="string">&#x27;警告框&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  确认框</span><br><span class="line">  confirm(<span class="string">&#x27;确认框&#x27;</span>)</span><br><span class="line">  //点了确认按钮之后返回true，否则false</span><br><span class="line"></span><br><span class="line">  提示框</span><br><span class="line">  prompt(<span class="string">&quot;请在下方输入&quot;</span>,<span class="string">&quot;你的答案&quot;</span>)</span><br><span class="line">  可以接收用户在提示框输入的内容</span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span>计时器相关</span><br><span class="line">过一段时间之后触发</span><br><span class="line">每隔一段时间触发一次(循环触发)</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // function func1()&#123;</span><br><span class="line">  //   alert(<span class="number">123</span>)</span><br><span class="line">  // &#125;</span><br><span class="line">  // let t = setTimeout(func1,<span class="number">3000</span>) // 毫秒为单位 <span class="number">3</span>秒之后自动执行func1函数</span><br><span class="line">  // clearTimeout(t)</span><br><span class="line"></span><br><span class="line">  function func2()&#123;</span><br><span class="line">    alert(<span class="number">123</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  function show()&#123;</span><br><span class="line">    let t = setInterval(func2,<span class="number">2000</span>)</span><br><span class="line">    function inner()&#123;</span><br><span class="line">          clearInterval(t)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(inner,<span class="number">8000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  show()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><p>HTML DOM树</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/867021-20180312215352312-132101897.png" alt="img"></p>
<p>DOM标准规定HTML文档中的每个成分都是一个节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文档节点(document对象)：代表整个文档</span><br><span class="line">元素节点(element 对象)：代表一个元素（标签）</span><br><span class="line">文本节点(text对象)：代表元素（标签）中的文本</span><br><span class="line">属性节点(attribute对象)：代表一个属性，元素（标签）才有属性</span><br><span class="line">注释是注释节点(comment对象)　</span><br></pre></td></tr></table></figure>

<h5 id="标签查找"><a href="#标签查找" class="headerlink" title="标签查找"></a>标签查找</h5><ul>
<li><p>基本查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.getELementByID             根据ID获取标签</span><br><span class="line">document.getELementsByClassName     根据<span class="class"><span class="keyword">class</span>属性获取</span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByTagName</span>       根据标签名获取标签合集</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 取到合集时用索引取 [0]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementById</span>(<span class="params"><span class="string">&#x27;d1&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByTagName</span>(<span class="params"><span class="string">&#x27;p&#x27;</span></span>)[0]</span></span><br></pre></td></tr></table></figure></li>
<li><p>间接查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paretElement                父节点标签元素</span><br><span class="line">children                    所有子标签</span><br><span class="line">firstElement                第一个子标签元素</span><br><span class="line">lastElementChild            最后一个子标签元素</span><br><span class="line">nextElementSibling          下一个兄弟标签元素</span><br><span class="line">previousElementSibling      上一个兄弟标签元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">&#x27;d2&#x27;</span>).parentElement</span><br><span class="line">document.getElementById(<span class="string">&#x27;d1&#x27;</span>).children</span><br><span class="line">document.getElementById(<span class="string">&#x27;d1&#x27;</span>).firstElementChild</span><br><span class="line">document.getElementById(<span class="string">&#x27;d1&#x27;</span>).lastElementChild</span><br><span class="line">document.getElementById(<span class="string">&#x27;d1&#x27;</span>).nextElementSibling</span><br><span class="line">document.getElementById(<span class="string">&#x27;d2&#x27;</span>).previousElementSibling</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>PS：HTML页面是从上往下解析，因此当JS需要等标签元素先加载的情况时，应该将JS代码写在body内部最下方，或者有在最下方引入JS文件</p>
<h5 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">var aEle=document.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签的属性，如果是默认的属性可以通过 .属性=属性值 的方式添加，setAttribute可以添加任意属性</span></span><br><span class="line">aEle.setAttribute(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;https://www.baidu.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文本内容</span></span><br><span class="line">aEle.innerText=<span class="string">&#x27;点我去百度&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述并没有添加到HTML文档中，使用如下方式添加</span></span><br><span class="line"><span class="comment"># 先查找到需要添加的位置，以某个标签为参考，然后进行添加</span></span><br><span class="line"><span class="comment"># appendChild() 添加子节点</span></span><br><span class="line"><span class="comment"># insertBefore() 把增加节点放到某个节点的前面</span></span><br><span class="line">document.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>].appendChild(aEle)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签属性</span></span><br><span class="line">aEle.getAttribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># innerText和innerHTML区别</span></span><br><span class="line">innerText</span><br><span class="line">    document.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].innerText  <span class="comment"># 可以获取a标签内文本内容</span></span><br><span class="line">    document.getElementById(<span class="string">&#x27;d1&#x27;</span>).innerText=<span class="string">&#x27;hello&#x27;</span>  <span class="comment"># 设置标签文本内容</span></span><br><span class="line">    不可以识别HTML标签</span><br><span class="line">    </span><br><span class="line">innerHTMl</span><br><span class="line">    document.getElementById(<span class="string">&#x27;d1&#x27;</span>).innerHTML  <span class="comment"># 获取内部标签和文本</span></span><br><span class="line">    document.getElementById(<span class="string">&#x27;d1&#x27;</span>).innerHTML=<span class="string">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>  <span class="comment"># 设置标签和文本</span></span><br><span class="line">    可以识别HTML标签</span><br></pre></td></tr></table></figure>

<h5 id="获取值操作"><a href="#获取值操作" class="headerlink" title="获取值操作"></a>获取值操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;username:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">c1</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">multiple</span> <span class="title">class</span>=&quot;<span class="title">c2</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 普通文本数据获取</span></span><br><span class="line"><span class="class">    标签对象.<span class="title">value</span></span></span><br><span class="line"><span class="class">    <span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">value</span>  </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 特殊的文件数据获取</span></span><br><span class="line"><span class="class">    标签对象.<span class="title">value</span>     # 获取的是一个文件地址</span></span><br><span class="line"><span class="class">    标签对象.<span class="title">files</span>[0]  # 获取单个文件数据</span></span><br><span class="line"><span class="class">    标签对象.<span class="title">fiiles</span>    # 获取所有文件数据</span></span><br><span class="line"><span class="class">		</span></span><br><span class="line"><span class="class">    <span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c2&#x27;</span></span>)[0].<span class="title">value</span></span></span><br><span class="line"><span class="class">    <span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c2&#x27;</span></span>)[0].<span class="title">files</span>[0]</span></span><br><span class="line"><span class="class">		<span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c2&#x27;</span></span>)[0].<span class="title">files</span></span></span><br></pre></td></tr></table></figure>

<h5 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a><code>class</code>操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;username:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">c1</span> <span class="title">c2</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">classList</span>                  查看所有的类</span></span><br><span class="line"><span class="class"><span class="title">classList</span>.<span class="title">remove</span>(<span class="params">cls</span>)      删除指定类</span></span><br><span class="line"><span class="class"><span class="title">classList</span>.<span class="title">add</span>(<span class="params">cls</span>)         添加类</span></span><br><span class="line"><span class="class"><span class="title">classList</span>.<span class="title">contains</span>(<span class="params">cls</span>)    存在返回<span class="title">true</span>，否则返回<span class="title">false</span></span></span><br><span class="line"><span class="class"><span class="title">classList</span>.<span class="title">toggle</span>(<span class="params">cls</span>)      存在就删除，否则添加</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span></span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span>.<span class="title">remove</span>(<span class="params"><span class="string">&#x27;c2&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span>.<span class="title">add</span>(<span class="params"><span class="string">&#x27;c3&#x27;</span></span>)        </span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span>.<span class="title">contains</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)  # <span class="title">true</span></span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span>.<span class="title">contains</span>(<span class="params"><span class="string">&#x27;c4&#x27;</span></span>)  # <span class="title">false</span></span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByClassName</span>(<span class="params"><span class="string">&#x27;c1&#x27;</span></span>)[0].<span class="title">classList</span>.<span class="title">toggle</span>(<span class="params"><span class="string">&#x27;c2&#x27;</span></span>)   </span></span><br></pre></td></tr></table></figure>

<h5 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">标签对象.style.属性名=属性值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;d10&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">&#x27;d10&#x27;</span>).style.width=<span class="string">&quot;400px&quot;</span>;</span><br><span class="line">document.getElementById(<span class="string">&#x27;d10&#x27;</span>).style.height=<span class="string">&quot;400px&quot;</span>;</span><br><span class="line">document.getElementById(<span class="string">&#x27;d10&#x27;</span>).style.borderRadius=<span class="string">&quot;50%&quot;</span>;</span><br><span class="line">document.getElementById(<span class="string">&#x27;d10&#x27;</span>).style.border=<span class="string">&quot;3px solid red&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于style中属性值有 - 的，将第一个字母换成大写接上即可，小驼峰(borderRadius)</span></span><br></pre></td></tr></table></figure>

<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>常用事件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">onclick        当用户点击某个对象时调用的事件句柄</span><br><span class="line">ondblclick     当用户双击某个对象时调用的事件句柄</span><br><span class="line"></span><br><span class="line">onfocus        元素获得焦点               </span><br><span class="line">onblur         元素失去焦点                应用场景：用于表单验证,用户离开某个输入框时,代表已经输入完了,我们可以对它进行验证</span><br><span class="line">onchange       域的内容被改变              应用场景：通常用于表单元素,当元素内容被改变时触发.（select联动）</span><br><span class="line"></span><br><span class="line">onkeydown      某个键盘按键被按下           应用场景: 当用户在最后一个输入框按下回车按键时,表单提交</span><br><span class="line">onkeypress     某个键盘按键被按下并松开</span><br><span class="line">onkeyup        某个键盘按键被松开</span><br><span class="line">onload         一张页面或一幅图像完成加载</span><br><span class="line">onmousedown    鼠标按钮被按下</span><br><span class="line">onmousemove    鼠标被移动</span><br><span class="line">onmouseout     鼠标从某元素移开</span><br><span class="line">onmouseover    鼠标移到某元素之上</span><br><span class="line"></span><br><span class="line">onselect      在文本框中的文本被选中时发生</span><br><span class="line">onsubmit      确认按钮被点击，使用的对象是form</span><br></pre></td></tr></table></figure>

<p>绑定事件的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;func1()&quot;</span> value=<span class="string">&quot;点我&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function func1()&#123;</span><br><span class="line">        alert(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐使用方式二</span></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;d1&quot;</span> value=<span class="string">&quot;点点&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var btEle = document.getElementById(<span class="string">&#x27;d1&#x27;</span>);</span><br><span class="line">    btEle.onclick=function ()&#123;</span><br><span class="line">        alert(<span class="number">456</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果某个标签已经有事件了 那么绑定会冲突</span></span><br></pre></td></tr></table></figure>

<h5 id="内置参数this"><a href="#内置参数this" class="headerlink" title="内置参数this"></a>内置参数<code>this</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this指代的就是当前被操作对象本身</span></span><br><span class="line">在事件的函数体代码内部使用</span><br><span class="line">btnEle.onclick = function () &#123;</span><br><span class="line">		alert(<span class="number">456</span>)</span><br><span class="line">		console.log(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="事件案列"><a href="#事件案列" class="headerlink" title="事件案列"></a>事件案列</h5><p>点击按钮变色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        .c1 &#123;</span></span><br><span class="line"><span class="xml">            width: 400px;</span></span><br><span class="line"><span class="xml">            height: 400px;</span></span><br><span class="line"><span class="xml">            border-radius: 50%;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        .bg_red &#123;</span></span><br><span class="line"><span class="xml">            background-color: red;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        .bg_yellow &#123;</span></span><br><span class="line"><span class="xml">            background-color: greenyellow;</span></span><br><span class="line"><span class="xml">        &#125;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1 bg_red bg_yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> btEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btEle.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;c1&#x27;</span>)[<span class="number">0</span>].classList.toggle(<span class="string">&#x27;bg_yellow&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>input框获取焦点失去焦点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认的内容&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> iEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    iEle.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        iEle.value = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    iEle.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        iEle.value = <span class="string">&#x27;哈哈哈&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定时器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>结束<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> t = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inpEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//两个按钮点击实现开始和结束</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> startBEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> endBEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d3&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">        inpEle.value = currentTime.toLocaleString()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    startBEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//限定只能开一个定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!t) &#123;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setInterval</span>(showTime, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    endBEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(t)  <span class="comment">//清空定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//清空t，重置为空</span></span></span><br><span class="line"><span class="javascript">        t = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>select联动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span> <span class="attr">disabled</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> proEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> cityEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    data = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;河北省&quot;</span>: [<span class="string">&quot;廊坊&quot;</span>, <span class="string">&quot;邯郸&quot;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;北京&quot;</span>: [<span class="string">&quot;朝阳区&quot;</span>, <span class="string">&quot;海淀区&quot;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;山东&quot;</span>: [<span class="string">&quot;威海市&quot;</span>, <span class="string">&quot;烟台市&quot;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> opEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;option&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        opEle.innerText = i</span></span><br><span class="line"><span class="javascript">        opEle.value = i</span></span><br><span class="line"><span class="javascript">        proEle.appendChild(opEle)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//文本域变化</span></span></span><br><span class="line"><span class="javascript">    proEle.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> currentPro = proEle.value  <span class="comment">//选中谁取到谁，拿到省</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> currentCityList = data[currentPro]  <span class="comment">//得到省下的市</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//清空一下select中所有的option</span></span></span><br><span class="line"><span class="javascript">        cityEle.innerHTML = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//自己加个 请选择</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ss = <span class="string">&quot;&lt;option disabled selected&gt;--请选择--&lt;/option&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">        cityEle.innerHTML = ss</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; currentCityList.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentCity = currentCityList[j]</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> opEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;option&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            opEle.innerText = currentCity</span></span><br><span class="line"><span class="javascript">            opEle.value = currentCity</span></span><br><span class="line"><span class="javascript">            cityEle.appendChild(opEle)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/599b70c0.html</url>
    <content><![CDATA[<h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><p>层叠样式表，给HTML标签修改样式</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.语法结构:</span><br><span class="line">选择器 &#123;</span><br><span class="line">    属性名1:属性值1;</span><br><span class="line">    属性名2:属性值2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.注释语法:</span><br><span class="line">/*这是注释*/</span><br><span class="line"></span><br><span class="line">3.引入方式:</span><br><span class="line">	1) style内部直接编写代码(练习使用)</span><br><span class="line">	2) link标签引入外部css文件(正式环境中使用)</span><br><span class="line">	3) 标签内直接编写(不推荐使用，会产生冗余)</span><br><span class="line">	</span><br><span class="line">4.在编写css文件时注意代码的注释，避免找不到功能给谁用的</span><br></pre></td></tr></table></figure>

<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>为了能够更好的区分相似的标签，使用使用选择器更快的查找指定的标签</p>
<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">通过标签名直接查找</span><br><span class="line"><span class="comment">/*查找所有的div标签*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;  </span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">通过class值查找标签(关键符号为句点符)  	</span><br><span class="line"><span class="comment">/*查找所有含有c1样式类的标签*/</span></span><br><span class="line"><span class="selector-class">.c1</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><code>id</code>选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">通过id值查找标签(关键符号为井号#)</span><br><span class="line"><span class="comment">/*查找id为d1的标签*/</span></span><br><span class="line"><span class="selector-id">#d1</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: orange;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*body内所有的标签*/</span></span><br><span class="line">* &#123;</span><br><span class="line">      <span class="attribute">color</span>: darkgray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了区分嵌套标签之间的关系 我们发明了一种称呼</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;p&gt;</span><br><span class="line">			&lt;span&gt;&lt;/span&gt;</span><br><span class="line">		&lt;/p&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">span是p的儿子，是div的孙子也可以说是div的后代</span><br><span class="line">p是div的儿子，也是div后代，是span的父亲</span><br><span class="line">div是p的父亲，是span的爷爷，也可以说是他们的祖先</span><br></pre></td></tr></table></figure>

<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">特征是 空格</span><br><span class="line"><span class="comment">/*查找div内部所有的后代span*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;  </span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h4 id="儿子选择器"><a href="#儿子选择器" class="headerlink" title="儿子选择器"></a>儿子选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">特征是 &gt;</span><br><span class="line"><span class="comment">/*查找div内部所有的儿子span*/</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123; </span><br><span class="line">            <span class="attribute">color</span>: greenyellow;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h4 id="毗邻选择器"><a href="#毗邻选择器" class="headerlink" title="毗邻选择器"></a>毗邻选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">特征是 +</span><br><span class="line"><span class="comment">/*查找同级别下面紧挨着的第一个span(不能有其他标签间隔)*/</span></span><br><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">span</span> &#123;  </span><br><span class="line">            <span class="attribute">color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h4 id="弟弟选择器"><a href="#弟弟选择器" class="headerlink" title="弟弟选择器"></a>弟弟选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">特征是 ~</span><br><span class="line"><span class="comment">/*查找同级别下面所有的span(不需要紧挨着)*/</span></span><br><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">span</span> &#123;  </span><br><span class="line">            <span class="attribute">color</span>: deeppink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标签可以有默认的属性也可以自定义属性*/</span></span><br><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;d1&quot; class=&quot;c1&quot; name=&quot;jason&quot; pwd=&quot;<span class="number">123</span>&quot;&gt;<span class="number">123</span>&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[name]</span> &#123;  <span class="comment">/*查找含有name属性名的标签*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[name=<span class="string">&#x27;jason&#x27;</span>]</span> &#123;  <span class="comment">/*查找含有name属性名并且值为jason的*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[name=<span class="string">&#x27;jason&#x27;</span>]</span> &#123;  <span class="comment">/*查找含有name属性名并且值为jason的p*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="分组与嵌套"><a href="#分组与嵌套" class="headerlink" title="分组与嵌套"></a>分组与嵌套</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 多个相同选择器并列使用</span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">span</span>,<span class="selector-tag">p</span> &#123;  <span class="comment">/*查找div或者span或者p*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"># 多个不同选择器并列使用</span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-id">#d1</span>,<span class="selector-class">.c1</span> &#123;  <span class="comment">/*标签查找div id查找d1 类查找c1*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"># 不并列同样可以使用组合选择器</span><br><span class="line"><span class="selector-class">.c1</span> <span class="selector-tag">p</span> &#123;   <span class="comment">/*查找class为c1的后代p标签*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"># 直接筛选</span><br><span class="line">	<span class="selector-tag">div</span><span class="selector-id">#d1</span> &#123;  <span class="comment">/*查找id为d1的div标签*/</span></span><br><span class="line">  	<span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-class">.c1</span> &#123;  /查找class为c1的<span class="selector-tag">div</span>标签/</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪选择器"><a href="#伪选择器" class="headerlink" title="伪选择器"></a>伪选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*鼠标悬浮在上面*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   # 重点掌握 很多网址都在用!!!</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line">&quot;&quot;&quot;<span class="selector-tag">a</span>标签默认的颜色会变化 第一次是蓝色 后面是紫色&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">&quot;&quot;&quot;我们将<span class="selector-tag">input</span>框被用户点击即将录入数据的过程看成是focus状态(聚焦状态)&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首字调整&gt;&gt;&gt;:也是一种文档布局的方式</span></span><br><span class="line">p:first-letter &#123;</span><br><span class="line">            font-size: 48px;  /*字体大小*/</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 在文本的前面通过css动态渲染文本&gt;&gt;&gt;:特殊文本无法选中</span></span><br><span class="line">p:before &#123;</span><br><span class="line">            content: <span class="string">&#x27;嘿嘿&#x27;</span>;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;p&gt;::before言而有信 品行端正 光明磊落 待人以诚&lt;/p&gt;</span><br><span class="line"><span class="comment"># 在文本的后面通过css动态渲染文本&gt;&gt;&gt;:特殊文本无法选中</span></span><br><span class="line">p:after &#123;</span><br><span class="line">            content: <span class="string">&#x27;呵呵&#x27;</span>;</span><br><span class="line">            color: greenyellow;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;p&gt;言而有信 品行端正 光明磊落 待人以诚::after&lt;/p&gt;</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">以后我们在编写爬虫程序爬取页面内容的时候如果没有正常文本</span></span><br><span class="line"><span class="string">那么可能是因为伪元素选择器的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们学习了三种css引入方式并且学习了很多选择器</span></span><br><span class="line"><span class="string">那么如果出现多个选择器修改同一个标签样式 会优先参考谁的</span></span><br><span class="line"><span class="string">	研究基本选择器即可</span></span><br><span class="line"><span class="string">		标签选择器 类选择器 id选择器 行内选择器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 相同选择器不同导入方式</span></span><br><span class="line">	选择器系统遵循就进原则 从上往下谁离标签更近谁说了算</span><br><span class="line"><span class="comment"># 不同选择器不遵循就近原则&gt;&gt;&gt;:优先级</span></span><br><span class="line">	行内选择器 &gt; <span class="built_in">id</span>选择器 &gt; 类选择器 &gt; 标签选择器</span><br></pre></td></tr></table></figure>

<h3 id="字体相关"><a href="#字体相关" class="headerlink" title="字体相关"></a>字体相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>宽和高</span><br><span class="line">	只有块儿级标签可以设置 行内标签无法设置</span><br><span class="line">  	p &#123;</span><br><span class="line">            height: 1000px;</span><br><span class="line">            width: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="number">2.</span>字体大小</span><br><span class="line">	font-size: 99px;  <span class="comment"># 字体大小一般有固定的大小参考(肉眼适应)</span></span><br><span class="line"><span class="number">3.</span>粗细</span><br><span class="line">	font-weight: bolder;  </span><br><span class="line">  font-weight: lighter;</span><br><span class="line"><span class="number">4.</span>文本颜色</span><br><span class="line">	color:red;  <span class="comment"># 第一种</span></span><br><span class="line">  color:<span class="comment">#4e4e4e;  # 第二种</span></span><br><span class="line">  color:rgb(<span class="number">88</span>,<span class="number">88</span>,<span class="number">88</span>)  <span class="comment"># 第三种</span></span><br><span class="line"> 				rgba(<span class="number">88</span>,<span class="number">88</span>,<span class="number">88</span>,<span class="number">0.2</span>)  <span class="comment"># 最后一个参数调整透明度(0-1)</span></span><br><span class="line"><span class="number">5.</span>文字对齐</span><br><span class="line">	text-align: center;  <span class="comment"># 居中展示</span></span><br><span class="line"><span class="number">6.</span>文字装饰(很常用!!!)</span><br><span class="line">	text-decoration: none;  <span class="comment"># 主要用于去除a标签默认的下划线</span></span><br><span class="line"><span class="number">7.</span>首行缩进</span><br><span class="line">	text-indent: 32px;  <span class="comment"># 默认文字大小是16px</span></span><br></pre></td></tr></table></figure>

<h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">background-color: orange;  <span class="comment"># 背景颜色</span></span><br><span class="line">background-image: url(<span class="string">&#x27;url&#x27;</span>);  <span class="comment"># 背景图片</span></span><br><span class="line">background-repeat: no-repeat;  <span class="comment"># 是否铺满</span></span><br><span class="line">background-position:左右 上下;  <span class="comment"># 图片位置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;多个属性名前缀相同 那么可以简写&quot;&quot;&quot;</span></span><br><span class="line">background:orange url(<span class="string">&#x27;url&#x27;</span>);  <span class="comment"># 一个个编写即可 不写就默认</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如何实时修改图片位置</span></span><br><span class="line">	浏览器找到标签的css代码 然后方向键上下按住即可动态调整</span><br></pre></td></tr></table></figure>

<h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">        /*border-left-color: red;*/</span><br><span class="line">        /*border-left-style: solid;*/</span><br><span class="line">        /*border-left-width: 3px;*/</span><br><span class="line">        /*多个属性有相同的前缀  一般都可以简写*/</span><br><span class="line">        /*border-left: 5px red  solid;   !*没有顺序*!*/</span><br><span class="line">        /*border-top:orange 10px dotted;*/</span><br><span class="line">        /*border-right: black dashed 5px;*/</span><br><span class="line">        /*border-bottom: deeppink 8px solid;*/</span><br><span class="line">        /*多个属性有相同的前缀  一般都可以简写*/</span><br><span class="line">        border: 5px red solid;  /*上下左右一致*/</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">        height: 500px;</span><br><span class="line">        width: 500px;</span><br><span class="line">        border: 5px solid red;</span><br><span class="line">      	/*画圆*/</span><br><span class="line">        border-radius: <span class="number">50</span>%;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a><code>display</code>属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">            display: inline;  /*行内*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span &#123;</span><br><span class="line">            /*display: block;  !*块级*!*/</span><br><span class="line">            display: none;</span><br><span class="line">            /*</span><br><span class="line">            隐藏标签 页面上看不见也不再占用页面位置</span><br><span class="line">            但是通过浏览器查找标签是可以看到的</span><br><span class="line">            到后面学习django会讲跨站请求伪造(钓鱼网站)</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            /*</span><br><span class="line">            具备块级标签可以修改长宽的特性</span><br><span class="line">            也具备行内标标签文本多大就占多大的特性</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">以快递盒为例</span></span><br><span class="line"><span class="string">	1.快递盒与快递盒之间的距离			外边距(标签之间的距离)</span></span><br><span class="line"><span class="string">	2.快递盒的厚度								边框</span></span><br><span class="line"><span class="string">	3.内部物品到盒子的距离				 内边距(文本内容到边框的距离)</span></span><br><span class="line"><span class="string">	4.物品本身的大小							 文本大小</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># body标签默认自带8px的外边距 在编写的时候应该提前去掉</span></span><br><span class="line">	 body &#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="number">1.</span>外边距(标签之间的距离)</span><br><span class="line">	margin简写</span><br><span class="line">  	margin:0px;  <span class="comment"># 上下左右都一致</span></span><br><span class="line">    margin:10px 10px;  <span class="comment"># 第一个控制上下 第二个控制左右</span></span><br><span class="line">    margin:20px 10px 20px;  <span class="comment"># 上 左右 下</span></span><br><span class="line">    margin:10px 2px 3px 5px;  <span class="comment"># 上 右 下 左</span></span><br><span class="line"><span class="number">2.</span>内边距(文本内容到边框的距离)</span><br><span class="line">	padding简写</span><br><span class="line">  	padding:0px;  <span class="comment"># 上下左右都一致</span></span><br><span class="line">    padding:10px 10px;  <span class="comment"># 第一个控制上下 第二个控制左右</span></span><br><span class="line">    padding:20px 10px 20px;  <span class="comment"># 上 左右 下</span></span><br><span class="line">    padding:10px 2px 3px 5px;  <span class="comment"># 上 右 下 左</span></span><br></pre></td></tr></table></figure>

<h3 id="fload浮动"><a href="#fload浮动" class="headerlink" title="fload浮动"></a><code>fload</code>浮动</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CSS中，任何元素都可以浮动，浮动元素会生成一个块级框，而不论它本身是何种元素，主要用于页面布局</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">  <span class="number">1</span>·浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止</span><br><span class="line">  <span class="number">2.</span>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样</span><br><span class="line">  </span><br><span class="line">取值:</span><br><span class="line">  left: 向左浮动</span><br><span class="line">  right: 向右浮动</span><br><span class="line">  none: 默认值，不浮动</span><br><span class="line">    </span><br><span class="line">浮动会造成父标签塌陷问题,如下例</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#d1 &#123;</span></span><br><span class="line">            border: 3px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#d2 &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            height: 80px;</span><br><span class="line">            width: 80px;</span><br><span class="line">            <span class="built_in">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#d3 &#123;</span></span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            height: 80px;</span><br><span class="line">            width: 80px;</span><br><span class="line">            <span class="built_in">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;d2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;d3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">解决办法:</span><br><span class="line">  <span class="number">1.</span>可以再写一个div撑出</span><br><span class="line">  <span class="number">2.</span>关键字clear</span><br><span class="line">  <span class="number">3.</span>通用解决策略,只要父标签塌陷就使用</span><br><span class="line">      .clearfix:after &#123;</span><br><span class="line">            content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    上述中在<span class="built_in">id</span>=<span class="string">&quot;d1&quot;</span>后加<span class="class"><span class="keyword">class</span>=&quot;<span class="title">clearfix</span>&quot;属性即可</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">浏览器默认文本优先展示(<span class="params">出现塌陷时</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>静态定位	static</span><br><span class="line">	所有的标签默认都是静态定位即不能改变位置</span><br><span class="line"><span class="number">2.</span>相对定位	relative</span><br><span class="line">	相对标签原来的位置做定位</span><br><span class="line"><span class="number">3.</span>绝对定位  absolute  </span><br><span class="line">	相对已经定位过的父标签做定位(没有则参考body标签)</span><br><span class="line">    	eg:小米官网导航条内购物车</span><br><span class="line"><span class="number">4.</span>固定定位  fixed</span><br><span class="line">	相对浏览器窗口做定位</span><br><span class="line">    	eg:小米官网右边回到顶部</span><br><span class="line">      </span><br><span class="line">如何使用css完成定位  </span><br><span class="line">	定位关键字position</span><br><span class="line">    位置关键字left、right、top、bottom</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:  red;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50px</span>;  <span class="comment">/*从左往右 负数方向相反*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50px</span>;  <span class="comment">/*从上往下 负数方向相反*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;  <span class="comment">/* 默认是static 不能移动 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* relative 将不是定位的标签改成定位的标签 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:  red;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: greenyellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="是否脱离文档流"><a href="#是否脱离文档流" class="headerlink" title="是否脱离文档流"></a>是否脱离文档流</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标签位置改变之后 原来的位置是否会空出来</span></span><br><span class="line">	如果空出来了被其他标签自动占有 那么表示脱离否则不脱离</span><br><span class="line"></span><br><span class="line">脱离文档流</span><br><span class="line">   浮动、绝对定位、固定定位</span><br><span class="line">不脱离文档流</span><br><span class="line">   相对定位</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--浮动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: red;float: right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: greenyellow;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: red;position: relative;left: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: greenyellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: yellow;position: absolute;left: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当没有父标签做定位，此时参考 body --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: yellow;position: fixed;bottom: 30px;right: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="溢出属性"><a href="#溢出属性" class="headerlink" title="溢出属性"></a>溢出属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 圆形头像</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#d1 &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            border: 3px solid blue;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#d1 img &#123;</span></span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;111.jpeg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="z-index属性"><a href="#z-index属性" class="headerlink" title="z-index属性"></a><code>z-index</code>属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器平面不是一个二维坐标系而是一个三维坐标系</span></span><br><span class="line">eg:百度登录或者退出界面&gt;&gt;&gt;:三明治结构(模态框)</span><br><span class="line">    <span class="number">1.</span>最底部是正常内容(z=<span class="number">0</span>)  最远</span><br><span class="line">    <span class="number">2.</span>黑色的透明区(z=<span class="number">99</span>)    中间</span><br><span class="line">    <span class="number">3.</span>白色的注册区域(z=<span class="number">100</span>)  离用户最近</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">99</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">100</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是底层内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点点点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rgba(<span class="number">124</span>,<span class="number">124</span>,<span class="number">124</span>,<span class="number">0.5</span>)</span><br><span class="line">	只影响颜色</span><br><span class="line">opacity:<span class="number">0.5</span></span><br><span class="line">    影响颜色和字体</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="博客园首页案例"><a href="#博客园首页案例" class="headerlink" title="博客园首页案例"></a>博客园首页案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;blog.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Xxx的博客<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-autograph&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这个家伙很懒，什么都没留下<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微信公众号<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-label&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>#Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>#Golang<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>#Linux<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2022/2/7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一片很重要的文章，详细看看....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-label&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python&amp;nbsp&amp;nbsp#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这是博客园的css样式文件*/</span></span><br><span class="line"><span class="comment">/*通用样式*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*左侧样式*/</span></span><br><span class="line"><span class="selector-class">.blog-left</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">78</span>, <span class="number">78</span>, <span class="number">78</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*头像设置*/</span></span><br><span class="line"><span class="selector-class">.left-head</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-head</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-name</span>, <span class="selector-class">.left-autograph</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: darkgray;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-info</span>, <span class="selector-class">.left-label</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*右侧样式*/</span></span><br><span class="line"><span class="selector-class">.blog-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">40px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid red;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-date</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-abstract</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-label</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery基础</title>
    <url>/889563.html</url>
    <content><![CDATA[<h2 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h2><ol>
<li><p>jQuery是一个轻量级的、快速简洁的、兼容多浏览器的JavaScript库。</p>
</li>
<li><p>jQuery使用户能够更方便地处理HTML Document、Events、实现动画效果、方便地进行Ajax交互，能够极大地简化JavaScript编程。它的宗旨就是：“Write less, do more.“（让你用更少的代码完成更多的事情）</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210313141736082.png" alt="image-20210313141736082"></p>
<span id="more"></span>
<h2 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h2></li>
<li><p>一款轻量级的JS框架。jQuery核心js文件才几十kb，不会影响页面加载速度。</p>
</li>
<li><p>丰富的DOM选择器,jQuery的选择器用起来很方便，比如要找到某个DOM对象的相邻元素，JS可能要写好几行代码，而jQuery一行代码就搞定了，再比如要将一个表格的隔行变色，jQuery也是一行代码搞定。</p>
</li>
<li><p>链式表达式。jQuery的链式操作可以把多个操作写在一行代码里，更加简洁。</p>
</li>
<li><p>事件、样式、动画支持。jQuery还简化了js操作css的代码，并且代码的可读性也比js要强。</p>
</li>
<li><p>Ajax操作支持。jQuery简化了AJAX操作，后端只需返回一个JSON格式的字符串就能完成与前端的通信。</p>
</li>
<li><p>跨浏览器兼容。jQuery基本兼容了现在主流的浏览器，不用再为浏览器的兼容问题而伤透脑筋。</p>
</li>
<li><p>插件扩展开发。jQuery有着丰富的第三方的插件，例如：树形菜单、日期控件、图片切换插件、弹出窗口等等基本前端页面上的组件都有对应插件，并且用jQuery插件做出来的效果很炫，并且可以根据自己需要去改写和封装插件，简单实用。</p>
</li>
</ol>
<h4 id="针对导入问题"><a href="#针对导入问题" class="headerlink" title="针对导入问题"></a>针对导入问题</h4><p>下载链接：<a href="https://jquery.com/">jQuery官网</a></p>
<p>前端免费的CDN网站：<a href="https://www.bootcdn.cn/">CDN加速服务</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.文件下载到了本地，如何解决多个文件反复书写引入语句的代码</span><br><span class="line">  可以借助与pycharm自动初始化代码功能完成自动添加</span><br><span class="line">  </span><br><span class="line">2.直接引入JQuery提供的CDN服务（基于网络直接请求加载）</span><br><span class="line">  CDN:内容分发网络</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  导入步骤如下：</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210313135547190.png" alt="image-20210313135547190"></p>
<h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><p>通过jQuery方法得到的标签对象称之为<strong>jQuery对象</strong>对象。<strong>jQuery对象</strong>是 jQuery独有的。如果一个对象是 <strong>jQuery对象</strong>，那么它就可以使用<strong>jQuery</strong>里的方法：</p>
<p>例如**$(“#d1”)**。</p>
<p>**$(“#d1”)**的意思是：获取id值为 <strong>d1</strong> 的元素的html代码。是jQuery里的方法。</p>
<p>相当于<strong>JS对象</strong>：<strong>document.getElementById(“d1”);</strong></p>
<p><strong>jQuery对象</strong>是包装<strong>原生JS对象</strong>后产生的，但是<strong>jQuery对象</strong>无法使用<strong>JS对象</strong>的任何方法，同理<strong>JS对象</strong>也不能使用<strong>jQuery</strong>里的方法。</p>
<p><strong>jQuery对象</strong>与<strong>原生JS对象</strong>之间的关系：它们两个之间虽然彼此不能调用彼此的方法，但是它们两个之间是有联系的</p>
<p><strong>jQuery对象</strong>相当于一个数组，里面是一个个的<strong>原生JS对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#d1&quot;) //jQuery对象</span><br><span class="line">document.getElementById(&quot;d1&quot;) //原生JS对象</span><br><span class="line">$(&quot;#d1&quot;)[0] // 原生JS对象 -- 重点：注意两个对象直接的转换，容易混淆 </span><br></pre></td></tr></table></figure>

<p>拿上面那个例子举例，如何把原生JS对象转成jQuery对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$($(&quot;#d1&quot;)[0]）//用此类方法把原生JS对象包起来得到的就是jQuery对象</span><br></pre></td></tr></table></figure>

<h2 id="jQuery基础语法"><a href="#jQuery基础语法" class="headerlink" title="jQuery基础语法"></a>jQuery基础语法</h2><p>　支持链式操作；</p>
<p>　　在变量前加”$”符号（var $variable = jQuery 对象）；</p>
<p>　　注：此规定并不是强制要求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(selector).action()</span><br></pre></td></tr></table></figure>

<h2 id="查找标签"><a href="#查找标签" class="headerlink" title="查找标签"></a>查找标签</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p><strong>id选择器：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>标签选择器：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>class选择器：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.c1&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>配合使用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div.c1&quot;)  // 找到class类等于c1的div标签</span><br><span class="line">$(&quot;div#d1&quot;)  // 找到id等于d1的div标签</span><br></pre></td></tr></table></figure>

<p><strong>所有元素选择器：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;*&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>组合选择器：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id, .className, tagName&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="层级选择器："><a href="#层级选择器：" class="headerlink" title="层级选择器："></a><strong>层级选择器：</strong></h3><p><em>x和y可以为任意选择器</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;x y&quot;);// x的所有后代y（子子孙孙）</span><br><span class="line">$(&quot;x &gt; y&quot;);// x的所有儿子y（儿子）</span><br><span class="line">$(&quot;x + y&quot;)// 找到所有紧挨在x后面的y</span><br><span class="line">$(&quot;x ~ y&quot;)// x之后所有的兄弟y</span><br></pre></td></tr></table></figure>

<h3 id="基本筛选器："><a href="#基本筛选器：" class="headerlink" title="基本筛选器："></a><strong>基本筛选器：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:first // 第一个</span><br><span class="line">:last // 最后一个</span><br><span class="line">:eq(index)// 索引等于index的那个元素</span><br><span class="line">:even // 匹配所有索引值为偶数的元素，从 0 开始计数</span><br><span class="line">:odd // 匹配所有索引值为奇数的元素，从 0 开始计数</span><br><span class="line">:gt(index)// 匹配所有大于给定索引值的元素</span><br><span class="line">:lt(index)// 匹配所有小于给定索引值的元素</span><br><span class="line">:not(元素选择器)// 移除所有满足not条件的标签</span><br><span class="line">:has(元素选择器)// 选取所有包含一个或多个标签在其内的标签(指的是从后代元素找)</span><br><span class="line"></span><br><span class="line"># 例子：</span><br><span class="line">$(&quot;div:has(h1)&quot;)// 找到所有后代中有h1标签的div标签</span><br><span class="line">$(&quot;div:has(.c1)&quot;)// 找到所有后代中有c1样式类的div标签</span><br><span class="line">$(&quot;li:not(.c1)&quot;)// 找到所有不包含c1样式类的li标签</span><br><span class="line">$(&quot;li:not(:has(a))&quot;)// 找到所有后代中不含a标签的li标签</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #bg &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            background-color: rgba(0,0,0,0.3);</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        #content &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -150px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        #content p:nth-child(3) &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;弹出&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">&lt;div id=&quot;bg&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label for=&quot;inp-username&quot;&gt;用户名: &lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;inp-username&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;label for=&quot;inp-password&quot;&gt;密码: &lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;inp-password&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;提交&quot; &gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;取消&quot; id=&quot;cancel&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    $(&quot;#btn&quot;)[0].onclick=function () &#123;</span><br><span class="line">        $(&quot;#bg&quot;).css(&quot;display&quot;,&quot;block&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(&quot;#cancel&quot;)[0].onclick=function () &#123;</span><br><span class="line">        $(&quot;#inp-username&quot;).val(&quot;&quot;)</span><br><span class="line">        $(&quot;#inp-password&quot;).val(&quot;&quot;)</span><br><span class="line">        $(&quot;#bg&quot;).css(&quot;display&quot;,&quot;none&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">JQ版自定义模态框</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器："><a href="#属性选择器：" class="headerlink" title="属性选择器："></a><strong>属性选择器：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[attribute]</span><br><span class="line">[attribute=value]// 属性等于</span><br><span class="line">[attribute!=value]// 属性不等于</span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 示例</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;input type=&quot;password&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot;&gt;</span><br><span class="line">$(&quot;input[type=&#x27;checkbox&#x27;]&quot;);// 取到checkbox类型的input标签</span><br><span class="line">$(&quot;input[type!=&#x27;text&#x27;]&quot;);// 取到类型不是text的input标签</span><br></pre></td></tr></table></figure>

<h3 id="表单筛选器："><a href="#表单筛选器：" class="headerlink" title="表单筛选器："></a><strong>表单筛选器</strong>：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:text</span><br><span class="line">:password:file</span><br><span class="line">:radio</span><br><span class="line">:checkbox</span><br><span class="line">:submit</span><br><span class="line">:reset</span><br><span class="line">:button</span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;:checkbox&quot;)  // 找到所有的checkbox</span><br></pre></td></tr></table></figure>

<p>表单对象属性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:enabled</span><br><span class="line">:disabled</span><br><span class="line">:checked</span><br><span class="line">:selected</span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<p>找到可用的input标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input name=&quot;email&quot; disabled=&quot;disabled&quot; /&gt;</span><br><span class="line">  &lt;input name=&quot;id&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;input:enabled&quot;)  // 找到可用的input标签</span><br></pre></td></tr></table></figure>

<p> 找到被选中的option：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;s1&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;beijing&quot;&gt;北京市&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;shanghai&quot;&gt;上海市&lt;/option&gt;</span><br><span class="line">  &lt;option selected value=&quot;guangzhou&quot;&gt;广州市&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;shenzhen&quot;&gt;深圳市&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;:selected&quot;)  // 找到所有被选中的option</span><br></pre></td></tr></table></figure>

<h2 id="筛选器方法"><a href="#筛选器方法" class="headerlink" title="筛选器方法"></a>筛选器方法</h2><p>下一个元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).next()</span><br><span class="line">$(&quot;#id&quot;).nextAll()</span><br><span class="line">$(&quot;#id&quot;).nextUntil(&quot;#i2&quot;)</span><br></pre></td></tr></table></figure>

<p>上一个元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).prev()</span><br><span class="line">$(&quot;#id&quot;).prevAll()</span><br><span class="line">$(&quot;#id&quot;).prevUntil(&quot;#i2&quot;)</span><br></pre></td></tr></table></figure>

<p>父亲元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).parent()</span><br><span class="line">$(&quot;#id&quot;).parents()  // 查找当前元素的所有的父辈元素$(&quot;#id&quot;).parentsUntil() // 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。</span><br></pre></td></tr></table></figure>

<p>儿子和兄弟元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).children();// 儿子们</span><br><span class="line">$(&quot;#id&quot;).siblings();// 兄弟们</span><br></pre></td></tr></table></figure>

<p>查找</p>
<p>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).find(&quot;p&quot;)</span><br></pre></td></tr></table></figure>

<p>等价于$(“div p”)</p>
<p>筛选</p>
<p>筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).filter(&quot;.c1&quot;)  // 从结果集中过滤出有c1样式类的</span><br></pre></td></tr></table></figure>

<p>等价于 $(“div.c1”)</p>
<p>补充：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.first() // 获取匹配的第一个元素</span><br><span class="line">.last() // 获取匹配的最后一个元素</span><br><span class="line">.not() // 从匹配元素的集合中删除与指定表达式匹配的元素</span><br><span class="line">.has() // 保留包含特定后代的元素，去掉那些不含有指定后代的元素。</span><br><span class="line">.eq() // 索引值等于指定值的元素</span><br></pre></td></tr></table></figure>

<p>示例：左侧菜单</p>
<p>左侧菜单栏</p>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><p>样式类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addClass();// 添加指定的CSS类名。</span><br><span class="line">removeClass();// 移除指定的CSS类名。</span><br><span class="line">hasClass();// 判断样式存不存在</span><br><span class="line">toggleClass();// 切换CSS类名，如果有就移除，如果没有就添加。</span><br></pre></td></tr></table></figure>

<p>示例：开关灯和模态框</p>
<p>CSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">css(&quot;color&quot;,&quot;red&quot;)//DOM操作：tag.style.color=&quot;red&quot;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;color&quot;, &quot;red&quot;); //将所有p标签的字体设置为红色</span><br></pre></td></tr></table></figure>

<h3 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">offset()// 获取匹配元素在当前窗口的相对偏移或设置元素位置</span><br><span class="line">position()// 获取匹配元素相对父元素的偏移</span><br><span class="line">scrollTop()// 获取匹配元素相对滚动条顶部的偏移</span><br><span class="line">scrollLeft()// 获取匹配元素相对滚动条左侧的偏移</span><br></pre></td></tr></table></figure>

<p><code>.offset()</code>方法允许我们检索一个元素相对于文档（document）的当前位置。</p>
<p>和 <code>.position()</code>的差别在于： <code>.position()</code>是相对于相对于父级元素的位移。</p>
<p>示例：</p>
<p>返回顶部示例</p>
<h3 id="尺寸："><a href="#尺寸：" class="headerlink" title="尺寸："></a>尺寸：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">height()</span><br><span class="line">width()</span><br><span class="line">innerHeight()</span><br><span class="line">innerWidth()</span><br><span class="line">outerHeight()</span><br><span class="line">outerWidth()</span><br></pre></td></tr></table></figure>

<h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><p>操作标签内部文本：</p>
<table>
<thead>
<tr>
<th align="center">JavaScript</th>
<th align="center">jQuery</th>
</tr>
</thead>
<tbody><tr>
<td align="center">innerText</td>
<td align="center">text()</td>
</tr>
<tr>
<td align="center">innerHTML</td>
<td align="center">html()</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210313180224291.png" alt="image-20210313180224291"></p>
<p>如何获取input框用户输入的内容：</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210313183421953.png" alt="image-20210313183421953"></p>
<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><p>用于ID等或自定义属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attr(Name)// 返回第一个匹配元素的属性值</span><br><span class="line">attr(Name, Value)// 为所有匹配元素设置一个属性值</span><br><span class="line">attr(&#123;k1: v1, k2:v2&#125;)// 为所有匹配元素设置多个属性值</span><br><span class="line">removeAttr()// 从每一个匹配的元素中删除一个属性</span><br><span class="line">在用变量名存储对象的时候，js中推荐使用</span><br><span class="line">	xxxEle		标签对象</span><br><span class="line">在jQuery中推荐使用</span><br><span class="line">	$xxxEle		jQuery对象</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>JavaScript</th>
<th>jQuery</th>
</tr>
</thead>
<tbody><tr>
<td>setAttribute()</td>
<td>attr(name,value)</td>
</tr>
<tr>
<td>getAttribute()</td>
<td>attr(name)</td>
</tr>
<tr>
<td>removeAttribute()</td>
<td>removeAttr(name)</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">username</span>=<span class="string">&quot;jason&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;/body&gt;</span><br><span class="line">    </span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(<span class="string">&quot;id&quot;</span>)   <span class="comment">// 获取id 注意括号内必须传值，否则报错</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(<span class="string">&quot;class&quot;</span>) <span class="comment">// 获取class</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(<span class="string">&quot;username&quot;</span>) <span class="comment">// 获取自定义属性username</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(<span class="string">&quot;xxx&quot;</span>)  <span class="comment">// 获取没有的则返回undefined</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;ooo&quot;</span>) <span class="comment">// 添加属性</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).attr(&#123;<span class="string">&quot;user&quot;</span>:<span class="string">&quot;root&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123&quot;</span>&#125;) <span class="comment">// 添加多个属性，需以字典形式</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).removeAttr(<span class="string">&quot;xxx&quot;</span>) <span class="comment">// 删除属性 </span></span><br></pre></td></tr></table></figure>

<p>用于checkbox和radio</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prop() // 获取属性</span><br><span class="line">removeProp() // 移除属性</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p id=&quot;d1&quot; class=&quot;c1&quot; username=&quot;jason&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; checked&gt;111</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; &gt;222</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; &gt;333</span><br><span class="line"></span><br><span class="line">    &lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;&quot;&gt;111&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;&quot; selected&gt;222&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;&quot;&gt;333&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210313210501227.png" alt="image-20210313210501227"></p>
<p><strong>prop和attr的区别：</strong></p>
<p>attr全称attribute(属性) </p>
<p>prop全称property(属性)</p>
<p>虽然都是属性，但他们所指的属性并不相同，attr所指的属性是HTML标签属性，而prop所指的是js对象属性，可以认为attr是显式的，而prop是隐式的。</p>
<p>上图可以看到attr获取一个标签无论有没有被选中的都会得到checked或者undefined，而prop获取的是这个js对象的属性，因此checked为选中返回true，没选中返回false。这已经可以证明attr的局限性，它的作用范围只限于HTML标签内的属性</p>
<p>但要知道的是prop不支持获取标签的自定义属性。</p>
<p><strong>总结一下：</strong></p>
<ol>
<li>对于标签上有的能看到的属性和自定义属性都用attr</li>
<li>对于返回布尔值的比如checkbox、radio和option的是否被选中都用prop。</li>
</ol>
<h3 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h3><p>添加到指定元素<strong>内部</strong>的后面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(A).append(B)// 把B追加到A</span><br><span class="line">$(A).appendTo(B)// 把A追加到B</span><br></pre></td></tr></table></figure>

<p>添加到指定元素<strong>内部</strong>的前面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(A).prepend(B)// 把B前置到A</span><br><span class="line">$(A).prependTo(B)// 把A前置到B</span><br></pre></td></tr></table></figure>

<p>添加到指定元素<strong>外部</strong>的后面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(A).after(B)// 把B放到A的后面</span><br><span class="line">$(A).insertAfter(B)// 把A放到B的后面</span><br></pre></td></tr></table></figure>

<p>添加到指定元素<strong>外部</strong>的前面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(A).before(B)// 把B放到A的前面</span><br><span class="line">$(A).insertBefore(B)// 把A放到B的前面</span><br></pre></td></tr></table></figure>

<p>移除和清空元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remove()// 从DOM中删除所有匹配的元素。</span><br><span class="line">empty()// 删除匹配的元素集合中所有的子节点。</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p>点击按钮在表格添加一行数据。</p>
<p>点击每一行的删除按钮删除当前行数据。</p>
<p>替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replaceWith()</span><br><span class="line">replaceAll()</span><br></pre></td></tr></table></figure>

<p>克隆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clone()// 参数</span><br></pre></td></tr></table></figure>

<p>克隆示例：</p>
<p>点击复制按钮</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">click(function()&#123;...&#125;)</span><br><span class="line">hover(function()&#123;...&#125;)</span><br><span class="line">blur(function()&#123;...&#125;)</span><br><span class="line">focus(function()&#123;...&#125;)</span><br><span class="line">change(function()&#123;...&#125;)</span><br><span class="line">keyup(function()&#123;...&#125;)</span><br></pre></td></tr></table></figure>

<p>keydown和keyup事件组合示例：</p>
<p>按住shift实现批量操作</p>
<p>hover事件示例：</p>
<p>hover事件</p>
<p>实时监听input输入值变化示例：</p>
<p>input值变化事件</p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ol>
<li><code>.on( events [, selector ],function()&#123;&#125;)</code></li>
</ol>
<ul>
<li>events： 事件</li>
<li>selector: 选择器（可选的）</li>
<li>function: 事件处理函数</li>
</ul>
<h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><ol>
<li><code>.off( events [, selector ][,function()&#123;&#125;])</code></li>
</ol>
<p><code>off()</code> 方法移除用 <code>.on()</code>绑定的事件处理程序。</p>
<ul>
<li>events： 事件</li>
<li>selector: 选择器（可选的）</li>
<li>function: 事件处理函数</li>
</ul>
<h3 id="阻止后续事件执行"><a href="#阻止后续事件执行" class="headerlink" title="阻止后续事件执行"></a>阻止后续事件执行</h3><ol>
<li><code>return false; // 常见阻止表单提交等</code></li>
<li>e.preventDefault();</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;阻止默认事件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;&quot;&gt;</span><br><span class="line">    &lt;button id=&quot;b1&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;#b1&quot;).click(function (e) &#123;</span><br><span class="line">        alert(123);</span><br><span class="line">        //return false;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>像click、keydown等DOM中定义的事件，我们都可以使用<code>.on()</code>方法来绑定事件，但是<code>hover</code>这种jQuery中定义的事件就不能用<code>.on()</code>方法来绑定了。</p>
<p>想使用事件委托的方式绑定hover事件处理函数，可以参照如下代码分两步绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;ul&#x27;).on(&#x27;mouseenter&#x27;, &#x27;li&#x27;, function() &#123;//绑定鼠标进入事件</span><br><span class="line">    $(this).addClass(&#x27;hover&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&#x27;ul&#x27;).on(&#x27;mouseleave&#x27;, &#x27;li&#x27;, function() &#123;//绑定鼠标划出事件</span><br><span class="line">    $(this).removeClass(&#x27;hover&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;阻止事件冒泡&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;span&gt;点我&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;span&quot;).click(function (e) &#123;</span><br><span class="line">        alert(&quot;span&quot;);</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&quot;p&quot;).click(function () &#123;</span><br><span class="line">        alert(&quot;p&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;div&quot;).click(function () &#123;</span><br><span class="line">        alert(&quot;div&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页面载入"><a href="#页面载入" class="headerlink" title="页面载入"></a>页面载入</h3><p>当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。</p>
<p>两种写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">// 在这里写你的JS代码...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>简写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">// 你在这里写你的代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>文档加载完绑定事件，并且阻止默认事件发生：</p>
<p>登录校验示例</p>
<h3 id="与window-onload的区别"><a href="#与window-onload的区别" class="headerlink" title="与window.onload的区别"></a>与window.onload的区别</h3><ul>
<li>window.onload()函数有覆盖现象，必须等待着图片资源加载完成之后才能调用</li>
<li>jQuery的这个入口函数没有函数覆盖现象，文档加载完成之后就可以调用（建议使用此函数）</li>
</ul>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托是通过事件冒泡的原理，利用父标签去捕获子标签的事件。</p>
<p>示例：</p>
<p>表格中每一行的编辑和删除按钮都能触发相应的事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;table&quot;).on(&quot;click&quot;, &quot;.delete&quot;, function () &#123;</span><br><span class="line">  // 删除按钮绑定的事件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 基本</span><br><span class="line">show([s,[e],[fn]])</span><br><span class="line">hide([s,[e],[fn]])</span><br><span class="line">toggle([s],[e],[fn])</span><br><span class="line">// 滑动</span><br><span class="line">slideDown([s],[e],[fn])</span><br><span class="line">slideUp([s,[e],[fn]])</span><br><span class="line">slideToggle([s],[e],[fn])</span><br><span class="line">// 淡入淡出</span><br><span class="line">fadeIn([s],[e],[fn])</span><br><span class="line">fadeOut([s],[e],[fn])</span><br><span class="line">fadeTo([[s],o,[e],[fn]])</span><br><span class="line">fadeToggle([s,[e],[fn]])</span><br><span class="line">// 自定义（了解即可）</span><br><span class="line">animate(p,[s],[e],[fn])</span><br></pre></td></tr></table></figure>

<p>自定义动画示例：</p>
<p>点赞特效简单示例</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p><strong>jQuery.each(collection, callback(indexInArray, valueOfElement))：</strong></p>
<p>描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li =[10,20,30,40]</span><br><span class="line">$.each(li,function(i, v)&#123;</span><br><span class="line">  console.log(i, v);//index是索引，ele是每次循环的具体元素。</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">010</span><br><span class="line">120</span><br><span class="line">230</span><br><span class="line">340</span><br></pre></td></tr></table></figure>

<p><strong>.each(function(index, Element))：</strong></p>
<p>描述：遍历一个jQuery对象，为每个匹配元素执行一个函数。</p>
<p><code>.each()</code> 方法用来迭代jQuery对象中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。由于回调函数是在当前DOM元素为上下文的语境中触发的，所以关键字 <code>this</code> 总是指向这个元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 为每一个li标签添加foo</span><br><span class="line">$(&quot;li&quot;).each(function()&#123;</span><br><span class="line">  $(this).addClass(&quot;c1&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意: jQuery的方法返回一个jQuery对象，遍历jQuery集合中的元素 - 被称为隐式<em>迭代</em>的过程。当这种情况发生时，它通常不需要显式地循环的 <code>.each()</code>方法：</p>
<p>也就是说，上面的例子没有必要使用each()方法，直接像下面这样写就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;li&quot;).addClass(&quot;c1&quot;);  // 对所有标签做统一操作</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>在遍历过程中可以使用 <code>return false</code>提前结束each循环。</p>
<p><strong>终止each循环</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return false；</span><br></pre></td></tr></table></figure>

<p>伏笔…</p>
<h3 id="data"><a href="#data" class="headerlink" title=".data()"></a>.data()</h3><p>在匹配的元素集合中的所有元素上存储任意相关数据或返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。</p>
<p><strong>.data(key, value):</strong></p>
<p>描述：在匹配的元素上存储任意相关数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).data(&quot;k&quot;,100);//给所有div标签都保存一个名为k，值为100</span><br></pre></td></tr></table></figure>

<p><strong>.data(key):</strong></p>
<p>描述: 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值—通过 <code>.data(name, value)</code>或 <code>HTML5 data-*</code>属性设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).data(&quot;k&quot;);//返回第一个div标签中保存的&quot;k&quot;的值</span><br></pre></td></tr></table></figure>

<p>.removeData(key):</p>
<p>描述：移除存放在元素上的数据，不加key参数表示移除所有保存的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).removeData(&quot;k&quot;);  //移除元素上存放k对应的数据</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>模态框编辑的数据回填表格</p>
<h3 id="插件-了解即可"><a href="#插件-了解即可" class="headerlink" title="插件(了解即可)"></a>插件(了解即可)</h3><p>jQuery.extend(object)</p>
<p>jQuery的命名空间下添加新的功能。多用于插件开发者向 jQuery 中添加新函数时使用。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">jQuery.extend(&#123;</span><br><span class="line">  min:function(a, b)&#123;return a &lt; b ? a : b;&#125;,</span><br><span class="line">  max:function(a, b)&#123;return a &gt; b ? a : b;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">jQuery.min(2,3);// =&gt; 2</span><br><span class="line">jQuery.max(4,5);// =&gt; 5</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>一个对象的内容合并到jQuery的原型，以提供新的jQuery实例方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  jQuery.fn.extend(&#123;</span><br><span class="line">    check:function()&#123;</span><br><span class="line">      return this.each(function()&#123;this.checked =true;&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    uncheck:function()&#123;</span><br><span class="line">      return this.each(function()&#123;this.checked =false;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">// jQuery对象可以使用新添加的check()方法了。</span><br><span class="line">$(&quot;input[type=&#x27;checkbox&#x27;]&quot;).check();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>单独写在文件中的扩展：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function(jq)&#123;</span><br><span class="line">  jq.extend(&#123;</span><br><span class="line">    funcName:function()&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap框架</title>
    <url>/f2f17718.html</url>
    <content><![CDATA[<p>主要查看官方文档: <a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目</span><br><span class="line">Bootstrap框架版本有 <span class="number">2.</span>x <span class="number">3.</span>x <span class="number">4.</span>x <span class="comment"># 推荐使用3.x</span></span><br><span class="line"><span class="number">3.</span>x版本文档: https://v3.bootcss.com/</span><br><span class="line">    </span><br><span class="line">使用框架调整页面样式一般都是操作标签的<span class="class"><span class="keyword">class</span>属性</span></span><br><span class="line"><span class="class"><span class="title">bootstarp</span>需要依赖<span class="title">jQuery</span>才能正常执行</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">引入方式:</span></span><br><span class="line">  <span class="number">1.</span>本地引入</span><br><span class="line">    Bootstrap下载地址: https://github.com/twbs/bootstrap/releases/download/v3<span class="number">.4</span><span class="number">.1</span>/bootstrap-<span class="number">3.4</span><span class="number">.1</span>-dist.<span class="built_in">zip</span></span><br><span class="line">    先导入jQuery文件</span><br><span class="line">    导入Bootstrap的css文件</span><br><span class="line">    导入Bootstrap的js文件</span><br><span class="line">    </span><br><span class="line">    &lt;script src=<span class="string">&quot;jQuery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap-3.4.1-dist/css/bootstrap.css&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;bootstrap-3.4.1-dist/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">      </span><br><span class="line">  <span class="number">2.</span>CDN引入</span><br><span class="line">    引入jQuery CND</span><br><span class="line">    引入Bootstrap的css CDN</span><br><span class="line">    引入Bootstrap的js  CDN</span><br><span class="line">    </span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">PS: pycharm中第一次最好使用本地导入，可以有代码提示</span><br><span class="line">  </span><br><span class="line">Normalize.css:增强跨浏览器渲染的一致性</span><br><span class="line">  https://necolas.github.io/normalize.css/</span><br></pre></td></tr></table></figure>

<h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">container 左右留白</span><br><span class="line">container-fluid 左右不留白</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;jQuery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap-3.4.1-dist/css/bootstrap.css&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;bootstrap-3.4.1-dist/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .c1 &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span> <span class="title">c1</span>&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多<span class="number">12</span>列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局</span><br><span class="line"></span><br><span class="line">row 行</span><br><span class="line"></span><br><span class="line">一行中占几份，添加下列所有自适应显示</span><br><span class="line">col-xs-<span class="number">1</span>  </span><br><span class="line">col-sm-<span class="number">1</span></span><br><span class="line">col-md-<span class="number">1</span></span><br><span class="line">col-lg-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>以下代码可以看到被分成了12份</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jQuery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap-3.4.1-dist/css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap-3.4.1-dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container table-responsive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered table-hover table table-condensed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>PassWord<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>tony<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>jason<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>313<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>007<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>800<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><code>class=form-control</code></p>
<p>checkbox和radio最好加，否则样式会更难看</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>点点点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-lg&quot;</span>&gt;</span>这是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span>这是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success btn-xs&quot;</span>&gt;</span>这是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>这是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>这是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=2777952672,1831955507&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=313&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-rounded&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=2777952672,1831955507&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=313&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-circle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=2777952672,1831955507&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=313&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>bootstrap自带的Glyphicons 字体图标</span><br><span class="line">通过span标签修改<span class="class"><span class="keyword">class</span>属性值</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">glyphicon</span> <span class="title">glyphicon</span>-<span class="title">user</span>&quot; <span class="title">style</span>=&quot;<span class="title">color</span>:</span> red;<span class="string">&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.fontawesome网站</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  官网: http://www.fontawesome.com.cn/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  文件引入方式: &lt;link rel=&quot;</span>stylesheet<span class="string">&quot; href=&quot;</span>font-awesome-<span class="number">4.7</span><span class="number">.0</span>/css/font-awesome.<span class="built_in">min</span>.css<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  使用: &lt;i class=&quot;</span>fa fa-university<span class="string">&quot; aria-hidden=&quot;</span>true<span class="string">&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">3. 两者之间完全兼容</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod基本使用</title>
    <url>/be528f81.html</url>
    <content><![CDATA[<h2 id="Pod原理"><a href="#Pod原理" class="headerlink" title="Pod原理"></a>Pod原理</h2><blockquote>
<p>Pod是Kubernetes最基本的调度单元</p>
</blockquote>
<p>一个Pod不等于一个容器</p>
<span id="more"></span>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220213160259048.png" alt="image-20220213160259048"></p>
<p>Pod里面的容器都是共享同一个Network Namespace，但是在文件系统上是完全隔离的</p>
<h3 id="Pod网络"><a href="#Pod网络" class="headerlink" title="Pod网络"></a>Pod网络</h3><p>当新创建的容器和一个已经存在的容器共享一个Network Namespace时使用Container模式(–net=container:目标容器`)，缺点是有启动顺序，必须先启动一个容器后续容器才能加入</p>
<p>解决办法: 使用一个中间容器<code>Infra Container</code>，这个容器是Pod中第一个被创建的容器，这样后续容器加入到这个<code>Infra</code>容器中</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/pod-infra-container.png" alt="pod infra container"></p>
<h3 id="Pod文件系统"><a href="#Pod文件系统" class="headerlink" title="Pod文件系统"></a>Pod文件系统</h3><p>Pod中容器的文件系统默认是相互隔离的，要实现共享只需要在 Pod 的顶层声明一个 Volume，然后在需要共享这个 Volume 的容器中声明挂载即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/pod-volume-share.png" alt="pod containers share volumes"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/log/counter</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">count</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      i=0;</span></span><br><span class="line"><span class="string">      while true;</span></span><br><span class="line"><span class="string">      do</span></span><br><span class="line"><span class="string">        echo &quot;$i: $(date)&quot; &gt;&gt; /var/log/1.log;</span></span><br><span class="line"><span class="string">        i=$((i+1));</span></span><br><span class="line"><span class="string">        sleep 1;</span></span><br><span class="line"><span class="string">      done</span></span><br><span class="line"><span class="string"></span>    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">count-log</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">/bin/sh</span>,<span class="string">-c</span>,<span class="string">&#x27;tail -n+1 -f /opt/log/1.log&#x27;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/opt/log</span></span><br></pre></td></tr></table></figure>

<h2 id="Pod生命周期"><a href="#Pod生命周期" class="headerlink" title="Pod生命周期"></a>Pod生命周期</h2><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/pod-loap.jpg" alt="pod loap"></p>
<h3 id="Pod状态"><a href="#Pod状态" class="headerlink" title="Pod状态"></a>Pod状态</h3><p>通过<code>kubectl explain pod.status.phase</code>命令可以看到Pod的几种状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">挂起（Pending）：Pod 信息已经提交给了集群，但是还没有被调度器调度到合适的节点或者 Pod 里的镜像正在下载</span><br><span class="line">运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态</span><br><span class="line">成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启</span><br><span class="line">失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止</span><br><span class="line">未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败导致的</span><br></pre></td></tr></table></figure>

<p>创建Pod后可以通过<code>kubectl get pods &#123;POD&#125; -o yaml</code> </p>
<p>导出yaml的情况在 status–&gt;conditons 属性有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">astProbeTime：最后一次探测 Pod Condition 的时间戳。</span><br><span class="line">lastTransitionTime：上次 Condition 从一种状态转换到另一种状态的时间。</span><br><span class="line">message：上次 Condition 状态转换的详细描述。</span><br><span class="line">reason：Condition 最后一次转换的原因。</span><br><span class="line">status：Condition 状态类型，可以为 “True”, “False”, and “Unknown”.</span><br><span class="line">type：Condition 类型，包括以下方面：</span><br><span class="line">PodScheduled（Pod 已经被调度到其他 node 里）</span><br><span class="line">Ready（Pod 能够提供服务请求，可以被添加到所有可匹配服务的负载平衡池中）</span><br><span class="line">Initialized（所有的init containers已经启动成功）</span><br><span class="line">Unschedulable（调度程序现在无法调度 Pod，例如由于缺乏资源或其他限制）</span><br><span class="line">ContainersReady（Pod 里的所有容器都是 ready 状态）</span><br></pre></td></tr></table></figure>

<h3 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restartPolicy字段设置</span><br><span class="line">Always     当容器失效时，由kubelet自动重启该容器，是默认值</span><br><span class="line">OnFailure  当容器终止运行且退出码不为0时，由kubelet自动重启该容器 </span><br><span class="line">Never      不论容器运行状态如何，kubelet都不会重启该容器</span><br><span class="line"></span><br><span class="line">控制器对Pod的重启策略</span><br><span class="line">RC和DaemonSet：必须设置为Always，需要保证该容器持续运行。</span><br><span class="line">Job和CronJob：OnFailure或Never，确保容器执行完成后不再重启。</span><br><span class="line">kubelet：在Pod失效时自动重启它，不论将RestartPolicy设置为什么值，也不会对Pod进行健康检查。</span><br></pre></td></tr></table></figure>

<h3 id="初始化容器"><a href="#初始化容器" class="headerlink" title="初始化容器"></a>初始化容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Init Container 初始化容器，可以一个或多个</span><br><span class="line">使用场景:</span><br><span class="line">1.等待其他模块完成，例如WordPress先启动的数据库再启动后端等</span><br><span class="line">2.初始化配置，chown权限设置等</span><br><span class="line">3.将Pod注册到中央数据库、配置中心等</span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">init-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;-O&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/work-dir/index.html&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://www.baidu.com</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/work-dir&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/usr/share/nginx/html&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide  <span class="comment"># 得到Pod的IP</span></span><br><span class="line">curl PodIP  <span class="comment"># 此时出现百度的页面</span></span><br><span class="line"><span class="comment"># install容器先启动完成任务后状态为Completed，然后启动主容器，启动完成后状态就为Running Man</span></span><br><span class="line"><span class="comment"># emptyDir&#123;&#125; 是一个临时目录。数据会保存在kubelet的工作目录下，生命周期与Pod生命周期一致</span></span><br></pre></td></tr></table></figure>

<h3 id="Pod-Hook"><a href="#Pod-Hook" class="headerlink" title="Pod Hook"></a><code>Pod Hook</code></h3><p>Pod Hook 是由 kubelet 发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中</p>
<p>Kubernetes有以下两种钩子函数</p>
<p>PostStart: 容器创建后立即执行，主要用于资源部署，环境准备等会，钩子时间不能过长，否则容器不能达到Running 状态</p>
<p>PreStop: 容器终止前立即被调用，主要用于优雅退出程序(如nginx的退出)，如果钩子在执行期间挂起，Pod 阶段将停留在 running 状态并且永不会达到 failed 状态</p>
<p>钩子函数应该尽量轻量，<code>PostStart</code> 或者 <code>PreStop</code> 钩子失败， 它会杀死容器，</p>
<p>实现钩子函数的方式</p>
<p>Exec:执行命令</p>
<p>HTTP:对容器上的特定的端点执行 HTTP 请求</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pod-poststart.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hook-demo1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hook-demo1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello postStart heanlder &gt; /opt/message&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f pod-poststart.yaml</span><br><span class="line">kubectl get pods hook-demo1</span><br><span class="line">kubectl   <span class="built_in">exec</span> -it hook-demo1 -- cat /opt/message</span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pod-prestop.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hook-demo2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hook-demo2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/usr/sbin/nginx&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;quit&quot;</span>]  <span class="comment"># 优雅退出</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hook-demo3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">message</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hook-demo2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">message</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo Hello from the preStop Handler &gt; /usr/share/message&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f pod-prestop.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe pod hook-demo3  <span class="comment"># 去调度的节点上查看tmp目录中message文件</span></span><br></pre></td></tr></table></figure>

<h3 id="Pod健康检查"><a href="#Pod健康检查" class="headerlink" title="Pod健康检查"></a><code>Pod健康检查</code></h3><p><code>leveness probe</code>存活探针</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">检测程序是否存活，一旦检测到这个程序终止就会重启这个程序，例如检测到bug后就重启该容器，重启之后继续出现该bug，容易造成无限重启，因此在使用中可能会使用rediness probe，不让容器重启，保留当前状态进行排查问题</span><br></pre></td></tr></table></figure>

<p><code>readiness probe</code>可读性探针</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">确定容器是否已经就绪可以接收流量过来，只有当 Pod 中的容器都处于就绪状态的时候 kubelet 才会认定该 Pod 处于就绪状态，因为一个 Pod 下面可能会有多个容器。当然 Pod 如果处于非就绪状态，那么我们就会将他从 Service 的 Endpoints 列表中移除出来，这样我们的流量就不会被路由到这个 Pod 里面来了。</span><br></pre></td></tr></table></figure>

<p>配置方式</p>
<p>exec</p>
<p>http</p>
<p>tcpSocket:类似端口检测，一般不推荐使用该方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># liveness-exec.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">30</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">cnych/liveness</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/server</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">httpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">X-Custom-Header</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">Awesome</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">periodSeconds：kubelet 每隔5秒执行一次存活探针，命令执行成功将返回0，当前这个容器是存活的，如果返回的是非0值，那么就会把该容器杀掉然后重启它。默认是10秒，最小1秒</span><br><span class="line"></span><br><span class="line">initialDelaySeconds：表示在第一次执行探针的时候要等待5秒，这样能够确保我们的容器能够有足够的时间启动起来</span><br><span class="line"></span><br><span class="line">timeoutSeconds：探测超时时间，默认1秒，最小1秒</span><br><span class="line"></span><br><span class="line">successThreshold：探测失败后，最少连续探测成功多少次才被认定为成功，默认是 1，但是如果是 liveness 则必须是 1。最小值是 1</span><br><span class="line"></span><br><span class="line">failureThreshold：探测成功后，最少连续探测失败多少次才被认定为失败，默认是 3，最小值是 1</span><br></pre></td></tr></table></figure>



<h2 id="Pod使用"><a href="#Pod使用" class="headerlink" title="Pod使用"></a>Pod使用</h2><h3 id="Pod资源配置"><a href="#Pod资源配置" class="headerlink" title="Pod资源配置"></a>Pod资源配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 1. CGroup 里面对于 CPU 资源的单位换算</span><br><span class="line"> 1CPU = 1000millicpu (1 Core = 1000m)</span><br><span class="line"> 0.5CPU = 500millicpu (0.5 Core = 500m)</span><br><span class="line"> </span><br><span class="line"> 2. CPU限制和请求设置</span><br><span class="line">spec.containers[].resources.limits.cpu：CPU 上限值，可以短暂超过，容器也不会被停止</span><br><span class="line">spec.containers[].resources.requests.cpu：CPU请求值，Kubernetes 调度算法里的依据值，可以超过</span><br><span class="line">resources.requests.cpu的值如果设置大于集群内每个节点的最大CPU核心数，那么将没有节点满足，导致无法启动</span><br><span class="line"></span><br><span class="line">3. 内存是不可压缩性资源，一旦达到上限就会OOM</span><br><span class="line">1 Mib = 1024 Kib</span><br><span class="line"></span><br><span class="line">4. 本质还是CGroup</span><br><span class="line">   用下面的yaml创建pod</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pod-resource-demo1.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">resource-demo1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">resource-demo1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">50m</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">100m</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide  <span class="comment"># 查看pod调度在哪个节点上</span></span><br><span class="line">crictl ps  <span class="comment"># 查看容器ID</span></span><br><span class="line">crictl inspect 容器ID  <span class="comment"># 查看容器详细信息，一样可以查看到CPU的限制值等</span></span><br><span class="line">crictl inspect 3f9d121e27999 |grep cgroupsPath  <span class="comment"># 得到cgroupsPath信息</span></span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/cpu/kubepods.slice/上面命令得到的ID信息</span><br><span class="line">cat cpu.cfs_quota_us  <span class="comment"># CPU的限制值</span></span><br></pre></td></tr></table></figure>

<h3 id="静态Pod"><a href="#静态Pod" class="headerlink" title="静态Pod"></a>静态Pod</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Static Pod</span><br><span class="line">直接由节点的kubelet进程管理和监控，因此命令行无法通过 kubnelet 管理</span><br><span class="line">kubernetes的组件就是通过该方式创建的</span><br><span class="line"></span><br><span class="line">创建静态Pod的方式有 配置文件和 HTTP</span><br><span class="line"></span><br><span class="line">配置文件的方式:</span><br><span class="line">cat /var/lib/kubelet/config.yaml |grep staticPodPath</span><br><span class="line"><span class="comment"># 默认位置是 /etc/kubernetes/manifests</span></span><br><span class="line">ls /etc/kubernetes/manifests <span class="comment"># 可以看到kubernetes的组件yaml文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在该目录下创建一个yaml文件</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;/etc/kubernetes/manifests/static-web.yaml</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: static-web</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: static</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">    - name: web</span></span><br><span class="line"><span class="string">      image: nginx</span></span><br><span class="line"><span class="string">      ports:</span></span><br><span class="line"><span class="string">        - name: web</span></span><br><span class="line"><span class="string">          containerPort: 80</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl get pods  <span class="comment"># 此时有名称为 static-web-master 的容器，调度肯定是在本节点上</span></span><br><span class="line">kubectl delete pods static-web-master <span class="comment">#此时无法通过 kubectl 删除的</span></span><br><span class="line">mv /etc/kubernetes/manifests/static-web.yaml /opt/ <span class="comment"># 移走该文件之后此时pod也不存在了</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<h3 id="Downward-API"><a href="#Downward-API" class="headerlink" title="Downward API"></a><code>Downward API</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">作用:让Pod里的容器能够直接获取到这个Pod对象本身的一些信息</span><br><span class="line"></span><br><span class="line">两种方式用于将 Pod 的信息注入到容器内部</span><br><span class="line">	1.环境变量：用于单个变量，可以将 Pod 信息和容器信息直接注入容器内部</span><br><span class="line">	2.Volume 挂载：将 Pod 信息生成为文件，直接挂载到容器内部中去</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#env-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">env-pod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;env&quot;</span>]</span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_XXX</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f env-pod.yaml</span><br><span class="line">kubectl logs env-pod -n kube-system |grep POD  <span class="comment"># 可以看到 Pod 的 IP、NAME、NAMESPACE 都通过环境变量打印出来了</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># volume-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">node-env:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">own:</span> <span class="string">youdianzhishi</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">podinfo</span></span><br><span class="line">    <span class="attr">downwardAPI:</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">labels</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.labels</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">annotations</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.annotations</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume-pod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3600&quot;</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">podinfo</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/podinfo</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将元数据labels和annotaions以文件的形式挂载到了 /etc/podinfo 目录下</span></span><br><span class="line">kubectl create -f volume-pod.yaml</span><br><span class="line">kubectl <span class="built_in">exec</span> -it volume-pod /bin/sh -n kube-system</span><br><span class="line"></span><br><span class="line">cat /etc/podinfo/labels</span><br><span class="line">cat /etc/podinfo/annotations</span><br></pre></td></tr></table></figure>

<p><code>DOwnward API</code>支持的字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 使用 fieldRef 可以声明使用:</span><br><span class="line">spec.nodeName - 宿主机名字</span><br><span class="line">status.hostIP - 宿主机IP</span><br><span class="line">metadata.name - Pod的名字</span><br><span class="line">metadata.namespace - Pod的Namespace</span><br><span class="line">status.podIP - Pod的IP</span><br><span class="line">spec.serviceAccountName - Pod的Service Account的名字</span><br><span class="line">metadata.uid - Pod的UID</span><br><span class="line">metadata.labels[<span class="string">&#x27;&lt;KEY&gt;&#x27;</span>] - 指定&lt;KEY&gt;的Label值</span><br><span class="line">metadata.annotations[<span class="string">&#x27;&lt;KEY&gt;&#x27;</span>] - 指定&lt;KEY&gt;的Annotation值</span><br><span class="line">metadata.labels - Pod的所有Label</span><br><span class="line">metadata.annotations - Pod的所有Annotation</span><br><span class="line"></span><br><span class="line">2. 使用 resourceFieldRef 可以声明使用:</span><br><span class="line">容器的 CPU <span class="built_in">limit</span></span><br><span class="line">容器的 CPU request</span><br><span class="line">容器的 memory <span class="built_in">limit</span></span><br><span class="line">容器的 memory request</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Kuberneters</category>
      </categories>
      <tags>
        <tag>Kuberneters</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据类型-补充</title>
    <url>/be17b709.html</url>
    <content><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyISAM</span><br><span class="line">  mysql5<span class="number">.5</span>之前默认支持存储引擎，不支持事务、行级锁</span><br><span class="line"></span><br><span class="line">InnoDB</span><br><span class="line">  mysql5<span class="number">.5</span>之后默认的存储引擎。支持事务，行级锁，更安全</span><br><span class="line">  </span><br><span class="line">memory</span><br><span class="line">  基于内存存取数据，断电之后数据会丢失</span><br><span class="line">  </span><br><span class="line">blackhole</span><br><span class="line">  写入其中的数据都会立刻消失 /dev/null</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建不同存储引擎的表</span></span><br><span class="line">create table t1(<span class="built_in">id</span> <span class="built_in">int</span>) engine=myisam;</span><br><span class="line">create table t2(<span class="built_in">id</span> <span class="built_in">int</span>) engine=innodb;</span><br><span class="line">create table t3(<span class="built_in">id</span> <span class="built_in">int</span>) engine=memory;</span><br><span class="line">create table t4(<span class="built_in">id</span> <span class="built_in">int</span>) engine=blackhole;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">myisam引擎 创建的表有三个文件</span></span><br><span class="line"><span class="string">.frm  表结构文件</span></span><br><span class="line"><span class="string">.myd  表数据文件</span></span><br><span class="line"><span class="string">.myi  表索引文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">innodb引擎 创建的表有两个文件</span></span><br><span class="line"><span class="string">.frm 表结构文件</span></span><br><span class="line"><span class="string">.ibd 表数据和表索引</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">memory引擎</span></span><br><span class="line"><span class="string">  .frm 表结构文件</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">blackhole引擎</span></span><br><span class="line"><span class="string">  .frm 表结构文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL基本数据类型"><a href="#MySQL基本数据类型" class="headerlink" title="MySQL基本数据类型"></a>MySQL基本数据类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tinyint smallint <span class="built_in">int</span> bigint</span><br><span class="line"></span><br><span class="line">正负号会占一个比特位</span><br><span class="line">所有的<span class="built_in">int</span>类型默认都需要正负号</span><br><span class="line"></span><br><span class="line">create table t(<span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">3</span>));</span><br><span class="line">insert into t values(<span class="number">4444444</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在整型中括号内的数字并不是用来限制存储的长度 而是用来控制展示的长度</span></span><br><span class="line"><span class="string">我们以后在定义整型字段的时候 不需要自己添加数字 使用默认的就可以</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">create table t14(<span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">3</span>) zerofill);</span><br><span class="line">insert into t13 values(<span class="number">4</span>);</span><br><span class="line"><span class="comment"># 整型比较的特殊 是唯一个不是用来限制存储长度的类型</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> double decimal</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span>(<span class="number">255</span>,<span class="number">30</span>)   <span class="comment"># 总共255位 小数占30位</span></span><br><span class="line">double(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数占30位</span></span><br><span class="line">decimal(<span class="number">65</span>,<span class="number">30</span>)  <span class="comment"># 总共65位 小数占30位</span></span><br><span class="line"></span><br><span class="line">create table t5(<span class="built_in">id</span> <span class="built_in">float</span>(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t6(<span class="built_in">id</span> double(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t7(<span class="built_in">id</span> decimal(<span class="number">65</span>,<span class="number">30</span>));</span><br><span class="line">insert into t5 values(<span class="number">1.1111111111111111111111</span>);</span><br><span class="line">insert into t6 values(<span class="number">1.1111111111111111111111</span>);</span><br><span class="line">insert into t7 values(<span class="number">1.1111111111111111111111</span>);</span><br><span class="line">select * <span class="keyword">from</span> t5;</span><br><span class="line">select * <span class="keyword">from</span> t6;</span><br><span class="line">select * <span class="keyword">from</span> t7;</span><br><span class="line"></span><br><span class="line">精确度: <span class="built_in">float</span> &lt; double &lt; decimal</span><br></pre></td></tr></table></figure>

<h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">char(<span class="number">4</span>)     <span class="comment"># 定长类型 最多存4个字符   多了报错少了空格会填充至四个</span></span><br><span class="line">varchar(<span class="number">3</span>)  <span class="comment"># 变长类型 有几个存几个字符 最多存4个字符</span></span><br><span class="line"></span><br><span class="line">create table t6(name char(<span class="number">4</span>));</span><br><span class="line">create table t7(name varchar(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql5.6 不会报错 5.7会报错</span></span><br><span class="line"><span class="comment"># 5.7在sql_mode上做了SQL92严格模式</span></span><br><span class="line"><span class="comment"># show variables like &#x27;%sql_mode%&#x27;</span></span><br><span class="line"><span class="comment"># set global sql_mode = &#x27;strict_trans_tables,pad_char_to_full_length&#x27;</span></span><br><span class="line">insert into t6 values(<span class="string">&#x27;xxxxx&#x27;</span>);</span><br><span class="line">insert into t7 values(<span class="string">&#x27;xxxxx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">对比:</span><br><span class="line">char:</span><br><span class="line">  优势: 整存整取，速度快</span><br><span class="line">  劣势: 浪费存储空间</span><br><span class="line">    </span><br><span class="line">varchar:</span><br><span class="line">  优势: 节省存储空间</span><br><span class="line">  劣势: 存取数据的速度较char慢</span><br><span class="line">    </span><br><span class="line">varchar类型会把字段信息也存入，取时就根据该信息取</span><br></pre></td></tr></table></figure>

<h4 id="枚举和集合类型"><a href="#枚举和集合类型" class="headerlink" title="枚举和集合类型"></a>枚举和集合类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enum()  <span class="comment"># 多选一</span></span><br><span class="line"></span><br><span class="line">create tables user(</span><br><span class="line">  <span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">  name varchar(<span class="number">32</span>),</span><br><span class="line">  gender enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">insert into user values(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)  </span><br><span class="line"><span class="comment"># gender字段的取值只有&#x27;male&#x27;,&#x27;female&#x27;,&#x27;others&#x27;里面的一个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>()  <span class="comment"># 多选多(包含多选一)</span></span><br><span class="line"></span><br><span class="line">create table userinfo(</span><br><span class="line">	<span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">  hobby <span class="built_in">set</span>(<span class="string">&#x27;basketball&#x27;</span>,<span class="string">&#x27;football&#x27;</span>,<span class="string">&#x27;doublecolorball&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table client(</span><br><span class="line">	<span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">    name varchar(<span class="number">32</span>),</span><br><span class="line">    reg_time date,</span><br><span class="line">    birth datetime,</span><br><span class="line">    study_time time,</span><br><span class="line">    join_time year</span><br><span class="line">);</span><br><span class="line">insert into client values(<span class="number">1</span>,<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;2000-11-11&#x27;</span>,<span class="string">&#x27;2000-1-21 11:11:11&#x27;</span>,<span class="string">&#x27;11:11:11&#x27;</span>,<span class="number">1995</span>);</span><br></pre></td></tr></table></figure>

<h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">约束条件相当于是在字段类型的基础之上添加的额外约束</span></span><br><span class="line"><span class="string">	eg: id int unsigned</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">unsigned		让数字没有正负号</span><br><span class="line">zerofill		多余的使用数字<span class="number">0</span>填充</span><br><span class="line"><span class="keyword">not</span> null		非空</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	新增表数据的方式</span></span><br><span class="line"><span class="string">		方式1:  按照字段顺序一一传值</span></span><br><span class="line"><span class="string">			 insert into t1 values(1,&#x27;jason&#x27;);</span></span><br><span class="line"><span class="string">		方式2:  自定义传值顺序 甚至不传</span></span><br><span class="line"><span class="string">			insert into t1(name,id) values(&#x27;jason&#x27;,1);</span></span><br><span class="line"><span class="string">			insert into t1(id) values(1);</span></span><br><span class="line"><span class="string">	在MySQL中不传数据 会使用关键字NULL填充意思就是空 类似于python的None</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">    create table t2(</span><br><span class="line">    	<span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">        name varchar(<span class="number">32</span>) <span class="keyword">not</span> null</span><br><span class="line">    );</span><br><span class="line">default			默认值</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	所有的字段都可以设置默认值 </span></span><br><span class="line"><span class="string">		用户不给该字段传值则使用默认的 否则使用传了的</span></span><br><span class="line"><span class="string">	create table t3(</span></span><br><span class="line"><span class="string">		id int default 911,</span></span><br><span class="line"><span class="string">		name varchar(16) default &#x27;jason&#x27;</span></span><br><span class="line"><span class="string">	);</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">unique			唯一值</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	单列唯一</span></span><br><span class="line"><span class="string">		create table t4(</span></span><br><span class="line"><span class="string">			id int,</span></span><br><span class="line"><span class="string">			name varchar(32) unique</span></span><br><span class="line"><span class="string">		);</span></span><br><span class="line"><span class="string">	联合唯一</span></span><br><span class="line"><span class="string">		create table t5(</span></span><br><span class="line"><span class="string">			id int,</span></span><br><span class="line"><span class="string">			host varchar(32),</span></span><br><span class="line"><span class="string">			port int,</span></span><br><span class="line"><span class="string">			unique(host,port)</span></span><br><span class="line"><span class="string">		);</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">primary key		主键</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	但从约束层面上来说 相当于是 not null + unique(非空且唯一)</span></span><br><span class="line"><span class="string">	在此基础之上还可以加快数据的查询</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	InnoDB存储引擎规定了一张表必须有且只有一个主键</span></span><br><span class="line"><span class="string">		因为InnoDB是通过主键的方式来构造表的</span></span><br><span class="line"><span class="string">		如果没有设置主键</span></span><br><span class="line"><span class="string">			情况1:没有主键和其他约束条件</span></span><br><span class="line"><span class="string">				InnoDB会采用隐藏的字段作为主键 不能加快数据的查询</span></span><br><span class="line"><span class="string">			情况2:没有主键但是有非空且唯一的字段</span></span><br><span class="line"><span class="string">				自动将该字段升级为主键</span></span><br><span class="line"><span class="string">				create table t6(</span></span><br><span class="line"><span class="string">					id int,</span></span><br><span class="line"><span class="string">					age int not null unique,</span></span><br><span class="line"><span class="string">					pwd int not null unique</span></span><br><span class="line"><span class="string">				);</span></span><br><span class="line"><span class="string">	结论:</span></span><br><span class="line"><span class="string">		以后我们在创建表的时候一定要设置主键</span></span><br><span class="line"><span class="string">		并且主键字段一般都是表的id字段(uid sid pid cid)</span></span><br><span class="line"><span class="string">		create table user(</span></span><br><span class="line"><span class="string">			id int primary key,</span></span><br><span class="line"><span class="string">			name varchar(32)</span></span><br><span class="line"><span class="string">		);</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">auto_increment		自增</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	由于主键类似于数据的唯一标识 并且主键一般都是数字类型</span></span><br><span class="line"><span class="string">	我们在添加数据的时候不可能记住接下来的序号是多少 太麻烦</span></span><br><span class="line"><span class="string">	create table user1(</span></span><br><span class="line"><span class="string">			id int primary key auto_increment,</span></span><br><span class="line"><span class="string">			name varchar(32)</span></span><br><span class="line"><span class="string">		);</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">  自增不会因为删除操作而回退</span><br><span class="line">	  delete <span class="keyword">from</span>无法影响自增</span><br><span class="line">    </span><br><span class="line">  如果想要重置需需要使用truncate关键字</span><br><span class="line">	  truncate 表名  <span class="comment"># 清空表数据并且重置主键值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db1 charset=&#x27;utf8&#x27;;</span><br><span class="line">use db1;</span><br><span class="line">create table student(</span><br><span class="line">  id int primary key auto_increment comment &#x27;学号&#x27;,</span><br><span class="line">  name varchar(64) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">  age int not null comment &#x27;学生年龄&#x27;,</span><br><span class="line">  gender enum(&#x27;male&#x27;,&#x27;female&#x27;,&#x27;others&#x27;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL外键与查询-补充</title>
    <url>/66126033.html</url>
    <content><![CDATA[<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一张员工信息表内有</span><br><span class="line"><span class="built_in">id</span> name age dep_name dep_desc 等信息</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">缺陷</span></span><br><span class="line"><span class="string">1.表的重点不清晰				可以忽略</span></span><br><span class="line"><span class="string">	到底是员工表还是部门表</span></span><br><span class="line"><span class="string">2.表中相关字段一直在重复存储		可以忽略</span></span><br><span class="line"><span class="string">	浪费存储空间</span></span><br><span class="line"><span class="string">3.表的扩展性极差,牵一发而动全身   不能忽略</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">解决方式</span><br><span class="line">  将上述一张表拆分成两张表</span><br><span class="line">  <span class="built_in">id</span> name age </span><br><span class="line">  <span class="built_in">id</span> dep_name dep_desc</span><br><span class="line">  </span><br><span class="line">  emp与dep</span><br><span class="line">  <span class="comment"># 上述三个缺陷全部解决</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">带来了一个小问题 表与表之间的数据没有对应关系了</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">外键字段&gt;&gt;&gt;:部门编号</span><br><span class="line">  其实就是用来标识表与表之间的数据关系</span><br><span class="line">  <span class="comment"># 简单的理解为该字段可以让你去到其他表中查找数据</span></span><br></pre></td></tr></table></figure>

<h3 id="表之间的关系"><a href="#表之间的关系" class="headerlink" title="表之间的关系"></a>表之间的关系</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以员工部门表分析</span><br><span class="line">员工表上一个员工是否可以有多个部门: 不可以</span><br><span class="line">部门表上一个部门是否可以有多个员工: 可以</span><br><span class="line">  </span><br><span class="line">这种表关系就是一对多，外键字段建在多的一方</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;不存在多对一的关系，就是一对多&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line"><span class="comment"># 可以先创建不含外键的基本表，再添加外键字段</span></span><br><span class="line">create table emp(</span><br><span class="line">  <span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">  name varchar(<span class="number">32</span>),</span><br><span class="line">  age <span class="built_in">int</span>,</span><br><span class="line">  dep_id <span class="built_in">int</span>,</span><br><span class="line">  foreign key(dep_id) references dep(<span class="built_in">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table dep(</span><br><span class="line">	<span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">  dep_name varchar(<span class="number">32</span>),</span><br><span class="line">  dep_desc varchar (<span class="number">254</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">书籍表与作者表分析</span><br><span class="line">一个书籍信息是否可以对应多个作者: 可以</span><br><span class="line">一个作者是否可以对应多个书籍信息: 可以</span><br><span class="line"></span><br><span class="line">这个关系就是多对多</span><br><span class="line">多对多的表关系，需要单独创建第三张表存储(并且第三张表可以不绑定)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">create table book(</span></span><br><span class="line"><span class="string">	id int primary key auto_increment,</span></span><br><span class="line"><span class="string">	title varchar(32),</span></span><br><span class="line"><span class="string">	price float(6,2)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">create table author(</span></span><br><span class="line"><span class="string">	id int primary key auto_increment,</span></span><br><span class="line"><span class="string">	name varchar(32),</span></span><br><span class="line"><span class="string">	age int</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">create table book2author(</span></span><br><span class="line"><span class="string">	id int primary key auto_increment,</span></span><br><span class="line"><span class="string">	author_id int,</span></span><br><span class="line"><span class="string">	book_id int,</span></span><br><span class="line"><span class="string">	foreign key(author_id) references author(id)</span></span><br><span class="line"><span class="string">	on update cascade  # 级联更新</span></span><br><span class="line"><span class="string">  on delete cascade,  # 级联删除</span></span><br><span class="line"><span class="string">	foreign key(book_id) references book(id)</span></span><br><span class="line"><span class="string">	on update cascade  # 级联更新</span></span><br><span class="line"><span class="string">  on delete cascade  # 级联删除</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>	</span><br></pre></td></tr></table></figure>

<h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作者表与作者详情表分析</span><br><span class="line">一个作者是否可以对应多个作者详情信息: 不可以</span><br><span class="line">一个作者详情信息是否可以对应多个作者: 不可以</span><br><span class="line">  </span><br><span class="line">关系可能是一对一或者没关系</span><br><span class="line">外键字段建在任何一方都可以，但是推荐建在查询频率较高的表中</span><br><span class="line"></span><br><span class="line">create table author(</span><br><span class="line">	<span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">	name varchar(<span class="number">32</span>),</span><br><span class="line">	age <span class="built_in">int</span>,</span><br><span class="line">	author_id <span class="built_in">int</span> unique,</span><br><span class="line">  foreign key(author_id) references author_detail(<span class="built_in">id</span>)</span><br><span class="line">	on update cascade  <span class="comment"># 级联更新</span></span><br><span class="line">  on delete cascade  <span class="comment"># 级联删除</span></span><br><span class="line">);</span><br><span class="line">create table author_detail(</span><br><span class="line">	<span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">	phone varchar(<span class="number">32</span>),</span><br><span class="line">	address varchar(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建表的时候，需要先创建被关联的表(没有外键字段的表)</span><br><span class="line"><span class="number">2.</span>插入新数据的时候，应该先确保被关联表中有数据</span><br><span class="line"><span class="number">3.</span>插入新数据的时候，外键字段只能填写被关联表中已存在的数据</span><br><span class="line"><span class="number">4.</span>在修改和删除被关联表中的数据时，无法直接操作，需要数据之间自动更新需要添加额外的配置</span><br><span class="line">  on update cascade  <span class="comment"># 级联更新</span></span><br><span class="line">  on delete cascade  <span class="comment"># 级联删除</span></span><br><span class="line">  </span><br><span class="line">由于外键有实质性的诸多约束，当表特别多的时候，外键的增加反而会增加耦合度</span><br><span class="line">因此有些时候并不会使用外键创建表关系，而是通过SQL语句层建立逻辑意义上的表关系</span><br><span class="line">例如操作部门时，先更新部门表，再更新员工表</span><br></pre></td></tr></table></figure>

<h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改表名</span></span><br><span class="line">alter table 表名 rename  新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加表字段</span></span><br><span class="line">alter table 表名 add 字段名 数据类型 约束条件;</span><br><span class="line">alter table 表名 add 字段名 数据类型 约束条件 first;</span><br><span class="line">alter table 表名 add 字段名 数据类型 约束条件 after 字段名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table 表名 drop 字段名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改字段  modify只能改字段数据类型约束，不能改字段名</span></span><br><span class="line">alter table 表名 modify 字段名 数据类型 约束条件;</span><br><span class="line">alter table 表名 change 旧字段名 新字段名 旧数据类型 约束条件;</span><br></pre></td></tr></table></figure>

<h3 id="查询补充"><a href="#查询补充" class="headerlink" title="查询补充"></a>查询补充</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># where </span></span><br><span class="line">  模糊查询:没有明确的筛选条件</span><br><span class="line">    关键字:like</span><br><span class="line">    关键符号:</span><br><span class="line">      %:匹配任意个数任意字符</span><br><span class="line">      _:匹配单个个数任意字符</span><br><span class="line">  show variables like <span class="string">&#x27;%mode%se&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	针对null不能用等号，只能用<span class="keyword">is</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># group by</span></span><br><span class="line">  分组之后默认只能够直接过去到分组的依据 其他数据都不能直接获取</span><br><span class="line">	针对<span class="number">5.6</span>需要自己设置sql_mode</span><br><span class="line">    	<span class="built_in">set</span> <span class="keyword">global</span> sql_mode =   <span class="string">&#x27;only_full_group_by,STRICT_TRANS_TABLES,PAD_CHAR_TO_FULL_LENGTH&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># having</span></span><br><span class="line">  where与having都是筛选功能 但是有区别</span><br><span class="line">    where在分组之前对数据进行筛选</span><br><span class="line">    having在分组之后对数据进行筛选	</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 关键字之regexp正则</span></span><br><span class="line">  select * <span class="keyword">from</span> emp where name regexp <span class="string">&#x27;^j.*(n|y)$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">create table emp(</span><br><span class="line">  <span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">  name varchar(<span class="number">20</span>) <span class="keyword">not</span> null,</span><br><span class="line">  sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) <span class="keyword">not</span> null default <span class="string">&#x27;male&#x27;</span>, <span class="comment">#大部分是男的</span></span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">3</span>) unsigned <span class="keyword">not</span> null default <span class="number">28</span>,</span><br><span class="line">  hire_date date <span class="keyword">not</span> null,</span><br><span class="line">  post varchar(<span class="number">50</span>),</span><br><span class="line">  post_comment varchar(<span class="number">100</span>),</span><br><span class="line">  salary double(<span class="number">15</span>,<span class="number">2</span>),</span><br><span class="line">  office <span class="built_in">int</span>, <span class="comment">#一个部门一个屋子</span></span><br><span class="line">  depart_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录</span></span><br><span class="line"><span class="comment">#三个部门：教学，销售，运营</span></span><br><span class="line">insert into emp(name,sex,age,hire_date,post,salary,office,depart_id) values</span><br><span class="line">(<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20170301&#x27;</span>,<span class="string">&#x27;张江第一帅形象代言&#x27;</span>,<span class="number">7300.33</span>,<span class="number">401</span>,<span class="number">1</span>), <span class="comment">#以下是教学部</span></span><br><span class="line">(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">78</span>,<span class="string">&#x27;20150302&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">1000000.31</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;kevin&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">81</span>,<span class="string">&#x27;20130305&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">8300</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">73</span>,<span class="string">&#x27;20140701&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">3500</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;owen&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;20121101&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">2100</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20110211&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">9000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;jenny&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;19000301&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">30000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;sank&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">48</span>,<span class="string">&#x27;20101111&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="number">10000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;哈哈&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">48</span>,<span class="string">&#x27;20150311&#x27;</span>,<span class="string">&#x27;sale&#x27;</span>,<span class="number">3000.13</span>,<span class="number">402</span>,<span class="number">2</span>),<span class="comment">#以下是销售部门</span></span><br><span class="line">(<span class="string">&#x27;呵呵&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;20101101&#x27;</span>,<span class="string">&#x27;sale&#x27;</span>,<span class="number">2000.35</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;西西&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20110312&#x27;</span>,<span class="string">&#x27;sale&#x27;</span>,<span class="number">1000.37</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;乐乐&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20160513&#x27;</span>,<span class="string">&#x27;sale&#x27;</span>,<span class="number">3000.29</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;拉拉&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;20170127&#x27;</span>,<span class="string">&#x27;sale&#x27;</span>,<span class="number">4000.33</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;僧龙&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;20160311&#x27;</span>,<span class="string">&#x27;operation&#x27;</span>,<span class="number">10000.13</span>,<span class="number">403</span>,<span class="number">3</span>), <span class="comment">#以下是运营部门</span></span><br><span class="line">(<span class="string">&#x27;程咬金&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;19970312&#x27;</span>,<span class="string">&#x27;operation&#x27;</span>,<span class="number">20000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;程咬银&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20130311&#x27;</span>,<span class="string">&#x27;operation&#x27;</span>,<span class="number">19000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;程咬铜&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20150411&#x27;</span>,<span class="string">&#x27;operation&#x27;</span>,<span class="number">18000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;程咬铁&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;20140512&#x27;</span>,<span class="string">&#x27;operation&#x27;</span>,<span class="number">17000</span>,<span class="number">403</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 查询岗位名以及岗位包含的所有员工名字</span><br><span class="line">select post,group_concat(name) <span class="keyword">from</span> emp group by post;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 查询岗位名以及各岗位内包含的员工个数</span><br><span class="line">select post,count(name) <span class="keyword">from</span> emp group by post;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 查询公司内男员工和女员工的个数</span><br><span class="line">select sex,count(*) <span class="keyword">from</span> emp group by sex;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查询岗位名以及各岗位的平均薪资</span><br><span class="line">select post,avg(salary) <span class="keyword">from</span> emp group by post;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 查询岗位名以及各岗位的最高薪资</span><br><span class="line">select post,<span class="built_in">max</span>(salary) <span class="keyword">from</span> emp group by post;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 查询岗位名以及各岗位的最低薪资</span><br><span class="line">select post,<span class="built_in">min</span>(salary) <span class="keyword">from</span> emp group by post;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 查询男员工与男员工的平均薪资，女员工与女员工的平均薪资</span><br><span class="line">select sex,avg(salary) <span class="keyword">from</span> emp group by sex;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>手撸简易的web框架</title>
    <url>/34975bbc.html</url>
    <content><![CDATA[<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><blockquote>
<p>规定了浏览器与服务端之间的数据交互格式</p>
</blockquote>
<span id="more"></span>
<h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>基于TCP/IP作用于应用层之上的协议</span><br><span class="line"><span class="number">2.</span>基于请求响应</span><br><span class="line"><span class="number">3.</span>无状态</span><br><span class="line">  保存状态的的技术有cookie、session、token</span><br><span class="line"><span class="number">4.</span>无(短)连接</span><br><span class="line">  长连接:websocket</span><br></pre></td></tr></table></figure>

<h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>请求数据格式:</span><br><span class="line">  请求首行(包含有请求方法...)</span><br><span class="line">  请求头(K:V键值对信息)</span><br><span class="line">  \r\n</span><br><span class="line">  请求体(主要用来携带敏感数据)</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>响应数据格式:</span><br><span class="line">  响应首行(响应状态码)</span><br><span class="line">  响应头(K:V键值对)</span><br><span class="line">  \r\n</span><br><span class="line">  响应体(展示给用户的数据)</span><br></pre></td></tr></table></figure>

<h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用一串数字表示信息</span><br><span class="line">1xx:服务端已经接收到数据并正在处理，可以继续提交</span><br><span class="line">2xx:<span class="number">200</span>请求成功</span><br><span class="line">3xx:重定向</span><br><span class="line">4xx:<span class="number">403</span> <span class="number">404</span></span><br><span class="line">5xx:服务器内部错误</span><br><span class="line">  </span><br><span class="line">响应状态码可以自定义</span><br></pre></td></tr></table></figure>

<h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>get请求</span><br><span class="line">	从指定资源请求数据</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>post请求</span><br><span class="line">  将数据发送到服务器</span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">get请求: url?username=xxx&amp;password=123456</span></span><br><span class="line"><span class="string">post请求:数据是放在请求体内</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="手写web框架"><a href="#手写web框架" class="headerlink" title="手写web框架"></a>手写web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, add = server.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    res = data.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    path = res.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 发送响应头</span></span><br><span class="line">    conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="comment"># conn.send(b&#x27;index&#x27;)</span></span><br><span class="line">        <span class="comment"># 发送html页面</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;demo1.html&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            conn.send(data)</span><br><span class="line">    <span class="keyword">elif</span> path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.send(<span class="string">b&#x27;404 error&#x27;</span>)</span><br><span class="line">    <span class="comment"># conn.send(b&#x27;hello world&#x27;)</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>

<h3 id="基于wsgiref模块"><a href="#基于wsgiref模块" class="headerlink" title="基于wsgiref模块"></a>基于<code>wsgiref</code>模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">request, response</span>):</span></span><br><span class="line">    response(<span class="string">&#x27;200 OK&#x27;</span>, [])</span><br><span class="line">    current_path = request.get(<span class="string">&quot;PATH_INFO&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> current_path == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b&#x27;index&#x27;</span>]</span><br><span class="line">    <span class="keyword">elif</span> current_path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b&#x27;login&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b&#x27;404 error&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>, run)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<h3 id="封装处理"><a href="#封装处理" class="headerlink" title="封装处理"></a>封装处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>定义一个网址与函数的对应关系 urls.py</span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    (<span class="string">&#x27;/index&#x27;</span>, index_func),</span><br><span class="line">    (<span class="string">&#x27;/login&#x27;</span>, login_func),</span><br><span class="line">    (<span class="string">&#x27;/reg&#x27;</span>, reg_func),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>定义函数功能 views.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_func</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_func</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_func</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;reg&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errors</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;404 error&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>服务端文件 server.py</span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">import</span> urls</span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">request, response</span>):</span></span><br><span class="line">    response(<span class="string">&#x27;200 OK&#x27;</span>, [])</span><br><span class="line">    current_path = request.get(<span class="string">&quot;PATH_INFO&quot;</span>)</span><br><span class="line">    func = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> url_tuple <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">if</span> current_path == url_tuple[<span class="number">0</span>]:</span><br><span class="line">            func = url_tuple[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> func:</span><br><span class="line">        res = func(request)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = errors(request)</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">bytes</span>(res, encoding=<span class="string">&#x27;utf8&#x27;</span>)]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>, run)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态网页</span></span><br><span class="line">	数据全是写死的</span><br><span class="line"><span class="comment"># 动态网页</span></span><br><span class="line">  数据来源于后端(代码、数据库)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>访问展示当前时间(时间是后端模块生成)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py 添加</span></span><br><span class="line">  (<span class="string">&#x27;/get_time&#x27;</span>, get_time_func)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># views.py中对应的功能函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_time_func</span>(<span class="params">request</span>):</span></span><br><span class="line">      <span class="keyword">import</span> time</span><br><span class="line">      current_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;demo1.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          data = f.read()</span><br><span class="line">      data = data.replace(<span class="string">&#x27;asdasdasd&#x27;</span>, current_time)</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># demo1.html</span></span><br><span class="line">  &lt;h1&gt;asdasdasd&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>后端字典展示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install jinja2</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py 添加</span></span><br><span class="line">  (<span class="string">&#x27;/get_dict&#x27;</span>, get_dict_func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py中对应的功能函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_dict_func</span>(<span class="params">request</span>):</span></span><br><span class="line">      user_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;password&#x27;</span>: <span class="number">123456</span>&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Template/dem02.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          data = f.read()</span><br><span class="line">      temp = Template(data)</span><br><span class="line">      <span class="comment"># 将user_dict 传递给demo2.html页面 在该页面上使用变量名user_data</span></span><br><span class="line">      res = temp.render(user_data=user_dict)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># Template/dem02.html</span></span><br><span class="line">  &#123;&#123; user_data &#125;&#125; &lt;br&gt;</span><br><span class="line">  &#123;&#123; user_data.get(<span class="string">&#x27;name&#x27;</span>) &#125;&#125; &lt;br&gt;</span><br><span class="line">  &#123;&#123; user_data[<span class="string">&#x27;age&#x27;</span>] &#125;&#125; &lt;br&gt;</span><br><span class="line">  &#123;&#123; user_data.password &#125;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取MySQL数据库数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py 添加</span></span><br><span class="line">  (<span class="string">&#x27;/get_sql&#x27;</span>, get_sql_func)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># views.py 中对应的功能函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_sql_func</span>(<span class="params">request</span>):</span></span><br><span class="line">      <span class="keyword">import</span> pymysql</span><br><span class="line">      conn = pymysql.connect(</span><br><span class="line">          host=<span class="string">&#x27;10.0.0.60&#x27;</span>,</span><br><span class="line">          port=<span class="number">3306</span>,</span><br><span class="line">          user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">          password=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">          db=<span class="string">&#x27;db1&#x27;</span>,</span><br><span class="line">          charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">          autocommit=<span class="literal">True</span></span><br><span class="line">      )</span><br><span class="line">      cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">      sql = <span class="string">&#x27;select * from student&#x27;</span></span><br><span class="line">      affect_rows = cursor.execute(sql)</span><br><span class="line">      res1 = cursor.fetchall()  <span class="comment"># [&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Template/db.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          data = f.read()  <span class="comment"># 字符串</span></span><br><span class="line">      temp = Template(data)</span><br><span class="line">      <span class="comment"># 将user_dict传递给get_dict.html页面 在该页面上使用变量名user_data调用</span></span><br><span class="line">      res = temp.render(data_list=res1)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Template/db.html</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">center</span>&quot;&gt;学生数据&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">table</span> <span class="title">class</span>=&quot;<span class="title">table</span> <span class="title">table</span>-<span class="title">hover</span> <span class="title">table</span>-<span class="title">striped</span> <span class="title">table</span>-<span class="title">bordered</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">thead</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">td</span>&gt;学号&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">td</span>&gt;姓名&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">td</span>&gt;年龄&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">td</span>&gt;性别&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="class">                &#123;%<span class="title">for</span> <span class="title">user_dict</span> <span class="title">in</span> <span class="title">data_list</span>%&#125;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">td</span>&gt;&#123;&#123;<span class="title">user_dict</span>.<span class="title">id</span>&#125;&#125;&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">td</span>&gt;&#123;&#123;<span class="title">user_dict</span>.<span class="title">name</span>&#125;&#125;&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">td</span>&gt;&#123;&#123;<span class="title">user_dict</span>.<span class="title">age</span>&#125;&#125;&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">td</span>&gt;&#123;&#123;<span class="title">user_dict</span>.<span class="title">gender</span>&#125;&#125;&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">                &#123;%<span class="title">endfor</span>%&#125;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wsgiref模块</span><br><span class="line">  <span class="number">1.</span> 封装了socket代码</span><br><span class="line">  <span class="number">2.</span> 处理了http数据格式</span><br><span class="line"></span><br><span class="line">根据功能的不同拆分成不同的文件</span><br><span class="line">urls.py    路由与视图函数对应关系</span><br><span class="line">views.py   视图函数</span><br><span class="line">templates  模板文件夹</span><br><span class="line"><span class="comment"># 1.第一步添加路由与视图函数的对应关系</span></span><br><span class="line"><span class="comment"># 2.去views中书写功能代码</span></span><br><span class="line"><span class="comment"># 3.如果需要使用到html则去模板文件夹中操作</span></span><br><span class="line"></span><br><span class="line">jinja2模板语法</span><br><span class="line">&#123;&#123;&#125;&#125;</span><br><span class="line">&#123;%%&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/2240626-20210312230334847-1372533552.png" alt="img"></p>
<h3 id="主流的web框架"><a href="#主流的web框架" class="headerlink" title="主流的web框架"></a>主流的web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Django框架</span><br><span class="line">  大而全，自带的功能组件非常多，但是缺点就是太重了</span><br><span class="line">  </span><br><span class="line">Flask框架</span><br><span class="line">  小而精，自带组件少，第三方模块非常多，但是第三方模块比较难管理</span><br><span class="line">  </span><br><span class="line">Tornado框架</span><br><span class="line">  异步非阻塞 速度非常快</span><br><span class="line">  </span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图匹配</span><br><span class="line">C:模板语法</span><br><span class="line">  </span><br><span class="line">django</span><br><span class="line">   A:用的是wsgiref模块</span><br><span class="line">   B:自己写的</span><br><span class="line">   C:自己写的</span><br><span class="line">flask</span><br><span class="line">   A:用的是wsgiref模块封装之后werkzeug</span><br><span class="line">   B:自己写的</span><br><span class="line">   C:jinja2模块</span><br><span class="line">tornado	</span><br><span class="line">	A、B、C都是自己写的</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>静态文件、request方法、连接MySQL、ORM</title>
    <url>/b3b90dfb.html</url>
    <content><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>什么是静态文件</span><br><span class="line">静态文件，写好之后不改变的文件，如css文件、js文件、图片、第三方框架等</span><br><span class="line">这类文件一般单独使用一个名为 static 的文件夹存放</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用静态文件</span><br><span class="line">html文件调用</span><br><span class="line">html在引入时，使用static文件夹的相对路径会在页面无法加载(<span class="number">404</span>)</span><br><span class="line">原因是在 urls.py 并没有设置该路由</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>配置</span><br><span class="line">django框架针对这类文件有单独的设置，在settings.py中设置</span><br><span class="line">settings.py最下方</span><br><span class="line">...</span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 接口前缀</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">  os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>)  <span class="comment"># static文件夹的路径</span></span><br><span class="line">  ...                              <span class="comment"># 文件夹可以有多个</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">html文件引入</span><br><span class="line">&lt;script src=<span class="string">&quot;/static/jQuery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment"># 这边的 /static/ 是接口而不是路径了</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>动态解析</span><br><span class="line">在settings.py文件中的接口前缀是可以随意变换的，html文件中不可能一个个更改</span><br><span class="line">因此就需要动态解析，配置在html文件中，如下配置</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line">&lt;script src=<span class="string">&quot;&#123;% static &#x27;jQuery-3.6.0.js&#x27; %&#125;&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>关闭谷歌浏览器的缓存</strong></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220135919254.png" alt="image-20220220135919254"></p>
<h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a><code>request</code>对象方法</h3><h4 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a><code>form</code>表单</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">action:</span><br><span class="line">  控制后端的提交路径</span><br><span class="line">  不写: 默认朝当前页面地址提交数据</span><br><span class="line">  后缀: /index/</span><br><span class="line">  全写: https://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/index</span><br><span class="line">  </span><br><span class="line">method提交方法</span><br><span class="line">  get   <span class="comment"># 默认的提交方法</span></span><br><span class="line">  post</span><br><span class="line"></span><br><span class="line">当有文件提交时需要增加属性: enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br></pre></td></tr></table></figure>

<p>前期使用post提交时，先在django中的settings.py先注释该行</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220141801183.png" alt="image-20220220141801183"></p>
<h4 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">  url(<span class="string">r&#x27;^login/&#x27;</span>, views.login),</span><br><span class="line">  </span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># res = request.method</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)</span></span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        hobby = request.POST.getlist(<span class="string">&#x27;hobby&#x27;</span>)</span><br><span class="line">        files = request.FILES</span><br><span class="line">        <span class="built_in">print</span>(username, password, hobby, files)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;demo2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># templates/demo2.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">center</span>&quot;&gt;登录界面&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">form</span> <span class="title">action</span>=&quot;&quot; <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span>&gt;<span class="title">username</span>:</span>&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span>&quot; <span class="title">name</span>=&quot;<span class="title">name</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span>&gt;<span class="title">password</span>&lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">checkbox</span>&quot; <span class="title">name</span>=&quot;<span class="title">hobby</span>&quot; <span class="title">value</span>=&quot;<span class="title">fb</span>&quot;&gt;足球</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">checkbox</span>&quot; <span class="title">name</span>=&quot;<span class="title">hobby</span>&quot; <span class="title">value</span>=&quot;<span class="title">bb</span>&quot;&gt;篮球</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">checkbox</span>&quot; <span class="title">name</span>=&quot;<span class="title">hobby</span>&quot; <span class="title">value</span>=&quot;<span class="title">cb</span>&quot;&gt;双色球</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">files</span>&quot; <span class="title">multiple</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">success</span> <span class="title">btn</span>-<span class="title">block</span>&quot; <span class="title">value</span>=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="request-method"><a href="#request-method" class="headerlink" title="request.method"></a><code>request.method</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取当前请求的请求方法，结果是纯大写的字符串类型，默认处理的也是GET请求</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同的请求方法返回不同的操作，默认的GET就直接返回页面</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;demo2.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="request-POST"><a href="#request-POST" class="headerlink" title="request.POST"></a><code>request.POST</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取用户通过POST请求过来的基本数据(不包含文件)，结果可以看成一个字典&#123;<span class="string">&#x27;&#x27;</span>:[],<span class="string">&#x27;&#x27;</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">get()</span><br><span class="line">request.POST.get(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 获取name对应列表里的最后一个元素</span></span><br><span class="line"></span><br><span class="line">getlist()</span><br><span class="line">request.POST.get(<span class="string">&#x27;hobby&#x27;</span>)  <span class="comment"># 获取hobby对应的整个列表</span></span><br></pre></td></tr></table></figure>

<h4 id="request-GET"><a href="#request-GET" class="headerlink" title="request.GET"></a><code>request.GET</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取用户通过GET请求过来的基本数据(不包含文件)，结果可以看成一个字典&#123;<span class="string">&#x27;&#x27;</span>:[],<span class="string">&#x27;&#x27;</span>:[]&#125;</span><br><span class="line">get()       <span class="comment"># 获取列表的最后一个元素</span></span><br><span class="line">getlist()   <span class="comment"># 获取整个列表</span></span><br></pre></td></tr></table></figure>

<h4 id="reqest-FILES"><a href="#reqest-FILES" class="headerlink" title="reqest.FILES"></a><code>reqest.FILES</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取用户上传的数据</span><br><span class="line">request.FILES  <span class="comment"># 一个文件对象</span></span><br></pre></td></tr></table></figure>

<h3 id="Pycharm连接MySQL"><a href="#Pycharm连接MySQL" class="headerlink" title="Pycharm连接MySQL"></a>Pycharm连接MySQL</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220151141386.png" alt="image-20220220151141386"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220151232719.png" alt="image-20220220151232719"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220151548372.png" alt="image-20220220151548372"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220151639520.png" alt="image-20220220151639520"></p>
<h3 id="Django连接MySQL"><a href="#Django连接MySQL" class="headerlink" title="Django连接MySQL"></a>Django连接MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Django默认使用自带的sqlite3，需要使用MySQL数据库需要配置</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>settings.py文件设置</span><br><span class="line"><span class="comment"># 将这段代码注释</span></span><br><span class="line"><span class="comment"># DATABASES = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;default&#x27;: &#123;</span></span><br><span class="line"><span class="comment">#         &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line"><span class="comment">#         &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下代码</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;db01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;10.0.0.60&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在项目文件夹或者应用文件夹内的__init__.py文件中书写固定的代码=</span><br><span class="line">	 <span class="keyword">import</span> pymysql</span><br><span class="line">	 pymysql.install_as_MySQLdb()</span><br><span class="line">    </span><br><span class="line">	 <span class="comment"># 如果不写上述两行代码会报如下错误</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named &#x27;MySQLdb&#x27;.</span></span><br><span class="line"><span class="string">    Did you install mysqlclient or MySQL-python?</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ORM简介"><a href="#ORM简介" class="headerlink" title="ORM简介"></a>ORM简介</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ORM: 对象关系映射</span><br><span class="line">优点: 不用直接操作SQL语句，更好的操作业务层面上的逻辑</span><br><span class="line">缺点: 封装程度太高，有些时候效率低，就需要自己编写SQL语句</span><br><span class="line">  </span><br><span class="line">类          表</span><br><span class="line">对象        字段  </span><br><span class="line">属性        字段对应的值</span><br></pre></td></tr></table></figure>

<h3 id="ORM操作"><a href="#ORM操作" class="headerlink" title="ORM操作"></a>ORM操作</h3><h4 id="编写模型类"><a href="#编写模型类" class="headerlink" title="编写模型类"></a>编写模型类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模型类需要写在应用下的 models.py 文件中</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># id int primary key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># name varchar(32)</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;用户名&#x27;</span>)  <span class="comment"># 默认是varchar max_length参数必须添加</span></span><br><span class="line">    <span class="comment"># age int</span></span><br><span class="line">    age = models.IntegerField(<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    <span class="comment"># 中文注释 使用 verbose_name 参数 和MySQL的 comment 功能一样</span></span><br><span class="line">    <span class="comment"># 或者直接写入注释 verbose_name位置参数在第一个</span></span><br></pre></td></tr></table></figure>

<h4 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 将数据库修改记录先记录到对应应用下的migrations文件夹内</span><br><span class="line">	 python3 manage.py makemigrations</span><br><span class="line">		</span><br><span class="line"><span class="number">2.</span> 执行数据库迁移操作</span><br><span class="line">	 python3 manage.py migrate</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 只要操作了models.py中跟数据库相关的代码就必须要重新执行上述两条命令</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 针对主键字段</span><br><span class="line">   <span class="comment"># 如果不指定主键，ORM会自动创建一个名为id的主键字段(MySQL创建的是隐藏的主键)</span></span><br><span class="line">   <span class="comment"># 主键字段名可以不交id 需要命名其他名称就手动指定</span></span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220161526931.png" alt="image-20220220161526931"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220161906012.png" alt="image-20220220161906012"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220162439594.png" alt="image-20220220162439594"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220163206695.png" alt="image-20220220163206695"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220220163348612.png" alt="image-20220220163348612"></p>
<h4 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据库里面已经有一些表，我们如何通过django orm操作?</span></span><br><span class="line"><span class="string">	1.照着数据库表字段自己在models.py</span></span><br><span class="line"><span class="string">		数据需要自己二次同步</span></span><br><span class="line"><span class="string">	2.django提供的反向同步</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="number">1.</span>先执行数据库迁移命令 完成链接</span><br><span class="line">	python manage.py makemigrations</span><br><span class="line"><span class="number">2.</span>查看代码</span><br><span class="line">	python manage.py inspectdb</span><br><span class="line">  	</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Userinfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = models.IntegerField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">        name = models.CharField(max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">        pwd = models.IntegerField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">            managed = <span class="literal">False</span></span><br><span class="line">            db_table = <span class="string">&#x27;userinfo&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据的CRUD"><a href="#数据的CRUD" class="headerlink" title="数据的CRUD"></a>数据的CRUD</h3><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">pwd = models.IntegerField(<span class="string">&#x27;密码&#x27;</span>,null=<span class="literal">True</span>)  <span class="comment"># 该字段可以为空</span></span><br><span class="line">is_delete = models.IntegerField(default=<span class="number">0</span>)  <span class="comment"># 默认值</span></span><br><span class="line"><span class="comment"># 如果不写入上述参数 执行数据库迁移命令是会提示</span></span><br><span class="line"><span class="comment"># 原因是新添加字段，那么旧数据的新字段的数据填充什么</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">直接改代码然后直接数据库迁移命令即可</span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">注释代码然后执行数据库迁移命令即可，删除后的数据也丢失</span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line"><span class="comment"># views.py 文件中功能函数</span></span><br><span class="line">username = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># select * from user where name=username</span></span><br><span class="line">user_obj = models.User.objects.<span class="built_in">filter</span>(name=username).first()</span><br><span class="line"><span class="comment"># 返回的结果是一个表名对象，打印时可以触发 __str__方法</span></span><br><span class="line"><span class="comment"># 然后结果是一个列表套数据对象</span></span><br><span class="line"><span class="comment"># models.py (上面的代码中需要添加如下代码)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">  <span class="keyword">return</span> self.name  <span class="comment"># 必须要返回一个字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">username = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"><span class="comment"># insert into user(name,pwd) values(username,password)</span></span><br><span class="line">models.User.objects.create(name=username,pwd=password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">models.User.<span class="built_in">object</span>.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line">  <span class="comment"># models.User.objects.filter(id=edit_id).update(name=username, pwd=password)</span></span><br><span class="line">  edit_obj.name = username</span><br><span class="line">  edit_obj.pwd = password</span><br><span class="line">  edit_obj.save()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">models.User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=delete_id).delete()</span><br></pre></td></tr></table></figure>

<h3 id="ORM创建外键关系"><a href="#ORM创建外键关系" class="headerlink" title="ORM创建外键关系"></a>ORM创建外键关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ORM针对外键字段的创建位置</span></span><br><span class="line">  一对多: 推荐在多的一方</span><br><span class="line">  一对一: 在任意方都可以创建，推荐建在查询频率较高的一方</span><br><span class="line">  多对多: 自己建表</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)  <span class="comment"># 总共8位 小数占2位</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)  <span class="comment"># 出版社外键 默认是主键 自动在外键字段后面加 _id 后缀</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)  <span class="comment"># 自动创建书籍和作者的第三张表</span></span><br><span class="line">	  <span class="comment"># 虚拟字段不会在表中实例化出来  而是告诉ORM创建第三张关系表</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>)  <span class="comment"># 自动在外键字段后面加 _id 后缀</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的安装及三板斧</title>
    <url>/42260158.html</url>
    <content><![CDATA[<h3 id="django框架"><a href="#django框架" class="headerlink" title="django框架"></a>django框架</h3><p>版本</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/release-roadmap.688d8d65db0b.png" alt="img"></p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意事项</span></span><br><span class="line"><span class="number">1.</span> 计算机名称不能有中文</span><br><span class="line"><span class="number">2.</span> 项目名和py文件名也不要使用中文</span><br><span class="line"><span class="number">3.</span> django版本选择LTS长期支持版本</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行下载 如果没配置加速 -i https://pypi.douban.com/simple/</span></span><br><span class="line">pip3 install django==<span class="number">1.11</span><span class="number">.11</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否完成</span></span><br><span class="line">django-admin</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="命令创建django项目"><a href="#命令创建django项目" class="headerlink" title="命令创建django项目"></a>命令创建django项目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建django项目</span></span><br><span class="line">django-admin startproject 项目名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动django项目</span></span><br><span class="line">cd 项目名</span><br><span class="line">python3 manage.py runserver ip:port</span><br><span class="line"></span><br><span class="line"> <span class="comment"># python版本原因可能会造成的问题</span></span><br><span class="line">ps:如果报错需要修改py文件源码</span><br><span class="line">D:\Python38\lib\site-packages\django\contrib\admin\widgets.py</span><br><span class="line"><span class="number">152</span>行后面的逗号去掉即可!!!</span><br><span class="line"><span class="string">&#x27;%s=%s&#x27;</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">python3 manage.py startapp app名字</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">django是一款专门开发app(应用)的软件</span></span><br><span class="line"><span class="string">我们创建一个django项目之后类似于创建了一所大学</span></span><br><span class="line"><span class="string">而app就类似于大学里面的各个学院，每个学院都可以有自己独立的各项功能职责</span></span><br><span class="line"><span class="string">django相当于是一个空壳子用来给各个学院提供资源!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;我们创建的app一定要去settings文件中注册才能生效&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="pycharm创建django项目"><a href="#pycharm创建django项目" class="headerlink" title="pycharm创建django项目"></a>pycharm创建django项目</h4><h5 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h5><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218215414177.png" alt="image-20220218215414177"><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218215651361.png" alt="image-20220218215651361"><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218215724571.png" alt="image-20220218215724571"><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218215808164.png" alt="image-20220218215808164"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220219144033575.png" alt="image-20220219144033575"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220219143929900.png" alt="image-20220219143929900"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)]</span><br></pre></td></tr></table></figure>



<h5 id="修改启动端口"><a href="#修改启动端口" class="headerlink" title="修改启动端口"></a>修改启动端口</h5><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218220250581.png" alt="image-20220218220250581"><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218220333420.png" alt="image-20220218220333420"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220218220350510.png" alt="image-20220218220350510"></p>
<h5 id="创建新的app"><a href="#创建新的app" class="headerlink" title="创建新的app"></a>创建新的app</h5><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220219134528313.png" alt="image-20220219134528313"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220219134621861.png" alt="image-20220219134621861"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220219135113273.png" alt="image-20220219135113273"></p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">命令行与pycharm创建不同点</span><br><span class="line"><span class="number">1.</span>命令行不会自动创建templates模板文件夹</span><br><span class="line"><span class="number">2.</span>命令行也不会自动在配置文件中配置模板文件夹路径</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysite1</span><br><span class="line">├── app01             <span class="comment"># 应用</span></span><br><span class="line">│   ├── admin.py      <span class="comment"># django后台管理</span></span><br><span class="line">│   ├── apps.py       <span class="comment"># 注册app</span></span><br><span class="line">│   ├── migrations    <span class="comment"># 存储数据库记录相关(类似操作日志)</span></span><br><span class="line">│   ├── models.py     <span class="comment"># 数据库相关(模型层)</span></span><br><span class="line">│   ├── tests.py      <span class="comment"># 测试文件</span></span><br><span class="line">│   └── views.py      <span class="comment"># 视图函数(视图层)</span></span><br><span class="line">├── db.sqlite3        <span class="comment"># django自带的小型数据库</span></span><br><span class="line">├── manage.py         <span class="comment"># django入口文件</span></span><br><span class="line">└── mysite1           <span class="comment"># 项目同名文件夹</span></span><br><span class="line">    ├── settings.py   <span class="comment"># django暴露给用户可以配置的配置文件</span></span><br><span class="line">    ├── urls.py       <span class="comment"># 路由与视图函数(函数或类)对应关系(路由层)</span></span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure>

<h3 id="必会三板斧"><a href="#必会三板斧" class="headerlink" title="必会三板斧"></a>必会三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> HttpResponse</span><br><span class="line">   返回字符串</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> render</span><br><span class="line">   返回html页面，还可以使用模板语法 </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> redirect</span><br><span class="line">   重定向</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># app01/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;你好呀&#x27;)</span></span><br><span class="line">    <span class="comment"># return render(request, &#x27;index.html&#x27;)</span></span><br><span class="line">    <span class="comment"># l1 = [111, 222, 333, 444]</span></span><br><span class="line">    <span class="comment"># return render(request, &#x27;index.html&#x27;, &#123;&#x27;xxx&#x27;: l1&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># templates/index.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是html页面&lt;/h1&gt;</span><br><span class="line">&#123;&#123; xxx &#125;&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> l <span class="keyword">in</span> xxx %&#125;</span><br><span class="line">    &#123;&#123; l &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联动</span></span><br><span class="line"><span class="comment"># urls.py增加login路由对应函数</span></span><br><span class="line">url(<span class="string">r&#x27;^login/&#x27;</span>, views.login),</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py增加login函数功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index的html页面上a标签跳转到当前 127.0.0.1:8000/login  上</span></span><br><span class="line">&lt;a href=<span class="string">&quot;/login/&quot;</span>&gt;百度一下&lt;/a&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>多表查询和pymysql</title>
    <url>/44264759.html</url>
    <content><![CDATA[<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先将需要使用到的表拼接成一张大表 之后基于单表查询完成</span><br><span class="line">    inner join   内连接</span><br><span class="line">    left join    左连接</span><br><span class="line">    right join   右连接</span><br><span class="line">    union        全连接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 涉及到多表查询的时候 字段名称容易冲突 需要使用表名点字段的方式区分</span></span><br><span class="line"><span class="string"># inner join:只拼接两张表中共有的部分</span></span><br><span class="line"><span class="string">select * from emp inner join dep on emp.dep_id = dep.id;</span></span><br><span class="line"><span class="string"># left join:以左表为基准展示所有的内容 没有的NULL填充</span></span><br><span class="line"><span class="string">select * from emp left join dep on emp.dep_id = dep.id;</span></span><br><span class="line"><span class="string"># right join:以右表为基准展示所有的内容 没有的NULL填充</span></span><br><span class="line"><span class="string">select * from emp right join dep on emp.dep_id = dep.id;</span></span><br><span class="line"><span class="string"># union:左右表所有的数据都在 没有的NULL填充</span></span><br><span class="line"><span class="string">select * from emp left join dep on emp.dep_id = dep.id</span></span><br><span class="line"><span class="string">union</span></span><br><span class="line"><span class="string">select * from emp right join dep on emp.dep_id = dep.id;</span></span><br></pre></td></tr></table></figure>

<h3 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/lx.sql</span><br></pre></td></tr></table></figure>

<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、查询所有的课程的名称以及对应的任课老师姓名</span><br><span class="line">select course.cname,teacher.tname </span><br><span class="line">from teacher </span><br><span class="line">left join course on course.teacher_id=teacher.tid;</span><br><span class="line"></span><br><span class="line">2、查询学生表中男女生各有多少人</span><br><span class="line">select gender,count(gender) </span><br><span class="line">from student </span><br><span class="line">group by gender;</span><br><span class="line"></span><br><span class="line">3、查询物理成绩等于100的学生的姓名</span><br><span class="line">select student.sname</span><br><span class="line">from  course</span><br><span class="line">join score  on course.cid=score.course_id</span><br><span class="line">join student on student.sid=score.student_id</span><br><span class="line">where course.cname=&#x27;物理&#x27; and score.num=100;</span><br><span class="line"></span><br><span class="line">4、查询平均成绩大于八十分的同学的姓名和平均成绩</span><br><span class="line">select student.sname,avg(score.num) </span><br><span class="line">from student </span><br><span class="line">join score on student.sid=score.student_id </span><br><span class="line">group by student.sname </span><br><span class="line">having avg(score.num)&gt;80;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、查询所有学生的学号，姓名，选课数，总成绩</span><br><span class="line">select </span><br><span class="line">  student.sid,</span><br><span class="line">  student.sname,</span><br><span class="line">  count(course.cid),</span><br><span class="line">  sum(score.num)</span><br><span class="line">from  course</span><br><span class="line">join score  on course.cid=score.course_id</span><br><span class="line">right join student on student.sid=score.student_id</span><br><span class="line">group by student.sname</span><br><span class="line">order by student.sid;</span><br><span class="line"> </span><br><span class="line"># ONLY_FULL_GROUP_BY 有限制 只选择出现在group by后面的列，或者给列增加聚合函数</span><br><span class="line"># set sql_mode=&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;</span><br><span class="line"></span><br><span class="line">6、 查询姓李老师的个数</span><br><span class="line">select count(tid) from teacher where tname like &#x27;李%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、 查询没有报李平老师课的学生姓名</span><br><span class="line">select student.sname from student where student.sname not in </span><br><span class="line">(select </span><br><span class="line">  distinct(student.sname)</span><br><span class="line">from  course</span><br><span class="line">join score  on course.cid=score.course_id</span><br><span class="line">right join student on student.sid=score.student_id</span><br><span class="line">left join teacher on teacher.tid=course.teacher_id</span><br><span class="line">where teacher.tname=&#x27;李平老师&#x27;);</span><br><span class="line"></span><br><span class="line">8、 查询物理课程比生物课程高的学生的学号</span><br><span class="line">select t1.student_id </span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">student_id,</span><br><span class="line">num</span><br><span class="line">from student</span><br><span class="line">left join score on score.student_id=student.sid</span><br><span class="line">left join course on course.cid=score.course_id</span><br><span class="line">where course.cname=&#x27;物理&#x27;) as t1</span><br><span class="line">join</span><br><span class="line">(select </span><br><span class="line">student_id,</span><br><span class="line">num</span><br><span class="line">from student</span><br><span class="line">left join score on score.student_id=student.sid</span><br><span class="line">left join course on course.cid=score.course_id</span><br><span class="line">where  course.cname=&#x27;生物&#x27;) as t2</span><br><span class="line">on t1.student_id=t2.student_id</span><br><span class="line">where t1.num &gt; t2.num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、 查询没有同时选修物理课程和体育课程的学生姓名</span><br><span class="line">select </span><br><span class="line">  *</span><br><span class="line">from student</span><br><span class="line">left join score on score.student_id=student.sid</span><br><span class="line">left join course on course.cid=score.course_id</span><br><span class="line">where course.cid=2 or course.cid=3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10、查询挂科超过两门(包括两门)的学生姓名和班级</span><br><span class="line">select student.sname ,count(num) </span><br><span class="line">from score </span><br><span class="line">join student on student.sid=score.student_id </span><br><span class="line">join class on class.cid=student.class_id  </span><br><span class="line">where score.num&lt;60 </span><br><span class="line">group by student.sname </span><br><span class="line">having count(num)&gt;=2;</span><br><span class="line"></span><br><span class="line">11、查询选修了所有课程的学生姓名</span><br><span class="line">select </span><br><span class="line"> student.sname</span><br><span class="line">from student</span><br><span class="line">join score on score.student_id=student.sid</span><br><span class="line">join course on course.cid=score.course_id</span><br><span class="line">group by student.sname</span><br><span class="line">having count(course.cname)=4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12、查询李平老师教的课程的所有成绩记录</span><br><span class="line">select </span><br><span class="line">  course.cname,</span><br><span class="line">  score.num,</span><br><span class="line">  student.sname</span><br><span class="line">from  course</span><br><span class="line">join score  on course.cid=score.course_id</span><br><span class="line">right join student on student.sid=score.student_id</span><br><span class="line">left join teacher on teacher.tid=course.teacher_id</span><br><span class="line">where teacher.tname=&#x27;李平老师&#x27;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">13、查询全部学生都选修了的课程号和课程名</span><br><span class="line"></span><br><span class="line">14、查询每门课程被选修的次数</span><br><span class="line"></span><br><span class="line">15、查询之选修了一门课程的学生姓名和学号</span><br><span class="line"></span><br><span class="line">16、查询所有学生考出的成绩并按从高到低排序（成绩去重）</span><br><span class="line"></span><br><span class="line">17、查询平均成绩大于85的学生姓名和平均成绩</span><br><span class="line"></span><br><span class="line">18、查询生物成绩不及格的学生姓名和对应生物分数</span><br><span class="line"></span><br><span class="line">19、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程)平均成绩最高的学生姓名</span><br><span class="line"></span><br><span class="line">20、查询每门课程成绩最好的前两名学生姓名</span><br><span class="line"></span><br><span class="line">21、查询不同课程但成绩相同的学号，课程号，成绩</span><br><span class="line"></span><br><span class="line">22、查询没学过“叶平”老师课程的学生姓名以及选修的课程名称；</span><br><span class="line"></span><br><span class="line">23、查询所有选修了学号为1的同学选修过的一门或者多门课程的同学学号和姓名；</span><br><span class="line"></span><br><span class="line">24、任课最多的老师中学生单科成绩最高的学生姓名</span><br></pre></td></tr></table></figure>

<h3 id="Python操作MySQL"><a href="#Python操作MySQL" class="headerlink" title="Python操作MySQL"></a>Python操作MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pymsql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymsql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接MySQL服务端</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;db8_2&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 产生一个游标对象</span></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 编写SQL语句</span></span><br><span class="line">sql = <span class="string">&#x27;select * from teacher&#x27;</span></span><br><span class="line">affect_rows = cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(affect_rows)</span><br><span class="line"><span class="comment"># 获取执行结果</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h3 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接MySQL服务端</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;db8_3&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    autocommit=<span class="literal">True</span>  <span class="comment"># 针对增 改 删自动二次确认</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 产生一个游标对象</span></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 编写SQL语句</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">sql = <span class="string">&quot;select * from userinfo where name=%s and pwd=%s&quot;</span></span><br><span class="line">cursor.execute(sql,(username,password))</span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.只需要用户名也可以登录</span></span><br><span class="line"><span class="comment"># 2.不需要用户名和密码也可以登录</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SQL注入的原因 是由于特殊符号的组合会产生特殊的效果</span></span><br><span class="line"><span class="string">    实际生活中 尤其是在注册用户名的时候 会非常明显的提示你很多特殊符号不能用</span></span><br><span class="line"><span class="string">        原因也是一样的</span></span><br><span class="line"><span class="string">结论:设计到敏感数据部分 不要自己拼接 交给现成的方法拼接即可</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = &#x27;insert into userinfo(name,pwd) values(&quot;jason&quot;,&quot;123&quot;),(&quot;kevin&quot;,&quot;321&quot;)&#x27;</span></span><br><span class="line"><span class="comment"># res = cursor.execute(sql)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在使用代码进行数据操作的时候 不同操作的级别是不一样的</span></span><br><span class="line"><span class="string">    针对查无所谓</span></span><br><span class="line"><span class="string">    针对增 改 删都需要二次确认</span></span><br><span class="line"><span class="string">        conn.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>路由匹配和路由分发</title>
    <url>/e9898668.html</url>
    <content><![CDATA[<h3 id="Django请求生命周期"><a href="#Django请求生命周期" class="headerlink" title="Django请求生命周期"></a>Django请求生命周期</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/auznQ0.jpg" alt="auznQ0"></p>
<span id="more"></span>

<h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">  url()方法</span><br><span class="line">    <span class="number">1.</span> 第一个参数是一个正则表达式</span><br><span class="line">    <span class="number">2.</span> 一旦第一个参数匹配到了内容直接结束匹配 执行对应的视图函数</span><br></pre></td></tr></table></figure>

<h4 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r&#x27;^test/\d+/$&#x27;</span>, views.test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无名分组，将正则表达括起来为一组</span></span><br><span class="line">url(<span class="string">r&#x27;^testadd/(\d+)/$&#x27;</span>, views.test)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;无名分组会将括号内正则表达式匹配到的内容当做位置参数传递给后面的视图函数&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">testadd</span>(<span class="params">request, a</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(a)</span><br><span class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from testadd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r&#x27;^test1/(?P&lt;id&gt;\d+)/$&#x27;</span>, views.test1)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;会将括号内正则表达式匹配到的内容当做关键字参数传递到后面的视图函数&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">request,<span class="built_in">id</span></span>):</span>  <span class="comment"># 这个关键字参数名称 id 与 正则表达式的分组名称一致 &lt;id&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from test1&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 有名分组与无名分组不能混合使用，可以单个重复使用</span></span><br><span class="line">url(<span class="string">r&#x27;^test2/(\d+)/(?P&lt;id&gt;\d+)/$&#x27;</span>, views.test2)  <span class="comment"># 错误，两者不能混合使用</span></span><br><span class="line">url(<span class="string">r&#x27;^test3/(?P&lt;id1&gt;\d+)/(?P&lt;id2&gt;\d+)/$&#x27;</span>, views.test3)  <span class="comment"># 可以单独的可以重复使用  </span></span><br></pre></td></tr></table></figure>

<h4 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当路由频繁变化的时候，html页面上的连接地址需要做到动态解析</span><br><span class="line">&lt;a href=<span class="string">&quot;/edit/?edit_id=&#123;&#123; user_obj.id &#125;&#125;&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">warning</span>&quot;&gt;编辑&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">1.给路由与视图函数对应关系添加一个别名(<span class="params">不冲突即可</span>)</span></span><br><span class="line"><span class="class"><span class="title">url</span>(<span class="params"><span class="string">r&#x27;^edit/(?P&lt;edit_id\d+&gt;/$)&#x27;</span>, views.edit, name=<span class="string">&#x27;edit&#x27;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">2.根据该别名动态解析出一个结果，该结果可以直接访问到对应的路由</span></span><br><span class="line"><span class="class">	前端:</span> &lt;a href=<span class="string">&quot;&#123;% url &#x27;index_name&#x27; %&#125;&quot;</span>&gt;<span class="number">111</span>&lt;/a&gt;</span><br><span class="line">	后端: </span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line">		reverse(<span class="string">&#x27;index_name&#x27;</span>)  <span class="comment"># 返回的是接口地址 还是需要用 redirect</span></span><br><span class="line">		ps:redirect括号内也可以直接写别名</span><br></pre></td></tr></table></figure>

<h4 id="无名有名反向解析"><a href="#无名有名反向解析" class="headerlink" title="无名有名反向解析"></a>无名有名反向解析</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r&#x27;^index/(\d+)/&#x27;</span>,views.index,name=<span class="string">&#x27;index_name&#x27;</span>)</span><br><span class="line">后端: reverse(<span class="string">&#x27;index_name&#x27;</span>,args=(<span class="number">1</span>,))  <span class="comment"># 只要给个数字即可</span></span><br><span class="line">前端: &lt;a href=<span class="string">&quot;&#123;% url &#x27;index_name&#x27; 1 %&#125;&quot;</span>&gt;&lt;/a&gt;  <span class="comment"># 只要给个数字即可</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">url(<span class="string">r&#x27;^index/(?P&lt;id&gt;\d+)/&#x27;</span>,views.index,name=<span class="string">&#x27;index_name&#x27;</span>)</span><br><span class="line">后端: reverse(<span class="string">&#x27;index_name&#x27;</span>,kwargs=&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">123</span>&#125;)  </span><br><span class="line">前端: &lt;a href=<span class="string">&quot;&#123;% url &#x27;index_name&#x27; id=666 %&#125;&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  url(<span class="string">r&#x27;^edit/(?P&lt;edit_id&gt;\d+)/$&#x27;</span>, views.edit_user, name=<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">  前端: &lt;a href=<span class="string">&quot;&#123;% url &#x27;edit&#x27; edit_id=user_obj.id %&#125;&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">warning</span>&quot;&gt;编辑&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">  后端:</span> 在视图函数中定义 edit_id 接收到 <span class="built_in">id</span> 值，根据<span class="built_in">id</span>值操作对应的数据信息</span><br><span class="line">总结</span><br><span class="line">	无名有名都可以使用一种(无名)反向解析的形式</span><br></pre></td></tr></table></figure>

<h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django专注于开发应用，当一个django项目大的时候，路由与视图函数映射关系全部写在总的urls.py就特别大</span><br><span class="line"></span><br><span class="line">django中的每一个应用都可以有自己的urls.py  static文件 templates文件</span><br><span class="line">因此每个人只需要写主机的应用即可，最后统一到总的urls.py路由中关联</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>复杂导入</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">...</span><br><span class="line">url(<span class="string">r&#x27;^app01/&#x27;</span>, include(app01_urls))</span><br><span class="line">url(<span class="string">r&#x27;^app02/&#x27;</span>, include(app02_urls))</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>进阶导入</span><br><span class="line"><span class="comment"># 不用导入app的urls</span></span><br><span class="line">url(<span class="string">r&#x27;app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>))</span><br><span class="line">url(<span class="string">r&#x27;app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;当多个应用在反向解析的时候如果出现别名冲突的情况时，那么无法识别&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># app01/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index, name=<span class="string">&#x27;index_name&#x27;</span>),</span><br><span class="line">    url(<span class="string">r&#x27;^login/&#x27;</span>, views.login)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># app02/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index, name=<span class="string">&#x27;index_name&#x27;</span>),</span><br><span class="line">    url(<span class="string">r&#x27;^login/&#x27;</span>, views.login)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># app01/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect, reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from app01 index&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(reverse(<span class="string">&#x27;index_name&#x27;</span>))  </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from app01 login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># app02/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect, reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from app02 index&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(reverse(<span class="string">&#x27;index_name&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;from app02 login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;针对上述问题有以下解决办法&#x27;&#x27;&#x27;</span></span><br><span class="line">方式<span class="number">1</span>:名称空间(namespace)</span><br><span class="line">  总路由:</span><br><span class="line">    url(<span class="string">r&#x27;app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>, namespace=<span class="string">&#x27;app01&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>, namespace=<span class="string">&#x27;app02&#x27;</span>)),</span><br><span class="line">  后端:</span><br><span class="line">    reverse(<span class="string">&#x27;app01:index_name&#x27;</span>)</span><br><span class="line">    reverse(<span class="string">&#x27;app02:index_name&#x27;</span>)</span><br><span class="line">  前端:</span><br><span class="line">    &lt;a href=<span class="string">&quot;&#123;% url &#x27;app01:index_name&#x27; %&#125;&quot;</span>&gt;app01&lt;/a&gt;</span><br><span class="line">		&lt;a href=<span class="string">&quot;&#123;% url &#x27;app02:index_name&#x27; %&#125;&quot;</span>&gt;app02&lt;/a&gt;</span><br><span class="line">  </span><br><span class="line">方式<span class="number">2</span>:起别名不要冲突即可(前缀加上应用名)</span><br><span class="line">  <span class="comment"># app01/urls.py</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index, name=<span class="string">&#x27;app01_index_name&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># app02/urls.py</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index, name=<span class="string">&#x27;app02_index_name&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 前端</span></span><br><span class="line">  &lt;a href=<span class="string">&quot;&#123;% url &#x27;app01_index_name&#x27; %&#125;&quot;</span>&gt;app01&lt;/a&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;&#123;% url &#x27;app02_index_name&#x27; %&#125;&quot;</span>&gt;app01&lt;/a&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法与Django部分源码</title>
    <url>/802acd93.html</url>
    <content><![CDATA[<h3 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将url地址模拟成html结尾，看上去是一个静态文件，目的是为了增加搜索引擎对网站的爬取和SEO</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="本地虚拟环境"><a href="#本地虚拟环境" class="headerlink" title="本地虚拟环境"></a>本地虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">相当于创建一个新的python环境</span><br><span class="line"></span><br><span class="line"><span class="comment">## Linux使用virtualenv创建虚拟环境</span></span><br><span class="line"><span class="comment"># 安装扩展</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip使用</span></span><br><span class="line">pip3 <span class="built_in">list</span>	        <span class="comment"># 列出所有的扩展</span></span><br><span class="line">pip3 freeze       <span class="comment"># 查看所有的扩展及版本，便于导出</span></span><br><span class="line">pip3 show 扩展名	  <span class="comment"># 查看扩展详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找路径</span></span><br><span class="line">which virtualenvwrapper.sh</span><br><span class="line">which python3</span><br><span class="line">which virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑全局环境，当前用户的</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line">export WORKON_HOME=/home/lzj/.virtualenvs</span><br><span class="line">source /home/lzj/.local/<span class="built_in">bin</span>/virtualenvwrapper.sh</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">bin</span>/python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/home/lzj/.local/<span class="built_in">bin</span>/virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line">mkdir ~/.virtualenvs</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">mkvirtualenv test-env	     <span class="comment"># 创建test-env 的虚拟环境,默认进入到虚拟环境中</span></span><br><span class="line">mkvirtualenv --python==	   <span class="comment"># 指定python版本路径创建虚拟环境</span></span><br><span class="line">lsvirtualenv			         <span class="comment"># 查看所有的虚拟环境</span></span><br><span class="line">rmvirtualenv			         <span class="comment"># 删除</span></span><br><span class="line">cdvirtualenv			         <span class="comment"># 进入虚拟环境的目录，需要进入到虚拟环境</span></span><br><span class="line">workon test-env			       <span class="comment"># 进入test-env虚拟环境中</span></span><br><span class="line">deactivate				         <span class="comment"># 退出当前虚拟环境</span></span><br></pre></td></tr></table></figure>

<h3 id="Django版本差别"><a href="#Django版本差别" class="headerlink" title="Django版本差别"></a>Django版本差别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django1.x与django2.x <span class="number">3.</span>x的区别</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>urls.py中的路由匹配方法</span><br><span class="line">  <span class="number">1.</span>x 第一个参数是正则表达式  url()</span><br><span class="line">  <span class="number">2.</span>x和<span class="number">3.</span>x 第一个参数不支持正则表达式，写什么匹配什么  path()</span><br><span class="line">  </span><br><span class="line">  <span class="number">2.</span>x与<span class="number">3.</span>x 如果要用正则表达式需要导入模块 re_path</span><br><span class="line">  <span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line">  re_path()  相当于 <span class="number">1.</span>x的url()</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>转换器</span><br><span class="line">	 五种常用转换器</span><br><span class="line">    <span class="built_in">str</span>,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span><br><span class="line">    <span class="built_in">int</span>,匹配正整数，包含<span class="number">0</span>。</span><br><span class="line">    slug,匹配字母、数字以及横杠、下划线组成的字符串。</span><br><span class="line">    uuid,匹配格式化的uuid，如 075194d3-<span class="number">6885</span>-417e-a8a8-6c931e272f00。</span><br><span class="line">    path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span><br><span class="line">    </span><br><span class="line">     	 自定义</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MonthConverter</span>:</span></span><br><span class="line">        regex=<span class="string">&#x27;\d&#123;2&#125;&#x27;</span> <span class="comment"># 属性名必须为regex</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">            <span class="keyword">return</span> value <span class="comment"># 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">from</span> django.urls <span class="keyword">import</span> path,register_converter</span><br><span class="line">    <span class="keyword">from</span> app01.path_converts <span class="keyword">import</span> MonthConverter</span><br><span class="line"></span><br><span class="line">    register_converter(MonthConverter,<span class="string">&#x27;mon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">    urlpatterns = [</span><br><span class="line">        path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail, name=<span class="string">&#x27;aaa&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<h3 id="三板斧本质"><a href="#三板斧本质" class="headerlink" title="三板斧本质"></a>三板斧本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django视图函数必须要返回一个HttpResponse对象</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">通过查看 HttpResponse render redirect 等源码可以看出都是返回的HttpResponse</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">需求: 给前端返回JSON格式数据</span><br><span class="line"></span><br><span class="line">方式<span class="number">1</span>: 自己序列化</span><br><span class="line">  <span class="comment"># views.py</span></span><br><span class="line"> 	<span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">      <span class="keyword">import</span> json</span><br><span class="line">      d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;desc&#x27;</span>:<span class="string">&#x27;哈哈哈&#x27;</span>&#125;</span><br><span class="line">      res = json.dumps(d,ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 针对有中文的情况下</span></span><br><span class="line">      <span class="keyword">return</span> HttpResponse(res) </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">方式<span class="number">2</span>: JsonResponse</span><br><span class="line">  <span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">      d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;desc&#x27;</span>:<span class="string">&#x27;哈哈哈&#x27;</span>&#125;</span><br><span class="line">      <span class="keyword">return</span> JsonResponse(d)</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 额外参数补充 查看JsonResponse源码</span></span><br><span class="line">  json_dumps_params=&#123;<span class="string">&#x27;ensure_ascii&#x27;</span>: <span class="literal">False</span>&#125;  <span class="comment"># 中文编码</span></span><br><span class="line">  safe=<span class="literal">False</span>                                 <span class="comment"># 默认情况只序列化字典类型，这个参数可以将非字典类型序列化</span></span><br></pre></td></tr></table></figure>

<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">form表单上传文件注意事项</span><br><span class="line">  <span class="number">1.</span>method必须是post</span><br><span class="line">  <span class="number">2.</span>enctype参数修改为 multipart/form-data</span><br><span class="line">  </span><br><span class="line">前端:</span><br><span class="line">  &lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userinfo&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;my_file&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  </span><br><span class="line">后端:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_file</span>(<span class="params">request</span>):</span></span><br><span class="line">      <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      <span class="built_in">print</span>(request.POST)</span><br><span class="line">      file_obj = request.FILES.get(<span class="string">&#x27;my_file&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> % file_obj.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunks <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># chunks 会一行一行读取 可以提升效率</span></span><br><span class="line">                f.write(chunks)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># urls.py url(...)</span></span><br></pre></td></tr></table></figure>

<h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FBV基于函数的视图</span><br><span class="line"></span><br><span class="line">CBV基于类的视图</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get 请求&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post 请求&#x27;</span>)</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">   url(<span class="string">r&#x27;^mycbv&#x27;</span>, views.MyView.as_view())</span><br><span class="line">  </span><br><span class="line">as_view()是View类的静态方法，返回的是view函数地址，本质还是FBV</span><br></pre></td></tr></table></figure>

<h3 id="CBV源码"><a href="#CBV源码" class="headerlink" title="CBV源码"></a>CBV源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">as_view</span>(<span class="params">cls, **initkwargs</span>):</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">           self = cls(**initkwargs)  <span class="comment"># self = MyView()  生成一个我们自己写的类的对象</span></span><br><span class="line">           <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">       <span class="keyword">return</span> view</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">   <span class="comment"># 获取当前请求并判断是否属于正常的请求(8个)</span></span><br><span class="line">   <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">       <span class="comment"># get请求  getattr(对象,&#x27;get&#x27;)   handler = 我们自己写的get方法</span></span><br><span class="line">       handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       handler = self.http_method_not_allowed</span><br><span class="line">   <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment"># 执行我们写的get方法并返回该方法的返回值</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 面向对象的反射</span></span><br></pre></td></tr></table></figure>

<h3 id="settings源码"><a href="#settings源码" class="headerlink" title="settings源码"></a>settings源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.django其实有两个配置文件</span></span><br><span class="line"><span class="string">	一个是暴露给用户可以自定义的配置文件</span></span><br><span class="line"><span class="string">		项目根目录下的settings.py</span></span><br><span class="line"><span class="string">	一个是项目默认的配置文件</span></span><br><span class="line"><span class="string">		当用户不做任何配置的时候自动加载默认配置</span></span><br><span class="line"><span class="string">        from django.conf import global_settings(所有全局配置global_settings)</span></span><br><span class="line"><span class="string">2.配置文件变量名必须是大写</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">疑问:为什么当用户配置了就使用用户配置的 不配置就是要默认的</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">settings = LazySettings()</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;day05.settings&quot;</span>)</span><br><span class="line">ENVIRONMENT_VARIABLE = <span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySettings</span>(<span class="params">LazyObject</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_setup</span>(<span class="params">self, name=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># os.environ看成是一个全局大字典      &#x27;day05.settings&#x27;</span></span><br><span class="line">        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)</span><br><span class="line">        self._wrapped = Settings(settings_module)  <span class="comment"># Settings(&#x27;day05.settings&#x27;)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, settings_module</span>):</span>  <span class="comment"># &#x27;day05.settings&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> setting <span class="keyword">in</span> <span class="built_in">dir</span>(global_settings):  <span class="comment"># 获取全局配置文件里面所有的变量名</span></span><br><span class="line">            <span class="keyword">if</span> setting.isupper():  <span class="comment"># 校验是否是纯大写</span></span><br><span class="line">                <span class="built_in">setattr</span>(self, setting, <span class="built_in">getattr</span>(global_settings, setting))</span><br><span class="line">                <span class="comment"># 给Settings对象添加全局配置文件中所有的配置信息</span></span><br><span class="line">        </span><br><span class="line">        self.SETTINGS_MODULE = settings_module  <span class="comment"># &#x27;day05.settings&#x27;</span></span><br><span class="line">        mod = importlib.import_module(self.SETTINGS_MODULE)</span><br><span class="line">        <span class="comment"># from day05 import settings  # 导入暴露给用户的自定义配置文件</span></span><br><span class="line">        <span class="keyword">for</span> setting <span class="keyword">in</span> <span class="built_in">dir</span>(mod):</span><br><span class="line">            <span class="keyword">if</span> setting.isupper():</span><br><span class="line">                setting_value = <span class="built_in">getattr</span>(mod, setting)</span><br><span class="line">                <span class="built_in">setattr</span>(self, setting, setting_value)</span><br></pre></td></tr></table></figure>

<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    i = <span class="number">666</span></span><br><span class="line">    f = <span class="number">1.1</span></span><br><span class="line">    s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    l = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line">    t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    se = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 传值方式1</span></span><br><span class="line">    <span class="comment"># return render(request, &#x27;index.html&#x27;, &#123;&#x27;i&#x27;: i, &#x27;s&#x27;: s, &#x27;d&#x27;: d&#125;)</span></span><br><span class="line">    <span class="comment"># 传值方式2</span></span><br><span class="line">    <span class="comment"># return render(request, &#x27;index.html&#x27;, locals())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传值方式<span class="number">1</span>: 利用字典单个传</span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;i&#x27;</span>: i, <span class="string">&#x27;s&#x27;</span>: s, <span class="string">&#x27;d&#x27;</span>: d&#125;)</span><br><span class="line"></span><br><span class="line">传值方式<span class="number">2</span>: <span class="built_in">locals</span>() 将当前名称空间所有变量传递给页面</span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">区别:</span><br><span class="line">  方式<span class="number">1</span> 传值精确 不会造成资源浪费</span><br><span class="line">  方式<span class="number">2</span> 一次性全部传值 可能会造成资源浪费</span><br><span class="line">  </span><br><span class="line">补充:传递函数名和类名都会自动加括号调用(模板语法不支持额外的传参)</span><br></pre></td></tr></table></figure>

<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模板语法取值只能采用 句点符(.)</span><br><span class="line">列表的索引值和字典的键值都可以通过 . 一直往下取值</span><br><span class="line">&#123;&#123;  &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端的视图函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;这个是字典下的列表里面的字典&#x27;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端取值</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby<span class="number">.3</span>.desc &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类似于python的内置方法</span><br><span class="line">前端:</span><br><span class="line">&lt;p&gt;统计长度：&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;加法运算：&#123;&#123; i|add:<span class="number">1000</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;字符拼接：&#123;&#123; s|add:<span class="string">&#x27;python&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式：&#123;&#123; ctime|date:<span class="string">&#x27;Y年-m月-d日&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值：&#123;&#123; b|default:<span class="string">&#x27;aaaa&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值&#123;&#123; b1|default:<span class="string">&#x27;aaaa&#x27;</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;截取文本(三个点也算)&#123;&#123; s|truncatechars:<span class="number">6</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;截取文本(三个点不算)&#123;&#123; s|truncatewords:<span class="number">2</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;safe可以解析字符串内的标签&#123;&#123; h|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; sss &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; sss1 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">后端views.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    i = <span class="number">666</span></span><br><span class="line">    f = <span class="number">1.1</span></span><br><span class="line">    s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    l = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">    d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;这个是字典下的列表里面的字典&#x27;</span>&#125;]&#125;</span><br><span class="line">    t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    se = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    b1 = <span class="literal">False</span></span><br><span class="line">    ctime = datetime.today()</span><br><span class="line">    file_size = <span class="number">5012341</span></span><br><span class="line">    h = <span class="string">&#x27;&lt;h1&gt;哈哈哈&lt;/h1&gt;&#x27;</span></span><br><span class="line">    sss = <span class="string">&#x27;&lt;h2&gt;老子要挣大钱&lt;/h2&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">    sss1 = mark_safe(<span class="string">&#x27;&lt;h2&gt;老子要挣大钱&lt;/h2&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 后端写好的标签字符串也可以在前端解析</span></span><br><span class="line">  方式<span class="number">1</span>: 后端字符串变量|safe</span><br><span class="line">  方式<span class="number">2</span>: </span><br><span class="line">    <span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">    sss1 = mark_safe(<span class="string">&#x27;&lt;h2&gt;老子要挣大钱&lt;/h2&gt;&#x27;</span>)  <span class="comment"># 前端直接使用该变量值就可以解析</span></span><br></pre></td></tr></table></figure>

<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类似于python的逻辑控制</span><br><span class="line"><span class="comment"># if语句</span></span><br><span class="line">&#123;% <span class="keyword">if</span> file_size %&#125;</span><br><span class="line">    &lt;p&gt;有值&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;无值&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># forloop是内置对象 有first  last等 可以提供循环的判断</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># for和if判断结合</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> s %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">     &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;传入的数据是空的&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># empty 当循环的值时空的时候就会走 这条后的逻辑</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;&#125;&#125;    <span class="comment"># 变量相关</span></span><br><span class="line">&#123;% %&#125;   <span class="comment"># 逻辑相关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于取别名，而且该别名只在 with 块内生效</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.desc <span class="keyword">as</span> desc %&#125;</span><br><span class="line">    &#123;&#123; desc &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类似于python里面的自定义函数</span><br><span class="line"><span class="number">1.</span>应用下创建一个名字必须为 templatetags 文件夹</span><br><span class="line"><span class="number">2.</span>上述文件夹内创建一个任意名称的py文件</span><br><span class="line"><span class="number">3.</span>在该文件内固定先书写以下两行代码</span><br><span class="line">	<span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">  register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># templatetags/mytag.py</span></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;myfilter&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">a, b</span>):</span>  <span class="comment"># 只能接收两个参数，需要传入多个参数可以让这两个参数按照一定字符分割&#x27;a|b|c&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签</span></span><br><span class="line"><span class="meta">@register.simple_tag(<span class="params">name=<span class="string">&#x27;mysimple&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">a, b, c, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%s ** %s | %s &gt; %s&#x27;</span> % (a, b, c, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;login.html&#x27;</span>, name=<span class="string">&#x27;my_inclusion_tag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">n</span>):</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        l.append(<span class="string">&#x27;第%s页&#x27;</span> % i)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">locals</span>()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># login.html</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; foo &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 前端使用</span></span><br><span class="line">&#123;% load mytag %&#125;                   <span class="comment"># 先加载mytag.py的名称</span></span><br><span class="line">&#123;&#123; i|myfilter:<span class="number">100</span> &#125;&#125;               <span class="comment"># i 参数来自后端 100 是第二个参数 然后相加</span></span><br><span class="line">&#123;% mysimple <span class="number">2</span> <span class="string">&#x27;xxx&#x27;</span> <span class="number">8</span> <span class="string">&#x27;jjj&#x27;</span> %&#125;     <span class="comment"># 传入四个参数</span></span><br><span class="line">&#123;% my_inclusion_tag <span class="number">10</span> %&#125;          <span class="comment"># 将 my_inclusion_tag 生成的 login.html 传给当前html</span></span><br><span class="line">&#123;% my_inclusion_tag <span class="number">8</span> %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板导入"><a href="#模板导入" class="headerlink" title="模板导入"></a>模板导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类似于python的模块，可以将局部页面直接导入即可</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板页面内容</span></span><br><span class="line">&lt;h1&gt;这是一个form表单&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要引用模板文件，用如下方式</span></span><br><span class="line">&#123;% include <span class="string">&#x27;myform.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种导入和上述的 inclusion_tag 有点像，但是这种方式是导入的静态写死的页面</span></span><br></pre></td></tr></table></figure>

<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在html页面内使用 block 划定指定区域</span><br><span class="line">母版</span><br><span class="line">    &#123;% block 区域名称 %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    </span><br><span class="line">子版</span><br><span class="line">	&#123;% extends <span class="string">&#x27;home.html&#x27;</span> %&#125;</span><br><span class="line">  &#123;% block 区域名称 %&#125;</span><br><span class="line">  		可以替换成自己页面</span><br><span class="line">      同时还可以继承使用母版   &#123;&#123; block.<span class="built_in">super</span> &#125;&#125;</span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">母版在划定区域的时候一般划成三个区域</span><br><span class="line">	css</span><br><span class="line">  html</span><br><span class="line">  js</span><br><span class="line">  </span><br><span class="line">  &#123;% block css %&#125;</span><br><span class="line">  &#123;% endblock %&#125;</span><br><span class="line"> </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line">  &#123;% endblock %&#125;</span><br><span class="line">    </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line">  &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195506829.png" alt="image-20220224195506829"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195530524.png" alt="image-20220224195530524"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195619269.png" alt="image-20220224195619269"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195632402.png" alt="image-20220224195632402"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195650917.png" alt="image-20220224195650917"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220224195723636.png" alt="image-20220224195723636"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM常用查询操作(一)</title>
    <url>/540723fb.html</url>
    <content><![CDATA[<h3 id="Django创建测试环境"><a href="#Django创建测试环境" class="headerlink" title="Django创建测试环境"></a>Django创建测试环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Pycharm中运行django项目不能单独运行单个文件</span><br><span class="line"></span><br><span class="line">方式<span class="number">1</span>: 在当前项目任意位置创建一个py文件，内容如下即可，后续的操作都要在下方</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;mysite6.settings&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    </span><br><span class="line">方式<span class="number">2</span>: 直接使用pycharm提供的python console</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="单表查询关键字"><a href="#单表查询关键字" class="headerlink" title="单表查询关键字"></a>单表查询关键字</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  title = models.CharField(verbose_name=<span class="string">&#x27;书名&#x27;</span>, max_lenth=<span class="number">64</span>)</span><br><span class="line">  price = models.DecimalField(verbose_name=<span class="string">&#x27;价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">  pubilsh_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  auto_now: 每次修改数据时都会自动更新当前时间</span></span><br><span class="line"><span class="string">  auto_now_add: 只记录数据创建的时间，后续不更新</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 迁移数据库和创建数据</span></span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数据</span></span><br><span class="line"><span class="comment"># res = models.Books.objects.create(title=&#x27;西游记&#x27;,price=687.90)</span></span><br><span class="line"><span class="comment"># print(res.title)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;create返回值就是当前被创建的数据对象&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).update(price=<span class="number">666.66</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 返回值是受影响的行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">book_obj = models.Books.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">book_obj.price = <span class="number">999.66</span></span><br><span class="line">book_obj.save()  <span class="comment"># 效率低(所有字段重新写一遍)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">models.Books.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).delete()</span><br></pre></td></tr></table></figure>

<h4 id="all"><a href="#all" class="headerlink" title="all()"></a><code>all()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = models.Books.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(res.query)  <span class="comment"># query 查看 orm 内部对应的SQL语句</span></span><br></pre></td></tr></table></figure>

<h4 id="filter-和get"><a href="#filter-和get" class="headerlink" title="filter()和get()"></a><code>filter()</code>和<code>get()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = models.Books.objects.<span class="built_in">filter</span>()  <span class="comment"># 不加条件默认查询所有</span></span><br><span class="line"><span class="built_in">print</span>(res.query)</span><br><span class="line"></span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;西游记&#x27;</span>,price=<span class="number">687.90</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; filter括号内可以放多个参数 默认是 and 关系 推荐使用 条件不符合不会报错 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.get(title=<span class="string">&#x27;西游记&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; get 括号内可以放多个参数 默认是 and 关系 不推荐使用 条件不符合直接报错 &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<h4 id="first"><a href="#first" class="headerlink" title="first()"></a><code>first()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取第一个数据对象</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.<span class="built_in">all</span>().first()</span><br><span class="line"><span class="comment"># 等价于           res = models.Books.object.all()[0]</span></span><br><span class="line"><span class="comment"># 同时支持切片操作   res = models.Books.object.all()[0:2]</span></span><br></pre></td></tr></table></figure>


<h4 id="last"><a href="#last" class="headerlink" title="last()"></a><code>last()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取最后一个数据对象</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.<span class="built_in">all</span>().last()</span><br></pre></td></tr></table></figure>


<h4 id="values"><a href="#values" class="headerlink" title="values()"></a><code>values()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定字段的值</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.<span class="built_in">all</span>().values(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;publish_time&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;all()加不加都表示所有数据  values获取的结果 类似于列表套字典&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="values-list"><a href="#values-list" class="headerlink" title="values_list()"></a><code>values_list()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据指定字段的值</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.values_list(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;publish_time&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;values_list获取的结果 类似于列表套元组&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="order-by"><a href="#order-by" class="headerlink" title="order_by()"></a><code>order_by()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排序</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.order_by(<span class="string">&#x27;price&#x27;</span>)  <span class="comment"># 默认是升序</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.order_by(<span class="string">&#x27;-price&#x27;</span>)  <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure>


<h4 id="count"><a href="#count" class="headerlink" title="count()"></a><code>count()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.count()  <span class="comment"># 统计数据条数</span></span><br></pre></td></tr></table></figure>

<h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct()"></a><code>distinct()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去重</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.<span class="built_in">all</span>().destinct()</span><br><span class="line">res = models.Books.<span class="built_in">object</span>.values(<span class="string">&#x27;title&#x27;</span>).destinct()</span><br><span class="line"><span class="string">&quot;&quot;&quot;去重的前提是数据必须是一模一样  一定不能忽略主键&quot;&quot;&quot;</span>   </span><br></pre></td></tr></table></figure>


<h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude()"></a><code>exclude()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排除...在外  取反</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.exclude(title=<span class="string">&#x27;西游记&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a><code>reverse()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反转</span></span><br><span class="line">res = models.Books.objects.order_by(<span class="string">&#x27;price&#x27;</span>).reverse()</span><br><span class="line"><span class="string">&quot;&quot;&quot;reverse需要先排序之后才能反转&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="exists"><a href="#exists" class="headerlink" title="exists()"></a><code>exists()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否有数据 返回布尔值</span></span><br><span class="line">res = models.Books.<span class="built_in">object</span>.<span class="built_in">all</span>.exists()</span><br></pre></td></tr></table></figure>

<h4 id="针对返回值总结"><a href="#针对返回值总结" class="headerlink" title="针对返回值总结"></a>针对返回值总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回QuerySet对象的方法有</span></span><br><span class="line"><span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">filter</span>()</span><br><span class="line">exclude()</span><br><span class="line">order_by()</span><br><span class="line">reverse()</span><br><span class="line">distinct()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊的QuerySet</span></span><br><span class="line">values()       <span class="comment"># 返回一个可迭代的字典序列</span></span><br><span class="line">values_list()  <span class="comment"># 返回一个可迭代的元祖序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回具体对象的</span></span><br><span class="line">get()</span><br><span class="line">first()</span><br><span class="line">last()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回布尔值的方法有</span></span><br><span class="line">exists()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数字的方法有</span></span><br><span class="line">count()</span><br></pre></td></tr></table></figure>

<h3 id="双下划线查询-范围查询"><a href="#双下划线查询-范围查询" class="headerlink" title="双下划线查询 (范围查询)"></a>双下划线查询 (范围查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查询价格大于<span class="number">700</span>的书籍</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(price__gt=<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 查询价格小于<span class="number">700</span>的书籍</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(price__lt=<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 查询价格是 <span class="number">212.34</span>, <span class="number">210.99</span>, <span class="number">599.78</span> 的书籍</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(price__in=[<span class="number">212.34</span>, <span class="number">210.99</span>, <span class="number">599.78</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; python对数字不敏感 精确度不高 很多时候会采取字符串类型 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查询价格在<span class="number">500</span>到<span class="number">800</span>之间的</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(price__range=(<span class="number">500</span>, <span class="number">800</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 查询书名中包含字母 s 的书</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&#x27;s&#x27;</span>)   <span class="comment"># 区分大小写</span></span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(title__icontains=<span class="string">&#x27;s&#x27;</span>)  <span class="comment"># 不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 查询出版日期是<span class="number">2022</span>的书</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(publish_time__year=<span class="number">2022</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 查询出版日期是<span class="number">3</span>月的书</span><br><span class="line">res = models.Books.objects.<span class="built_in">filter</span>(publish_time__month=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="图书管理系统表设计"><a href="#图书管理系统表设计" class="headerlink" title="图书管理系统表设计"></a>图书管理系统表设计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;书名&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.DecimalField(verbose_name=<span class="string">&#x27;价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 一对多 外键字段建在多的一方</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多对多 外键字段推荐建在查询频率较高的表中</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;出版社名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    addr = models.CharField(verbose_name=<span class="string">&#x27;出版社地址&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">&#x27;邮箱&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;作者名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 一对一 外键字段推荐建立在查询频率较高的表中</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    phone = models.CharField(verbose_name=<span class="string">&#x27;电话&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    addr = models.CharField(verbose_name=<span class="string">&#x27;地址&#x27;</span>, max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h3 id="外键字段的增删改查"><a href="#外键字段的增删改查" class="headerlink" title="外键字段的增删改查"></a>外键字段的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># 主键值</span></span><br><span class="line"><span class="comment"># book_obj.authors.add(1)  # 去第三张关系表中 与作者主键为1的绑定关系</span></span><br><span class="line"><span class="comment"># 作者对象</span></span><br><span class="line"><span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line"><span class="comment"># 括号内支持传多个参数</span></span><br><span class="line"><span class="comment"># book_obj.authors.add(1,2)</span></span><br><span class="line"><span class="comment"># author_obj1 = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># author_obj2 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># book_obj.authors.add(author_obj1, author_obj2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"><span class="comment"># book_boj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># book_boj.authors.set([1, 2])  # 传入的是可迭代对象 列表 元组等</span></span><br><span class="line"><span class="comment"># 可以传入数据对象</span></span><br><span class="line"><span class="comment"># author_obj1 = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># author_obj2 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line"><span class="comment"># book_boj.authors.set([author_obj1, author_obj2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># book_obj.authors.remove(1,2)  # 同时也可以传入数据对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line"><span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line"><span class="comment"># book_obj.authors.clear()  # 去第三张关系表中删除所有该书籍对应的记录</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 括号内既可以传数字也可以传对象 逗号隔开</span></span><br><span class="line"><span class="string">add()</span></span><br><span class="line"><span class="string">remove()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 括号内必须传递可迭代对象 可迭代对象内既可以传数字也可以传对象 支持多个</span></span><br><span class="line"><span class="string">set()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 无需传值</span></span><br><span class="line"><span class="string">clear()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="跨表查询"><a href="#跨表查询" class="headerlink" title="跨表查询"></a>跨表查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">正向查询  外键字段所在表，再去查其他表内的数据</span><br><span class="line"></span><br><span class="line">反向查询  没有外键字段，再去查其他的表</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有关联的外键字段</span></span><br><span class="line">正向查询按 外键字段</span><br><span class="line">反向查询按 表名小写_<span class="built_in">set</span></span><br></pre></td></tr></table></figure>

<h4 id="基于对象的跨表查询-子查询"><a href="#基于对象的跨表查询-子查询" class="headerlink" title="基于对象的跨表查询 (子查询)"></a>基于对象的跨表查询 (子查询)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查询聊斋书籍对应的出版社名称</span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;聊斋&#x27;</span>).first()</span><br><span class="line">    res = book_obj.publish</span><br><span class="line">    <span class="built_in">print</span>(res.title)</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 查询神雕侠侣对应的作者</span><br><span class="line">    book_obj = models.Book.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;神雕侠侣&#x27;</span>).first()</span><br><span class="line">    res = book_obj.authors.<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 查询Jason的地址</span><br><span class="line">    author_obj = models.Author.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;jason&#x27;</span>).first()</span><br><span class="line">    res = author_obj.author_detail</span><br><span class="line">    <span class="built_in">print</span>(res.addr)</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 查询东方出版社出过的书籍</span><br><span class="line">    publish_obj = models.Publish.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;东方出版社&#x27;</span>).first()</span><br><span class="line">    res = publish_obj.book_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span> 查询jason写过的书</span><br><span class="line">    author_obj = models.Author.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;jason&#x27;</span>).first()</span><br><span class="line">    res = author_obj.book_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 查询电话是 <span class="number">122222</span> 的作者姓名</span><br><span class="line">    author_detail_obj = models.AuthorDetail.objects.<span class="built_in">filter</span>(phone=<span class="number">122222</span>).first()</span><br><span class="line">    res = author_detail_obj.author</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h4 id="基于下划线的跨表查询-连表查询"><a href="#基于下划线的跨表查询-连表查询" class="headerlink" title="基于下划线的跨表查询 (连表查询)"></a>基于下划线的跨表查询 (连表查询)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查询聊斋书籍对应的出版社名称</span><br><span class="line">    <span class="comment"># 方式一:</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;聊斋&#x27;</span>).values(<span class="string">&#x27;publish__title&#x27;</span>).first()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 方式二:</span></span><br><span class="line">    res = models.Publish.objects.<span class="built_in">filter</span>(book__title=<span class="string">&#x27;聊斋&#x27;</span>).values(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 查询神雕侠侣对应的作者名字和年龄</span><br><span class="line">    <span class="comment"># 方式一:</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;神雕侠侣&#x27;</span>).values(<span class="string">&#x27;authors__name&#x27;</span>, <span class="string">&#x27;authors__age&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 方式二:</span></span><br><span class="line">    res = models.Author.objects.<span class="built_in">filter</span>(book__title=<span class="string">&#x27;神雕侠侣&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 查询jason的地址</span><br><span class="line">    <span class="comment"># 方式一:</span></span><br><span class="line">    res = models.Author.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;jason&#x27;</span>).values(<span class="string">&#x27;author_detail__addr&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式二:</span></span><br><span class="line">    res = models.AuthorDetail.objects.<span class="built_in">filter</span>(author__name=<span class="string">&#x27;jason&#x27;</span>).values(<span class="string">&#x27;addr&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 查询神雕侠侣对应的作者的电话和地址</span><br><span class="line">    <span class="comment"># 方式一:</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">filter</span>(title=<span class="string">&#x27;神雕侠侣&#x27;</span>).values(<span class="string">&#x27;authors__author_detail__phone&#x27;</span>,<span class="string">&#x27;authors__author_detail__addr&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 方式二:</span></span><br><span class="line">    res = models.AuthorDetail.objects.<span class="built_in">filter</span>(author__book__title=<span class="string">&#x27;神雕侠侣&#x27;</span>).values(<span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;addr&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM常用查询操作(二)</title>
    <url>/fb36b899.html</url>
    <content><![CDATA[<h3 id="图书管理系统的表关系建立"><a href="#图书管理系统的表关系建立" class="headerlink" title="图书管理系统的表关系建立"></a>图书管理系统的表关系建立</h3><span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5张表</span></span><br><span class="line"><span class="string">书籍表 作者表 作者详情表 出版社表 书籍和作者表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一对一的关系，关联字段可以写在任意一方，推荐查询频率高的一方</span></span><br><span class="line"><span class="string">一对多的关系，关联字段写在多的一方</span></span><br><span class="line"><span class="string">多对多的关系，必须建立第三张表(orm中可以用一个字段表示，这个字段可以写在任意一方)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)  <span class="comment"># 主键自增</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)  <span class="comment"># 小数</span></span><br><span class="line">    publish_data = models.DateField(auto_now_add=<span class="literal">True</span>)  <span class="comment"># 日期类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 阅读数</span></span><br><span class="line">    <span class="comment"># read_num=models.IntegerField(default=0)</span></span><br><span class="line">    <span class="comment"># 评论数</span></span><br><span class="line">    <span class="comment"># commit_num=models.IntegerField(default=0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># to关联的表不加引号引号时写在当前表上方  to_field 关联字段</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>, to_field=<span class="string">&#x27;nid&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># models.CASCADE：级联删除，设为默认值，设为空，设为指定的值，不做处理 django2.x版本之后必须加</span></span><br><span class="line"></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDetail&#x27;</span>, to_field=<span class="string">&#x27;nid&#x27;</span>, unique=<span class="literal">True</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    telephone = models.BigIntegerField()</span><br><span class="line">    birthday = models.DateField</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Django-admin的使用"><a href="#Django-admin的使用" class="headerlink" title="Django admin的使用"></a><code>Django admin</code>的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 后台管理，方便快速录入数据</span><br><span class="line"><span class="number">2.</span> 使用方法:</span><br><span class="line">   在 admin.py 中把要使用的表注册</span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    admin.site.register(models.Book)</span><br><span class="line">    admin.site.register(models.Publish)</span><br><span class="line">    admin.site.register(models.Author)</span><br><span class="line">    admin.site.register(models.AuthorDetail)</span><br><span class="line">    </span><br><span class="line">   创建超级管理员</span><br><span class="line">    python3 manage.py createsuperuser  <span class="comment"># 后续输入用户名及密码</span></span><br><span class="line">  	</span><br><span class="line">   访问页面 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin  <span class="comment"># 输入用户密码</span></span><br></pre></td></tr></table></figure>
<h3 id="Django查看原生SQL"><a href="#Django查看原生SQL" class="headerlink" title="Django查看原生SQL"></a>Django查看原生SQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>queryset对象.query</span><br><span class="line"><span class="number">2.</span>通过日志，如下，配置到setting.py中</span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基于双下划线的跨表查询"><a href="#基于双下划线的跨表查询" class="headerlink" title="基于双下划线的跨表查询"></a>基于双下划线的跨表查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>基于对象的跨表查询      子查询，多次查询</span><br><span class="line"><span class="number">2.</span>基于双下划线的跨表查询   多表连接查询</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在django中使用测试脚本，创建任意名称的py文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#加载配置文件，跑django的项目，最开始就是把配置文件加载上</span></span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;day53.settings&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> django  <span class="comment"># 安装了django模块，就可以import</span></span><br><span class="line">    django.setup() <span class="comment"># 使用环境变量中的配置文件，跑django</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查询主键为1的书籍的出版社所在的城市</span></span><br><span class="line">    <span class="comment"># book = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(book.publish.city)</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values(&#x27;publish__city&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询所有住址在北京的作者的姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(author_detail__addr=&#x27;北京&#x27;).values(&#x27;name&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(addr=&#x27;北京&#x27;).values(&#x27;author__name&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询egon出过的所有书籍的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(authors__name=&#x27;egon&#x27;).values(&#x27;name&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name=&#x27;egon&#x27;).values(&#x27;book__name&#x27;).all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询北京出版社出版过的所有书籍的名字以及作者的姓名和地址</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(publish__name=&#x27;北京出版社&#x27;).values(&#x27;name&#x27;, &#x27;authors__name&#x27;,&#x27;authors__author_detail__addr&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(name=&#x27;北京出版社&#x27;).values(&#x27;name&#x27;, &#x27;book__name&#x27;, &#x27;book__authors__name&#x27;,&#x27;book__authors__author_detail__addr&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__book__publish__name=&#x27;北京出版社&#x27;).values(&#x27;author__book__name&#x27;,&#x27;author__name&#x27;, &#x27;addr&#x27;)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>聚合函数 <span class="built_in">sum</span> <span class="built_in">max</span> <span class="built_in">min</span> count avg</span><br><span class="line"><span class="number">2.</span>把聚合结果重命名</span><br><span class="line">	res = modles.Book.objects.<span class="built_in">all</span>().aggregate(aaa=Sum(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line"><span class="number">3.</span>使用时需要导入如下模块</span><br><span class="line">	<span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum,Avg,Max,Min,Count</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算所有图书的平均价格</span></span><br><span class="line">    res = models.Book.objects.aggregate(aaa=Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算所有图书的最高价格</span></span><br><span class="line">	  res = models.Book.objects.aggregate(Max(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算所有图书的总价格</span></span><br><span class="line">	  res = models.Book.objects.aggregate(Sum(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># egon出版图书的总价格</span></span><br><span class="line">	  res = models.Author.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;egon&#x27;</span>).aggregate(Sum(<span class="string">&#x27;book__price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 北京出版从出版社书的最高价格</span></span><br><span class="line">    res = models.Publish.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;北京出版社&#x27;</span>).aggregate(Max(<span class="string">&#x27;book__price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算所有图书的总价格和平均价格</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">all</span>().aggregate(book_sum=Sum(<span class="string">&#x27;price&#x27;</span>), book_avg=Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a>F查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">取出某个字段对应的值</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询评论数大于阅读数的书籍</span></span><br><span class="line">  res = models.Book.objects.<span class="built_in">filter</span>(commit_num__gt=F(<span class="string">&#x27;read_num&#x27;</span>))</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有图书价格+1</span></span><br><span class="line">  res = models.Book.objects.<span class="built_in">all</span>().update(price=F(<span class="string">&#x27;price&#x27;</span>)+<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">构造出 与&amp; 或| 非~</span><br><span class="line">  <span class="comment"># 查询名字叫红楼梦或者价格大于80的书</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">filter</span>(Q(name=<span class="string">&#x27;红楼梦&#x27;</span>) | Q(price__gt=<span class="number">80</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 下列是并且</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(name=&#x27;红楼梦&#x27;,price__gt=80)</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(name=&#x27;红楼梦&#x27;) &amp; Q(price__gt=80))</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 查询名字不是红楼梦的书</span></span><br><span class="line">    res = models.Book.objects.<span class="built_in">filter</span>(~Q(name=<span class="string">&#x27;红楼梦&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 查询名字不是红楼梦，并且价格大于80的书</span></span><br><span class="line">    res1 = models.Book.objects.<span class="built_in">filter</span>(~Q(name=<span class="string">&#x27;红楼梦&#x27;</span>),price__gt=<span class="number">80</span>)</span><br><span class="line">    <span class="built_in">print</span>(res1)</span><br><span class="line">    res2 = models.Book.objects.<span class="built_in">filter</span>(~Q(name=<span class="string">&#x27;红楼梦&#x27;</span>) &amp; Q(price__gt=<span class="number">80</span>))</span><br><span class="line">    <span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">标准 annotate() 内写聚合函数</span></span><br><span class="line"><span class="string">values在前 表示 group by 的字段</span></span><br><span class="line"><span class="string">values在后 表示取字段</span></span><br><span class="line"><span class="string">filter在前 表示where条件</span></span><br><span class="line"><span class="string">filter在后 表示having</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每一个出版社id，以及出书平均价格(单表)</span></span><br><span class="line"><span class="comment"># select publish_id,avg(price) from book group by publish_id;</span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;publish_id&#x27;</span>).<span class="built_in">filter</span>(publish_id__gt=<span class="number">1</span>).annotate(price_ave=Avg(<span class="string">&#x27;price&#x27;</span>)).values(<span class="string">&#x27;publish_id&#x27;</span>, <span class="string">&#x27;price_ave&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出版社id大于1的出版社id，以及出书平均价格大于60的</span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;publish_id&#x27;</span>).<span class="built_in">filter</span>(publish_id__gt=<span class="number">1</span>).annotate(price_avg=Avg(<span class="string">&#x27;price&#x27;</span>)).<span class="built_in">filter</span>(price_avg__gt=<span class="number">60</span>).values(<span class="string">&#x27;publish_id&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每一个出版社出版的名称和书籍个数(连表)</span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;publish_id&#x27;</span>).annotate(book_count=Count(<span class="string">&#x27;nid&#x27;</span>)).values(<span class="string">&#x27;publish__name&#x27;</span>,<span class="string">&#x27;book_count&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 联表的话最好以group by的表作为基表</span></span><br><span class="line">  res = models.Publish.objects.values(<span class="string">&#x27;nid&#x27;</span>).annotate(book_count=Count(<span class="string">&#x27;book__nid&#x27;</span>)).values(<span class="string">&#x27;nid&#x27;</span>,<span class="string">&#x27;book_count&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line">  </span><br><span class="line"><span class="comment">## 简写成，如果基表是group by的表，就可以不写values</span></span><br><span class="line">res = models.Publish.objects.annotate(book_count=Count(<span class="string">&#x27;book&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;book_count&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以book为基表 </span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;publish__nid&#x27;</span>).annotate(book_count=Count(<span class="string">&#x27;nid&#x27;</span>)).values(<span class="string">&#x27;publish__name&#x27;</span>,<span class="string">&#x27;book_count&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每个作者的名字，以及出版过书籍的最高价格(建议使用分组的表作为基表)</span></span><br><span class="line"><span class="comment"># 多对多如果不以分组表作为基表，可能会出数据问题</span></span><br><span class="line">  res = models.Author.objects.values(<span class="string">&#x27;name&#x27;</span>).annotate(max_price=Max(<span class="string">&#x27;book__price&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;max_price&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每一个书籍的名称，以及对应的作者个数</span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;name&#x27;</span>).annotate(author_count=Count(<span class="string">&#x27;authors&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;author_count&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计不止一个作者的图书</span></span><br><span class="line">  res = models.Book.objects.values(<span class="string">&#x27;name&#x27;</span>).annotate(author_count=Count(<span class="string">&#x27;authors&#x27;</span>)).<span class="built_in">filter</span>(author_count__gt=<span class="number">1</span>).values(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计价格数大于10元，作者个数大于1的图书</span></span><br><span class="line">  res = models.Book.objects.<span class="built_in">filter</span>(price__gt=<span class="number">10</span>).values(<span class="string">&#x27;name&#x27;</span>).annotate(author_count=Count(<span class="string">&#x27;authors&#x27;</span>)).<span class="built_in">filter</span>(author_count__gt=<span class="number">1</span>).values(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用和非常用字段"><a href="#常用和非常用字段" class="headerlink" title="常用和非常用字段"></a>常用和非常用字段</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>AutoField</span><br><span class="line">  <span class="built_in">int</span>自增，必须填入参数primary_key=<span class="literal">True</span> 当mode中如果没有自增列，则自动创建一个名为<span class="built_in">id</span>的列</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>IntegerField</span><br><span class="line">  一个整数类型，范围在 -<span class="number">2147483648</span> to <span class="number">2147483647</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>CharField</span><br><span class="line">	字符类型，必须提供max_length参数，表示字符长度</span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span>DateField</span><br><span class="line">	日期时间字段，格式Y-M-D</span><br><span class="line">  </span><br><span class="line"><span class="number">5.</span>DateField</span><br><span class="line">	日期字段，格式Y-M-D H-M</span><br><span class="line">  </span><br><span class="line">FloatField(Field)    浮点型</span><br><span class="line">DecimalField(Field)  <span class="number">10</span>进制小数</span><br><span class="line">BinaryField(Field)   二进制类型</span><br></pre></td></tr></table></figure>

<h3 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null       用于表示字段可以为空</span><br><span class="line">unique     设置为<span class="literal">True</span> 表示该字段在此表中唯一</span><br><span class="line">db_index   设置为<span class="literal">True</span> 表示为该字段设置索引</span><br><span class="line">default    为该字段设置默认值</span><br><span class="line"></span><br><span class="line">DateField和DateTimeField</span><br><span class="line">auto_now_add  创建数据记录的时候会把当前时间添加到数据库</span><br><span class="line">auto_now      每次更新数据记录的时候都会更新该字段</span><br><span class="line"></span><br><span class="line">choices  在model表模型定义的时候给某个字段指定choice</span><br><span class="line">sex_choice = ((<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;其他&#x27;</span>))</span><br><span class="line">sex =models.IntegerField(default=<span class="number">1</span>,choices=sex_choice)</span><br><span class="line">在使用的时候直接取出中文， 对象.get_sex_display()</span><br><span class="line"></span><br><span class="line">admin后台管理相关</span><br><span class="line">    verbose_name        Admin中显示的字段名称</span><br><span class="line">    blank               Admin中是否允许用户输入为空</span><br><span class="line">    editable            Admin中是否可以编辑</span><br><span class="line">    help_text           Admin中该字段的提示信息</span><br><span class="line">    choices             Admin中显示选择框的内容，用不变动的数据放在内存中从而避免跨表操作</span><br></pre></td></tr></table></figure>

<h3 id="字段关系"><a href="#字段关系" class="headerlink" title="字段关系"></a>字段关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一对一</span><br><span class="line">一对多</span><br><span class="line">多对多</span><br></pre></td></tr></table></figure>

<h4 id="ForeignKey"><a href="#ForeignKey" class="headerlink" title="ForeignKey"></a><code>ForeignKey</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to                   对哪张表</span><br><span class="line">to_field             对表中某个字段</span><br><span class="line">related_name         反向操作时，使用的字段名，用于代替原反向查询时的’表名_<span class="built_in">set</span>’</span><br><span class="line">related_query_name   反向查询操作时，使用的连接前缀，用于替换表名</span><br><span class="line"></span><br><span class="line">on_delete						 当删除关联表中的数据时，当前表与其关联行的行为</span><br><span class="line">  models.CASCADE     同时删除关联</span><br><span class="line">  models.DO_NOTHING  什么都不做</span><br><span class="line">  models.PROTECT     引发错误ProtectedError</span><br><span class="line">  models.SET_NULL    将关联的值设置为null(前提FK字段需要设置为可空)</span><br><span class="line">  models.SET_DEFAULT 将关联的值设置为默认值(前提FK字段需要设置默认值)</span><br><span class="line">  models.SET         删除关联数据</span><br><span class="line">  </span><br><span class="line">db_constraint</span><br><span class="line">  <span class="literal">True</span>    建立外键</span><br><span class="line">  <span class="literal">False</span>   不建立外键</span><br><span class="line"></span><br><span class="line">外键是否建立</span><br><span class="line">	好处：不会出现脏数据</span><br><span class="line">	坏处：插入的时候，效率低</span><br><span class="line">	企业中：通常不建立，程序员控制</span><br></pre></td></tr></table></figure>

<h4 id="ManyToManyField"><a href="#ManyToManyField" class="headerlink" title="ManyToManyField"></a><code>ManyToManyField</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db_table             指定第三张表的名字</span><br><span class="line">to                   关联的表</span><br><span class="line">related_name         同FireignKey字段</span><br><span class="line">related_query_name   同FireignKey字段</span><br><span class="line">through              手动创建第三张表，指定通过哪张表</span><br><span class="line">through_fields       关联字段是什么</span><br></pre></td></tr></table></figure>

<h5 id="手动创建第三张表"><a href="#手动创建第三张表" class="headerlink" title="手动创建第三张表"></a>手动创建第三张表</h5><h6 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;书名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ORM自带的ManyToManyField自动创建第三张表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;作者姓名&quot;</span>)</span><br><span class="line">    books = models.ManyToManyField(to=<span class="string">&quot;Book&quot;</span>, related_name=<span class="string">&quot;authors&quot;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book1</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;书名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己创建第三张表，并通过ManyToManyField指定关联</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author1</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;作者姓名&quot;</span>)</span><br><span class="line">    books = models.ManyToManyField(to=<span class="string">&quot;Book1&quot;</span>, through=<span class="string">&quot;Author2Book&quot;</span>, through_fields=(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;book&quot;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># through_fields 元组的第一个值是ManyToManyField所在的表去中间表通过那个字段，就写在第一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author2Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&quot;Author1&quot;</span>)</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">&quot;Book1&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">## 基于对象的跨表查，还能继续使用</span></span><br><span class="line"><span class="comment">## 基于双下划綫连表查</span></span><br><span class="line"><span class="comment">## 原来的多对多操作api用不了了，需要手动操作</span></span><br></pre></td></tr></table></figure>

<h6 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第三种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book1</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;书名&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author1</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;作者姓名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己创建第三张表，分别通过外键关联书和作者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author2Book1</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&quot;Author&quot;</span>)</span><br><span class="line">    book = models.ForeignKey(to=<span class="string">&quot;Book&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Meta元信息"><a href="#Meta元信息" class="headerlink" title="Meta元信息"></a>Meta元信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每一个模型类中都可以使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;出版社名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    addr = models.CharField(verbose_name=<span class="string">&#x27;出版社地址&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">&#x27;邮箱&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">      db_table = <span class="string">&#x27;publish&#x27;</span>  <span class="comment"># 重新定义表名 就不会是默认的 应用名_publish</span></span><br><span class="line">      index_together=(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;addr&#x27;</span>)  <span class="comment"># 多个字段联合索引 </span></span><br><span class="line">      unique_together=(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;addr&#x27;</span>)  <span class="comment"># 联合唯一</span></span><br><span class="line">      ordering(<span class="string">&#x27;id&#x27;</span>)  <span class="comment"># 默认以哪个字段排序</span></span><br></pre></td></tr></table></figure>


<h3 id="原生SQL"><a href="#原生SQL" class="headerlink" title="原生SQL"></a>原生SQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># raw 后直接使用原生SQL语句</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">res = models.Author.<span class="built_in">object</span>.raw(<span class="string">&#x27;select * from app01_author where nid &gt; 1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> author <span class="keyword">in</span> res:</span><br><span class="line">  	<span class="built_in">print</span>(author)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行SQL语句时 和对象类型无光了，查出什么字段直接使用该字段</span></span><br><span class="line">res = models.Author.<span class="built_in">object</span>.raw(<span class="string">&#x27;select * from app01_book where nid &gt; 1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> res:</span><br><span class="line">		<span class="built_in">print</span>(book)</span><br></pre></td></tr></table></figure>

<h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>普通函数以__开头: 当前函数只在当前模块下使用，尽量不在外部调用</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>mysql的字符编码</span><br><span class="line">  utf8： <span class="number">2</span>个字节表示一个字符</span><br><span class="line">  utf8mb4: 相当于文件编码中的 utf-<span class="number">8</span> (<span class="number">1</span>-<span class="number">4</span>个字节表示一个字符)</span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>django中使用pymysql连接mysql</span><br><span class="line">  <span class="keyword">import</span> pymysql</span><br><span class="line">  pymysql.install_as_MySQLdb()</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 本质是猴子补丁，想要执行，写在任意位置都可以，__init__.py setting.py</span></span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span>settings.py以下配置一般如下配置:</span><br><span class="line">  LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">  TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">  USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django与Ajax</title>
    <url>/94e8d53e.html</url>
    <content><![CDATA[<h3 id="Django与Ajax"><a href="#Django与Ajax" class="headerlink" title="Django与Ajax"></a>Django与Ajax</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">概念: Ajax(Asynchronous Javascript And XML) 异步JavaScript和XML，即使用JavaScript语言与服务器进行异步交互，传输的数据为XML(传输数据不止XML，更多的是JSON数据)</span><br><span class="line">  </span><br><span class="line">特性:</span><br><span class="line">  异步</span><br><span class="line">  局部刷新: js的DOM操作，使页面局部刷新</span><br><span class="line">  使用广泛</span><br><span class="line">  </span><br><span class="line">方式:</span><br><span class="line">  <span class="number">1.</span>使用原生JavaScript写Ajax请求</span><br><span class="line">  	较为麻烦，因此很少人使用该方式，区分浏览器，需要做浏览器兼容</span><br><span class="line">    </span><br><span class="line">  <span class="number">2.</span>使用封装的(jQuery，AxioA...)</span><br></pre></td></tr></table></figure>

<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220301192338140.png" alt="image-20220301192338140"></p>
<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/007S8ZIlgy1gj1x4mpne9j30pk08yq39.jpg" alt="img"></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;ajax_test.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_a</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    a1 = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;a1&#x27;</span>))</span><br><span class="line">    a2 = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;a2&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(a1 + a2)</span><br></pre></td></tr></table></figure>

<h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span> + <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span> = <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sum_a&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn_submit&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#btn_submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a1 = $(<span class="string">&#x27;#a1&#x27;</span>).val()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a2 = $(<span class="string">&#x27;#a2&#x27;</span>).val()</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;/sum_a/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;<span class="attr">a1</span>: a1, <span class="attr">a2</span>: a2&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&#x27;#sum_a&#x27;</span>).val(data)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Ajax发送其他请求"><a href="#Ajax发送其他请求" class="headerlink" title="Ajax发送其他请求"></a>Ajax发送其他请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意点:</span><br><span class="line">  <span class="number">1.</span>如果form表单中，写button和<span class="built_in">input</span>(submit)的标签，会触发form表单的提交，这样会刷新掉Ajax的提交</span><br><span class="line">    解决方式:</span><br><span class="line">    <span class="number">1</span>) 不写在form表单中</span><br><span class="line">    <span class="number">2</span>) 使用<span class="built_in">input</span>(button)类型标签</span><br><span class="line">    </span><br><span class="line">  <span class="number">2.</span>后端响应格式是html/text格式，Ajax接收到数据后需要自己转成对象类型</span><br><span class="line">    后端响应格式是json时，Ajax接收到数据后会自动转成对象</span><br><span class="line">    后端返回数据，统一使用JsonResponse</span><br><span class="line">    </span><br><span class="line">  <span class="number">3.</span>如果使用了Ajax，后端就不要返回rediret render HttpResponse</span><br><span class="line">    直接返回JsonResponse</span><br></pre></td></tr></table></figure>

<h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;id_btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#id_btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;/login/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;<span class="attr">username</span>: $(<span class="string">&#x27;#id_name&#x27;</span>).val(), <span class="attr">password</span>: $(<span class="string">&#x27;#id_password&#x27;</span>).val()&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//res=JSON.parse(data)  当返回的是json格式化处理的数据需要转为对象类型</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//console.log(data)  </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//console.log(res)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// data 现在是对象类型</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(data.status==<span class="number">100</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//登录成功，重定向到百度，前端重定向</span></span></span><br><span class="line"><span class="javascript">                    location.href=<span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//location.href=&#x27;/index/&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//登录失败</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//$(&#x27;.error&#x27;).html(data.msg).css(&#123;&#x27;color&#x27;:&#x27;red&#x27;&#125;)</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&#x27;.error&#x27;</span>).html(data.msg)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># elif request.method==&#x27;POST&#x27;:</span></span><br><span class="line">    <span class="keyword">elif</span> request.is_ajax():</span><br><span class="line">        response=&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="literal">None</span>&#125;</span><br><span class="line">        name=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        user=models.User.objects.<span class="built_in">filter</span>(name=name,password=password).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="comment"># 用户名和密码都对了</span></span><br><span class="line">            <span class="comment"># return redirect(&#x27;&#x27;)  出错</span></span><br><span class="line">            response[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登录成功&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response[<span class="string">&#x27;status&#x27;</span>]=<span class="number">101</span></span><br><span class="line">            response[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;用户名或密码错误&quot;</span></span><br><span class="line">        <span class="comment"># return  HttpResponse(json.dumps(response))  </span></span><br><span class="line">        <span class="comment"># 可以返回该类型，但是在Ajax显示的是字符串，而不是对象类型，Ajax端需要单独处理才行</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  JsonResponse(response)  <span class="comment"># 只能返回JsonResponse类型</span></span><br><span class="line">        <span class="comment"># JsonResponse 对比使用 json.dumps 会将数据单独处理为 application/json 类型</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment"># return redirect(&#x27;http://www.baidu.com&#x27;)  </span></span><br><span class="line">        <span class="comment"># return render(request,&#x27;login.html&#x27;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220302091527474.png" alt="image-20220302091527474"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220302091649146.png" alt="image-20220302091649146"></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http的post请求有三种主流的编码格式</span><br><span class="line">  urlencoded  默认的                可以从request.POST取到提交的数据</span><br><span class="line">  form-data   上传文件的             可以从request.FILES中提取文件</span><br><span class="line">  json        Ajax发送json格式数据   无法从request.POST取到提交的数据</span><br><span class="line">  </span><br><span class="line">使用Ajax和form表单默认都是urlencoded格式</span><br><span class="line">    上传文件时:</span><br><span class="line">    form表单指定格式 enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">    Ajax需要使用 Formdat a对象</span><br><span class="line">    </span><br><span class="line">如果编码是urlencoded格式，放入到body体中的数据格式如下</span><br><span class="line">    username=asd&amp;password=<span class="number">123</span></span><br><span class="line">  </span><br><span class="line">如果是formdata编码格式，body体中的将会是两部分，数据和文件二进制</span><br><span class="line">如果是json格式body体中的格式是 json格式字符串，这种格式request.POST取不到值</span><br></pre></td></tr></table></figure>

<h4 id="form表单上传文件"><a href="#form表单上传文件" class="headerlink" title="form表单上传文件"></a><code>form</code>表单上传文件</h4><h5 id="前端-2"><a href="#前端-2" class="headerlink" title="前端"></a>前端</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>form表单上传文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myfile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h5 id="后端-2"><a href="#后端-2" class="headerlink" title="后端"></a>后端</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;file_upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        myfile = request.FILES.get(<span class="string">&#x27;myfile&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(myfile.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> myfile:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;上传成功&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Ajax上传文件"><a href="#Ajax上传文件" class="headerlink" title="Ajax上传文件"></a><code>Ajax</code>上传文件</h4><h5 id="前端-3"><a href="#前端-3" class="headerlink" title="前端"></a>前端</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>ajax上传文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_myfile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;id_btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#id_btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//如果要上传文件，需要借助于一个js的FormData对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData() <span class="comment">//实例化得到一个FormData对象</span></span></span><br><span class="line"><span class="javascript">        formdata.append(<span class="string">&#x27;username&#x27;</span>, $(<span class="string">&#x27;#id_name&#x27;</span>).val()) <span class="comment">//追加了一个name对应填入的值</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//能追加文件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = $(<span class="string">&#x27;#id_myfile&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>]  <span class="comment">//原生js取到文件</span></span></span><br><span class="line"><span class="javascript">        formdata.append(<span class="string">&#x27;myfile&#x27;</span>, file)</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;file_upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//上传文件，一定要注意如下两行</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">processData</span>: <span class="literal">false</span>,  <span class="comment">//不预处理数据，</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">contentType</span>: <span class="literal">false</span>,  <span class="comment">//不指定编码格式，使用formdata对象的默认编码就是formdata格式</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: formdata,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="后端-3"><a href="#后端-3" class="headerlink" title="后端"></a>后端</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;file_upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        myfile = request.FILES.get(<span class="string">&#x27;myfile&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(myfile.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> myfile:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;上传成功&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Ajax上传JSON格式"><a href="#Ajax上传JSON格式" class="headerlink" title="Ajax上传JSON格式"></a>Ajax上传JSON格式</h3><h4 id="前端-4"><a href="#前端-4" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Ajax提交json格式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;id_btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#id_btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = $(<span class="string">&#x27;#id_name&#x27;</span>).val()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">&#x27;#id_password&#x27;</span>).val()</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;/ajax_json/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//指定编码格式</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: name, <span class="attr">password</span>: password&#125;),  <span class="comment">//JSON格式字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="后端-4"><a href="#后端-4" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_json</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;ajax_json.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># json格式，从POST中取不出</span></span><br><span class="line">        <span class="comment"># name = request.POST.get(&#x27;name&#x27;)</span></span><br><span class="line">        request.data = json.loads(request.body)</span><br><span class="line">        name = request.data.get(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 在body体中，bytes格式</span></span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="built_in">print</span>(password)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Django内置序列化"><a href="#Django内置序列化" class="headerlink" title="Django内置序列化"></a>Django内置序列化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">把对象转成json格式，django内置的不好用，字段不能控制</span><br><span class="line">如果要做序列化，使用<span class="keyword">for</span>循环拼列表套字典</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_list = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># res = serializers.serialize(&quot;json&quot;, user_list)</span></span><br><span class="line">    <span class="comment"># return HttpResponse(res)</span></span><br><span class="line">  </span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">      l.append(&#123;<span class="string">&#x27;name&#x27;</span>:user.name,<span class="string">&#x27;password&#x27;</span>:user.password&#125;)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(l,safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>分页器</title>
    <url>/7cb7dbab.html</url>
    <content><![CDATA[<h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_page</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 第一种方案，每循环依次，操作一下数据库，性能低</span></span><br><span class="line">    <span class="comment"># for i in range(1000):</span></span><br><span class="line">    <span class="comment">#     book = models.Books.objects.create(name=&#x27;图书%s&#x27; % i, price=i + 10, publish=&#x27;北京出版社&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分批插入</span></span><br><span class="line">    book_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        book = models.Books(name=<span class="string">&#x27;图书%s&#x27;</span> % i, price=i + <span class="number">10</span>, publish=<span class="string">&#x27;北京出版社&#x27;</span>)</span><br><span class="line">        book_list.append(book)</span><br><span class="line">    models.Books.objects.bulk_create(book_list, batch_size=<span class="number">10</span>)  <span class="comment"># batch_size 分几批插入</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^book_page/&#x27;</span>, views.book_page),</span><br></pre></td></tr></table></figure>

<h3 id="分页器的方法"><a href="#分页器的方法" class="headerlink" title="分页器的方法"></a>分页器的方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">books_page</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line">    book_list = models.Books.objects.<span class="built_in">all</span>()</span><br><span class="line">    paginator = Paginator(book_list, <span class="number">10</span>)</span><br><span class="line">    <span class="comment"># Paginator对象属性</span></span><br><span class="line">    <span class="built_in">print</span>(paginator.count)  </span><br><span class="line">    <span class="built_in">print</span>(paginator.num_pages)  </span><br><span class="line">    <span class="built_in">print</span>(paginator.per_page) </span><br><span class="line">    <span class="built_in">print</span>(paginator.page_range)</span><br><span class="line">    <span class="built_in">print</span>(paginator.page(<span class="number">1</span>))  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Page对象的属性和方法</span></span><br><span class="line">    page = paginator.page(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(page.has_next())</span><br><span class="line">    <span class="built_in">print</span>(page.next_page_number())</span><br><span class="line">    <span class="built_in">print</span>(page.has_previous())</span><br><span class="line">    <span class="built_in">print</span>(page.previous_page_number())</span><br><span class="line">    <span class="built_in">print</span>(page.object_list)</span><br><span class="line">    <span class="built_in">print</span>(page.number)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;book_page.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Paginator对象属性</span></span><br><span class="line"><span class="string">    paginator.count            # 数据总条数</span></span><br><span class="line"><span class="string">    paginator.num_pages        # 总页数</span></span><br><span class="line"><span class="string">    paginator.per_page         # 每页显示条数</span></span><br><span class="line"><span class="string">    paginator.page_range       # range(1, 101)</span></span><br><span class="line"><span class="string">    paginator.page(1)</span></span><br><span class="line"><span class="string"># Page对象的属性和方法</span></span><br><span class="line"><span class="string">    page = paginator.page(2)</span></span><br><span class="line"><span class="string">    page.has_next              # 是否有下一页</span></span><br><span class="line"><span class="string">    page.next_page_number      # 下一页页码</span></span><br><span class="line"><span class="string">    page.has_previous          # 是否有上一页</span></span><br><span class="line"><span class="string">    page.previous_page_number  # 上一页页码</span></span><br><span class="line"><span class="string">    page.object_list           # 分页之后的数据列表</span></span><br><span class="line"><span class="string">    page.number                # 当前页</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="分页器使用"><a href="#分页器使用" class="headerlink" title="分页器使用"></a>分页器使用</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_page</span>(<span class="params">request</span>):</span></span><br><span class="line">    current_num = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;page_num&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">    book_list = models.Books.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">    paginator = Paginator(book_list, <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 如果页码不在范围内直接赋值为1，相当于调到第一页</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = paginator.page(current_num)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        current_num = <span class="number">1</span></span><br><span class="line">        page = paginator.page(current_num)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将页码分为前五后五的情况，总数为11页</span></span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages &gt; <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">if</span> current_num - <span class="number">5</span> &lt; <span class="number">1</span>:</span><br><span class="line">            page_range = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">elif</span> current_num + <span class="number">5</span> &gt; paginator.num_pages:</span><br><span class="line">            page_range = <span class="built_in">range</span>(paginator.num_pages - <span class="number">10</span>, paginator.num_pages + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_range = <span class="built_in">range</span>(current_num - <span class="number">5</span>, current_num + <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_range = paginator.page_range</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;book_page.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>

<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;# 只显示当前页码的数据 #&#125;</span><br><span class="line">            &#123;% for book in page.object_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.publish &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-md-offset-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;Page navigation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">                &#123;# 判断当在第一页时，就没有上一页了，将上一页按钮设置为不可选中 #&#125;</span><br><span class="line">                &#123;% if page.has_previous %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book_page/?page_num=&#123;&#123; page.previous_page_number &#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">              </span><br><span class="line">                &#123;# 使用GET方法提交当前页数给后端，后端处理后获取显示多少页码数进行循环 #&#125;</span><br><span class="line">                &#123;% for foo in page_range %&#125;</span><br><span class="line">                    &#123;% if current_num == foo %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book_page/?page_num=&#123;&#123; foo &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book_page/?page_num=&#123;&#123; foo &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">              </span><br><span class="line">                &#123;# 判断当在最后一页时，就没有最后一页了，将下一页按钮设置为不可选中 #&#125;</span><br><span class="line">                &#123;% if page.has_next %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book_page/?page_num=&#123;&#123; page.next_page_number &#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义分页器"><a href="#自定义分页器" class="headerlink" title="自定义分页器"></a>自定义分页器</h3><p>当我们需要使用到非django内置的第三方功能或者组件代码的时候，我们一般情况下会创建一个名为utils的文件夹，在该文件夹内对模块进行功能性划分。eg：mypage.py</p>
<p>我们到了后期封装代码的时候，不再局限于函数，而是尽量朝面向对象去封装</p>
<p>将下面封装好的模板拷贝到utils文件夹下的mypage.py（自定义的名字随意取）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagination</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, current_page, all_count, per_page_num=<span class="number">2</span>, pager_count=<span class="number">5</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        封装分页相关数据</span></span><br><span class="line"><span class="string">        :param current_page: 当前页</span></span><br><span class="line"><span class="string">        :param all_count:    数据库中的数据总条数</span></span><br><span class="line"><span class="string">        :param per_page_num: 每页显示的数据条数</span></span><br><span class="line"><span class="string">        :param pager_count:  最多显示的页码个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_page = <span class="built_in">int</span>(current_page)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_page &lt; <span class="number">1</span>:</span><br><span class="line">            current_page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.current_page = current_page</span><br><span class="line"></span><br><span class="line">        self.all_count = all_count</span><br><span class="line">        self.per_page_num = per_page_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码</span></span><br><span class="line">        all_pager, tmp = <span class="built_in">divmod</span>(all_count, per_page_num)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            all_pager += <span class="number">1</span></span><br><span class="line">        self.all_pager = all_pager</span><br><span class="line"></span><br><span class="line">        self.pager_count = pager_count</span><br><span class="line">        self.pager_count_half = <span class="built_in">int</span>((pager_count - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page_html</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 如果总页码 &lt; 11个：</span></span><br><span class="line">        <span class="keyword">if</span> self.all_pager &lt;= self.pager_count:</span><br><span class="line">            pager_start = <span class="number">1</span></span><br><span class="line">            pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 总页码  &gt; 11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前页如果&lt;=页面上最多显示11/2个页码</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= self.pager_count_half:</span><br><span class="line">                pager_start = <span class="number">1</span></span><br><span class="line">                pager_end = self.pager_count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页大于5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 页码翻到最后</span></span><br><span class="line">                <span class="keyword">if</span> (self.current_page + self.pager_count_half) &gt; self.all_pager:</span><br><span class="line">                    pager_end = self.all_pager + <span class="number">1</span></span><br><span class="line">                    pager_start = self.all_pager - self.pager_count + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pager_start = self.current_page - self.pager_count_half</span><br><span class="line">                    pager_end = self.current_page + self.pager_count_half + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        page_html_list = []</span><br><span class="line">        <span class="comment"># 添加前面的nav和ul标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;nav aria-label=&#x27;Page navigation&gt;&#x27;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&#x27;pagination&#x27;&gt;</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        first_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (<span class="number">1</span>)</span><br><span class="line">        page_html_list.append(first_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">1</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page - <span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        page_html_list.append(prev_page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pager_start, pager_end):</span><br><span class="line">            <span class="keyword">if</span> i == self.current_page:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;%s&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (i, i,)</span><br><span class="line">            page_html_list.append(temp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page &gt;= self.all_pager:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.current_page + <span class="number">1</span>,)</span><br><span class="line">        page_html_list.append(next_page)</span><br><span class="line"></span><br><span class="line">        last_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=%s&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span> % (self.all_pager,)</span><br><span class="line">        page_html_list.append(last_page)</span><br><span class="line">        <span class="comment"># 尾部添加标签</span></span><br><span class="line">        page_html_list.append(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                           &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                                           &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                                       &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(page_html_list)</span><br></pre></td></tr></table></figure>

<h4 id="后端模板"><a href="#后端模板" class="headerlink" title="后端模板"></a>后端模板</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.mypage <span class="keyword">import</span> Pagination  <span class="comment"># 导入模板</span></span><br><span class="line"><span class="comment"># 书籍的展示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">books</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 先查询出所有要展示的数据信息，</span></span><br><span class="line">    book_queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    current_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>) </span><br><span class="line">    all_count = book_queryset.count()</span><br><span class="line">    <span class="comment"># 传值生成对象</span></span><br><span class="line">    page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line">    <span class="comment"># 直接对总数据进行切片操作</span></span><br><span class="line">    page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line">    <span class="comment"># 将page_queryset传递到页面，替换之前的book_queryset</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;books.html&#x27;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>

<h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>&#123;&#123; page_obj.page_html|safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;home.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.index&#x27;</span>).removeClass(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.books&#x27;</span>).addClass(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.publish&#x27;</span>).removeClass(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.author&#x27;</span>).removeClass(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book_add/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success pull-right&quot;</span>&gt;</span>添加书籍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-hover table-bordered&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    &#123;% for book in page_queryset %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;dark&quot;</span>&gt;</span>&#123;&#123; book.publish_date|date:&#x27;Y-m-d&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span>&#123;&#123; book.publish.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                &#123;% for author in book.authors.all %&#125;</span><br><span class="line">                                    &#123;% if forloop.last %&#125;</span><br><span class="line">                                        &#123;&#123; author.name &#125;&#125;</span><br><span class="line">                                    &#123;% else %&#125;</span><br><span class="line">                                        &#123;&#123; author.name &#125;&#125;、</span><br><span class="line">                                    &#123;% endif %&#125;</span><br><span class="line">                                &#123;% endfor %&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book_edit&#x27; book.pk %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book_delete&#x27; book.pk %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bbb&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;AA(&#x27;&#123;&#123; html &#125;&#125;&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  Launch</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;# 只需要这一行代码就可以实现分页 #&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>&#123;&#123; page_obj.page_html|safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Forms组件</title>
    <url>/b81883d7.html</url>
    <content><![CDATA[<h3 id="forms组件校验数据功能"><a href="#forms组件校验数据功能" class="headerlink" title="forms组件校验数据功能"></a>forms组件校验数据功能</h3><h4 id="校验步骤"><a href="#校验步骤" class="headerlink" title="校验步骤"></a>校验步骤</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义一个类，继承forms.Form</span><br><span class="line">在类中写要校验的字段，字段属性就是校验规则</span><br><span class="line">实例化得到一个Form对象，要把校验的数据传入</span><br><span class="line">调用register_form.is_valid()校验，校验通过是<span class="literal">True</span></span><br><span class="line">校验通过有register_form.cleaned_data</span><br><span class="line">校验不通过有register_form.errors</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    password = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    re_password = forms.CharField(max_length=<span class="number">8</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;确认密码&#x27;</span>)</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 在视图中使用</span></span><br><span class="line">register_form = RegisterForm(request.POST)</span><br><span class="line"><span class="keyword">if</span> register_form.is_valid():</span><br><span class="line">      <span class="comment"># 校验通过，存</span></span><br><span class="line">      <span class="comment"># 取出校验通过的数据</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;校验通过&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(register_form.cleaned_data)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     <span class="comment"># 校验不通过</span></span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;校验不通过&#x27;</span>)</span><br><span class="line">     <span class="built_in">print</span>(register_form.errors)</span><br></pre></td></tr></table></figure>

<h3 id="forms渲染标签"><a href="#forms渲染标签" class="headerlink" title="forms渲染标签"></a>forms渲染标签</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>form自动渲染 一 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123; register_form.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: &#123;&#123; register_form.password &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>确认密码: &#123;&#123; register_form.re_password &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱: &#123;&#123; register_form.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式二-常用"><a href="#方式二-常用" class="headerlink" title="方式二(常用)"></a>方式二(常用)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>form自动渲染 二 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for item in register_form %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.label &#125;&#125;: &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;  error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># 后端的 lable 字段是渲染时给前端页面的提示信息</span><br><span class="line"># 对应这边的 &#123;&#123; item.label &#125;&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>form自动渲染 三 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; register_form.as_p &#125;&#125;</span><br><span class="line">    &#123;#    &#123;&#123; register_form.as_table &#125;&#125;#&#125;</span><br><span class="line">    &#123;#    &#123;&#123; register_form.as_ul &#125;&#125;#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="form组件渲染错误信息"><a href="#form组件渲染错误信息" class="headerlink" title="form组件渲染错误信息"></a>form组件渲染错误信息</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>form自动渲染 二 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                &#123;# span 中由form传入错误提示 #&#125;</span><br><span class="line">                &#123;% for item in register_form %&#125;</span><br><span class="line">                       &#123;# item.errors.0取标签内的数据，否则会插入一个 li 标签 #&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.label &#125;&#125;: &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;  error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;最长位16&#x27;</span>, <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;最短为3&#x27;</span>&#125;,</span><br><span class="line">                           widget=widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;密码&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>&#125;,</span><br><span class="line">                               widget=widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    re_password = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;再次确认密码&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>&#125;,</span><br><span class="line">                                  widget=widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>, <span class="string">&#x27;invalid&#x27;</span>: <span class="string">&#x27;必须是邮箱格式&#x27;</span>&#125;,</span><br><span class="line">                             widget=widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># error_messages=&#123;&#125; 提示给前端的错误提示</span></span><br></pre></td></tr></table></figure>

<h3 id="form组件设置标签参数"><a href="#form组件设置标签参数" class="headerlink" title="form组件设置标签参数"></a>form组件设置标签参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">widget=widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;)</span><br><span class="line">widget=widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PasswordInput 标签的 input 属性就为 password</span></span><br><span class="line"><span class="comment"># attrs 给标签设置属性  上述设置了一个 class=&quot;form-control&quot; 的属性</span></span><br></pre></td></tr></table></figure>

<h3 id="forms组件的局部钩子和全局钩子"><a href="#forms组件的局部钩子和全局钩子" class="headerlink" title="forms组件的局部钩子和全局钩子"></a>forms组件的局部钩子和全局钩子</h3><h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;最长位16&#x27;</span>, <span class="string">&#x27;min_length&#x27;</span>: <span class="string">&#x27;最短为3&#x27;</span>&#125;,</span><br><span class="line">                           widget=widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    password = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;密码&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>&#125;,</span><br><span class="line">                               widget=widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    re_password = forms.CharField(max_length=<span class="number">16</span>, min_length=<span class="number">3</span>, label=<span class="string">&#x27;再次确认密码&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>&#125;,</span><br><span class="line">                                  widget=widgets.PasswordInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>, error_messages=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;该字段必填&#x27;</span>, <span class="string">&#x27;invalid&#x27;</span>: <span class="string">&#x27;必须是邮箱格式&#x27;</span>&#125;,</span><br><span class="line">                             widget=widgets.TextInput(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_name</span>(<span class="params">self</span>):</span>  <span class="comment"># name   字段的局部钩子</span></span><br><span class="line">        <span class="comment"># 校验名字不能以sb开头</span></span><br><span class="line">        name = self.cleaned_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">&#x27;sb&#x27;</span>):</span><br><span class="line">            <span class="comment"># 校验不通过，必须抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不能以sb开头&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 校验通过返回 name 值</span></span><br><span class="line">            <span class="keyword">return</span> name </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span>  <span class="comment"># 全局钩子</span></span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        re_password = self.cleaned_data.get(<span class="string">&#x27;re_password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> re_password == password:</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data  <span class="comment"># 校验通过返回检验正确的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;两次密码不一致&#x27;</span>)  <span class="comment"># 不通过抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 生成一个空form对象</span></span><br><span class="line">        register_form = RegisterForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, <span class="built_in">locals</span>())  <span class="comment"># 传入空 register_form 给前端做渲染</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 实例化得到对象 传入要校验的值</span></span><br><span class="line">        register_form = RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> register_form.is_valid():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;校验通过&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(register_form.cleaned_data)</span><br><span class="line">            <span class="comment"># 校验通过 弹出多的 re_password</span></span><br><span class="line">            register_form.cleaned_data.pop(<span class="string">&#x27;re_password&#x27;</span>)</span><br><span class="line">            <span class="comment"># 存入数据库 ** 打散存</span></span><br><span class="line">            models.User.objects.create(**register_form.cleaned_data)</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;校验不通过&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(register_form.errors)</span><br><span class="line">            error = register_form.errors.get(<span class="string">&#x27;__all__&#x27;</span>)[<span class="number">0</span>]  <span class="comment"># 出的错误可能是很多个 取一个给前端提示</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>

<h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>form自动渲染 二 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for item in register_form %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.label &#125;&#125;: &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;  error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="form组件大概总结"><a href="#form组件大概总结" class="headerlink" title="form组件大概总结"></a>form组件大概总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">forms组件</span><br><span class="line">	-数据校验</span><br><span class="line">    -渲染页面</span><br><span class="line">    -错误信息</span><br><span class="line">    -局部全局钩子</span><br><span class="line">  -使用步骤：</span><br><span class="line">    	-写一个类，继承Form类</span><br><span class="line">      -写字段，字段参数（限制该字段的长短）</span><br><span class="line">      -错误信息中文：字段参数</span><br><span class="line">      -widget：控制生成标签的属性</span><br><span class="line">      -视图函数中：</span><br><span class="line">        	-实例化得到form对象时，把要校验的数据传入</span><br><span class="line">          -is_valid():clean_data和errors就有值了</span><br><span class="line">          -如果校验通过就存，不通过就给页面提示</span><br><span class="line">      -渲染页面</span><br><span class="line">    		  -<span class="keyword">for</span>循环的方式渲染页面（在标签前后可以再加标签）</span><br><span class="line">      -局部钩子</span><br><span class="line">	        -<span class="function"><span class="keyword">def</span> <span class="title">clean_</span>字段名(<span class="params">self</span>):</span></span><br><span class="line">        	  -校验规则</span><br><span class="line">            -如果通过，<span class="keyword">return</span> 值</span><br><span class="line">            -如果不通过，抛异常</span><br><span class="line">      -全局钩子（多个字段校验）</span><br><span class="line">		     -<span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        	  -如果通过，<span class="keyword">return</span> clean_data</span><br><span class="line">            -如果不通过，抛异常</span><br></pre></td></tr></table></figure>

<h3 id="forms组件源码分析"><a href="#forms组件源码分析" class="headerlink" title="forms组件源码分析"></a>forms组件源码分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 为什么局部钩子要写成 clean_字段名，为什么要抛异常</span><br><span class="line"><span class="number">2</span> 入口在 is_valid()</span><br><span class="line"><span class="number">3</span> 校验流程</span><br><span class="line">    -先校验字段自己的规则（最大，最小，是否必填，是不是合法）</span><br><span class="line">    -校验局部钩子函数</span><br><span class="line">    -全局钩子校验</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="number">4</span> 流程</span><br><span class="line">    -is_valid()---》<span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">    -self.errors：方法包装成了数据数据</span><br><span class="line">    	-一旦self._errors有值，就不进行校验了（之前调用过了）</span><br><span class="line">    -self.full_clean()：核心</span><br><span class="line">    	self._errors = ErrorDict()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_bound:  </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.cleaned_data = &#123;&#125;</span><br><span class="line">        self._clean_fields()</span><br><span class="line">        self._clean_form()</span><br><span class="line">        self._post_clean()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    -self._clean_fields()：核心代码,局部钩子执行位置</span><br><span class="line">    </span><br><span class="line">     value = field.clean(value)<span class="comment"># 字段自己的校验规则</span></span><br><span class="line">     self.cleaned_data[name] = value <span class="comment">#把校验后数据放到cleaned_data</span></span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;clean_%s&#x27;</span> % name): <span class="comment"># 判断有没有局部钩子</span></span><br><span class="line">        value = <span class="built_in">getattr</span>(self, <span class="string">&#x27;clean_%s&#x27;</span> % name)() <span class="comment">#执行局部钩子</span></span><br><span class="line">        self.cleaned_data[name] = value <span class="comment">#校验通过，把数据替换一下</span></span><br><span class="line">   	<span class="comment"># 如果 校验不通过，会抛异常，会被捕获，捕获后执行</span></span><br><span class="line">    self.add_error(name, e)</span><br><span class="line">    </span><br><span class="line">  - <span class="function"><span class="keyword">def</span> <span class="title">_clean_form</span>(<span class="params">self</span>):</span><span class="comment">#全局钩子执行位置</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_clean_form</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#如果自己定义的form类中写了clean，他就会执行</span></span><br><span class="line">            cleaned_data = self.clean()</span><br><span class="line">        <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">            self.add_error(<span class="literal">None</span>, e)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie和Session</title>
    <url>/e919b2cc.html</url>
    <content><![CDATA[<h3 id="Cookie、Session和Token"><a href="#Cookie、Session和Token" class="headerlink" title="Cookie、Session和Token"></a>Cookie、Session和Token</h3><p>HTTP 协议是一种<code>无状态协议</code>，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session 和 Cookie 的主要目的就是为了弥补 HTTP 的无状态特性</p>
<span id="more"></span>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">服务端发送给浏览器的一小段数据(键值对的形式)，浏览器会对这块数据存储，浏览器在下一次发送请求的时候会将这段数据一起发送给服务端，从而判断请求是否来自同一个浏览器</span><br><span class="line"></span><br><span class="line">cookie的大小上限为4KB</span><br><span class="line">一个服务器最多在客户端浏览器上保存<span class="number">20</span>个Cookie</span><br><span class="line">一个浏览器最多保存<span class="number">300</span>个Cookie</span><br><span class="line"></span><br><span class="line">cookie本身存在客户端，容易被拦截或窃取</span><br></pre></td></tr></table></figure>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">服务端想客户端随机分配一个随机字符串(session <span class="built_in">id</span>)，用户存到cookie中</span><br><span class="line">客户端发送带cookie(session <span class="built_in">id</span>)请求到服务端，由服务端进行校验</span><br><span class="line"></span><br><span class="line">服务端就要存储session，涉及到集群反向代理时，nginx可以通过ip_hash简单处理会话保持</span><br><span class="line">更多的做法是使用Redis进行存储，单点或者集群</span><br></pre></td></tr></table></figure>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/007S8ZIlgy1gj6rmwmekdj315w0jkq6j.jpg" alt="image-20200928230826583"></p>
<h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">三段式(jwt:json web token)(服务端不存了)  后续jwt中详细</span><br></pre></td></tr></table></figure>
<h3 id="Django中Cookie的使用"><a href="#Django中Cookie的使用" class="headerlink" title="Django中Cookie的使用"></a>Django中Cookie的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">url(<span class="string">r&#x27;^get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span>(<span class="params">request</span>):</span></span><br><span class="line">    obj = HttpResponse(<span class="string">&#x27;cookie set 成功&#x27;</span>)</span><br><span class="line">    <span class="comment"># 往客户端浏览器中写cookie</span></span><br><span class="line">    obj.set_cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    obj.set_cookie(<span class="string">&#x27;is_login&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.COOKIES.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    is_login = request.COOKIES.get(<span class="string">&#x27;is_login&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name, is_login, <span class="built_in">type</span>(is_login))  <span class="comment"># 此时的 is_login 值是 str 类型</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;获取 cookie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新和删除cookie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_cookie</span>(<span class="params">request</span>):</span></span><br><span class="line">    obj = HttpResponse(<span class="string">&#x27;cookie update 成功&#x27;</span>)</span><br><span class="line">    <span class="comment"># 往客户端浏览器中写cookie</span></span><br><span class="line">    obj.set_cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>)  <span class="comment"># 更新cookie</span></span><br><span class="line">    obj.delete_cookie(<span class="string">&#x27;is_login&#x27;</span>)  <span class="comment"># 删除cookie</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置过期时间</span></span><br><span class="line">  浏览器会管理cookie 到时间会自动删除</span><br><span class="line">  obj.set_cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>, expires=<span class="number">10</span>)  <span class="comment"># 10s后浏览器会自动删除cookie</span></span><br><span class="line">  如果不写该参数，关闭浏览器，cookie就会失效</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置加盐的cookie</span></span><br><span class="line">  obj.set_signed_cookie(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;666&#x27;</span>, expires=<span class="number">1000</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取加盐的cookie</span></span><br><span class="line">  age = request.get_signed_cookie(<span class="string">&#x27;age&#x27;</span>, salt=<span class="string">&#x27;666&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220303180033188.png" alt="image-20220303180033188"></p>
<h3 id="Django中Session的使用"><a href="#Django中Session的使用" class="headerlink" title="Django中Session的使用"></a>Django中Session的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># session 默认是存在数据库中: 必须进行数据迁移，存在 django_session 表中</span></span><br><span class="line"><span class="comment"># makemigrations  migrate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session</span>(<span class="params">request</span>):</span></span><br><span class="line">    request.session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;sxxx&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    1、生成随机字符串，一旦有，就是更新操作</span></span><br><span class="line"><span class="string">    2、把随机字符串放到cookie中</span></span><br><span class="line"><span class="string">    3、把 name 放入 django_session 表中 </span></span><br><span class="line"><span class="string">    session_key  session_data date </span></span><br><span class="line"><span class="string">    过期时间是默认两周(可在全局配置文件中修改)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;session 设置成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 取出携带的cookie</span></span><br><span class="line">    <span class="comment"># 在进入视图函数之前，早已经吧session从django_session表中session_data取出来</span></span><br><span class="line">    <span class="comment"># 转到了session中</span></span><br><span class="line">    name = request.session.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    is_login = request.session.get(<span class="string">&#x27;is_login&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name, is_login, <span class="built_in">type</span>(is_login))  <span class="comment"># 此时的is_login的类型是布尔值，因为是存在数据库中的</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;获取 session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_session</span>(<span class="params">request</span>):</span></span><br><span class="line">    request.session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;syyy&#x27;</span></span><br><span class="line">    <span class="comment"># 删除session</span></span><br><span class="line">    <span class="keyword">del</span> request.session[<span class="string">&#x27;is_login&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># request.session.delete() # 删除数据库</span></span><br><span class="line">    <span class="comment"># request.session.flush()  # cookie和数据库都删</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    直接去django_session表中替换</span></span><br><span class="line"><span class="string">    cookie还是原来的，没有动</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;session 更新成功&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220303200432533.png" alt="image-20220303200432533"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220303200451707.png" alt="image-20220303200451707"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220303200706867.png" alt="image-20220303200706867"></p>
<h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><h4 id="Cookie的其他参数"><a href="#Cookie的其他参数" class="headerlink" title="Cookie的其他参数"></a>Cookie的其他参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key, 键</span><br><span class="line">value=<span class="string">&#x27;&#x27;</span>, 值</span><br><span class="line">max_age=<span class="literal">None</span>, 超时时间 cookie需要延续的时间（以秒为单位）如果参数是\ <span class="literal">None</span> ，这个cookie会延续到浏览器关闭为止</span><br><span class="line">expires=<span class="literal">None</span>, 超时时间(IE requires expires, so <span class="built_in">set</span> it <span class="keyword">if</span> hasn’t been already.)</span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;/&#x27;</span> Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将cookie传给站点中的其他的应用</span><br><span class="line"></span><br><span class="line">domain=<span class="literal">None</span>, Cookie生效的域名 你可用这个参数来构造一个跨站cookie</span><br><span class="line">如: domain=”.example.com”所构造的cookie对下面这些站点都是可读的：www.example.com、www2.example.com 和an.other.sub.domain.example.com </span><br><span class="line">如果该参数设置为 <span class="literal">None</span> ，cookie只能由设置它的站点读取</span><br><span class="line"></span><br><span class="line">secure=<span class="literal">False</span>, 浏览器将通过HTTPS来回传cookie</span><br><span class="line"></span><br><span class="line">httponly=<span class="literal">False</span> 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span><br></pre></td></tr></table></figure>
<h4 id="Session的其他方法"><a href="#Session的其他方法" class="headerlink" title="Session的其他方法"></a>Session的其他方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取、设置、删除Session中数据</span></span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line">request.session.get(<span class="string">&#x27;k1&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">123</span></span><br><span class="line">request.session.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">123</span>) <span class="comment"># 存在则不设置</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有 键、值、键值对</span></span><br><span class="line">request.session.keys()</span><br><span class="line">request.session.values()</span><br><span class="line">request.session.items()</span><br><span class="line">request.session.iterkeys()</span><br><span class="line">request.session.itervalues()</span><br><span class="line">request.session.iteritems()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话session的key(随机字符串)</span></span><br><span class="line">request.session.session_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有Session失效日期小于当前日期的数据删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话session的key在数据库中是否存在</span></span><br><span class="line">request.session.exists(<span class="string">&quot;session_key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前会话的所有Session数据(只删数据库)</span></span><br><span class="line">request.session.delete()</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># 删除当前的会话数据并删除会话的Cookie（数据库和cookie都删）。</span></span><br><span class="line">request.session.flush() </span><br><span class="line">    这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置会话Session和Cookie的超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line">    * 如果value是个整数，session会在些秒数后失效。</span><br><span class="line">    * 如果value是个datatime或timedelta，session就会在这个时间后失效。</span><br><span class="line">    * 如果value是<span class="number">0</span>,用户关闭浏览器session就会失效。</span><br><span class="line">    * 如果value是<span class="literal">None</span>,session会依赖全局session失效策略。</span><br></pre></td></tr></table></figure>
<h4 id="session的其他配置-全局setting"><a href="#session的其他配置-全局setting" class="headerlink" title="session的其他配置(全局setting)"></a>session的其他配置(全局setting)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> global_settings</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.db&#x27;</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&#x27;default&#x27;</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cached_db&#x27;</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.signed_cookies&#x27;</span>   <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">2</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录功能，如果登录成功往cookie中写入用户名和登录成功的状态标志</span><br><span class="line">访问order页面，如果登录了，可以正常显示，如果没登录，重定向到登陆页面</span><br><span class="line">基于session的登陆认证装饰器</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">&#x27;is_login&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        res = models.User.objects.<span class="built_in">filter</span>(name=name, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            request.session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">            request.session[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            request.session[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/order/&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;用户名或密码不正确&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;order.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># if request.session.get(&#x27;is_login&#x27;):</span></span><br><span class="line">    <span class="comment">#     return render(request, &#x27;order.html&#x27;)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return redirect(&#x27;/login/&#x27;)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中间件</title>
    <url>/8dabf6aa.html</url>
    <content><![CDATA[<h3 id="CBV加装饰器"><a href="#CBV加装饰器" class="headerlink" title="CBV加装饰器"></a><code>CBV</code>加装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方式一:</span><br><span class="line">  装饰器加在类上</span><br><span class="line">  <span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="meta">  @method_decorator(<span class="params">auth, name=<span class="string">&#x27;get&#x27;</span></span>)</span></span><br><span class="line">  </span><br><span class="line">方式二:</span><br><span class="line">  装饰器直接加在方法上</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录认证(判断session)功能的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">&#x27;is_login&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录成功创建session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        res = models.User.objects.<span class="built_in">filter</span>(name=name, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            request.session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">            request.session[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            request.session[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/order/&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;用户名或密码不正确&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 需要引入该模块</span></span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 get 请求加 auth 装饰器</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">auth, name=<span class="string">&#x27;get&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="comment"># 装饰器也可以直接加在该方法上，不需要使用说明的模块</span></span><br><span class="line">    <span class="comment"># @auth</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Djanog中间件"><a href="#Djanog中间件" class="headerlink" title="Djanog中间件"></a><code>Djanog</code>中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中间件: 数据库中间件（mycat，分库分表），服务器中间件（tomcat，nginx），消息队列中间件（rabbitmq）</span><br><span class="line">django中间件(Middleware): 介于request与response处理之间的一道处理过程，在全局上改变django的输入与输出</span><br></pre></td></tr></table></figure>

<h4 id="内置的中间件"><a href="#内置的中间件" class="headerlink" title="内置的中间件"></a>内置的中间件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py文件中</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 处理session的中间件</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 处理 访问地址尾部会自带加/</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 跨站请求伪造处理</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入中间件就是 django.contrib.sessions.middleware.SessionMiddleware</span></span><br><span class="line"><span class="keyword">from</span> django.middleware.csrf <span class="keyword">import</span>  CsrfViewMiddleware</span><br><span class="line"><span class="comment"># django.contrib.sessions.middleware.SessionMiddleware</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.sessions.middleware <span class="keyword">import</span> SessionMiddleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process_request(self, request)  <span class="comment"># 请求来了触发</span></span><br><span class="line">process_response(self, request, response)  <span class="comment"># 请求走了触发</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">参考settings.py中的处理方式，因此可以新创建一个py文件中写</span><br><span class="line">app01目录(其他目录也可以) --&gt; middleware.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># app01/middleware.py</span></span><br><span class="line"><span class="comment"># 其他中间件也继承，参考其他的中间件源码编写方式</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求来了&#x27;</span>)</span><br><span class="line">       	<span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求走了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response  <span class="comment"># 一定要返回 response</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">MIDDLEWARE =[ </span><br><span class="line">	...</span><br><span class="line">  <span class="comment"># 注册中间件</span></span><br><span class="line">  <span class="string">&#x27;app01.middleware.MyMiddleware&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"><span class="comment"># from app01.middleware import MyMiddleware --&gt; app01.middleware.MyMiddleware</span></span><br></pre></td></tr></table></figure>

<h5 id="中间件的执行顺序"><a href="#中间件的执行顺序" class="headerlink" title="中间件的执行顺序"></a>中间件的执行顺序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app01/middleware.py</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求来了&#x27;</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;截胡了&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求走了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware2</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求来了222&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求走了222&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">MIDDLEWARE =[ </span><br><span class="line">	...</span><br><span class="line">  <span class="comment"># 注册中间件</span></span><br><span class="line">  <span class="string">&#x27;app01.middleware.MyMiddleware&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;app01.middleware.MyMiddleware2&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件的执行顺序: 请求来从上往下，请求走从下往上，当在process_request中return走了，后续的中间件就不会再执行了</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/1342004-20180626145355317-56223999.png" alt="img"></p>
<h5 id="process-request"><a href="#process-request" class="headerlink" title="process_request"></a><code>process_request</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请求来了会触发，从上往下依次执行(settings.py中间件注册的位置)</span><br><span class="line">如果返回<span class="literal">None</span>就继续往下走</span><br><span class="line">如果返回四件套之一，就直接回去了</span><br><span class="line"></span><br><span class="line">在这里面写请求来了的一些判断: 如判断ID地址以及客户端地址</span><br><span class="line">	request.META.REMOTE_ADDR      <span class="comment">#客户端地址</span></span><br><span class="line">	request.META.HTTP_USER_AGENT  <span class="comment"># 客户端类型</span></span><br><span class="line">  request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)  <span class="comment"># 获取到是否存在代理IP</span></span><br><span class="line">  <span class="built_in">print</span>(request.META)  <span class="comment"># 查看更多的字段信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HttpRequest.META</span><br><span class="line">   一个标准的Python 字典，包含所有的HTTP 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：</span><br><span class="line">　　取值：</span><br><span class="line">    CONTENT_LENGTH        —— 请求的正文的长度(是一个字符串)</span><br><span class="line">    CONTENT_TYPE          —— 请求的正文的 MIME 类型</span><br><span class="line">    HTTP_ACCEPT           —— 响应可接收的Content-<span class="type">Type</span></span><br><span class="line">    HTTP_ACCEPT_ENCODING  —— 响应可接收的编码</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE  —— 响应可接收的语言</span><br><span class="line">    HTTP_HOST             —— 客服端发送的HTTP Host 头部</span><br><span class="line">    HTTP_REFERER          —— Referring 页面</span><br><span class="line">    HTTP_USER_AGENT       —— 客户端的user-agent 字符串</span><br><span class="line">    QUERY_STRING          —— 单个字符串形式的查询字符串（未解析过的形式）</span><br><span class="line">    REMOTE_ADDR           —— 客户端的IP 地址</span><br><span class="line">    REMOTE_HOST           —— 客户端的主机名</span><br><span class="line">    REMOTE_USER           —— 服务器认证后的用户</span><br><span class="line">    REQUEST_METHOD        —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span></span><br><span class="line">    SERVER_NAME           —— 服务器的主机名</span><br><span class="line">    SERVER_PORT           —— 服务器的端口（是一个字符串）</span><br><span class="line">    </span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀，所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键</span><br></pre></td></tr></table></figure>

<h5 id="process-response"><a href="#process-response" class="headerlink" title="process_response"></a><code>process_response</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请求走了会触发，从下往上执行</span><br><span class="line">在最后一定要  <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">需求:</span><br><span class="line">  在所有的响应中都写入cookie    response.set_cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">  在所有的响应头中都写入xxx     response[<span class="string">&#x27;x-head&#x27;</span>]=<span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/007S8ZIlgy1gj6ropdwwmj31xw0tik2x.jpg" alt="img"></p>
<h5 id="provess-view"><a href="#provess-view" class="headerlink" title="provess_view"></a><code>provess_view</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Django会在调用视图函数之前调用process_viwe方法</span><br><span class="line"></span><br><span class="line">它应该返回<span class="literal">None</span>或者一个HttpResponse对象</span><br><span class="line">如果返回<span class="literal">None</span>，Django讲继续处理这个请求，执行任何其他中间件的process_view方法，然后执行响应的视图</span><br><span class="line">如果返回一个HttpResponse对象，Django不会调用适当的视图函数，将执行中间件的process_response方法并将应用到该HttpResponse并返回结果</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self, request, view_func, view_args, view_kwargs</span>):</span></span><br><span class="line">        <span class="comment"># view_func 视图函数</span></span><br><span class="line">        <span class="comment"># view_args,  位置参数</span></span><br><span class="line">        <span class="comment"># view_kwargs 关键字参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是process view&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果return None，会执行视图函数</span></span><br><span class="line">        <span class="comment">#手动执行了视图函数</span></span><br><span class="line">        <span class="comment"># response=view_func(request,view_args, view_kwargs)</span></span><br><span class="line">        <span class="comment"># 返回response，视图函数就不执行了</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ddddd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a><code>process_exception</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个方法只有在视图函数中出现异常了才执行</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception</span>):</span></span><br><span class="line">    <span class="comment">#记录错误日志</span></span><br><span class="line">    <span class="built_in">print</span>(exception)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/007S8ZIlgy1gj6rt8vwvjj30ue0k2wh6.jpg" alt="image-20200928231435070"></p>
<h5 id="porcess-template-response"><a href="#porcess-template-response" class="headerlink" title="porcess_template_response"></a><code>porcess_template_response</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该方法对视图函数返回值有要求，必须是一个含有render方法类的对象，才会执行此方法</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span>(<span class="params">self,request,response</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,status,msg</span>):</span></span><br><span class="line">        self.status=status</span><br><span class="line">        self.msg=msg</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        dic=&#123;<span class="string">&#x27;status&#x27;</span>:self.status,<span class="string">&#x27;msg&#x27;</span>:self.msg&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(dic))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Test(<span class="literal">True</span>,<span class="string">&#x27;测试&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="CSRF-TOKEN跨站请求伪造"><a href="#CSRF-TOKEN跨站请求伪造" class="headerlink" title="CSRF_TOKEN跨站请求伪造"></a><code>CSRF_TOKEN</code>跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/liuqingzheng/p/<span class="number">9505044.</span>html</span><br><span class="line"></span><br><span class="line">CSRF或者XSRF：跨站请求伪造</span><br><span class="line">攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户</span><br><span class="line"></span><br><span class="line">防范：CSRF攻击防范</span><br><span class="line">    Referer：上一次访问的地址（图片防盗链）</span><br><span class="line">    - 在请求地址中添加 token 并验证</span><br><span class="line">    - 在 HTTP 头中自定义属性并验证</span><br><span class="line">    - 把随机字符串放在请求体中</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/mmm.png" alt="img"></p>
<h3 id="Django处理CSRF"><a href="#Django处理CSRF" class="headerlink" title="Django处理CSRF"></a><code>Django</code>处理<code>CSRF</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">settings.py中不要注释csrf的中间件</span><br></pre></td></tr></table></figure>
<p><code>form</code>表单中处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;给谁转：&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;to_user&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_name&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;转多少：&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_money&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;转账&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><code>Ajax</code>处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/transfer/&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="comment">//data: &#123;to_user: $(&#x27;#id_name&#x27;).val(), money: $(&#x27;#id_money&#x27;).val(),csrfmiddlewaretoken:$(&#x27;[name=&quot;csrfmiddlewaretoken&quot;]&#x27;).val()&#125;,</span></span><br><span class="line">            <span class="attr">data</span>: &#123;<span class="attr">to_user</span>: $(<span class="string">&#x27;#id_name&#x27;</span>).val(), <span class="attr">money</span>: $(<span class="string">&#x27;#id_money&#x27;</span>).val(),<span class="attr">csrfmiddlewaretoken</span>:<span class="string">&#x27;&#123;&#123;csrf_token&#125;&#125;&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方式放入data中</span></span><br><span class="line"><span class="comment">// csrfmiddlewaretoken:$(&#x27;[name=&quot;csrfmiddlewaretoken&quot;]&#x27;).val()</span></span><br><span class="line"><span class="comment">// csrfmiddlewaretoken:&#x27;&#123;&#123;csrf_token&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="cookie的处理"><a href="#cookie的处理" class="headerlink" title="cookie的处理"></a><code>cookie</code>的处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要引入这个js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;/static/jquery.cookie.js&quot;</span>&gt;&lt;/script&gt;  </span><br><span class="line">var token=$.cookie(<span class="string">&#x27;csrftoken&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="csrf放到请求头中"><a href="#csrf放到请求头中" class="headerlink" title="csrf放到请求头中"></a><code>csrf</code>放到请求头中</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">           url: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           headers:&#123;<span class="string">&#x27;X-CSRFToken&#x27;</span>:token&#125;,</span><br><span class="line">           <span class="built_in">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">           data: &#123;</span><br><span class="line">               <span class="string">&#x27;name&#x27;</span>: $(<span class="string">&#x27;[name=&quot;name&quot;]&#x27;</span>).val(),</span><br><span class="line">               <span class="string">&#x27;password&#x27;</span>: $(<span class="string">&quot;#pwd&quot;</span>).val(),</span><br><span class="line">           &#125;,</span><br><span class="line">           success: function (data) &#123;</span><br><span class="line">               console.log(data)</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="csrf的控制使用"><a href="#csrf的控制使用" class="headerlink" title="csrf的控制使用"></a><code>csrf</code>的控制使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在视图函数上加装饰器</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt,csrf_protect</span><br><span class="line"><span class="comment"># 不再检测，局部禁用（前提是全站使用）</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># 检测，局部使用（前提是全站禁用）</span></span><br><span class="line"><span class="meta">@csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csrf_token</span>(<span class="params">request</span>):</span></span><br></pre></td></tr></table></figure>

<h3 id="Django启动流程"><a href="#Django启动流程" class="headerlink" title="Django启动流程"></a><code>Django</code>启动流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">配置文件中指定WSGI_APPLICATION = <span class="string">&#x27;mysite.wsgi.application&#x27;</span></span><br><span class="line">被wsgi服务器管理，一旦有请求进来，会触发application()</span><br><span class="line">实际触发WSGIHandler类的__call__传入environ, start_response</span><br><span class="line">把environ包装成request对象，执行中间件，执行路由，执行视图函数，返回response</span><br><span class="line">最终结束django</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Auth组件</title>
    <url>/3d30357f.html</url>
    <content><![CDATA[<h3 id="auth组件介绍"><a href="#auth组件介绍" class="headerlink" title="auth组件介绍"></a><code>auth</code>组件介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django提供了用户认证，创建，修改密码等用户相关的操作</span><br><span class="line">不需要创建用户表，默认自带了(auth_user)</span><br><span class="line">创建用户: python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220306142948086.png" alt="image-20220306142948086"></p>
<h3 id="auth组件常用方法"><a href="#auth组件常用方法" class="headerlink" title="auth组件常用方法"></a><code>auth</code>组件常用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure>

<h4 id="authenticate"><a href="#authenticate" class="headerlink" title="authenticate()"></a><code>authenticate()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">提供了用户认证功能，验证用户名以及密码是否正确，一般需要username、password两个关键字参数</span><br><span class="line">如果认证成功，便会返回一个User对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line">user = authenticate(username=<span class="string">&#x27;username&#x27;</span>,password=<span class="string">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h4 id="login-HttpRequest-user"><a href="#login-HttpRequest-user" class="headerlink" title="login(HttpRequest, user)"></a><code>login(HttpRequest, user)</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该函数接收一个HttpResqest对象，以及一个经过认证的User对象</span><br><span class="line">该函数实现一个用户登录功能，本质上会在后端为该用户生成相关session数据</span><br><span class="line"></span><br><span class="line">登录成功后调用</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login</span><br><span class="line">login(request, user)</span><br></pre></td></tr></table></figure>


<h4 id="logout-request"><a href="#logout-request" class="headerlink" title="logout(request)"></a><code>logout(request)</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该函数接收一个HttpReqest对象，无返回值</span><br><span class="line">当调用该函数是，当前请求的session信息会全部清除，该用户即使没有登录，使用该函数也不会报错</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout_view</span>(<span class="params">request</span>):</span></span><br><span class="line">  logout(request)</span><br></pre></td></tr></table></figure>


<h4 id="is-authenticated"><a href="#is-authenticated" class="headerlink" title="is_authenticated"></a><code>is_authenticated</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用来判断当前请求是否通过了认证，这个方法<span class="built_in">property</span>装饰过，不用加()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在视图中使用</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated:</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 模板中使用</span></span><br><span class="line">&#123;% <span class="keyword">if</span> request.user.is_authenticated %&#125;</span><br><span class="line">    &#123;&#123; request.user.username &#125;&#125; 欢迎你</span><br><span class="line">    &lt;a href=<span class="string">&quot;/auth_logout/&quot;</span>&gt;注销登录&lt;/a&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/login_auth/&quot;</span>&gt;请去登录&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>


<h4 id="login-requierd"><a href="#login-requierd" class="headerlink" title="login_requierd()"></a><code>login_requierd()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">auth 提供的一个装饰器工具，用来快捷的给某个视图添加登录校验</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># login_url如果不填会有一个默认的地址 accounts/login 的位置</span></span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/auth_login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_order</span>(<span class="params">request</span>):</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 默认的地址可以在settings.py文件中配置</span></span><br><span class="line">LOGIN_URL = <span class="string">&#x27;/login/&#x27;</span>  <span class="comment"># 这里配置成你项目登录页面的路由</span></span><br></pre></td></tr></table></figure>

<h4 id="create-user"><a href="#create-user" class="headerlink" title="create_user()"></a><code>create_user()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">auth 提供的一个创建新用户的方法，需要提供必要参数(username password)等</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_user(username=<span class="string">&#x27;用户名&#x27;</span>,password=<span class="string">&#x27;密码&#x27;</span>,email=<span class="string">&#x27;邮箱&#x27;</span>,...)</span><br></pre></td></tr></table></figure>


<h4 id="create-superuser"><a href="#create-superuser" class="headerlink" title="create_superuser()"></a><code>create_superuser()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">auth 提供的一个创建新的超级用户的方法，需要提供必要参数(username password)等</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_superuser(username=<span class="string">&#x27;用户名&#x27;</span>,password=<span class="string">&#x27;密码&#x27;</span>,email=<span class="string">&#x27;邮箱&#x27;</span>,...)</span><br></pre></td></tr></table></figure>


<h4 id="check-password-password"><a href="#check-password-password" class="headerlink" title="check_password(password)"></a><code>check_password(password)</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">auth 提供的一个检查密码是否正确的方法，需要提供当前请求用户的密码</span><br><span class="line">密码正确返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ok = user.check_password(<span class="string">&#x27;密码&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h4 id="set-password-password"><a href="#set-password-password" class="headerlink" title="set_password(password)"></a><code>set_password(password)</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">auth 提供的一个修改密码的方法，接收要设置的新密码作为参数</span><br><span class="line">注意：设置完一定要调用用户对象的save方法</span><br><span class="line"></span><br><span class="line">user.set_password(password=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure>

<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login, logout</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login_auth.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(username, password)</span><br><span class="line">        <span class="comment"># password是加密的，不能直接认证</span></span><br><span class="line">        <span class="comment"># User.objects.filter(username=username, password=password)</span></span><br><span class="line">        <span class="comment"># 存在返回True 否则None 内部相当于对密码加密之后再比对， username  字段是auth_user里面的</span></span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> user:  <span class="comment"># 登录成功</span></span><br><span class="line">            <span class="comment"># 登录成功需要要调用一下login，此时表示用户登录了</span></span><br><span class="line">            login(request, user)  <span class="comment"># 存到session里的</span></span><br><span class="line">            next_url = request.GET.get(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> next_url:</span><br><span class="line">                next_url = <span class="string">&#x27;/auth_home/&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> redirect(next_url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 直接拿到当前登录用户</span></span><br><span class="line">    <span class="built_in">print</span>(request.user)  <span class="comment"># 如果没有登录，显示的是 AnonymousUser 如果用户登录了(调用了login)，直接拿到用户</span></span><br><span class="line">    <span class="built_in">print</span>(request.user.username)</span><br><span class="line">    <span class="built_in">print</span>(request.user.<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户登录了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户没有登录&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;auth_home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login_url如果不填会有一个默认的地址 accounts/login 的位置</span></span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/auth_login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_order</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 必须登录才能访问</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是order, 必须登录才可能进入&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    logout(request)  <span class="comment"># 注销</span></span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;注销成功&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/auth_login/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_register</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># password是加密的，不能这样创建</span></span><br><span class="line">        <span class="comment"># User.objects.create(username=username, password=password)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建超级用户 email 字段需要传入</span></span><br><span class="line">        <span class="comment"># User.objects.create_superuser(username=username, password=password, email=None)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建普通用户</span></span><br><span class="line">        User.objects.create_user(username=username, password=password)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/auth_login/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_check_password</span>(<span class="params">request</span>):</span></span><br><span class="line">    user = User.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).first()</span><br><span class="line">    res = user.check_password(<span class="string">&#x27;admin12345&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;测试页面&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_set_password</span>(<span class="params">request</span>):</span></span><br><span class="line">    user = User.objects.<span class="built_in">filter</span>(pk=<span class="number">2</span>).first()</span><br><span class="line">    user.set_password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;测试页面2&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--auth_home.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if request.user.is_authenticated %&#125;</span><br><span class="line">    &#123;&#123; request.user.username &#125;&#125; 欢迎你</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/auth_logout/&quot;</span>&gt;</span>注销登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login_auth/&quot;</span>&gt;</span>请去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--register.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册功能<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--login_auth.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="User对象属性"><a href="#User对象属性" class="headerlink" title="User对象属性"></a><code>User</code>对象属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">User对象属性: username password</span><br><span class="line">is_staff: 用户是否拥有网站的管理权限，如果没有，后台admin登录不进去</span><br><span class="line">is_active: 是否允许用户登录, 设置为 <span class="literal">False</span>，可以在不删除用户的前提下禁止用户登录</span><br></pre></td></tr></table></figure>

<h3 id="扩展默认的auth-user表"><a href="#扩展默认的auth-user表" class="headerlink" title="扩展默认的auth_user表"></a>扩展默认的<code>auth_user</code>表</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">再创建一张表，与User表一对一关系</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_detail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    user=models.OneToOneField(to=User)</span><br><span class="line">    phone=models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>

<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    last_update_time = models.DateTimeField(auto_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span>  <span class="comment"># 此时这张表是抽象表，只能用来继承，不会在数据库生成表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">继承 AbstractUser 类扩写(不是继承authd的User，因为这个也是继承的 AbstractUser 类)</span><br><span class="line">使用步骤:</span><br><span class="line">  大前提是auth_user表没有创建之前进行</span><br><span class="line">  models.py中写一个类，继承 AbstractUser 在类中扩写字段</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAuthUser</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    username = models.CharFaield(max_length=<span class="number">12</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  <span class="comment"># 引用Django自带的User表，继承使用时需要设置，在settings.py中配置</span></span><br><span class="line">  AUTH_USER_MODEL = <span class="string">&quot;app01.MyAuthUser&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果auth_user表已经有了，需要扩写，需要删除之前数据库内的数据(危)</span></span><br><span class="line">  <span class="number">1.</span>删除库</span><br><span class="line">  <span class="number">2.</span>清空项目中所有migration的记录</span><br><span class="line">  <span class="number">3.</span>清空源码中admin，auth俩app的migration的记录</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF初探</title>
    <url>/ed2d6155.html</url>
    <content><![CDATA[<h3 id="Web应用模式"><a href="#Web应用模式" class="headerlink" title="Web应用模式"></a>Web应用模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前后端混合开发（前后端不分离）：返回的是html的内容，需要写模板</span><br><span class="line">前后端分离：只专注于写后端接口，返回json，xml格式数据</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/002.jpg" alt="img"></p>
<h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/001.jpg" alt="img"></p>
<h3 id="API接口"><a href="#API接口" class="headerlink" title="API接口"></a><code>API</code>接口</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">API接口: 规定了前后端信息交互规则的url链接，也就是前后台信息交互的媒介</span><br><span class="line">接口文档: 手动编写或者自动生成(coreapi、swagger)</span><br></pre></td></tr></table></figure>

<h3 id="RESTful规范"><a href="#RESTful规范" class="headerlink" title="RESTful规范"></a><code>RESTful</code>规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据的安全保障，通常使用https进行传输</span><br><span class="line"><span class="number">2.</span> 域名(api的标识)</span><br><span class="line">   https://api.example.com/      <span class="comment"># 尽量部署在API专用域名下</span></span><br><span class="line">   https://www.example.com/api/  </span><br><span class="line"><span class="number">3.</span> 请求地址带版本，或者在请求头中</span><br><span class="line">   https://api.example.com/v1/</span><br><span class="line">   https://www.example.com/api/v1</span><br><span class="line"><span class="number">4.</span> 任何东西都是资源，均用名词表示(尽量不要用动词)</span><br><span class="line">   https://api.example.com/v1/books/</span><br><span class="line"><span class="number">5.</span> 通过请求方式区分不同操作</span><br><span class="line">   get: 获取数据</span><br><span class="line">   post: 新增数据</span><br><span class="line">   put/patch: put是全部更新，patch是局部更新</span><br><span class="line">   delete: 删除</span><br><span class="line"><span class="number">6.</span> 在请求路径中带过滤</span><br><span class="line">   https://api.example.com/v1/?name=<span class="string">&#x27;三&#x27;</span>&amp;order=asc</span><br><span class="line"><span class="number">7.</span> 返回数据中带状态码</span><br><span class="line">   http请求状态码(2xx 3xx 4xx 5xx)</span><br><span class="line">   返回的JSON格式中带状态码(标志当次请求成功或失败)</span><br><span class="line"><span class="number">8.</span> 返回数据中带错误信息</span><br><span class="line">   错误处理，应返回错误信息，error当做key</span><br><span class="line"><span class="number">9.</span> 对不同的操作，返回数据符合如下规范</span><br><span class="line">   GET https://api.example.com/v1/books/       <span class="comment"># 返回资源对象的列表(数组) [&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">   GET https://api.example.com/v1/books/<span class="number">1</span>/     <span class="comment"># 返回单个资源对象 &#123;&#125;</span></span><br><span class="line">   POST https://api.example.com/v1/books/      <span class="comment"># 返回新生成的资源对象 &#123;新增的数据&#125;</span></span><br><span class="line">   PUT  https://api.example.com/v1/books/<span class="number">1</span>/    <span class="comment"># 返回完整的资源对象  &#123;返回修改后的数据&#125;</span></span><br><span class="line">   PATCH https://api.example.com/v1/books/<span class="number">1</span>/   <span class="comment"># 返回完整的资源对象 &#123;返回修改后的数据&#125;</span></span><br><span class="line">   DELETE https://api.example.com/v1/books/<span class="number">1</span>/  <span class="comment"># 返回一个空文档 </span></span><br><span class="line">   <span class="comment"># &#123;status:100,msg:查询成功,data:null&#125;</span></span><br><span class="line"><span class="number">10</span> 返回结果中带连接</span><br></pre></td></tr></table></figure>

<h3 id="postman的使用"><a href="#postman的使用" class="headerlink" title="postman的使用"></a><code>postman</code>的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">后端写好之后需要测试，因此需要一个工具测试接口，常用的postman </span><br><span class="line">下载地址: https://www.postman.com/</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220314110921244.png" alt="image-20220314110921244"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220314111001390.png" alt="image-20220314111001390"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220314111111514.png" alt="image-20220314111111514"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220314111310044.png" alt="image-20220314111310044"></p>
<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把数据转换格式，序列化可以分两个阶段：</span><br><span class="line">    <span class="number">1.</span>序列化： 把我们语言识别的数据转换成指定的格式提供给别人。</span><br><span class="line">              字典，列表，对象 ---&gt; json/xml/prop,massagepack ---&gt; 提供给别人(前端或其他服务)</span><br><span class="line">    <span class="number">2.</span>反序列化：把别人提供的数据转换/还原成我们需要的格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们在django中获取到的数据默认是模型对象（qs对象），但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人 ---&gt;序列化过程</span><br><span class="line"></span><br><span class="line">前端传入到后台的数据 ---&gt;json格式字符串 ---&gt;后端存到数据库中，需要转成python中的对象 ---&gt; 把json格式字符串转成python对象存到数据库的过程称为反序列化</span><br></pre></td></tr></table></figure>

<h3 id="DRF介绍和安装"><a href="#DRF介绍和安装" class="headerlink" title="DRF介绍和安装"></a><code>DRF</code>介绍和安装</h3><h4 id="介绍和安装"><a href="#介绍和安装" class="headerlink" title="介绍和安装"></a>介绍和安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DRF可以更方便的使用django写出符合RESTful规范的接口(不用也可以写出符合规范的接口)</span><br><span class="line">是一个app(需要在settings.py中配置)</span><br><span class="line">安装: pip3 install djangorestframework</span><br><span class="line">官网: https://www.django-rest-framework.org/</span><br></pre></td></tr></table></figure>

<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># csrf已经禁用了</span></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">path(<span class="string">&#x27;test/&#x27;</span>, views.Test.as_view()),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;yyy&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 注册app(settings.py)</span></span><br><span class="line">  INSTALLED_APPS = [</span><br><span class="line">      ...</span><br><span class="line">      <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 请求地址</span></span><br><span class="line">  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/test/</span><br><span class="line">  <span class="comment"># 使用post和浏览器会有不同的结果</span></span><br></pre></td></tr></table></figure>

<h3 id="DRF的快速使用"><a href="#DRF的快速使用" class="headerlink" title="DRF的快速使用"></a><code>DRF</code>的快速使用</h3><h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a><code>models.py</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    publish = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.IntegerField()</span><br></pre></td></tr></table></figure>

<h4 id="app01-serializer-py"><a href="#app01-serializer-py" class="headerlink" title="app01/serializer.py"></a><code>app01/serializer.py</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Books</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a><code>views.py</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> app01.serializer <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    queryset = models.Books.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a><code>urls.py</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;books&#x27;</span>, views.BookView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>

<h3 id="CBV源码分析"><a href="#CBV源码分析" class="headerlink" title="CBV源码分析"></a><code>CBV</code>源码分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;test/&#x27;</span>,views.TestView.as_view()),</span><br><span class="line">    <span class="comment"># path(&#x27;test/&#x27;,View类的as_view内部有个view闭包函数内存地址)</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    1 path的第二个参数是：View类的as_view内部有个view闭包函数内存地址</span></span><br><span class="line"><span class="string">    2 一旦有请求来了，匹配test路径成功</span></span><br><span class="line"><span class="string">    3 执行第二个参数view函数内存地址(requset)</span></span><br><span class="line"><span class="string">    4 本质执行了self.dispatch(request)</span></span><br><span class="line"><span class="string">    5 通过反射去获得方法（如果是get请求，就是get方法）</span></span><br><span class="line"><span class="string">     if request.method.lower() in self.http_method_names:</span></span><br><span class="line"><span class="string">        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span></span><br><span class="line"><span class="string">    6 执行get方法，传入参数</span></span><br><span class="line"><span class="string">    handler(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">装饰器函数 csrf_exempt</span></span><br><span class="line"><span class="string">@csrf_exempt</span></span><br><span class="line"><span class="string">def test():</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">本质就是</span></span><br><span class="line"><span class="string">test=csrf_exempt(test)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="APIview源码分析"><a href="#APIview源码分析" class="headerlink" title="APIview源码分析"></a><code>APIview</code>源码分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment"># path(&#x27;test/&#x27;,APIView类的as_view内部是用了View的as_view内的view闭包函数),</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    1 path的第二个参数是：APIView类的as_view内部是用了View的as_view内的view闭包函数</span></span><br><span class="line"><span class="string">    2 一旦有请求来了，匹配test路径成功</span></span><br><span class="line"><span class="string">    3 执行第二个参数view函数内存地址(requset)，还是执行View的as_view内的view闭包函数，但是加了个csrf_exempt装饰器</span></span><br><span class="line"><span class="string">    4 所以，继承了APIView的所有接口，都没有csrf的校验了 （*****************）</span></span><br><span class="line"><span class="string">    5 执行self.dispatch(request)----》APIView类的</span></span><br><span class="line"><span class="string">        def dispatch(self, request, *args, **kwargs):</span></span><br><span class="line"><span class="string">            # 以后所有的request对象，都是****新的request对象***，它是drf的Request类的对象</span></span><br><span class="line"><span class="string">            request = self.initialize_request(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">            self.request = request</span></span><br><span class="line"><span class="string">            try:</span></span><br><span class="line"><span class="string">                #整个drf的执行流程内的权限，频率，认证</span></span><br><span class="line"><span class="string">                self.initial(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">                if request.method.lower() in self.http_method_names:</span></span><br><span class="line"><span class="string">                    handler = getattr(self, request.method.lower(),</span></span><br><span class="line"><span class="string">                                      self.http_method_not_allowed)</span></span><br><span class="line"><span class="string">                else:</span></span><br><span class="line"><span class="string">                    handler = self.http_method_not_allowed</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">                response = handler(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">            except Exception as exc:</span></span><br><span class="line"><span class="string">                # 全局异常</span></span><br><span class="line"><span class="string">                response = self.handle_exception(exc)</span></span><br><span class="line"><span class="string">            # 响应</span></span><br><span class="line"><span class="string">            self.response = self.finalize_response(request, response, *args, **kwargs)</span></span><br><span class="line"><span class="string">            return self.response</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">## request = self.initialize_request(request, *args, **kwargs)</span></span><br><span class="line"><span class="comment">## 返回的request对象是drf   Request类的request对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br><span class="line"><span class="comment">## ******以后，在视图类中使用的request对象已经不是原来的request对象了，现在都是drf的request对象了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 需要记住的</span></span><br><span class="line">  所有的csrf都不校验了</span><br><span class="line">  request对象变成了新的request对象，drf的request对象</span><br><span class="line">  执行了权限，频率，认证</span><br><span class="line">  捕获了全局异常（统一处理异常）</span><br><span class="line">  处理了response对象，如果浏览器访问是一个样，postman访问又一个样</span><br><span class="line">  以后，在视图类中使用的request对象已经不是原来的request对象了，现在都是drf的request对象了</span><br></pre></td></tr></table></figure>

<h3 id="Request对象分析"><a href="#Request对象分析" class="headerlink" title="Request对象分析"></a><code>Request</code>对象分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> django 原生的Request：django.core.handlers.wsgi.WSGIRequest</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> drf的Request：rest_framework.request.Request</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> drf的request对象内有原生的request</span><br><span class="line">    request._request:原生的Request</span><br><span class="line">    </span><br><span class="line"><span class="number">4</span> 在视图类中使用</span><br><span class="line">    request.method  拿到的就是请求方式，</span><br><span class="line">    正常拿，应该request._request.method</span><br><span class="line">    </span><br><span class="line"><span class="number">5</span> 如何实现这种操作？</span><br><span class="line">	-对象.属性会触发 类的__getattr__方法</span><br><span class="line">    </span><br><span class="line"><span class="number">6</span> drf的Request类重写了__getattr__</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 去原生的request反射属性</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(self._request, attr)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> self.__getattribute__(attr)</span><br><span class="line">        </span><br><span class="line"> <span class="number">7</span> 虽然视图类中request对象变成了drf的request，但是用起来，跟原来的一样，只不过它多了一些属性</span><br><span class="line">   request.data  <span class="comment"># post请求提交的数据，不论什么格式，都在它中</span></span><br><span class="line">   requst.query_params  <span class="comment"># get请求提交的数据（查询参数）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">8</span> 重点记住：</span><br><span class="line">  drf的request对象用起来跟原来一样（重写了__getattr__）</span><br><span class="line">  request.data  <span class="comment"># post请求提交的数据，不论什么格式，都在它中</span></span><br><span class="line">  requst.query_params  <span class="comment"># get请求提交的数据（查询参数）</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化器与请求响应</title>
    <url>/73f3258a.html</url>
    <content><![CDATA[<h3 id="序列化器的作用"><a href="#序列化器的作用" class="headerlink" title="序列化器的作用"></a>序列化器的作用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列化: 把python中的对象转成JSON格式字符串</span><br><span class="line">反序列化: 把JSON格式字符串转成python中的对象</span><br><span class="line">  </span><br><span class="line">注意: drf的序列化组件(序列化器)</span><br><span class="line">把对象(Book，queryset对象)转成字典，因为有字典，直接使用Response就可以了</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="序列化器的使用"><a href="#序列化器的使用" class="headerlink" title="序列化器的使用"></a>序列化器的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 写一个序列化类，继承Serializer</span><br><span class="line">	 <span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">      <span class="comment"># 这里写要序列化的字段 类似于models中的字段</span></span><br><span class="line">      name = serializers.CharField()</span><br><span class="line">      publish = serializers.CharField()</span><br><span class="line">      price = serializers.IntegerField()</span><br><span class="line">      </span><br><span class="line"><span class="number">2.</span> 在是视图类中使用</span><br><span class="line">   book_list = models.Books.objects.<span class="built_in">all</span>()</span><br><span class="line">   book_ser = BookSerializer(instance=book_list, many=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 得到序列化后的数据，然后返回</span><br><span class="line">   <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">要写5个接口</span></span><br><span class="line"><span class="string">1 获取所有  http://127.0.0.1:8000/books_new/    get</span></span><br><span class="line"><span class="string">3 新增一个 http://127.0.0.1:8000/books_new/     post</span></span><br><span class="line"><span class="string">2 获取单个 http://127.0.0.1:8000/books_new/1/   get</span></span><br><span class="line"><span class="string">4 修改一个 http://127.0.0.1:8000/books_new/1/   put</span></span><br><span class="line"><span class="string">5 删除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 可以多写类 根据ID获取值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookViewId</span>(<span class="params">APIview</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">      book = models.Book.<span class="built_in">object</span>.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).first()</span><br><span class="line">      book_ser = BookSerializer(instance=book)</span><br><span class="line">      <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls</span></span><br><span class="line">path(<span class="string">&#x27;books/&lt;int:id&gt;/&#x27;</span>, views.BookViewId.as_view()),</span><br></pre></td></tr></table></figure>

<h4 id="source"><a href="#source" class="headerlink" title="source"></a><code>source</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 指定要序列化表中的哪个字段</span><br><span class="line">   pub = serializers.CharField(source=<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">   <span class="comment"># 将表中的 publish 取出给 pub</span></span><br><span class="line">   <span class="comment"># source 后的字段与前面的字段不要重复</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 还可以跨表查出</span><br><span class="line">   publish = serializers.CharField(source=<span class="string">&#x27;publish.city&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="SerializerMethodField"><a href="#SerializerMethodField" class="headerlink" title="SerializerMethodField"></a><code>SerializerMethodField</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">要求返回的字段内是字典</span></span><br><span class="line"><span class="string">publish = &#123;&#x27;name&#x27;: 名字, &#x27;city&#x27;:城市, &#x27;email&#x27;: 邮箱&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># serializer.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    price = serializers.IntegerField()</span><br><span class="line">    publish = serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_publish</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>: obj.publish.name, <span class="string">&#x27;city&#x27;</span>: obj.publish.city, <span class="string">&#x27;email&#x27;</span>: obj.publish.email&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;三国演义&quot;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;: 35,</span></span><br><span class="line"><span class="string">        &quot;publish&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;name&quot;: &quot;北方出版社&quot;,</span></span><br><span class="line"><span class="string">            &quot;city&quot;: &quot;北京&quot;,</span></span><br><span class="line"><span class="string">            &quot;email&quot;: &quot;222@qq.com&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的结果中又有多组数据的话使用如下方法</span></span><br><span class="line">  authors = serializers.SerializerMethodField()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">      <span class="keyword">return</span> [&#123;<span class="string">&#x27;id&#x27;</span>: author.nid, <span class="string">&#x27;name&#x27;</span>: author.name, <span class="string">&#x27;age&#x27;</span>: author.age&#125; <span class="keyword">for</span> author <span class="keyword">in</span> obj.authors.<span class="built_in">all</span>()]</span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;水浒传&quot;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;: 45,</span></span><br><span class="line"><span class="string">        &quot;publish&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;name&quot;: &quot;南方出版社&quot;,</span></span><br><span class="line"><span class="string">            &quot;city&quot;: &quot;南京&quot;,</span></span><br><span class="line"><span class="string">            &quot;email&quot;: &quot;123@qq.com&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;authors&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;id&quot;: 1,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;xxx&quot;,</span></span><br><span class="line"><span class="string">                &quot;age&quot;: 18</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;id&quot;: 2,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;yyy&quot;,</span></span><br><span class="line"><span class="string">                &quot;age&quot;: 20</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="在模型表中写方法"><a href="#在模型表中写方法" class="headerlink" title="在模型表中写方法"></a>在模型表中写方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表模型中的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>, to_field=<span class="string">&#x27;nid&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>: self.publish.name, <span class="string">&#x27;city&#x27;</span>: self.publish.city&#125;  <span class="comment"># 返回的是一个字典</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [&#123;<span class="string">&#x27;id&#x27;</span>: author.nid,<span class="string">&#x27;name&#x27;</span>: author.name, <span class="string">&#x27;age&#x27;</span>: author.age&#125; <span class="keyword">for</span> author <span class="keyword">in</span> self.authors.<span class="built_in">all</span>()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化类中的写法</span></span><br><span class="line">  publish_name = serializers.DictField()  <span class="comment"># 接收的是一个字典  需要使用 DictField() 返回出去</span></span><br><span class="line">  author_list = serializers.ListField()   <span class="comment"># 接收的是一个列表  需要使用 ListField() 返回出去</span></span><br></pre></td></tr></table></figure>

<h3 id="序列化类常用字段和属性"><a href="#序列化类常用字段和属性" class="headerlink" title="序列化类常用字段和属性"></a>序列化类常用字段和属性</h3><h4 id="常用字段属性"><a href="#常用字段属性" class="headerlink" title="常用字段属性"></a>常用字段属性</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20210413155345822.png" alt="img"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20210413155409187.png" alt="img"></p>
<h4 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对CharField</span></span><br><span class="line">max_length   最大长度</span><br><span class="line">min_length   最小长度</span><br><span class="line">allow_blank  是否允许为空</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对InterField</span></span><br><span class="line">max_value  最大值</span><br><span class="line">min_value  最小值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用  </span></span><br><span class="line">read_only   表明该字段仅用于序列化输出，默认<span class="literal">False</span>(序列化)</span><br><span class="line">write_only  表明该字段仅用于反序列化输入，默认<span class="literal">False</span>(反序列化)</span><br><span class="line"></span><br><span class="line">required   表明该字段在反序列化时必须输入，默认<span class="literal">True</span></span><br><span class="line">default    反序列化时使用的默认值</span><br><span class="line">allow_null 表明该字段是否允许传入<span class="literal">None</span>，默认<span class="literal">False</span></span><br><span class="line">error_messages  包含错误编号与错误信息的字典</span><br><span class="line"></span><br><span class="line">validators  该字段使用的验证器(了解)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    nid = serializers.CharField(required=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># error_messages 和forms组件中使用类似</span></span><br><span class="line">    name = serializers.CharField(max_length=<span class="number">3</span>, error_messages=&#123;<span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;名字太长了&#x27;</span>&#125;)</span><br><span class="line">    city = serializers.CharField()</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 视图类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    publish_ser = serializer.PublishSerializer(data=request.data)</span><br><span class="line">    <span class="keyword">if</span> publish_ser.is_valid():</span><br><span class="line">        publish_ser.save()</span><br><span class="line">        <span class="keyword">return</span> Response(publish_ser.data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(publish_ser.errors)</span><br><span class="line">        <span class="keyword">return</span> Response(publish_ser.errors)  <span class="comment"># 此时报错信息就是 &#x27;名字太长了&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果要反序列化，继承了Serializer，必须重写create、updated等方法</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">父类的save内部调用了create，所以我们重写create</span></span><br><span class="line"><span class="string">return res 给了self.instance以后，instance就有值了</span></span><br><span class="line"><span class="string">publish_ser.data，instance就有值调用data就能拿到序列化后的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，</span></span><br><span class="line"><span class="string">REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="视图类"><a href="#视图类" class="headerlink" title="视图类"></a>视图类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> serializer</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        publish_list = models.Publish.objects.<span class="built_in">all</span>()</span><br><span class="line">        publish_ser = serializer.PublishSerializer(instance=publish_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(publish_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        publish_ser = serializer.PublishSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> publish_ser.is_valid():</span><br><span class="line">            publish_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(publish_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(publish_ser.errors)</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;数据存在问题&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        publish_list = models.Publish.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).first()</span><br><span class="line">        publish_ser = serializer.PublishSerializer(instance=publish_list)</span><br><span class="line">        <span class="keyword">return</span> Response(publish_ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        publish_list = models.Publish.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).first()</span><br><span class="line">        publish_ser = serializer.PublishSerializer(instance=publish_list, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> publish_ser.is_valid():  <span class="comment"># 校验数据</span></span><br><span class="line">            publish_ser.save()  <span class="comment"># 保存数据</span></span><br><span class="line">            <span class="keyword">return</span> Response(publish_ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;数据校验错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        res = models.Publish.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).delete()</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;数据不存在&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    nid = serializers.CharField(required=<span class="literal">False</span>)</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    city = serializers.CharField()</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 重写父类的 create 方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        res = models.Publish.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重写父类的 update 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># 手动将值取出，再存入表中</span></span><br><span class="line">        name = validated_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        city = validated_data.get(<span class="string">&#x27;city&#x27;</span>)</span><br><span class="line">        email = validated_data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        instance.name = name</span><br><span class="line">        instance.city = city</span><br><span class="line">        instance.email = email</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance  <span class="comment"># 需要将 instance 返回</span></span><br></pre></td></tr></table></figure>

<h4 id="表模型"><a href="#表模型" class="headerlink" title="表模型"></a>表模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;publish/&#x27;</span>, views.PublishView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;publish/&lt;int:id&gt;/&#x27;</span>, views.PublishDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="局部、全局钩子"><a href="#局部、全局钩子" class="headerlink" title="局部、全局钩子"></a>局部、全局钩子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    nid = serializers.CharField(required=<span class="literal">False</span>)</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    city = serializers.CharField()</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_name</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment"># data 就是当前字段的值</span></span><br><span class="line">        <span class="keyword">if</span> data.startswith(<span class="string">&#x27;sb&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不能以sb开头&#x27;</span>)  <span class="comment"># 抛出异常  publish_ser.errors</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attrs.get(<span class="string">&#x27;name&#x27;</span>) == attrs.get(<span class="string">&#x27;city&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;名称和城市名不能一致&#x27;</span>)  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>

<h3 id="模型类序列化器"><a href="#模型类序列化器" class="headerlink" title="模型类序列化器"></a>模型类序列化器</h3><h4 id="视图类-1"><a href="#视图类-1" class="headerlink" title="视图类"></a>视图类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> serializer</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        qs = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        ser = serializer.BookModelSerializer(instance=qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        ser = serializer.BookModelSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="comment"># ModelSerializer 重写了save 方法 不用手动</span></span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        book = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).first()</span><br><span class="line">        ser = serializer.BookModelSerializer(instance=book)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        book = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).first()</span><br><span class="line">        ser = serializer.BookModelSerializer(instance=book, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, <span class="built_in">id</span></span>):</span></span><br><span class="line">        res = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="built_in">id</span>).delete()</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;数据不存在&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="序列化类-1"><a href="#序列化类-1" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># 全部字段</span></span><br><span class="line">        <span class="comment"># fields = [&#x27;name&#x27;, &#x27;price&#x27;]  # 指定字段</span></span><br><span class="line">        <span class="comment"># exclude = [&#x27;name&#x27;]   # 排除字段</span></span><br><span class="line">        <span class="comment"># depth = 2  # 跨几个表的详细数据，一般不用，官方建议最多到10， 一般不超过3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 某个字段用的字段类，取决于models中的字段类</span></span><br><span class="line">        <span class="comment"># 在某个字段上加属性</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;max_length&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;min_value&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;publish&#x27;</span>: &#123;<span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">&#x27;authors&#x27;</span>: &#123;<span class="string">&#x27;required&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment"># publish和authors两个字段只需要在写入时写入，而在请求时不会返回</span></span><br><span class="line">    <span class="comment"># 而是由下面的publish_detail authors_list字段显示</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 把publish详情显示</span></span><br><span class="line">    <span class="comment"># 重写publish字段</span></span><br><span class="line">    <span class="comment"># publish = serializers.CharField()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以加一个不存在的字段</span></span><br><span class="line">    <span class="comment"># aa = serializers.CharField(source=&#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 之前的方法也可以使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子序列化类</span></span><br><span class="line">    publish_detail = PublishSerializer(source=<span class="string">&#x27;publish&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    authors_list = serializers.ListField(read_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 这两个read_only只会在get的时候显示  写入时不需要传入</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 局部钩子、 全局钩子</span></span><br></pre></td></tr></table></figure>

<h4 id="表模型-1"><a href="#表模型-1" class="headerlink" title="表模型"></a>表模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>, to_field=<span class="string">&#x27;nid&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>: self.publish.name, <span class="string">&#x27;city&#x27;</span>: self.publish.city&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authors_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [&#123;<span class="string">&#x27;id&#x27;</span>: author.nid, <span class="string">&#x27;name&#x27;</span>: author.name, <span class="string">&#x27;age&#x27;</span>: author.age&#125; <span class="keyword">for</span> author <span class="keyword">in</span> self.authors.<span class="built_in">all</span>()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">&#x27;AuthorDatail&#x27;</span>, to_field=<span class="string">&#x27;nid&#x27;</span>, unique=<span class="literal">True</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDatail</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    telephone = models.BigIntegerField()</span><br><span class="line">    birthday = models.DateField()</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.addr</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;publish/&#x27;</span>, views.PublishView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.BookView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;publish/&lt;int:id&gt;/&#x27;</span>, views.PublishDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>下图就是<code>read_only</code>和<code>write_only</code>的作用，写入的和显示的可以不一致</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220316204027223.png" alt="image-20220316204027223"></p>
<h3 id="序列化源码分析"><a href="#序列化源码分析" class="headerlink" title="序列化源码分析"></a>序列化源码分析</h3><h4 id="many参数"><a href="#many参数" class="headerlink" title="many参数"></a><code>many</code>参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 序列化类实例化的时候，传了many，序列化多条，不传，就序列化单条</span><br><span class="line"><span class="comment"># many=True，实例化得到的对象是ListSerializer</span></span><br><span class="line">ser=serializer.BookModelSerializer(instance=qs,many=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ser))</span><br><span class="line"><span class="comment"># rest_framework.serializers.ListSerializer</span></span><br><span class="line"><span class="comment"># 列表中套了很多BookModelSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># many=False，实例化得到的对象是BookModelSerializer</span></span><br><span class="line">ser=serializer.BookModelSerializer(instance=book)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ser))</span><br><span class="line"><span class="comment"># app01.serializer.BookModelSerializer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类实例化：在执行__init__之前，先执行了__new__生成一个空对象（决定了是哪个类的对象）</span><br><span class="line">在__new__中进行判断，如果many=<span class="literal">True</span>，就返回ListSerializer的对象</span><br></pre></td></tr></table></figure>

<h4 id="局部钩子和全局钩子"><a href="#局部钩子和全局钩子" class="headerlink" title="局部钩子和全局钩子"></a>局部钩子和全局钩子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_valid()</span><br><span class="line">判断_validated_data如果没有</span><br><span class="line">执行了 self.run_validation(self.initial_data)</span><br><span class="line">目前在BaseSerializer，如果按住ctrl点击，会直接进到它父类的run_validation，进到Field，不是真正执行的方法</span><br><span class="line"></span><br><span class="line">我们需要从头找，实际上是Serializer类的run_validation</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_validation</span>(<span class="params">self, data=empty</span>):</span></span><br><span class="line">    value = self.to_internal_value(data)  <span class="comment"># 字段自己的校验和局部钩子</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.run_validators(value) </span><br><span class="line">        value = self.validate(value) <span class="comment"># 全局钩子</span></span><br><span class="line">        <span class="keyword">assert</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, </span><br><span class="line">        <span class="keyword">except</span> (ValidationError, DjangoValidationError) <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(detail=as_serializer_error(exc))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">局部钩子是在  to_internal_value执行的</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> fields:</span><br><span class="line">    	validate_method = <span class="built_in">getattr</span>(self, <span class="string">&#x27;validate_&#x27;</span> + field.field_name, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> validate_method <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            validated_value = validate_method(validated_value)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="comment">## 总结：</span></span><br><span class="line">is_valid---》BaseSerializer的is_valid--》执行了self.run_validation(self.initial_data)---》Serializer的run_validation---》self.to_internal_value(data)：局部钩子|||</span><br><span class="line">value = self.validate(value) ：全局钩子</span><br><span class="line"></span><br><span class="line">self.to_internal_value(data)：局部钩子----》<span class="built_in">getattr</span>(self, <span class="string">&#x27;validate_&#x27;</span> + field.field_name, <span class="literal">None</span>)</span><br><span class="line">                </span><br></pre></td></tr></table></figure>

<h4 id="序列化对象-data"><a href="#序列化对象-data" class="headerlink" title="序列化对象.data"></a>序列化对象<code>.data</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列化对象.data方法--调用父类data方法---调用对象自己的to_representation（自定义的序列化类无此方法，去父类找）</span><br><span class="line">Serializer类里有to_representation方法，<span class="keyword">for</span>循环执行attribute = field.get_attribute(instance)</span><br><span class="line">再去Field类里去找get_attribute方法，self.source_attrs就是被切分的source，然后执行get_attribute方法，source_attrs</span><br><span class="line">当参数传过去，判断是方法就加括号执行，是属性就把值取出来</span><br></pre></td></tr></table></figure>

<h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Request 类的对象---》新的request对象</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记住的</span></span><br><span class="line">	__getattr__</span><br><span class="line">	request.data</span><br><span class="line">  request.query_parmas---&gt;self._request.GET--&gt;restful规范里，请求地址中带过滤(查询)条件---&gt; get请求地址中提交的数据在GET中 --&gt; query_parmas：查询参数</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解---&gt;默认情况下，可以解析 urlencoded，formdata，json</span></span><br><span class="line">	-如果我们写了一个接口，想只能处理json格式，或者只能处理formdata</span><br><span class="line">	</span><br><span class="line"><span class="comment"># from rest_framework import settings DRF内的所有配置的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser,FormParser,MultiPartParser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="comment"># 局部使用，只针对当前视图类有效，只想处理json格式</span></span><br><span class="line">    parser_classes = [JSONParser]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置---&gt; 配置文件---&gt; 所有接口都只能解析json格式</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置解析json，局部某个视图函数想能解析formdata格式</span></span><br><span class="line">视图类中配置一下即可---&gt;局部配置</span><br><span class="line">  如果局部配置如下:</span><br><span class="line">  parser_classes = [] <span class="comment"># 所有格式都补不能解析了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用顺序：我们没有配置，也有默认配置：3个都能解析</span></span><br><span class="line">	drf有默认配置(最后) ----&gt; 项目配置文件的配置(其次) ----&gt; 视图类中配的(优先用)</span><br><span class="line">  drf的默认配置：<span class="keyword">from</span> rest_framework <span class="keyword">import</span> settings</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 总结：一般情况下，都使用默认即可，不用配置</span></span><br></pre></td></tr></table></figure>

<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Respone:<span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性</span></span><br><span class="line">data=<span class="literal">None</span>,    <span class="comment"># 字符串，字典，列表--》给http响应body体中内容--&gt;response对象中取出处理</span></span><br><span class="line">status=<span class="literal">None</span>,  <span class="comment"># 响应状态码：1xx，2xx，3xx，默认是200</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.status <span class="keyword">import</span> HTTP_201_CREATED</span><br><span class="line">Response(ser.data,status=HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">headers=<span class="literal">None</span>,      <span class="comment"># 响应头 字典</span></span><br><span class="line">  </span><br><span class="line">---了解---</span><br><span class="line">template_name=<span class="literal">None</span>,  <span class="comment"># 模板名字(不用)，用浏览器访问时，可以改</span></span><br><span class="line">exception=<span class="literal">False</span>,    <span class="comment"># 异常处理</span></span><br><span class="line">content_type=<span class="literal">None</span>   <span class="comment"># 响应编码格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应格式---&gt; 跟解析格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部设置</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer,BrowsableAPIRenderer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    renderer_classes = [JSONRenderer,]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局设置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,  <span class="comment"># 浏览API渲染器</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/e173abca.html</url>
    <content><![CDATA[<h3 id="前端与后端"><a href="#前端与后端" class="headerlink" title="前端与后端"></a>前端与后端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前端：</span><br><span class="line">如何与操作系统打交道的界面都可以称为<span class="string">&#x27;前端&#x27;</span></span><br><span class="line">如：手机界面 电脑软件界面 平板界面</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">不直接与用户打交道，而是控制核心逻辑的运行</span><br><span class="line"></span><br><span class="line">前端三剑客</span><br><span class="line">HTML  网页的骨架(没有样式)</span><br><span class="line">CSS   网页的样式(给骨架美化)</span><br><span class="line">JS    网页的动态效果(丰富用户体验)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B/S架构的本质也是C/S架构</span><br><span class="line">当编写TC服务端的时候，客户端的选择可以是自己写的客户端代码也可以是浏览器充当客户端</span><br><span class="line"></span><br><span class="line">之前编写的TCP服务端浏览器无法识别的原因在于每个人编写的服务端不一样，没有统一的格式，浏览器不能自动识别</span><br><span class="line"> 	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 	浏览器可以访问很多服务端 如何做到无障碍的与这么多不同程序员开发的软件实现数据的交互</span></span><br><span class="line"><span class="string"> 		1.浏览器自身功能强大 自动识别并切换(太过消耗资源)</span></span><br><span class="line"><span class="string"> 		2.大家统一一个与浏览器交互的数据方式(统一思想)</span></span><br><span class="line"><span class="string"> 	&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>规定了浏览器与服务端之间数据交互的方式及其他事项，如果开发的服务端不遵守该协议，那么浏览器无法识别服务端的数据，就需要自己编写一个客户端</p>
<h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><ul>
<li><p>基于请求响应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">服务端永远不会主动给客户端发消息，必须是客户端先发请求，如果让服务端主动给客户发送消息可以采用其他网络协议</span><br></pre></td></tr></table></figure></li>
<li><p>基于TCP/IP作用于应用之上的协议</p>
</li>
<li><p>无状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不保存客户端的状态信息</span><br></pre></td></tr></table></figure></li>
<li><p>无连接/短连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">两者请求响应之后立刻断绝关系</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><ul>
<li><p>请求格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请求首行(网络请求的方法)</span><br><span class="line">请求头(一堆k:v键值对)</span><br><span class="line">(换行符 不能省略)</span><br><span class="line">请求体(并不是所有的请求方法都有)</span><br></pre></td></tr></table></figure></li>
<li><p>响应格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">响应首行(响应状态码)</span><br><span class="line">响应头(一堆K:V键值对)</span><br><span class="line">(换行符 不能省略)</span><br><span class="line">响应提(即将交给浏览器的数据)</span><br></pre></td></tr></table></figure></li>
<li><p>响应状态码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用数字来表示一串中文意思</span><br><span class="line">  1XX:服务端已经接受到了数据正在处理 你可以继续发送数据也可以等待</span><br><span class="line">  2XX:<span class="number">200</span> OK请求成功 服务端返回了相应的数据</span><br><span class="line">  3XX:重定向(原本想访问A页面 但是自动跳转到了B页面)</span><br><span class="line">  4XX:<span class="number">403</span>没有权限访问  <span class="number">404</span>请求资源不存在</span><br><span class="line">  5XX:服务器内部错误</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 	公司还会自定义状态码 一般以10000开头</span></span><br><span class="line"><span class="string">  参考:聚合数据</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HTML前戏"><a href="#HTML前戏" class="headerlink" title="HTML前戏"></a>HTML前戏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请求首行</span></span><br><span class="line"><span class="string">b&#x27;GET / HTTP/1.1\r\n  </span></span><br><span class="line"><span class="string">请求头</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8080\r\n</span></span><br><span class="line"><span class="string">Connection: keep-alive\r\n</span></span><br><span class="line"><span class="string">sec-ch-ua: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;97&quot;, &quot;Chromium&quot;;v=&quot;97&quot;\r\n</span></span><br><span class="line"><span class="string">sec-ch-ua-mobile: ?0\r\n</span></span><br><span class="line"><span class="string">sec-ch-ua-platform: &quot;macOS&quot;\r\n</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1\r\n</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\r\n</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span></span><br><span class="line"><span class="string">Sec-Fetch-Site: none\r\n</span></span><br><span class="line"><span class="string">Sec-Fetch-Mode: navigate\r\n</span></span><br><span class="line"><span class="string">Sec-Fetch-User: ?1\r\n</span></span><br><span class="line"><span class="string">Sec-Fetch-Dest: document\r\n</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br\r\n</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9\r\n</span></span><br><span class="line"><span class="string">\r\n</span></span><br><span class="line"><span class="string">请求体(当前为空)</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="comment"># 遵循HTTP响应格式</span></span><br><span class="line">        sock.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span>)</span><br><span class="line">        sock.send(<span class="string">b&#x27;&lt;h1&gt;hello big baby&lt;h1&gt;&#x27;</span>)</span><br><span class="line">        sock.send(<span class="string">b&#x27;&lt;a href=&quot;https://www.jd.com&quot;&gt;good see&lt;a&gt;&#x27;</span>)</span><br><span class="line">        sock.send(</span><br><span class="line">            <span class="string">b&#x27;&lt;img src=&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;/&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h3><p>HTML：超文本标记语言，没有逻辑，只有固定的标记功能</p>
<h4 id="基本文档结构"><a href="#基本文档结构" class="headerlink" title="基本文档结构"></a>基本文档结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>浏览器上相关信息<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>主体内容<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单行注释--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><h4 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.双标签(有闭合)</span><br><span class="line">  &lt;a&gt;&lt;/a&gt;</span><br><span class="line">2.自闭合标签(单标签)</span><br><span class="line">  &lt;img/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="head内常见标签"><a href="#head内常见标签" class="headerlink" title="head内常见标签"></a>head内常见标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title  定义网页标题</span><br><span class="line">style  内部支持CSS代码</span><br><span class="line">script 内部支持编写JS代码 还可以通过src属性导入外部js文件</span><br><span class="line">link   通过href属性引入外部的css文件</span><br><span class="line">meta   定义网页源信息</span><br><span class="line">       keywords关键字搜索</span><br><span class="line">       description网页描述信息</span><br></pre></td></tr></table></figure>

<h4 id="body内常见标签"><a href="#body内常见标签" class="headerlink" title="body内常见标签"></a>body内常见标签</h4><table>
<thead>
<tr>
<th>标签</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>h1-h6</td>
<td>标题标签</td>
</tr>
<tr>
<td>p</td>
<td>段落标签</td>
</tr>
<tr>
<td>b</td>
<td>加粗</td>
</tr>
<tr>
<td>i</td>
<td>斜体</td>
</tr>
<tr>
<td>u</td>
<td>下划线</td>
</tr>
<tr>
<td>s</td>
<td>删除线</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
</tr>
<tr>
<td>hr</td>
<td>水平分割线</td>
</tr>
</tbody></table>
<p>多种标签有些时候可以实现相同的样式</p>
<h4 id="特殊符"><a href="#特殊符" class="headerlink" title="特殊符"></a>特殊符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;nbsp;</td>
<td>空格</td>
</tr>
<tr>
<td>&amp;gt;</td>
<td>大于号</td>
</tr>
<tr>
<td>&amp;lt;</td>
<td>小于号</td>
</tr>
<tr>
<td>&amp;amp;</td>
<td>&amp;符号</td>
</tr>
<tr>
<td>&amp;yen;</td>
<td>RMB 符号</td>
</tr>
<tr>
<td>&amp;copy;</td>
<td>版权符</td>
</tr>
<tr>
<td>&amp;reg;</td>
<td>注册</td>
</tr>
</tbody></table>
<h4 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h4><p><code>div&amp;span</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div   块级标签</span><br><span class="line">span  行内标签</span><br><span class="line"></span><br><span class="line">标签是可以嵌套的，但是需要遵循以下规律:</span><br><span class="line">1.块级标签,可以无限制的嵌套块儿级标签和行内标签</span><br><span class="line">2.p标签虽然是块级标签但是也不能嵌套块级标签</span><br><span class="line">3.行内标签不能嵌套块儿级标签，可以嵌套行内标签</span><br><span class="line">	</span><br><span class="line">页面布局的技巧:先用div划分区域，再考虑后面填充具体内容</span><br></pre></td></tr></table></figure>

<p><code>a</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接标签</span><br><span class="line">1.可以通过href属性指定URL进行点击跳转</span><br><span class="line">	跳转的两种方式:</span><br><span class="line">	1)在当前页面跳转  target=&quot;_self&quot;   默认的参数</span><br><span class="line">	2)新建标签页跳转  target=&quot;_blank&quot;</span><br><span class="line">2.锚点功能</span><br><span class="line">	通过href属性指定标签的id值，然后点击即可跳转到对应的位置</span><br><span class="line">	&lt;a href=&quot;#10&quot;&gt;跳到id为10的标签位置&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><code>img</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">图片标签</span><br><span class="line">src属性指定图片地址，可以是本地地址，也可以是网络地址</span><br><span class="line">alt属性编写文本，用于在图片无法加载时的提示信息</span><br><span class="line">tatle属性编写文本，用于鼠标悬浮在图片上时提示的信息</span><br><span class="line">height、width属性写像素(图片大小)，单位是px，调整一个参数时会等比缩放，同时两个参数可能会失真</span><br></pre></td></tr></table></figure>

<h4 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h4><p><code>id</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个体查找，类似于身份证，在同一个html页面上的id不能重复</span><br><span class="line">&lt;h1 id=&#x27;10&#x27;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p><code>class</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">群体查找，可以将多个标签划分为一类，一个标签同时也可以有多个属性，如：</span><br><span class="line">&lt;h1 class=&#x27;c1 c2&#x27;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p class=&#x27;c1 c3&#x27;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul>
<li><p>无序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;123&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;1234&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;12345&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">网页上有规则排列的多个横向或者竖向内容几乎都是使用的无序列表</span><br></pre></td></tr></table></figure></li>
<li><p>有序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;/li&gt;</span><br><span class="line">	&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>标题列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;标题1&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;内容1&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;标题2&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;内容1&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;内容2&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">	&lt;thead&gt;&lt;/thead&gt;  表头</span><br><span class="line">	&lt;tbody&gt;&lt;/tbody&gt;  表单</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;标签表示一行</span><br><span class="line">&lt;th&gt;标签表头内的字段名称</span><br><span class="line">&lt;td&gt;标签普通的单元格数据</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;jason&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;18&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;123456&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;tom&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;28&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;123&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">border:      表格边框</span><br><span class="line">cellpadding: 内边距</span><br><span class="line">cellspacing: 外边距</span><br><span class="line">width:       像素 百分比(最好通过css来设置长宽)</span><br><span class="line">rowspan:     单元格竖跨多少行</span><br><span class="line">colspan:     单元格横跨多少列(即合并单元格)</span><br></pre></td></tr></table></figure>

<h4 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a><code>form</code>标签</h4><p>form表单的功能是获取用户的数据并发送给后端，例如登录、注册等信息</p>
<h5 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a><code>input</code>标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input标签是最常用的获取数据标签，该标签为行内标签，可以通过type参数的不同变换不同的表现形式</span><br><span class="line"></span><br><span class="line"># type的属性</span><br><span class="line">1) text  普通文本</span><br><span class="line"></span><br><span class="line">2) password  密码隐藏</span><br><span class="line"></span><br><span class="line">3) date  日期选择</span><br><span class="line"></span><br><span class="line">4) radio 单选</span><br><span class="line">         当有多个选项标签需要相同的name属性</span><br><span class="line">         默认选中需要 checked=&#x27;checked&#x27;</span><br><span class="line">         当属性名与属性值相等可以简写checked</span><br><span class="line">         </span><br><span class="line">5) checkbox  多选，默认选中需要 checked=&#x27;checked&#x27;</span><br><span class="line"></span><br><span class="line">6) email  邮箱格式，不满足邮箱格式提交时会提示</span><br><span class="line"></span><br><span class="line">7) file 上传文件，默认只支持单个文件，上传多个文件需要 multiple 参数</span><br><span class="line"></span><br><span class="line">8) submit 提交按钮，点击时会将表单内的信息进行提交</span><br><span class="line"></span><br><span class="line">9) button 普通按钮，本身无任何功能，一般结合JS定制</span><br><span class="line"></span><br><span class="line">10) rest 重置按钮</span><br><span class="line"></span><br><span class="line">按钮的提示信息可以通过value属性自定义，不自定义的时候不同的浏览器会显示不同的信息</span><br></pre></td></tr></table></figure>

<h5 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a><code>select</code>标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下拉框选项，选项的内容用 option 标签包裹</span><br><span class="line">默认单选，多选可以使用 multiple 参数</span><br></pre></td></tr></table></figure>

<h5 id="textarea标签"><a href="#textarea标签" class="headerlink" title="textarea标签"></a><code>textarea</code>标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取大段文本内容</span><br></pre></td></tr></table></figure>

<h5 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.直接编写input会出现黄色阴影，原因在于input需要结合lable一起使用</span><br><span class="line">	方式1:lable包裹input并绑定id</span><br><span class="line">    	&lt;label for=&#x27;input标签id值&#x27;&gt;input标签&lt;/label&gt;</span><br><span class="line">  方式2:label与input单独出现并绑定id</span><br><span class="line">    	&lt;label for=&quot;d1&quot;&gt;username:&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; id=&quot;d1&quot;&gt;</span><br><span class="line">      </span><br><span class="line">3.form表单提交数据</span><br><span class="line">	数据的提交地址由form表单的action参数来控制</span><br><span class="line">  	action=&quot;URL&quot;</span><br><span class="line">    	# 不写默认朝当前页面所在的地址提交</span><br><span class="line">    method=&quot;数据的提交方式&quot;</span><br><span class="line">    	# 数据的提交方式有很多种 这里先忽略(后续讲解)</span><br><span class="line">      	get post put delete patch...</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">form表单在提交数据的时候 如果含文件则需要指定两个固定参数</span><br><span class="line">	method=&#x27;post&#x27;</span><br><span class="line">	enctype=&quot;multipart/form-data&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="前后端简易交互"><a href="#前后端简易交互" class="headerlink" title="前后端简易交互"></a>前后端简易交互</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:5000/index/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;email&#x27;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出生日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;secrecy&quot;</span>&gt;</span>保密</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Basketball&quot;</span>&gt;</span> 篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Football&quot;</span>&gt;</span> 足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Volleyball&quot;</span>&gt;</span> 排球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    城市: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;guangzhou&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>自我评价: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>file:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>file:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220120145019978.png" alt="image-20220120145019978"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(request.form)  <span class="comment"># 获取普通数据</span></span><br><span class="line">    <span class="built_in">print</span>(request.files)  <span class="comment"># 获取文件数据</span></span><br><span class="line">    <span class="built_in">print</span>(request.form.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment">#  单独获取表单内的值</span></span><br><span class="line">    file_obj = request.files.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 获取文件对象</span></span><br><span class="line">    file_obj.save(<span class="string">&#x27;xxx.md&#x27;</span>)  <span class="comment"># 保存文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flask框架&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象高级小结</title>
    <url>/4cd9c9fc.html</url>
    <content><![CDATA[<h1 id="面向对象高级小结"><a href="#面向对象高级小结" class="headerlink" title="面向对象高级小结"></a>面向对象高级小结</h1><h2 id="isinstance-issubclass"><a href="#isinstance-issubclass" class="headerlink" title="isinstance,issubclass"></a>isinstance,issubclass</h2><p>isinstance判断是否为类的实例化对象,会检测父类,而type不会检测父类</p>
<p>issubclass,判断是否为其子类</p>
<span id="more"></span>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ol>
<li>hasattr:通过字符串判断是否类属性存在</li>
<li>getattr:通过字符串获取类属性</li>
<li>setattr:通过字符串修改类属性</li>
<li>delattr:通过字符串删除类属性</li>
</ol>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo()会触发我&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo()()/f()会触发我&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">f = Foo()</span><br></pre></td></tr></table></figure>

<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>元类用来造类的</p>
<p>元类()–&gt;类–&gt;init</p>
<p>元类()()–&gt;对象—&gt;call</p>
<p>类分为几部分:类名/类体名称空间/父类们</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span></span><br><span class="line">        <span class="comment"># 控制类的逻辑代码</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(class_name,class_bases,class_dic)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 控制类实例化的参数</span></span><br><span class="line">        </span><br><span class="line">        obj = self.__new__(self)  <span class="comment"># obj就是实例化的对象</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="built_in">print</span>(obj.__dict__)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 控制类实例化的逻辑</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">metaclass=Mymeta</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h3 id="利用类的绑定方法的特性"><a href="#利用类的绑定方法的特性" class="headerlink" title="利用类的绑定方法的特性"></a>利用类的绑定方法的特性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NAME = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">AGE = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">    </span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        </span><br><span class="line">        cls.__instance = cls(NAME,AGE)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br></pre></td></tr></table></figure>

<p>People.from_conf()</p>
<p>People.from_conf()</p>
<h3 id="利用装饰器"><a href="#利用装饰器" class="headerlink" title="利用装饰器"></a>利用装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NAME = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">AGE = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">cls</span>):</span></span><br><span class="line">    cls.__instance = cls(NAME,AGE)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(kwargs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        </span><br><span class="line">        res = cls(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<p>peo1 = People()</p>
<p>peo2 = People()</p>
<h3 id="利用元类-正宗的"><a href="#利用元类-正宗的" class="headerlink" title="利用元类(正宗的)"></a>利用元类(正宗的)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NAME = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">AGE = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,class_name,class_bases,class_dict</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(class_name,class_bases,class_dict)</span><br><span class="line">        self.__instance = self(NAME,AGE)</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(kwargs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line">        </span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">metaclass=Mymeta</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">peo1 = People()</span><br><span class="line">peo2 = People()</span><br></pre></td></tr></table></figure>

<h1 id="实战之单例模式"><a href="#实战之单例模式" class="headerlink" title="实战之单例模式"></a>实战之单例模式</h1><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>
<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>
<h2 id="实现单例模式的几种方式"><a href="#实现单例模式的几种方式" class="headerlink" title="实现单例模式的几种方式"></a>实现单例模式的几种方式</h2><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>
<p><strong>mysingleton.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton = Singleton()</span><br></pre></td></tr></table></figure>

<p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from a import singleton</span><br></pre></td></tr></table></figure>

<h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span>(<span class="params">*args, **kargs</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> instance</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            instance = cls(*args, **kargs)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = A(<span class="number">2</span>)</span><br><span class="line">a2 = A(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a1.x)</span><br><span class="line"><span class="built_in">print</span>(a2.x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1 <span class="keyword">is</span> a2)</span><br></pre></td></tr></table></figure>

<h3 id="使用类方法"><a href="#使用类方法" class="headerlink" title="使用类方法"></a>使用类方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _instance=<span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance=cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">a1=Singleton.instance()</span><br><span class="line">a2=Singleton().instance()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1 <span class="keyword">is</span> a2)</span><br></pre></td></tr></table></figure>

<h3 id="基于new方法实现"><a href="#基于new方法实现" class="headerlink" title="基于new方法实现"></a>基于<strong>new</strong>方法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _instance=<span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">obj1 = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2)</span><br></pre></td></tr></table></figure>

<h3 id="基于metaclass方式实现"><a href="#基于metaclass方式实现" class="headerlink" title="基于metaclass方式实现"></a>基于metaclass方式实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    _instance=<span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            <span class="comment"># cls._instance = super().__call__(*args, **kwargs)</span></span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            cls._instance.__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">metaclass=SingletonType</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj2 = Foo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1.name)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>派生、继承、分类及菱形问题</title>
    <url>/2327de81.html</url>
    <content><![CDATA[<h1 id="类的派生"><a href="#类的派生" class="headerlink" title="类的派生"></a>类的派生</h1><ul>
<li>派生：子类中新定义的属性的这个过程叫做派生，并且需要记住子类在使用派生的属性时始终以自己的为准</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1glvtuz78n9j30dw08hdfz-20211206102016340.jpg" alt="90-类的派生-基因遗传.jpg"></p>
<span id="more"></span>

<h2 id="派生方法一-类调用"><a href="#派生方法一-类调用" class="headerlink" title="派生方法一(类调用)"></a>派生方法一(类调用)</h2><ul>
<li>指名道姓访问某一个类的函数：该方式与继承无关</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;由于学生和老师都是人，因此人都有姓名、年龄、性别&quot;&quot;&quot;</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;由于学生类没有独自的__init__()方法，因此不需要声明继承父类的__init__()方法，会自动继承&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing course&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;由于老师类有独自的__init__()方法，因此需要声明继承父类的__init__()&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender, level</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, gender)</span><br><span class="line">        self.level = level  <span class="comment"># 派生</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, stu_obj, num</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is scoring&#x27;</span> % self.name)</span><br><span class="line">        stu_obj.score = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">tea1 = OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(tea1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqz&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;, &#x27;level&#x27;: 10&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="派生方法二-super"><a href="#派生方法二-super" class="headerlink" title="派生方法二(super)"></a>派生方法二(super)</h2><ul>
<li>严格以来继承属性查找关系</li>
<li>super()会得到一个特殊的对象，该对象就是专门用来访问父类中的属性的（按照继承的关系）</li>
<li>super().<strong>init</strong>(不用为self传值)</li>
<li>super的完整用法是super(自己的类名,self),在python2中需要写完整，而python3中可以简写为super()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex, stu_id</span>):</span></span><br><span class="line">        <span class="comment"># OldboyPeople.__init__(self,name,age,sex)</span></span><br><span class="line">        <span class="comment"># super(OldboyStudent, self).__init__(name, age, sex)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age, sex)</span><br><span class="line">        self.stu_id = stu_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing course&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 19, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;stu_id&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h1><h2 id="什么是组合"><a href="#什么是组合" class="headerlink" title="什么是组合"></a>什么是组合</h2><ul>
<li>组合就是一个类的对象具备某一个属性，该属性的值是指向另外外一个类的对象</li>
</ul>
<h2 id="为什么用组合"><a href="#为什么用组合" class="headerlink" title="为什么用组合"></a>为什么用组合</h2><ul>
<li>组合是用来解决类与类之间代码冗余的问题</li>
<li>首先我们先写一个简单版的选课系统</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex, stu_id</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, sex)</span><br><span class="line">        self.stu_id = stu_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing course&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex, level</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, sex)</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, stu, num</span>):</span></span><br><span class="line">        stu.score = num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;老师[%s]为学生[%s]打分[%s]&#x27;</span> % (self.name, stu.name, num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">tea1 = OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">stu1.choose_course()  <span class="comment"># tank is choosing course</span></span><br><span class="line">tea1.score(stu1, <span class="number">100</span>)  <span class="comment"># 老师[lqz]为学生[tank]打分[100]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 19, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;stu_id&#x27;: 1, &#x27;score&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如上设计了一个选课系统，但是这个选课系统在未来一定是要修改、扩展的，因此我们需要修改上述的代码</li>
</ul>
<h2 id="如何用组合"><a href="#如何用组合" class="headerlink" title="如何用组合"></a>如何用组合</h2><ul>
<li>需求：假如我们需要给学生增添课程属性，但是又不是所有的老男孩学生一进学校就有课程属性，课程属性是学生来老男孩后选出来的，也就是说课程需要后期学生们添加进去的</li>
<li>实现思路：如果我们直接在学生中添加课程属性，那么学生刚被定义就需要添加课程属性，这就不符合我们的要求，因此我们可以使用组合能让学生未来添加课程属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, period, price</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.period = period</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        msg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        课程名：%s</span></span><br><span class="line"><span class="string">        课程周期：%s</span></span><br><span class="line"><span class="string">        课程价钱：%s</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> % (self.name, self.period, self.price)</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex, stu_id</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, sex)</span><br><span class="line">        self.stu_id = stu_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing course&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex, level</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self, name, age, sex)</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, stu, num</span>):</span></span><br><span class="line">        stu.score = num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;老师[%s]为学生[%s]打分[%s]&#x27;</span> % (self.name, stu.name, num))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创造课程</span></span><br><span class="line">python = Course(<span class="string">&#x27;python全栈开发&#x27;</span>, <span class="string">&#x27;5mons&#x27;</span>, <span class="number">3000</span>)</span><br><span class="line">python.tell_info()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">课程名：python全栈开发</span></span><br><span class="line"><span class="string">课程周期：5mons</span></span><br><span class="line"><span class="string">课程价钱：3000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">linux = Course(<span class="string">&#x27;linux运维&#x27;</span>, <span class="string">&#x27;5mons&#x27;</span>, <span class="number">800</span>)</span><br><span class="line">linux.tell_info()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">课程名：linux运维</span></span><br><span class="line"><span class="string">课程周期：5mons</span></span><br><span class="line"><span class="string">课程价钱：800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创造学生与老师</span></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">tea1 = OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>组合</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将学生、老师与课程对象关联/组合</span></span><br><span class="line">stu1.course = python</span><br><span class="line">tea1.course = linux</span><br><span class="line"></span><br><span class="line">stu1.course.tell_info()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">课程名：python全栈开发</span></span><br><span class="line"><span class="string">课程周期：5mons</span></span><br><span class="line"><span class="string">课程价钱：3000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tea1.course.tell_info()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">课程名：linux运维</span></span><br><span class="line"><span class="string">课程周期：5mons</span></span><br><span class="line"><span class="string">课程价钱：800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组合可以理解成多个人去造一个机器人，有的人造头、有的人造脚、有的人造手、有的人造躯干，大家都完工后，造躯干的人把头、脚、手拼接到自己的躯干上，因此一个机器人便造出来了</li>
</ul>
<h1 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h1><h2 id="新式类"><a href="#新式类" class="headerlink" title="新式类"></a>新式类</h2><ul>
<li>继承了object的类以及该类的子类，都是新式类</li>
<li>Python3中所有的类都是新式类</li>
</ul>
<h2 id="经典类"><a href="#经典类" class="headerlink" title="经典类"></a>经典类</h2><ul>
<li>没有继承object的类以及该类的子类，都是经典类</li>
<li>只有Python2中才有经典类</li>
</ul>
<h1 id="菱形继承问题"><a href="#菱形继承问题" class="headerlink" title="菱形继承问题"></a>菱形继承问题</h1><p>在Java和C#中子类只能继承一个父类，而Python中子类可以同时继承多个父类，如A(B,C,D)</p>
<p>如果继承关系为非菱形结构，则会按照先找B这一条分支，然后再找C这一条分支，最后找D这一条分支的顺序直到找到我们想要的属性</p>
<p>如果继承关系为菱形结构，即子类的父类最后继承了同一个类，那么属性的查找方式有两种：</p>
<ul>
<li>经典类下：深度优先</li>
<li>广度优先：广度优先</li>
<li>经典类：一条路走到黑，深度优先</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class G(object):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from G&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(G.__bases__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class E(G):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from E&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class B(E):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from B&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class F(G):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from F&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class C(F):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from C&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class D(G):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&#x27;from D&#x27;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class A(B, C, D):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&#x27;from A&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;,)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.test()  <span class="comment"># A-&gt;B-&gt;E-C-F-D-&gt;G-object</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> A</span><br></pre></td></tr></table></figure>



<h1 id="C3算法与mro-方法介绍"><a href="#C3算法与mro-方法介绍" class="headerlink" title="C3算法与mro()方法介绍"></a>C3算法与mro()方法介绍</h1><p>python到底是如何实现继承的，对于你定义的每一个类，python会计算出一个方法解析顺序(MRO)列表，这个MRO列表就是一个简单的所有基类的线性顺序列表，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.mro())  <span class="comment"># A.__mro__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.E&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.G&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A.mro():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.A&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.B&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.E&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.C&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.F&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.D&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.G&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;object&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为了实现继承，python会在MRO列表上从左到右开始查找基类，直到找到第一个匹配这个属性的类为止。</p>
<p>而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理，它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<ol>
<li>子类会先于父类被检查</li>
<li>多个父类会根据它们在列表中的顺序被检查</li>
<li>如果对下一个类存在两个合法的选择，选择第一个父类</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>调用父类、super()、多态</title>
    <url>/3b14afe5.html</url>
    <content><![CDATA[<h1 id="单独调用父类的方法"><a href="#单独调用父类的方法" class="headerlink" title="单独调用父类的方法"></a>单独调用父类的方法</h1><p>需求：编写一个类，然后再写一个子类进行继承，使用子类去调用父类的方法1。</p>
<p>使用方法1打印： 胖子老板，来包槟榔。</p>
<span id="more"></span>
<blockquote>
<p>那么先写一个胖子老板的父类，执行一下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的name是%s&#x27;</span> % self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init调用结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ff = FatFather(<span class="string">&quot;胖子老板的父亲&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行一下这个胖子老板父类的构造方法<strong>init</strong> 如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">FatFather的init开始被调用</span></span><br><span class="line"><span class="string">FatFather的name是胖子老板的父亲</span></span><br><span class="line"><span class="string">FatFather的init调用结束</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>好了，那么下面来写一个子类，也就是胖子老板类，继承上面的类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 胖子老板的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用FatFather类的name是%s&#x27;</span> % self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init调用结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板类 继承 FatFather 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBoss</span>(<span class="params">FatFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hobby</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的类被调用啦！&#x27;</span>)</span><br><span class="line">        self.hobby = hobby</span><br><span class="line">        FatFather.__init__(self, name)  <span class="comment"># 直接调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 的爱好是 %s&quot;</span> % (name, self.hobby))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#ff = FatFather(&quot;胖子老板的父亲&quot;)</span></span><br><span class="line">    fatboss = FatBoss(<span class="string">&quot;胖子老板&quot;</span>, <span class="string">&quot;打斗地主&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在这上面的代码中，我使用FatFather.<strong>init</strong>(self,name)直接调用父类的方法。<br>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">胖子老板的类被调用啦！</span></span><br><span class="line"><span class="string">FatFather的init开始被调用</span></span><br><span class="line"><span class="string">调用FatFather类的name是胖子老板</span></span><br><span class="line"><span class="string">FatFather的init调用结束</span></span><br><span class="line"><span class="string">胖子老板 的爱好是 打斗地主</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="super-方法基本概念"><a href="#super-方法基本概念" class="headerlink" title="super() 方法基本概念"></a>super() 方法基本概念</h1><blockquote>
<p>除了直接使用 FatFather.<strong>init</strong>(self,name) 的方法，还可以使用super()方法来调用。</p>
</blockquote>
<p>那么首先需要看super()方法的描述和语法理解一下super() 方法的使用。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><strong>super() 函数是用于调用父类(超类)的一个方法。</strong></p>
<p>super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。</p>
<p>MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以下是 super() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>(<span class="built_in">type</span>[, <span class="built_in">object</span>-<span class="keyword">or</span>-<span class="built_in">type</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数</p>
</blockquote>
<ul>
<li>type – 类</li>
<li>object-or-type – 类，一般是 self</li>
</ul>
<blockquote>
<p>Python3.x 和 Python2.x 的一个区别是: Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx :</p>
</blockquote>
<ul>
<li>Python3.x 实例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().add(x)</span><br></pre></td></tr></table></figure>

<ul>
<li>Python2.x 实例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A(object):   # Python2.x 记得继承 object</span><br><span class="line">    pass</span><br><span class="line">class B(A):</span><br><span class="line">    def add(self, x):</span><br><span class="line">        super(B, self).add(x)</span><br></pre></td></tr></table></figure>

<h2 id="单继承使用super"><a href="#单继承使用super" class="headerlink" title="单继承使用super()"></a>单继承使用super()</h2><ul>
<li>使用super() 方法来改写刚才胖子老板继承父类的 <strong>init</strong> 构造方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 胖子老板的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用FatFather类的name是%s&#x27;</span> % self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init调用结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板类 继承 FatFather 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBoss</span>(<span class="params">FatFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hobby</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的类被调用啦！&#x27;</span>)</span><br><span class="line">        self.hobby = hobby</span><br><span class="line">        <span class="comment">#FatFather.__init__(self,name)   # 直接调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 的爱好是 %s&quot;</span> % (name, self.hobby))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#ff = FatFather(&quot;胖子老板的父亲&quot;)</span></span><br><span class="line">    fatboss = FatBoss(<span class="string">&quot;胖子老板&quot;</span>, <span class="string">&quot;打斗地主&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>从上面使用super方法的时候，因为是单继承，直接就可以使用了。<br>运行如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">胖子老板的类被调用啦！</span></span><br><span class="line"><span class="string">FatFather的init开始被调用</span></span><br><span class="line"><span class="string">调用FatFather类的name是胖子老板</span></span><br><span class="line"><span class="string">FatFather的init调用结束</span></span><br><span class="line"><span class="string">胖子老板 的爱好是 打斗地主</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>那么为什么说<strong>单继承</strong>直接使用就可以呢？因为super()方法如果多继承的话，会涉及到一个MRO(<strong>继承父类方法时的顺序表</strong>) 的调用排序问题。</p>
<blockquote>
<p>下面可以打印一下看看单继承的MRO顺序(FatBoss.<strong>mro</strong>)。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 胖子老板的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用FatFather类的name是%s&#x27;</span> % self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init调用结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板类 继承 FatFather 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBoss</span>(<span class="params">FatFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hobby</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的类被调用啦！&#x27;</span>)</span><br><span class="line">        self.hobby = hobby</span><br><span class="line">        <span class="comment">#FatFather.__init__(self,name)   # 直接调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 的爱好是 %s&quot;</span> % (name, self.hobby))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印FatBoss类的MRO&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(FatBoss.__mro__)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=========== 下面按照 MRO 顺序执行super方法 =============&quot;</span>)</span><br><span class="line">    fatboss = FatBoss(<span class="string">&quot;胖子老板&quot;</span>, <span class="string">&quot;打斗地主&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>上面的代码使用 FatBoss.<strong>mro</strong> 可以打印出 FatBoss这个类经过 python解析器的 C3算法计算过后的继承调用顺序。<br>运行如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印FatBoss类的MRO</span></span><br><span class="line"><span class="string">(&lt;class &#x27;__main__.FatBoss&#x27;&gt;, &lt;class &#x27;__main__.FatFather&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=========== 下面按照 MRO 顺序执行super方法 ===========</span></span><br><span class="line"><span class="string">胖子老板的类被调用啦！</span></span><br><span class="line"><span class="string">FatFather的init开始被调用</span></span><br><span class="line"><span class="string">调用FatFather类的name是胖子老板</span></span><br><span class="line"><span class="string">FatFather的init调用结束</span></span><br><span class="line"><span class="string">胖子老板 的爱好是 打斗地主</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面的结果 (&lt;class ‘**main**.FatBoss’&gt;, &lt;class ‘**main**.FatFather’&gt;, &lt;class ‘object’&gt;) 可以看出，super() 方法在 FatBoss 会直接调用父类是 FatFather ，所以单继承是没问题的。</p>
<p>那么如果多继承的话，会有什么问题呢？</p>
<h2 id="多继承使用super"><a href="#多继承使用super" class="headerlink" title="多继承使用super()"></a>多继承使用super()</h2><p>假设再写一个胖子老板的女儿类，和 胖子老板的老婆类，此时女儿需要同时继承 两个类（胖子老板类，胖子老板老婆类）。</p>
<p>因为胖子老板有一个爱好，胖子老板的老婆需要干活干家务，那么女儿需要帮忙同时兼顾。</p>
<p>此时女儿就是需要继承使用这两个父类的方法了，那么该如何去写呢？</p>
<p>下面来看看实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 胖子老板的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 开始调用 FatFather  ========================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用FatFather类的name是%s&#x27;</span> % self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FatFather的init调用结束&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 结束调用 FatFather  ========================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板类 继承 FatFather 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBoss</span>(<span class="params">FatFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hobby, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 开始调用 FatBoss  ========================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的类被调用啦！&#x27;</span>)</span><br><span class="line">        <span class="comment">#super().__init__(name)</span></span><br><span class="line">        <span class="comment">## 因为多继承传递的参数不一致，所以使用不定参数</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 的爱好是 %s&quot;</span> % (name, hobby))</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 结束调用 FatBoss  ========================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板的老婆类 继承 FatFather类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBossWife</span>(<span class="params">FatFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, housework, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 开始调用 FatBossWife  ========================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的老婆类被调用啦！要学会干家务&#x27;</span>)</span><br><span class="line">        <span class="comment">#super().__init__(name)</span></span><br><span class="line">        <span class="comment">## 因为多继承传递的参数不一致，所以使用不定参数</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 需要干的家务是 %s&quot;</span> % (name, housework))</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=============== 结束调用 FatBossWife  ========================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胖子老板的女儿类 继承 FatBoss FatBossWife类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatBossGril</span>(<span class="params">FatBoss, FatBossWife</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, hobby, housework</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;胖子老板的女儿类被调用啦！要学会干家务，还要会帮胖子老板斗地主&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, hobby, housework)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印FatBossGril类的MRO&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(FatBossGril.__mro__)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========== 下面按照 MRO 顺序执行super方法 ============&quot;</span>)</span><br><span class="line">    gril = FatBossGril(<span class="string">&quot;胖子老板&quot;</span>, <span class="string">&quot;打斗地主&quot;</span>, <span class="string">&quot;拖地&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印FatBossGril类的MRO</span></span><br><span class="line"><span class="string">(&lt;class &#x27;__main__.FatBossGril&#x27;&gt;, &lt;class &#x27;__main__.FatBoss&#x27;&gt;, &lt;class &#x27;__main__.FatBossWife&#x27;&gt;, &lt;class &#x27;__main__.FatFather&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=========== 下面按照 MRO 顺序执行super方法 =============</span></span><br><span class="line"><span class="string">胖子老板的女儿类被调用啦！要学会干家务，还要会帮胖子老板斗地主</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 开始调用 FatBoss  ========================</span></span><br><span class="line"><span class="string">胖子老板的类被调用啦！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 开始调用 FatBossWife =====================</span></span><br><span class="line"><span class="string">胖子老板的老婆类被调用啦！要学会干家务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 开始调用 FatFather  ========================</span></span><br><span class="line"><span class="string">FatFather的init开始被调用</span></span><br><span class="line"><span class="string">调用FatFather类的name是胖子老板</span></span><br><span class="line"><span class="string">FatFather的init调用结束</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 结束调用 FatFather  ========================</span></span><br><span class="line"><span class="string">胖子老板 需要干的家务是 拖地</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 结束调用 FatBossWife  ======================</span></span><br><span class="line"><span class="string">胖子老板 的爱好是 打斗地主</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============== 结束调用 FatBoss  =======================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面的运行结果来看，我特意给每个类的调用开始以及结束都进行打印标识，可以看到。</p>
<p>每个类开始调用是根据MRO顺序进行开始，然后逐个进行结束的。</p>
<p>还有就是由于因为需要继承不同的父类，参数不一定。</p>
<p>所以，所有的父类都应该加上不定参数*args , **kwargs ，不然参数不对应是会报错的。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>super().<strong>init</strong>相对于类名.<strong>init</strong>，在单继承上用法基本无差</li>
<li>但在多继承上有区别，super方法能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次，可以尝试写个代码来看输出结果</li>
<li>多继承时，使用super方法，对父类的传参数，应该是由于python中super的算法导致的原因，必须把参数全部传递，否则会报错</li>
<li>单继承时，使用super方法，则不能全部传递，只能传父类方法所需的参数，否则会报错</li>
<li>多继承时，相对于使用类名.<strong>init</strong>方法，要把每个父类全部写一遍, 而使用super方法，只需写一句话便执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</li>
</ul>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><blockquote>
<p>以下的代码的输出将是什么? 说出你的答案并解释。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Parent.x, Child1.x, Child2.x)  <span class="comment"># 1 1 1</span></span><br><span class="line"></span><br><span class="line">Child1.x = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(Parent.x, Child1.x, Child2.x)  <span class="comment"># 1 2 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：Child1已经拥有了属于自己的x</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Parent.x = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(Parent.x, Child1.x, Child2.x)  <span class="comment"># 3 2 3</span></span><br></pre></td></tr></table></figure>

<p>很多人喜欢将多态与多态性二者混为一谈，然后百思不得其解，其实只要分开看，就会很明朗。</p>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）</p>
<ol>
<li>序列数据类型有多种形态：字符串，列表，元组</li>
<li>动物有多种形态：人，狗，猪</li>
</ol>
<h2 id="动物的多种形态"><a href="#动物的多种形态" class="headerlink" title="动物的多种形态"></a>动物的多种形态</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动物有多种形态：人类、猪、狗</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>  <span class="comment"># 子类约定俗称的必须实现这个方法</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;子类必须实现这个方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人正在走&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pig is walking&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dog is running&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1 = People()</span><br><span class="line">pig1 = Pig()</span><br><span class="line">d1 = Dog()</span><br><span class="line"></span><br><span class="line">peo1.run()  <span class="comment"># 人正在走</span></span><br><span class="line">pig1.run()  <span class="comment"># pig is walking</span></span><br><span class="line">d1.run()  <span class="comment"># dog is running</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span>  <span class="comment"># 同一类事物:动物</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod  </span><span class="comment"># 上述代码子类是约定俗称的实现这个方法，加上@abc.abstractmethod装饰器后严格控制子类必须实现这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;子类必须实现这个方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 动物的形态之一:人</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;say hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 动物的形态之二:狗</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;say wangwang&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 动物的形态之三:猪</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;say aoao&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo2 = People()</span><br><span class="line">pig2 = Pig()</span><br><span class="line">d2 = Dog()</span><br><span class="line"></span><br><span class="line">peo2.talk()  <span class="comment"># say hello</span></span><br><span class="line">pig2.talk()  <span class="comment"># say aoao</span></span><br><span class="line">d2.talk()  <span class="comment"># say wangwang</span></span><br></pre></td></tr></table></figure>



<h2 id="文件的多种形态"><a href="#文件的多种形态" class="headerlink" title="文件的多种形态"></a>文件的多种形态</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件有多种形态：文件、文本文件、可执行文件</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span>  <span class="comment"># 同一类事物:文件</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span>(<span class="params">File</span>):</span>  <span class="comment"># 文件的形态之一:文本文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;open file&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeFile</span>(<span class="params">File</span>):</span>  <span class="comment"># 文件的形态之二:可执行文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;execute file&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = Text()</span><br><span class="line">exe_file = ExeFile()</span><br><span class="line"></span><br><span class="line">text.click()  <span class="comment"># open file</span></span><br><span class="line">exe_file.click()  <span class="comment"># execute file</span></span><br></pre></td></tr></table></figure>

<h1 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h1><p>注意：多态与多态性是两种概念</p>
<p>多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</p>
<h2 id="动物形态多态性的使用"><a href="#动物形态多态性的使用" class="headerlink" title="动物形态多态性的使用"></a>动物形态多态性的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多态性：一种调用方式，不同的执行效果（多态性）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span></span><br><span class="line">    obj.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(peo1)  <span class="comment"># 人正在走</span></span><br><span class="line">func(pig1)  <span class="comment"># pig is walking</span></span><br><span class="line">func(d1)  <span class="comment"># dog is running</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多态性依赖于：继承</span></span><br><span class="line"><span class="comment"># 多态性：定义统一的接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span>  <span class="comment"># obj这个参数没有类型限制，可以传入不同类型的值</span></span><br><span class="line">    obj.talk()  <span class="comment"># 调用的逻辑都一样，执行的结果却不一样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(peo2)  <span class="comment"># say hello</span></span><br><span class="line">func(pig2)  <span class="comment"># say aoao</span></span><br><span class="line">func(d2)  <span class="comment"># say wangwang</span></span><br></pre></td></tr></table></figure>

<h2 id="文件形态多态性的使用"><a href="#文件形态多态性的使用" class="headerlink" title="文件形态多态性的使用"></a>文件形态多态性的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span></span><br><span class="line">    obj.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(text)  <span class="comment"># open file</span></span><br><span class="line">func(exe_file)  <span class="comment"># execute file</span></span><br></pre></td></tr></table></figure>

<h2 id="序列数据类型多态性的使用"><a href="#序列数据类型多态性的使用" class="headerlink" title="序列数据类型多态性的使用"></a>序列数据类型多态性的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(obj))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 5</span></span><br><span class="line">func([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 3</span></span><br><span class="line">func((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<p>综上可以说，多态性是一个接口（函数func）的多种实现（如obj.run()，obj.talk()，obj.click()，len(obj)）</p>
<h1 id="多态性的好处"><a href="#多态性的好处" class="headerlink" title="多态性的好处"></a>多态性的好处</h1><p>其实大家从上面多态性的例子可以看出，我们并没有增加新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？</p>
<ol>
<li>增加了程序的灵活性：以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)</li>
<li>增加了程序额可扩展性：通过继承Animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 属于动物的另外一种形态：猫</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;say miao&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">animal</span>):</span>  <span class="comment"># 对于使用者来说，自己的代码根本无需改动</span></span><br><span class="line">    animal.talk()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat1 = Cat()  <span class="comment"># 实例出一只猫</span></span><br><span class="line">func(cat1)  <span class="comment"># say miao 甚至连调用方式也无需改变，就能调用猫的talk功能</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上述代码我们新增了一个形态Cat，由Cat类产生的实例cat1，使用者可以在完全不需要修改自己代码的情况下。使用和人、狗、猪一样的方式调用cat1的talk方法，即func(cat1)</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>多态：同一种事物的多种形态，动物分为人类，猪类（在定义角度）<br>多态性：一种调用方式，不同的执行效果（多态性）</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>封装和property特性</title>
    <url>/84aad6a1.html</url>
    <content><![CDATA[<h1 id="封装什么"><a href="#封装什么" class="headerlink" title="封装什么"></a>封装什么</h1><ul>
<li>你钱包的有多少钱（数据的封装）</li>
<li>你的性取向（数据的封装）</li>
<li>你撒尿的具体功能是怎么实现的（方法的封装）<span id="more"></span>
<h1 id="为什么要封装"><a href="#为什么要封装" class="headerlink" title="为什么要封装"></a>为什么要封装</h1></li>
</ul>
<p>封装数据的主要原因是：保护隐私（作为男人的你，脸上就写着：我喜欢男人，你害怕么？）</p>
<p>封装方法的主要原因是：隔离复杂度（快门就是傻瓜相机为傻瓜们提供的方法，该方法将内部复杂的照相功能都隐藏起来了，比如你不必知道你自己的尿是怎么流出来的，你直接掏出自己的接口就能用尿这个功能）</p>
<p>提示：在编程语言里，对外提供的接口（接口可理解为了一个入口），就是函数，称为接口函数，这与接口的概念还不一样，接口代表一组接口函数的集合体。</p>
<h1 id="两个层面的封装"><a href="#两个层面的封装" class="headerlink" title="两个层面的封装"></a>两个层面的封装</h1><p>封装其实分为两个层面，但无论哪种层面的封装，都要对外界提供好访问你内部隐藏内容的接口（接口可以理解为入口，有了这个入口，使用者无需且不能够直接访问到内部隐藏的细节，只能走接口，并且我们可以在接口的实现上附加更多的处理逻辑，从而严格控制使用者的访问）</p>
<h2 id="第一个层面"><a href="#第一个层面" class="headerlink" title="第一个层面"></a>第一个层面</h2><p>第一个层面的封装（什么都不用做）：创建类和对象会分别创建二者的名称空间，我们只能用类名.或者obj.的方式去访问里面的名字，这本身就是一种封装</p>
<p>注意：对于这一层面的封装（隐藏），类名.和实例名.就是访问隐藏属性的接口</p>
<h2 id="第二个层面"><a href="#第二个层面" class="headerlink" title="第二个层面"></a>第二个层面</h2><p>第二个层面的封装：类中把某些属性和方法隐藏起来(或者说定义成私有的)，只在类的内部使用、外部无法访问，或者留下少量接口（函数）供外部访问。</p>
<p>在python中用双下划线的方式实现隐藏属性（设置成私有的）</p>
<p>类中所有双下划线开头的名称如<strong>x都会自动变形成：_类名</strong>x的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    __N = <span class="number">0</span>  <span class="comment"># 类的数据属性就应该是共享的,但是语法上是可以把类的数据属性设置成私有的如__N,会变形为_A__N</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__X = <span class="number">10</span>  <span class="comment"># 变形为self._A__X</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__foo</span>(<span class="params">self</span>):</span>  <span class="comment"># 变形为_A__foo</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__foo()  <span class="comment"># 只有在类内部才可以通过__foo的形式访问到.</span></span><br></pre></td></tr></table></figure>

<p>这种自动变形的特点：</p>
<ol>
<li>类中定义的**x只能在内部使用，如self.**x，引用的就是变形的结果。</li>
<li>这种变形其实正是针对内部的变形，在外部是无法通过__x这个名字访问到的。</li>
<li>在子类定义的<strong>x不会覆盖在父类定义的</strong>x，因为子类中变形成了：_子类名<strong>x,而父类中变形成了：_父类名</strong>x，即双下滑线开头的属性在继承给子类时，子类是无法覆盖的。</li>
</ol>
<p><strong>注意：对于这一层面的封装（隐藏），我们需要在类中定义一个函数（接口函数）在它内部访问被隐藏的属性，然后外部就可以使用了</strong></p>
<p>这种变形需要注意的问题是：</p>
<ol>
<li>这种机制也并没有真正意义上限制我们从外部直接访问属性，知道了类名和属性名就可以拼出名字：_类名<strong>属性，然后就可以访问了，如a._A</strong>N</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象测试</span></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a._A__N)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象测试</span></span><br><span class="line"><span class="built_in">print</span>(a._A__X)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类测试</span></span><br><span class="line"><span class="built_in">print</span>(A._A__N)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类测试</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(A._A__X)  <span class="comment"># 对象私有的属性</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># type object &#x27;A&#x27; has no attribute &#x27;_A__X&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>变形的过程只在类的定义时发生一次,在定义后的赋值操作，不会变形</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.__dict__)  <span class="comment"># &#123;&#x27;_A__X&#x27;: 10&#125;</span></span><br><span class="line"></span><br><span class="line">a.__Y = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a.__dict__)  <span class="comment"># &#123;&#x27;_A__X&#x27;: 10, &#x27;__Y&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在继承中，父类如果不想让子类覆盖自己的方法，可以将方法定义为私有的</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正常情况</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fa()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把fa定义成私有的，即__fa</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span>(<span class="params">self</span>):</span>  <span class="comment"># 在定义时就变形为_A__fa</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__fa()  <span class="comment"># 只会与自己所在的类为准,即调用_A__fa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> A</span><br></pre></td></tr></table></figure>

<h1 id="私有模块"><a href="#私有模块" class="headerlink" title="私有模块"></a>私有模块</h1><p>python并不会真的阻止你访问私有的属性，模块也遵循这种约定，如果模块中的变量名_private_module以单下划线开头，那么from module import *时不能被导入该变量，但是你from module import _private_module依然是可以导入该变量的</p>
<p>其实很多时候你去调用一个模块的功能时会遇到单下划线开头的(socket._socket,sys._home,sys._clear_type_cache),这些都是私有的，原则上是供内部调用的，作为外部的你，一意孤行也是可以用的，只不过显得稍微傻逼一点点</p>
<p>python要想与其他编程语言一样，严格控制属性的访问权限，只能借助内置方法如<strong>getattr</strong>，详见面向对象高级部分。</p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul>
<li>多态是在定义角度</li>
<li>多态性是在调用角度（使用角度）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fa()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__fa()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fa</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> A</span><br></pre></td></tr></table></figure>

<p>注：__名字，这种语法只在定义的时候才有变形的效果，如果类或对象已经产生了，就不会有变形的效果了。</p>
<h1 id="什么是-property特性"><a href="#什么是-property特性" class="headerlink" title="什么是 property特性"></a>什么是 property特性</h1><ul>
<li>property装饰器用于将被装饰的方法伪装成一个数据属性，在使用时可以不用加括号而直接使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ############### 定义 ###############</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义property属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############### 调用 ###############</span></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func()  <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop  <span class="comment"># 调用property属性</span></span><br></pre></td></tr></table></figure>

<p>如下的例子用于说明如何定一个简单的property属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = Goods()</span><br><span class="line"><span class="built_in">print</span>(g.size)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<p>property属性的定义和调用要注意一下几点：</p>
<ol>
<li><p>定义时，在实例方法的基础上添加 @property 装饰器；并且仅有一个self参数</p>
</li>
<li><p>调用时，无需括号</p>
</li>
</ol>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>对于京东商城中显示电脑主机的列表页面，每次请求不可能把数据库中的所有内容都显示到页面上，而是通过分页的功能局部显示，所以在向数据库中请求数据时就要显示的指定获取从第m条到第n条的所有数据 这个分页的功能包括：</p>
<ol>
<li>根据用户请求的当前页和总数据条数计算出 m 和 n</li>
<li>根据m 和 n 去数据库中请求数据</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ############### 定义 ###############</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, current_page</span>):</span></span><br><span class="line">        <span class="comment"># 用户当前请求的页码（第一页、第二页...）</span></span><br><span class="line">        self.current_page = current_page</span><br><span class="line">        <span class="comment"># 每页默认显示10条数据</span></span><br><span class="line">        self.per_items = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        val = (self.current_page - <span class="number">1</span>) * self.per_items</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">self</span>):</span></span><br><span class="line">        val = self.current_page * self.per_items</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############### 调用 ###############</span></span><br><span class="line">p = Pager(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(p.start)  <span class="comment"># 0 就是起始值，即：m</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.end)  <span class="comment"># 10 就是结束值，即：n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从上述可见Python的property属性的功能是：property属性内部进行一系列的逻辑计算，最终将计算结果返回。</p>
<h1 id="property属性的两种方式"><a href="#property属性的两种方式" class="headerlink" title="property属性的两种方式"></a>property属性的两种方式</h1><ol>
<li>装饰器 即：在方法上应用装饰器（推荐使用）</li>
<li>类属性 即：在类中定义值为property对象的类属性（Python2历史遗留）</li>
</ol>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在类的实例方法上应用 @property 装饰器</p>
<p>Python中的类有经典类和新式类，新式类的属性比经典类的属性丰富。（ 如果类继object，那么该类是新式类 ）</p>
<p>经典类，具有一种 @property 装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ############### 定义 ###############</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;laowang&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############### 调用 ###############</span></span><br><span class="line">obj = Goods()</span><br><span class="line">result = obj.price  <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># laowang</span></span><br></pre></td></tr></table></figure>

<p>新式类，具有三种 @property 装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># ############### 定义 ###############</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;python3中默认继承object类</span></span><br><span class="line"><span class="string">        以python2、3执行此程序的结果不同，因为只有在python3中才有@xxx.setter  @xxx.deleter</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@property&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.setter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.deleter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############### 调用 ###############</span></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price  <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"></span><br><span class="line">obj.price = <span class="number">123</span>  <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将  123 赋值给方法的参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@price.setter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj.price  <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@price.deleter</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><strong>经典类中的属性只有一种访问方式，其对应被 @property 修饰的方法</strong></li>
<li><strong>新式类中的属性有三种访问方式，并分别对应了三个被 @property、@方法名.setter、@方法名.deleter 修饰的方法</strong></li>
</ul>
<p>由于新式类中具有三种访问方式，我们可以根据它们几个属性的访问特点，分别将三个方法定义为对同一个属性：获取、修改、删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;del&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line"><span class="built_in">print</span>(obj.price)  <span class="comment"># 80.0 获取商品价格</span></span><br><span class="line"></span><br><span class="line">obj.price = <span class="number">200</span>  <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="built_in">print</span>(obj.price) <span class="comment"># 160.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj.price  <span class="comment"># 删除商品原价</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类属性方式"><a href="#类属性方式" class="headerlink" title="类属性方式"></a>类属性方式</h2><p>创建值为property对象的类属性</p>
<p>注意：<strong>当使用类属性的方式创建property属性时，经典类和新式类无区别</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR  <span class="comment"># 自动调用get_bar方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(reuslt)  <span class="comment"># laowang</span></span><br></pre></td></tr></table></figure>

<p>property方法中有个四个参数</p>
<ol>
<li>第一个参数是方法名，调用 对象.属性 时自动触发执行方法</li>
<li>第二个参数是方法名，调用 对象.属性 ＝ XXX 时自动触发执行方法</li>
<li>第三个参数是方法名，调用 del 对象.属性 时自动触发执行方法</li>
<li>第四个参数是字符串，调用 对象.属性.<strong>doc</strong> ，此参数是该属性的描述信息</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_bar</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;必须两个参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;set value&#x27;</span> + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deleter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar, set_bar, del_bar, <span class="string">&quot;description...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">getter...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动调用第二个参数中定义的方法：set_bar方法，并将“alex”当作参数传入</span></span><br><span class="line">obj.BAR = <span class="string">&quot;alex&quot;</span>  <span class="comment"># setter...</span></span><br><span class="line"></span><br><span class="line">desc = Foo.BAR.__doc__  <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br><span class="line"><span class="built_in">print</span>(desc)  <span class="comment"># description...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动调用第三个参数中定义的方法：del_bar方法</span></span><br><span class="line"><span class="keyword">del</span> obj.BAR  <span class="comment"># deleter...</span></span><br></pre></td></tr></table></figure>

<p>由于类属性方式创建property属性具有3种访问方式，我们可以根据它们几个属性的访问特点，分别将三个方法定义为对同一个属性：获取、修改、删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_price</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line">    PRICE = <span class="built_in">property</span>(get_price, set_price, del_price, <span class="string">&#x27;价格属性描述...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.PRICE  <span class="comment"># 80.0 获取商品价格</span></span><br><span class="line"></span><br><span class="line">obj.PRICE = <span class="number">200</span>  <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="built_in">print</span>(obj.PRICE)  <span class="comment"># 160.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj.PRICE  <span class="comment"># 删除商品原价</span></span><br></pre></td></tr></table></figure>

<p>综上所述:</p>
<ul>
<li>定义property属性共有两种方式，分别是【装饰器】和【类属性】，而【装饰器】方式针对经典类和新式类又有所不同。</li>
<li>通过使用property属性，能够简化调用者在获取数据的流程</li>
</ul>
<h1 id="property-类的封装"><a href="#property-类的封装" class="headerlink" title="property+类的封装"></a>property+类的封装</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property  </span><span class="comment"># 查看obj.name</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;名字是：%s&gt;&#x27;</span> % self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1 = People(<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(peo1.name)  <span class="comment"># &lt;名字是：lqz&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    peo1.name = <span class="string">&#x27;EGON&#x27;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># can&#x27;t set attribute</span></span><br></pre></td></tr></table></figure>

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="私有属性添加getter和setter方法"><a href="#私有属性添加getter和setter方法" class="headerlink" title="私有属性添加getter和setter方法"></a>私有属性添加getter和setter方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="使用property升级getter和setter方法"><a href="#使用property升级getter和setter方法" class="headerlink" title="使用property升级getter和setter方法"></a>使用property升级getter和setter方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个属性，当对这个money设置值时调用setMoney,当获取值时调用getMoney</span></span><br><span class="line">    money = <span class="built_in">property</span>(getMoney, setMoney)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span>  <span class="comment"># 调用setMoney方法</span></span><br><span class="line"><span class="built_in">print</span>(a.money)  <span class="comment"># 100 调用getMoney方法</span></span><br></pre></td></tr></table></figure>

<h2 id="使用property取代getter和setter方法"><a href="#使用property取代getter和setter方法" class="headerlink" title="使用property取代getter和setter方法"></a>使用property取代getter和setter方法</h2><p>重新实现一个属性的设置和读取方法,可做边界判定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器对money进行装饰，那么会自动添加一个叫money的属性，当调用获取money的值时，调用装饰的方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器对money进行装饰，当对money设置值时，调用装饰的方法</span></span><br><span class="line"><span class="meta">    @money.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a.money)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><p>计算圆的周长和面积</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, radius</span>):</span>  <span class="comment"># 圆的半径radius</span></span><br><span class="line">        self.radius = radius</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> math.pi * self.radius**<span class="number">2</span>  <span class="comment"># 计算面积</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * math.pi * self.radius  <span class="comment"># 计算周长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Circle(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(c.radius)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以向访问数据属性一样去访问area，会触发一个函数的执行，动态计算出一个值</span></span><br><span class="line"><span class="built_in">print</span>(c.area)  <span class="comment"># 314.1592653589793 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.perimeter)  <span class="comment"># 62.83185307179586 同上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>绑定方法及面向对象小结</title>
    <url>/4b65bd78.html</url>
    <content><![CDATA[<h1 id="绑定方法"><a href="#绑定方法" class="headerlink" title="绑定方法"></a>绑定方法</h1><h2 id="对象的绑定方法"><a href="#对象的绑定方法" class="headerlink" title="对象的绑定方法"></a>对象的绑定方法</h2><p>在类中没有被任何装饰器修饰的方法就是 绑定到对象的方法，这类方法专门为对象定制。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    country = <span class="string">&quot;China&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">str</span>(self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;Kitty&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;Kitty&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="built_in">print</span>(Person.__dict__[<span class="string">&#x27;speak&#x27;</span>])  <span class="comment"># &lt;function Person.speak at 0x10f0dd268&gt;</span></span><br></pre></td></tr></table></figure>

<p>speak即为绑定到对象的方法，这个方法不在对象的名称空间中，而是在类的名称空间中。</p>
<p>通过对象调用绑定到对象的方法，会有一个自动传值的过程，即自动将当前对象传递给方法的第一个参数（self，一般都叫self，也可以写成别的名称）；若是使用类调用，则第一个参数需要手动传值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(<span class="string">&#x27;Kitty&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># 通过对象调用</span></span><br><span class="line">p.speak()  <span class="comment"># Kitty, 18 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 通过类调用</span></span><br><span class="line">Person.speak(p)  <span class="comment"># Kitty, 18</span></span><br></pre></td></tr></table></figure>

<h2 id="类的绑定方法"><a href="#类的绑定方法" class="headerlink" title="类的绑定方法"></a>类的绑定方法</h2><p>类中使用 @classmethod 修饰的方法就是绑定到类的方法。这类方法专门为类定制。通过类名调用绑定到类的方法时，会将类本身当做参数传给类方法的第一个参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operate_database</span>():</span></span><br><span class="line">    host = <span class="string">&#x27;192.168.0.5&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    user = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">cls</span>):</span>  <span class="comment"># 约定俗成第一个参数名为cls，也可以定义为其他参数名</span></span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(cls.host + <span class="string">&#x27;:&#x27;</span> + cls.port + <span class="string">&#x27; &#x27;</span> + cls.user + <span class="string">&#x27;/&#x27;</span> + cls.password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Operate_database.connect()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Operate_database&#x27;&gt;</span></span><br><span class="line"><span class="string">192.168.0.5:3306 abc/123456</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>通过对象也可以调用，只是默认传递的第一个参数还是这个对象对应的类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Operate_database().connect()  <span class="comment"># 输出结果一致</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Operate_database&#x27;&gt;</span></span><br><span class="line"><span class="string">192.168.0.5:3306 abc/123456</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="非绑定方法"><a href="#非绑定方法" class="headerlink" title="非绑定方法"></a>非绑定方法</h1><p>在类内部使用 @staticmethod 修饰的方法即为非绑定方法，这类方法和普通定义的函数没有区别，不与类或对象绑定，谁都可以调用，且没有自动传值的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operate_database</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port, user, password</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_passwrod</span>(<span class="params">salt, password</span>):</span></span><br><span class="line">        m = hashlib.md5(salt.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 加盐处理</span></span><br><span class="line">        m.update(password.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hash_password = Operate_database.get_passwrod(<span class="string">&#x27;lala&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)  <span class="comment"># 通过类来调用</span></span><br><span class="line"><span class="built_in">print</span>(hash_password)  <span class="comment"># f7a1cc409ed6f51058c2b4a94a7e1956</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Operate_database(<span class="string">&#x27;192.168.0.5&#x27;</span>, <span class="string">&#x27;3306&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">hash_password = p.get_passwrod(p.user, p.password)  <span class="comment"># 也可以通过对象调用</span></span><br><span class="line"><span class="built_in">print</span>(hash_password)  <span class="comment"># 0659c7992e268962384eb17fafe88364</span></span><br></pre></td></tr></table></figure>

<p>简而言之，非绑定方法就是将普通方法放到了类的内部。</p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>假设我们现在有一个需求，需要让Mysql实例化出的对象可以从文件settings.py中读取数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">IP = <span class="string">&#x27;1.1.1.10&#x27;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">NET = <span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ip, port, net</span>):</span></span><br><span class="line">        self.uid = self.create_uid()</span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">        self.net = net</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看ip地址和端口号&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s:%s&#x27;</span> % (self.ip, self.port))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(IP, NET, PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不与任何人绑定&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_uid</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;随机生成一个字符串&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> uuid.uuid1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的实例化方式：类名()</span></span><br><span class="line">obj = Mysql(<span class="string">&#x27;10.10.0.9&#x27;</span>, <span class="number">3307</span>, <span class="number">27</span>)</span><br><span class="line">obj.tell_info()  <span class="comment"># 10.10.0.9:3307</span></span><br></pre></td></tr></table></figure>

<h2 id="绑定方法小结"><a href="#绑定方法小结" class="headerlink" title="绑定方法小结"></a>绑定方法小结</h2><p>如果函数体代码需要用外部传入的类，则应该将该函数定义成绑定给类的方法</p>
<p>如果函数体代码需要用外部传入的对象，则应该将该函数定义成绑定给对象的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一种新的实例化方式：从配置文件中读取配置完成实例化</span></span><br><span class="line">obj1 = Mysql.from_conf()</span><br><span class="line">obj1.tell_info()  <span class="comment"># 1.1.1.10:27</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.tell_info)  <span class="comment"># &lt;bound method Mysql.tell_info of &lt;__main__.Mysql object at 0x10f469240&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.from_conf)  <span class="comment"># &lt;bound method Mysql.from_conf of &lt;class &#x27;__main__.Mysql&#x27;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="非绑定方法小结"><a href="#非绑定方法小结" class="headerlink" title="非绑定方法小结"></a>非绑定方法小结</h2><p>如果函数体代码既不需要外部传入的类也不需要外部传入的对象，则应该将该函数定义成非绑定方法/普通函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 不与任何人绑定</span></span><br><span class="line">Mysql.func(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 不与任何人绑定</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.func)  <span class="comment"># &lt;function Mysql.func at 0x10f10e620&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Mysql.func)  <span class="comment"># &lt;function Mysql.func at 0x10f10e620&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.uid)  <span class="comment"># a78489ec-92a3-11e9-b4d7-acde48001122</span></span><br></pre></td></tr></table></figure>

<h1 id="面向对象进阶小结"><a href="#面向对象进阶小结" class="headerlink" title="面向对象进阶小结"></a>面向对象进阶小结</h1><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>继承父类,则会有父类的所有属性和方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>():</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass2</span>():</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>(<span class="params">ParentClass1,ParentClass2</span>):</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="类的派生"><a href="#类的派生" class="headerlink" title="类的派生"></a>类的派生</h2><p>继承父类的同时自己有init,然后也需要父类的init</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>():</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>(<span class="params">ParentClass</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,age</span>):</span></span><br><span class="line">		<span class="comment"># 1. ParentClass1.__init__(self,name)</span></span><br><span class="line">		<span class="comment"># 2. super(SubClass,self).__init__(name)</span></span><br><span class="line">		self.age = age</span><br></pre></td></tr></table></figure>

<h2 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h2><p>类对象可以引用/当做参数传入/当做返回值/当做容器元素,类似于函数对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>():</span></span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>(<span class="params">ParentClass</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,age</span>):</span></span><br><span class="line">		self.age = age	</span><br><span class="line"></span><br><span class="line">pc = ParentClass1()</span><br><span class="line">sc = SubClass()</span><br><span class="line"></span><br><span class="line">sc.parent_class = pc  <span class="comment"># 组合</span></span><br><span class="line">sc.parent_class.count  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<h2 id="菱形继承问题"><a href="#菱形继承问题" class="headerlink" title="菱形继承问题"></a>菱形继承问题</h2><p>新式类:继承object的类,python3中全是新式类</p>
<p>经典类:没有继承object的类,只有python2中有</p>
<p>在菱形继承的时候,新式类是广度优先(老祖宗最后找);经典类深度优先(一路找到底,再找旁边的)</p>
<h2 id="多态与多态性"><a href="#多态与多态性" class="headerlink" title="多态与多态性"></a>多态与多态性</h2><p>一种事物的多种形态,动物–&gt;人/猪/狗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多态</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCmeta</span>):</span></span><br><span class="line"><span class="meta">	@abc.abstractmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;eat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 报错</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">		</span><br><span class="line"><span class="comment"># 多态性</span></span><br><span class="line">peo = People()</span><br><span class="line">peo.eat()</span><br><span class="line">peo1 = People()</span><br><span class="line">peo1.eat()</span><br><span class="line">pig = Pig()</span><br><span class="line">pig.eat()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span></span><br><span class="line">	obj.eat()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">cat = Cat()</span><br><span class="line"></span><br><span class="line">func(cat)</span><br></pre></td></tr></table></figure>

<p>鸭子类型:只要长得像鸭子,叫的像鸭子,游泳像鸭子,就是鸭子.</p>
<h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p>隐藏属性,只有类内部可以访问,类外部不可以访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>():</span></span><br><span class="line">	__count = <span class="number">0</span> </span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_count</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> self.__count</span><br><span class="line">		</span><br><span class="line">f = Foo()</span><br><span class="line">f.__count  <span class="comment"># 报错</span></span><br><span class="line">f._Foo__count <span class="comment"># 不能这样做</span></span><br></pre></td></tr></table></figure>

<h2 id="类的property特性"><a href="#类的property特性" class="headerlink" title="类的property特性"></a>类的property特性</h2><p>把方法变成属性引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,height,weight</span>):</span></span><br><span class="line">		self.height = height</span><br><span class="line">		self.weight = weight</span><br><span class="line">	</span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> weight/(height**<span class="number">2</span>)</span><br><span class="line">		</span><br><span class="line"><span class="meta">	@bmi.setter</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self,value</span>)</span></span><br><span class="line"><span class="function">		<span class="title">print</span>(<span class="params"><span class="string">&#x27;setter&#x27;</span></span>)</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    @<span class="title">bmi</span>.<span class="title">deleter</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">peo = People</span><br><span class="line">peo.bmi</span><br></pre></td></tr></table></figure>

<h2 id="类与对象的绑定方法和非绑定方法"><a href="#类与对象的绑定方法和非绑定方法" class="headerlink" title="类与对象的绑定方法和非绑定方法"></a>类与对象的绑定方法和非绑定方法</h2><p>没有任何装饰器装饰的方法就是对象的绑定方法, 类能调用, 但是必须得传参给self</p>
<p>被 @classmethod 装饰器装饰的方法是类的绑定方法,参数写成cls, cls是类本身, 对象也能调用, 参数cls还是类本身</p>
<p>被 @staticmethod 装饰器装饰的方法就是非绑定方法, 就是一个普通的函数</p>
<h1 id="isinstance与type"><a href="#isinstance与type" class="headerlink" title="isinstance与type"></a>isinstance与type</h1><p>在游戏项目中，我们会在每个接口验证客户端传过来的参数类型，如果验证不通过，返回给客户端“参数错误”错误码。</p>
<p>这样做不但便于调试，而且增加健壮性。因为客户端是可以作弊的，不要轻易相信客户端传过来的参数。</p>
<p>验证类型用type函数，非常好用，比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;foo&#x27;</span>) == <span class="built_in">str</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2.3</span>) <span class="keyword">in</span> (<span class="built_in">int</span>, <span class="built_in">float</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>既然有了type()来判断类型，为什么还有isinstance()呢？</p>
<p>一个明显的区别是在判断子类。</p>
<p>type()不会认为子类是一种父类类型；isinstance()会认为子类是一种父类类型。</p>
<p>千言不如一码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Foo()) == Foo)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Bar()) == Foo)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance参数为对象和类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(Bar(),Foo))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，旧式类跟新式类的type()结果是不一样的。旧式类都是&lt;type ‘instance’&gt;。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2.+</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;old style class&#x27;</span>,<span class="built_in">type</span>(A()))  <span class="comment"># old style class &lt;type &#x27;instance&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;old style class&#x27;</span>,<span class="built_in">type</span>(B()))  <span class="comment"># old style class &lt;type &#x27;instance&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;new style class&#x27;</span>,<span class="built_in">type</span>(C()))  <span class="comment"># new style class &lt;class &#x27;__main__.C&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(A()) == <span class="built_in">type</span>(B()))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>不存在说isinstance比type更好。只有哪个更适合需求。</strong></p>
<h1 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass"></a>issubclass</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Sub, Parent))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Parent, <span class="built_in">object</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>反射和魔术方法(一)</title>
    <url>/47a473e6.html</url>
    <content><![CDATA[<h1 id="反射在类中的使用"><a href="#反射在类中的使用" class="headerlink" title="反射在类中的使用"></a>反射在类中的使用</h1><p>反射就是通过字符串来操作类或者对象的属性</p>
<ul>
<li>反射本质就是在使用内置函数，其中反射有以下四个内置函数：<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">hasattr</span>：判断一个方法是否存在与这个类中</span><br><span class="line"><span class="number">2.</span> <span class="built_in">getattr</span>：根据字符串去获取obj对象里的对应的方法的内存地址，加<span class="string">&quot;()&quot;</span>括号即可执行</span><br><span class="line"><span class="number">3.</span> <span class="built_in">setattr</span>：通过<span class="built_in">setattr</span>将外部的一个函数绑定到实例中</span><br><span class="line"><span class="number">4.</span> <span class="built_in">delattr</span>：删除一个实例或者类中的方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1 = People(<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(peo1, <span class="string">&#x27;eat&#x27;</span>))  <span class="comment"># peo1.eat # True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(peo1, <span class="string">&#x27;eat&#x27;</span>))  <span class="comment"># peo1.eat  # &lt;bound method People.eat of &lt;__main__.People object at 0x1043b9f98&gt;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(peo1, <span class="string">&#x27;xxxxx&#x27;</span>, <span class="literal">None</span>))  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(peo1, <span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)  <span class="comment"># peo1.age=18</span></span><br><span class="line"><span class="built_in">print</span>(peo1.age)  <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(peo1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;egon&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delattr</span>(peo1, <span class="string">&#x27;name&#x27;</span>)  <span class="comment"># del peo1.name</span></span><br><span class="line"><span class="built_in">print</span>(peo1.__dict__)  <span class="comment"># &#123;&#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>需求：通过用户输入命令启动功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ftp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;GET function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;PUT function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            choice = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> choice == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;break&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#             print(choice, type(choice))</span></span><br><span class="line"><span class="comment">#             if hasattr(self, choice):</span></span><br><span class="line"><span class="comment">#                 method = getattr(self, choice)</span></span><br><span class="line"><span class="comment">#                 method()</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 print(&#x27;输入的命令不存在&#x27;)</span></span><br><span class="line"></span><br><span class="line">            method = <span class="built_in">getattr</span>(self, choice, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;输入的命令不存在&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                method()</span><br><span class="line">conn = Ftp(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">conn.run()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;: time</span></span><br><span class="line"><span class="string">输入的命令不存在</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;: time</span></span><br><span class="line"><span class="string">输入的命令不存在</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;: q</span></span><br><span class="line"><span class="string">break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="反射在模块中的使用"><a href="#反射在模块中的使用" class="headerlink" title="反射在模块中的使用"></a>反射在模块中的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">as</span> ss</span><br><span class="line"></span><br><span class="line">ss.f1()</span><br><span class="line">ss.f2()</span><br><span class="line"><span class="built_in">print</span>(ss.a)</span><br></pre></td></tr></table></figure>

<p>我们要导入另外一个模块,可以使用import.现在有这样的需求,我动态输入一个模块名，可以随时访问到导入模块中的方法或者变量，怎么做呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imp = <span class="built_in">input</span>(“请输入你想导入的模块名:”)</span><br><span class="line">CC = <span class="built_in">__import__</span>(imp) 這种方式就是通过输入字符串导入你所想导入的模块 </span><br><span class="line">CC.f1()  <span class="comment"># 执行模块中的f1方法</span></span><br></pre></td></tr></table></figure>

<p>上面我们实现了动态输入模块名，从而使我们能够输入模块名并且执行里面的函数。但是上面有一个缺点，那就是执行的函数被固定了。那么，我们能不能改进一下，动态输入函数名，并且来执行呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dynamic.py</span></span><br><span class="line">imp = <span class="built_in">input</span>(<span class="string">&quot;请输入模块:&quot;</span>)</span><br><span class="line">dd = <span class="built_in">__import__</span>(imp)</span><br><span class="line"><span class="comment"># 等价于import imp</span></span><br><span class="line">inp_func = <span class="built_in">input</span>(<span class="string">&quot;请输入要执行的函数：&quot;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">getattr</span>(dd, inp_func,</span><br><span class="line">            <span class="literal">None</span>)  <span class="comment"># 作用:从导入模块中找到你需要调用的函数inp_func,然后返回一个该函数的引用.没有找到就烦会None</span></span><br><span class="line"></span><br><span class="line">f()  <span class="comment"># 执行该函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入模块:time</span></span><br><span class="line"><span class="string">请输入要执行的函数：time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1560959528.6127071</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面我们就实现了，动态导入一个模块，并且动态输入函数名然后执行相应功能。</p>
<p>当然，上面还存在一点点小问题:那就是我的模块名有可能不是在本级目录中存放着。有可能是如下图存放方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|- day24</span><br><span class="line">    |- lib</span><br><span class="line">        |- common.py</span><br></pre></td></tr></table></figure>

<p>那么这种方式我们该如何搞定呢?看下面代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dd = <span class="built_in">__import__</span>(<span class="string">&quot;lib.text.commons&quot;</span>)  <span class="comment"># 这样仅仅导入了lib模块</span></span><br><span class="line">dd = <span class="built_in">__import__</span>(<span class="string">&quot;lib.text.commons&quot;</span>, fromlist=<span class="literal">True</span>)  <span class="comment"># 改用这种方式就能导入成功</span></span><br><span class="line"><span class="comment"># 等价于import config</span></span><br><span class="line">inp_func = <span class="built_in">input</span>(<span class="string">&quot;请输入要执行的函数：&quot;</span>)</span><br><span class="line">f = <span class="built_in">getattr</span>(dd, inp_func)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>上面说了那么多，到底什么是反射机制呢?</p>
<p>其实，反射就是通过字符串的形式，导入模块；通过字符串的形式，去模块寻找指定函数，并执行。利用字符串的形式去对象（模块）中操作（查找/获取/删除/添加）成员，一种基于字符串的事件驱动！</p>
<p>先来介绍四个内置函数:</p>
<h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h3><p>getattr()函数是Python自省的核心函数，具体使用大体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">        <span class="comment"># self.age=&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;method print&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;not find&#x27;</span>))  <span class="comment"># 如果a 对象中有属性name则打印self.name的值，否则打印&#x27;not find&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;not find&#x27;</span>))  <span class="comment"># 如果a 对象中有属性age则打印self.age的值，否则打印&#x27;not find&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;default&#x27;</span>))  <span class="comment"># 如果有方法method，否则打印其地址，否则打印default</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(a, <span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;default&#x27;</span>)())  <span class="comment"># 如果有方法method，运行函数并打印None否则打印default</span></span><br></pre></td></tr></table></figure>

<h3 id="hasattr-object-name"><a href="#hasattr-object-name" class="headerlink" title="hasattr(object, name)"></a>hasattr(object, name)</h3><p>说明：判断对象object是否包含名为name的特性（hasattr是通过调用getattr(ojbect, name)是否抛出异常来实现的）</p>
<h3 id="setattr-object-name-value"><a href="#setattr-object-name-value" class="headerlink" title="setattr(object, name, value)"></a>setattr(object, name, value)</h3><p>这是相对应的getattr()。参数是一个对象,一个字符串和一个任意值。字符串可能会列出一个现有的属性或一个新的属性。这个函数将值赋给属性的。该对象允许它提供。例如,setattr(x,“foobar”,123)相当于x.foobar = 123。</p>
<h3 id="delattr-object-name"><a href="#delattr-object-name" class="headerlink" title="delattr(object, name)"></a>delattr(object, name)</h3><p>与setattr()相关的一组函数。参数是由一个对象(记住python中一切皆是对象)和一个字符串组成的。string参数必须是对象属性名之一。该函数删除该obj的一个由string指定的属性。delattr(x, ‘foobar’)=del x.foobar</p>
<p>我们可以利用上述的四个函数,来对模块进行一系列操作.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="built_in">hasattr</span>(commons, xxx)  <span class="comment"># 判断某个函数或者变量是否存在</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(commons, <span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)  <span class="comment"># 给commons模块增加一个全局变量age = 18，创建成功返回none</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(commons, <span class="string">&#x27;age&#x27;</span>, <span class="keyword">lambda</span> a: a + <span class="number">1</span>)  <span class="comment"># 给模块添加一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delattr</span>(commons, <span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 删除模块中某个变量或者函数</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>getattr,hasattr,setattr,delattr对模块的修改都在内存中进行，并不会影响文件中真实内容。</strong></p>
<h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><p>基于反射机制模拟web框架路由</p>
<p>需求：比如我们输入&lt;<a href="http://www.xxx.com/commons/f1%3E">www.xxx.com/commons/f1&gt;</a> ，返回f1的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态导入模块，并执行其中函数</span></span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;url: &quot;</span>)</span><br><span class="line"></span><br><span class="line">target_module, target_func = url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">m = <span class="built_in">__import__</span>(<span class="string">&#x27;lib.&#x27;</span> + target_module, fromlist=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">inp = url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]  <span class="comment"># 分割url,并取出url最后一个字符串</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(m, target_func):  <span class="comment"># 判断在commons模块中是否存在inp这个字符串</span></span><br><span class="line">    target_func = <span class="built_in">getattr</span>(m, target_func)  <span class="comment"># 获取inp的引用</span></span><br><span class="line">    target_func()  <span class="comment"># 执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;404&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="setattr-和-delattr-和-getattr"><a href="#setattr-和-delattr-和-getattr" class="headerlink" title="__setattr__和__delattr__和__getattr__"></a>__setattr__和__delattr__和__getattr__</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    x = 1</span><br><span class="line"></span><br><span class="line">    def __init__(self, y):</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, item):</span><br><span class="line">        print(&#x27;----&gt; from getattr:你找的属性不存在&#x27;)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        print(&#x27;----&gt; from setattr&#x27;)</span><br><span class="line">        # self.key = value  # 这就无限递归了,你好好想想</span><br><span class="line">        # self.__dict__[key] = value  # 应该使用它</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, item):</span><br><span class="line">        print(&#x27;----&gt; from delattr&#x27;)</span><br><span class="line">        # del self.item  # 无限递归了</span><br><span class="line">        self.__dict__.pop(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(10)</span><br></pre></td></tr></table></figure>

<h2 id="setattr"><a href="#setattr" class="headerlink" title="setattr"></a><strong>setattr</strong></h2><ul>
<li>添加/修改属性会触发它的执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(f1.__dict__</span><br><span class="line">      )  # 因为你重写了__setattr__，凡是赋值操作都会触发它的运行，你啥都没写，就是根本没赋值，除非你直接操作属性字典，否则永远无法赋值</span><br><span class="line">f1.z = 3</span><br><span class="line">print(f1.__dict__)</span><br></pre></td></tr></table></figure>

<h2 id="delattr"><a href="#delattr" class="headerlink" title="delattr"></a><strong>delattr</strong></h2><ul>
<li>删除属性的时候会触发</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f1.__dict__[&#x27;a&#x27;] = 3  # 我们可以直接修改属性字典，来完成添加/修改属性的操作</span><br><span class="line">del f1.a</span><br><span class="line">print(f1.__dict__)</span><br><span class="line">----&gt; from delattr</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getattr-1"><a href="#getattr-1" class="headerlink" title="getattr"></a><strong>getattr</strong></h2><ul>
<li>只有在使用点调用属性且属性不存在的时候才会触发</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f1.xxxxxx</span><br><span class="line">----&gt; from getattr:你找的属性不存在</span><br></pre></td></tr></table></figure>

<p><strong>setattr__和__delattr__和__getattr__，__getattribute</strong></p>
<h1 id="getattribute"><a href="#getattribute" class="headerlink" title="_getattribute_"></a>_<em>getattribute</em>_</h1><h2 id="getattr-2"><a href="#getattr-2" class="headerlink" title="getattr"></a><strong>getattr</strong></h2><ul>
<li>不存在的属性访问，触发<strong>getattr</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行的是我&#x27;</span>)</span><br><span class="line">        <span class="comment"># return self.__dict__[item]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(f1.x)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">f1.xxxxxx  <span class="comment"># 执行的是我</span></span><br></pre></td></tr></table></figure>

<h2 id="getattribute-1"><a href="#getattribute-1" class="headerlink" title="getattribute"></a><strong>getattribute</strong></h2><ul>
<li>查找属性无论是否存在，都会执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不管是否存在，我都会执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">f1.x  <span class="comment"># 不管是否存在，我都会执行</span></span><br><span class="line"></span><br><span class="line">f1.xxxxxx  <span class="comment"># 不管是否存在，我都会执行</span></span><br></pre></td></tr></table></figure>

<h2 id="getattr与getattribute"><a href="#getattr与getattribute" class="headerlink" title="getattr与getattribute"></a><strong>getattr</strong>与<strong>getattribute</strong></h2><ul>
<li>当<strong>getattribute</strong>与<strong>getattr</strong>同时存在，只会执行<strong>getattrbute</strong>，除非<strong>getattribute</strong>在执行过程中抛出异常AttributeError</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行的是我&#x27;</span>)</span><br><span class="line">        <span class="comment"># return self.__dict__[item]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不管是否存在,我都会执行&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">f1.x</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">不管是否存在,我都会执行</span></span><br><span class="line"><span class="string">执行的是我</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f1.xxxxxx</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">不管是否存在,我都会执行</span></span><br><span class="line"><span class="string">执行的是我</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>描述符</title>
    <url>/bf389a0f.html</url>
    <content><![CDATA[<h1 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h1><ul>
<li><p>描述符是什么：描述符本质就是一个新式类，在这个新式类中，至少实现了</p>
<p>get()，set()，delete()中的一个，这也被称为描述符协议</p>
<ul>
<li><strong>get</strong>()：调用一个属性时，触发</li>
<li><strong>set</strong>()：为一个属性赋值时，触发</li>
<li><strong>delete</strong>()：采用del删除属性时，触发</li>
</ul>
</li>
<li><p>定义一个描述符</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span>  <span class="comment"># 在python3中Foo是新式类，它实现了__get__()，__set__()，__delete__()中的一个三种方法的一个，这个类就被称作一个描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="描述符的作用"><a href="#描述符的作用" class="headerlink" title="描述符的作用"></a>描述符的作用</h1><ul>
<li>描述符是干什么的：描述符的作用是用来代理另外一个类的属性的，必须把描述符定义成这个类的类属性，不能定义到构造函数中</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发set&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发delete&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo()</span><br></pre></td></tr></table></figure>

<ul>
<li>包含这三个方法的新式类称为描述符，由这个类产生的实例进行属性的调用/赋值/删除，并不会触发这三个方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1.name = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">f1.name</span><br><span class="line"><span class="keyword">del</span> f1.name</span><br></pre></td></tr></table></figure>

<h2 id="何时，何地，会触发这三个方法的执行"><a href="#何时，何地，会触发这三个方法的执行" class="headerlink" title="何时，何地，会触发这三个方法的执行"></a>何时，何地，会触发这三个方法的执行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Str</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;描述符Str&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str设置...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;描述符Int&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int设置...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = Str()</span><br><span class="line">    age = Int()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span>  <span class="comment"># name被Str类代理，age被Int类代理</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 何地？：定义成另外一个类的类属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 何时？：且看下列演示</span></span><br><span class="line"></span><br><span class="line">p1 = People(<span class="string">&#x27;alex&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Str设置…<br>Int设置…</p>
<ul>
<li>描述符Str的使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1.name  <span class="comment"># Str调用</span></span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">&#x27;lqz&#x27;</span>  <span class="comment"># Str设置...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p1.name  <span class="comment"># Str删除...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>描述符Int的使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1.age  <span class="comment"># Int调用</span></span><br><span class="line"></span><br><span class="line">p1.age = <span class="number">18</span>  <span class="comment"># Int设置...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p1.age  <span class="comment"># Int删除...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们来瞅瞅到底发生了什么</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.__dict__)  <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(People.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;name&#x27;: &lt;__main__.Str object at 0x107a86940&gt;, &#x27;age&#x27;: &lt;__main__.Int object at 0x107a863c8&gt;, &#x27;__init__&#x27;: &lt;function People.__init__ at 0x107ba2ae8&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;People&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;People&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>补充</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(p1) == People)  <span class="comment"># True type(obj)其实是查看obj是由哪个类实例化来的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(p1).__dict__ == People.__dict__)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h1 id="两种描述符"><a href="#两种描述符" class="headerlink" title="两种描述符"></a>两种描述符</h1><h2 id="数据描述符"><a href="#数据描述符" class="headerlink" title="数据描述符"></a>数据描述符</h2><ul>
<li>至少实现了<strong>get</strong>()和<strong>set</strong>()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="非数据描述符"><a href="#非数据描述符" class="headerlink" title="非数据描述符"></a>非数据描述符</h2><ul>
<li>没有实现<strong>set</strong>()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="描述符注意事项"><a href="#描述符注意事项" class="headerlink" title="描述符注意事项"></a>描述符注意事项</h1><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm2qmdn5b5g309m07iwfh.gif" alt="103-描述符(get,set,delete)-注意.jpg"></p>
<ol>
<li><p>描述符本身应该定义成新式类，被代理的类也应该是新式类</p>
</li>
<li><p>必须把描述符定义成这个类的类属性，不能为定义到构造函数中</p>
</li>
<li><p>要严格遵循该优先级，优先级由高到底分别是</p>
<ul>
<li><p>1.类属性</p>
</li>
<li><p>2.数据描述符</p>
</li>
<li><p>3.实例属性</p>
</li>
<li><p>4.非数据描述符</p>
</li>
<li><p>5.找不到的属性触发<strong>getattr</strong>()</p>
</li>
</ul>
</li>
</ol>
<h1 id="使用描述符"><a href="#使用描述符" class="headerlink" title="使用描述符"></a>使用描述符</h1><ul>
<li>众所周知，python是弱类型语言，即参数的赋值没有类型限制，下面我们通过描述符机制来实现类型限制功能</li>
</ul>
<h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Str</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>, instance, owner)</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>, instance, value)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = Str(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="number">3231.3</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># set---&gt; &lt;__main__.People object at 0x107a86198&gt; lqz</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqz&#x27;, &#x27;age&#x27;: 18, &#x27;salary&#x27;: 3231.3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(p1.name)  <span class="comment"># get---&gt; &lt;__main__.People object at 0x107a86198&gt; &lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line">lqz</span><br></pre></td></tr></table></figure>

<ul>
<li>赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqz&#x27;, &#x27;age&#x27;: 18, &#x27;salary&#x27;: 3231.3&#125;</span></span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">&#x27;lqzlin&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x107a86198&gt; lqzlin</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;lqzlin&#x27;, &#x27;age&#x27;: 18, &#x27;salary&#x27;: 3231.3&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqzlin&#x27;, &#x27;age&#x27;: 18, &#x27;salary&#x27;: 3231.3&#125;</span></span><br><span class="line"><span class="keyword">del</span> p1.name</span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">delete---&gt; &lt;__main__.People object at 0x107a86198&gt;</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 18, &#x27;salary&#x27;: 3231.3&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="拔刀相助"><a href="#拔刀相助" class="headerlink" title="拔刀相助"></a>拔刀相助</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Str</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>, instance, owner)</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>, instance, value)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = Str(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 疑问：如果我用类名去操作属性呢</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    People.name  <span class="comment"># 报错，错误的根源在于类去操作属性时，会把None传给instance</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">get---&gt; None &lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;NoneType&#x27; object has no attribute &#x27;__dict__&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修订<strong>get</strong>方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Str:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __get__(self, instance, owner):</span><br><span class="line">        print(&#x27;get---&gt;&#x27;, instance, owner)</span><br><span class="line">        if instance is None:</span><br><span class="line">            return self</span><br><span class="line">        return instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    def __set__(self, instance, value):</span><br><span class="line">        print(&#x27;set---&gt;&#x27;, instance, value)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    def __delete__(self, instance):</span><br><span class="line">        print(&#x27;delete---&gt;&#x27;, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class People:</span><br><span class="line">    name = Str(&#x27;name&#x27;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age, salary):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(People.name)  # 完美，解决</span><br><span class="line">get---&gt; None &lt;class &#x27;__main__.People&#x27;&gt;</span><br><span class="line">&lt;__main__.Str object at 0x107a86da0&gt;</span><br></pre></td></tr></table></figure>

<h2 id="磨刀霍霍"><a href="#磨刀霍霍" class="headerlink" title="磨刀霍霍"></a>磨刀霍霍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Str</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, expected_type</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>, instance, value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, self.expected_type):  <span class="comment"># 如果不是期望的类型，则抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> % <span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = Str(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">str</span>)  <span class="comment"># 新增类型限制str</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p1 = People(<span class="number">123</span>, <span class="number">18</span>, <span class="number">3333.3</span>)  <span class="comment"># 传入的name因不是字符串类型而抛出异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1084cd940&gt; 123</span></span><br><span class="line"><span class="string">Expected &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="大刀阔斧"><a href="#大刀阔斧" class="headerlink" title="大刀阔斧"></a>大刀阔斧</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typed</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, expected_type</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>, instance, value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> % <span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = Typed(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line">    age = Typed(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">int</span>)</span><br><span class="line">    salary = Typed(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p1 = People(<span class="number">123</span>, <span class="number">18</span>, <span class="number">3333.3</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1082c7908&gt; 123</span></span><br><span class="line"><span class="string">Expected &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="string">&#x27;18&#x27;</span>, <span class="number">3333.3</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1078dd438&gt; lqz</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1078dd438&gt; 18</span></span><br><span class="line"><span class="string">Expected &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="number">3333.3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1081b3da0&gt; lqz</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1081b3da0&gt; 18</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1081b3da0&gt; 3333.3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>大刀阔斧之后我们已然能实现功能了，但是问题是，如果我们的类有很多属性，你仍然采用在定义一堆类属性的方式去实现，low，这时候我需要教你一招：独孤九剑</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1gm2qmz3cm4j30ci09eglo.jpg" alt="103-描述符(get,set,delete)-独孤九剑.jpg"></p>
<h3 id="类的装饰器-无参"><a href="#类的装饰器-无参" class="headerlink" title="类的装饰器:无参"></a>类的装饰器:无参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate  </span><span class="comment"># 无参：People = decorate(People)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="number">3333.3</span>)</span><br><span class="line">类的装饰器开始运行啦------&gt;</span><br></pre></td></tr></table></figure>

<h3 id="类的装饰器-有参"><a href="#类的装饰器-有参" class="headerlink" title="类的装饰器:有参"></a>类的装饰器:有参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typeassert</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>, kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typeassert(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    name=<span class="built_in">str</span>, age=<span class="built_in">int</span>, salary=<span class="built_in">float</span></span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)  </span><span class="comment"># 有参：1.运行typeassert(...)返回结果是decorate，此时参数都传给kwargs 2.People=decorate(People)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="number">3333.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">类的装饰器开始运行啦------&gt; &#123;&#x27;name&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;age&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;salary&#x27;: &lt;class &#x27;float&#x27;&gt;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="刀光剑影"><a href="#刀光剑影" class="headerlink" title="刀光剑影"></a>刀光剑影</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typed</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, expected_type</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>, instance, value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> % <span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typeassert</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>, kwargs)</span><br><span class="line">        <span class="keyword">for</span> name, expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(cls, name, Typed(name, expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typeassert(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    name=<span class="built_in">str</span>, age=<span class="built_in">int</span>, salary=<span class="built_in">float</span></span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)  </span><span class="comment"># 有参：1.运行typeassert(...)返回结果是decorate，此时参数都传给kwargs 2.People=decorate(People)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, salary</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(People.__dict__)</span><br><span class="line">p1 = People(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="number">3333.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">类的装饰器开始运行啦------&gt; &#123;&#x27;name&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;age&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;salary&#x27;: &lt;class &#x27;float&#x27;&gt;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__init__&#x27;: &lt;function People.__init__ at 0x10797a400&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;People&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;People&#x27; objects&gt;, &#x27;__doc__&#x27;: None, &#x27;name&#x27;: &lt;__main__.Typed object at 0x1080b2a58&gt;, &#x27;age&#x27;: &lt;__main__.Typed object at 0x1080b2ef0&gt;, &#x27;salary&#x27;: &lt;__main__.Typed object at 0x1080b2c18&gt;&#125;</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1080b22e8&gt; lqz</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1080b22e8&gt; 18</span></span><br><span class="line"><span class="string">set---&gt; &lt;__main__.People object at 0x1080b22e8&gt; 3333.3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="描述符总结"><a href="#描述符总结" class="headerlink" title="描述符总结"></a>描述符总结</h1><ul>
<li>描述符是可以实现大部分python类特性中的底层魔法，包括@classmethod，@staticmethd，@property甚至是<strong>slots</strong>属性</li>
<li>描述父是很多高级库和框架的重要工具之一，描述符通常是使用到装饰器或者元类的大型框架中的一个组件.</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm2qovssrxj30j60900sy.jpg" alt="103-描述符(get,set,delete)-私人订制.jpg"></p>
<h1 id="自定制-property"><a href="#自定制-property" class="headerlink" title="自定制@property"></a>自定制@property</h1><ul>
<li>利用描述符原理完成一个自定制@property，实现延迟计算（本质就是把一个函数属性利用装饰器原理做成一个描述符：类的属性字典中函数名为key，value为描述符类产生的对象）</li>
</ul>
<h2 id="property回顾"><a href="#property回顾" class="headerlink" title="property回顾"></a>property回顾</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, width, length</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r1 = Room(<span class="string">&#x27;alex&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r1.area)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h2 id="自定制property"><a href="#自定制property" class="headerlink" title="自定制property"></a>自定制property</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazyproperty</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性，r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> self.func(instance)  <span class="comment"># 此时你应该明白，到底是谁在为你做自动传递self的事情</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, width, length</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty  </span><span class="comment"># area=Lazyproperty(area) 相当于定义了一个类属性,即描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r1 = Room(<span class="string">&#x27;alex&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="实现延迟计算功能"><a href="#实现延迟计算功能" class="headerlink" title="实现延迟计算功能"></a>实现延迟计算功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazyproperty</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性，r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>)</span><br><span class="line">            value = self.func(instance)</span><br><span class="line">            <span class="built_in">setattr</span>(instance, self.func.__name__, value)  <span class="comment"># 计算一次就缓存到实例的属性字典中</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, width, length</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty  </span><span class="comment"># area=Lazyproperty(area) 相当于&#x27;定义了一个类属性,即描述符&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r1 = Room(<span class="string">&#x27;alex&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)  <span class="comment"># 先从自己的属性字典找,没有再去类的中找,然后出发了area的__get__方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">---&gt;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r1.area)  <span class="comment"># 1 先从自己的属性字典找,找到了,是上次计算的结果,这样就不用每执行一次都去计算</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="打破延迟计算"><a href="#打破延迟计算" class="headerlink" title="打破延迟计算"></a>打破延迟计算</h1><ul>
<li>一个小的改动，延迟计算的美梦就破碎了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazyproperty</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性，r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = self.func(instance)</span><br><span class="line">            instance.__dict__[self.func.__name__] = value</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="comment"># return self.func(instance) # 此时你应该明白,到底是谁在为你做自动传递self的事情</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, instance, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hahahahahah&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, width, length</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty  </span><span class="comment"># area=Lazyproperty(area) 相当于定义了一个类属性,即描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(Room.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__init__&#x27;: &lt;function Room.__init__ at 0x107d53620&gt;, &#x27;area&#x27;: &lt;__main__.Lazyproperty object at 0x107ba3860&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Room&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Room&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r1 = Room(<span class="string">&#x27;alex&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r1.area)  <span class="comment">#缓存功能失效,每次都去找描述符了,为何,因为描述符实现了set方法,它由非数据描述符变成了数据描述符,数据描述符比实例属性有更高的优先级,因而所有的属性操作都去找描述符了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是我们自己定制的静态属性，r1.area实际是要执行r1.area()</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定制-classmethod"><a href="#自定制-classmethod" class="headerlink" title="自定制@classmethod"></a>自定制@classmethod</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassMethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            self, instance,</span></span></span><br><span class="line"><span class="params"><span class="function">            owner</span>):</span>  <span class="comment">#类来调用,instance为None,owner为类本身,实例来调用,instance为实例,owner为类本身,</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">feedback</span>():</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(owner)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @ClassMethod  </span><span class="comment"># say_hi=ClassMethod(say_hi)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你好啊,帅哥 %s&#x27;</span> % cls.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">People.say_hi()</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">你好啊,帅哥 lqz</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1.say_hi()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">你好啊,帅哥 lqz</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>疑问,类方法如果有参数呢,好说,好说</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassMethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span></span></span><br><span class="line"><span class="params"><span class="function">                </span>):</span>  <span class="comment"># 类来调用,instance为None,owner为类本身,实例来调用,instance为实例,owner为类本身,</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">feedback</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(owner, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @ClassMethod  </span><span class="comment"># say_hi=ClassMethod(say_hi)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">cls, msg</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你好啊,帅哥 %s %s&#x27;</span> % (cls.name, msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">People.say_hi(<span class="string">&#x27;你是那偷心的贼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">你好啊,帅哥 lqz 你是那偷心的贼</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p1.say_hi(<span class="string">&#x27;你是那偷心的贼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">你好啊,帅哥 lqz 你是那偷心的贼</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定制-staticmethod"><a href="#自定制-staticmethod" class="headerlink" title="自定制@staticmethod"></a>自定制@staticmethod</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            self, instance,</span></span></span><br><span class="line"><span class="params"><span class="function">            owner</span>):</span>  <span class="comment"># 类来调用，instance为None，owner为类本身，实例来调用，instance为实例，owner为类本身</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">feedback</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line"><span class="meta">    @StaticMethod  </span><span class="comment"># say_hi = StaticMethod(say_hi)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------&gt;&#x27;</span>, x, y, z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">People.say_hi(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">------&gt; 1 2 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p1.say_hi(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在这里可以加功能啊...</span></span><br><span class="line"><span class="string">------&gt; 4 5 6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm2qo716n3j3073073mx7.jpg" alt="103-描述符(get,set,delete)-放假.jpg"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>魔术方法(二)</title>
    <url>/9b629203.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&#x27;getitem执行&#x27;, self.__dict__[item])</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&#x27;setitem执行&#x27;)</span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&#x27;del obj[key]时，delitem执行&#x27;)</span><br><span class="line">        self.__dict__.pop(key)</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, item):</span><br><span class="line">        print(&#x27;del obj.key时，delattr执行&#x27;)</span><br><span class="line">        self.__dict__.pop(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(&#x27;sb&#x27;)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="setitem"><a href="#setitem" class="headerlink" title="setitem"></a><strong>setitem</strong></h1><ul>
<li>中括号赋值时触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span>  <span class="comment"># setitem执行</span></span><br><span class="line"></span><br><span class="line">f1[<span class="string">&#x27;age1&#x27;</span>] = <span class="number">19</span>  <span class="comment"># setitem执行</span></span><br></pre></td></tr></table></figure>

<h1 id="getitem"><a href="#getitem" class="headerlink" title="getitem"></a><strong>getitem</strong></h1><ul>
<li>中括号取值时触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1[<span class="string">&#x27;age&#x27;</span>]  <span class="comment"># getitem执行 18</span></span><br><span class="line"></span><br><span class="line">f1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;tank&#x27;</span>  <span class="comment"># setitem执行</span></span><br></pre></td></tr></table></figure>

<h1 id="delitem与delattr"><a href="#delitem与delattr" class="headerlink" title="delitem与delattr"></a><strong>delitem</strong>与<strong>delattr</strong></h1><ul>
<li><strong>delitem</strong>：中括号删除时触发</li>
<li><strong>delattr</strong>：.删除时触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> f1.age1  <span class="comment"># del obj.key时，delattr执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> f1[<span class="string">&#x27;age&#x27;</span>]  <span class="comment"># del obj[key]时，delitem执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;&#125;</span></span><br></pre></td></tr></table></figure>







<h1 id="format"><a href="#format" class="headerlink" title="format"></a><strong>format</strong></h1><ul>
<li>自定制格式化字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">date_dic = &#123;</span><br><span class="line">    <span class="string">&#x27;ymd&#x27;</span>: <span class="string">&#x27;&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dmy&#x27;</span>: <span class="string">&#x27;&#123;0.day&#125;/&#123;0.month&#125;/&#123;0.year&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mdy&#x27;</span>: <span class="string">&#x27;&#123;0.month&#125;-&#123;0.day&#125;-&#123;0.year&#125;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, year, month, day</span>):</span></span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span>(<span class="params">self, format_spec</span>):</span></span><br><span class="line">        <span class="comment"># 默认打印ymd的&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;格式</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> format_spec <span class="keyword">or</span> format_spec <span class="keyword">not</span> <span class="keyword">in</span> date_dic:</span><br><span class="line">            format_spec = <span class="string">&#x27;ymd&#x27;</span></span><br><span class="line">        fmt = date_dic[format_spec]</span><br><span class="line">        <span class="keyword">return</span> fmt.<span class="built_in">format</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d1 = Date(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(d1))  <span class="comment"># 2016:12:29</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:mdy&#125;&#x27;</span>.<span class="built_in">format</span>(d1))  <span class="comment"># 12-29-2016</span></span><br></pre></td></tr></table></figure>





<h1 id="del"><a href="#del" class="headerlink" title="del"></a><strong>del</strong></h1><ul>
<li><strong>del</strong>也称之为析构方法</li>
<li><strong>del</strong>会在对象被删除之前自动触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run======&gt;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 做回收系统资源相关的事情</span></span><br><span class="line">        self.f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&#x27;egon&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">del</span> obj  <span class="comment"># del obj会间接删除f的内存占用，但是还需要自定制__del__删除文件的系统占用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">run=-====&gt;</span></span><br><span class="line"><span class="string">主</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h1><h2 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots"></a>什么是<strong>slots</strong></h2><ul>
<li><strong>slots</strong>是一个类变量，变量值可以是列表，元祖，或者可迭代对象，也可以是一个字符串(意味着所有实例只有一个数据属性)</li>
<li>使用点来访问属性本质就是在访问类或者对象的<strong>dict</strong>属性字典(类的字典是共享的，而每个实例的是独立的)</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1gm2qsa5w7hj30f807zt8r-20211206135642069.jpg" alt="107-slots-内存.jpg"></p>
<h2 id="为什么用slots"><a href="#为什么用slots" class="headerlink" title="为什么用slots"></a>为什么用<strong>slots</strong></h2><ul>
<li><p>字典会占用大量内存，如果你有一个属性很少的类，但是有很多实例，为了节省内存可以使用<strong>slots</strong>取代实例的<strong>dict</strong></p>
</li>
<li><p>当你定义<strong>slots</strong>后，<strong>slots</strong>就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似。在<strong>slots</strong>中列出的属性名在内部被映射到这个数组的指定小标上。使用<strong>slots</strong>一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在<strong>slots</strong>中定义的那些属性名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    __slots__=<span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.x=<span class="number">1</span></span><br><span class="line">f1.y=<span class="number">2</span>  <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(f1.__slots__)  <span class="comment"># f1不再有__dict__</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span></span><br><span class="line">    __slots__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">n=Bar()</span><br><span class="line">n.x,n.y=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">n.z=<span class="number">3</span>  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意：<strong>slots</strong>的很多特性都依赖于普通的基于字典的实现。另外，定义了<strong>slots</strong>后的类不再 支持一些普通类特性了，比如多继承。大多数情况下，你应该只在那些经常被使用到 的用作数据结构的类上定义<strong>slots</strong>比如在程序中需要创建某个类的几百万个实例对象 。</p>
</li>
<li><p>关于<strong>slots</strong>的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用<strong>slots</strong>可以达到这样的目的，但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p>
</li>
</ul>
<h2 id="刨根问底"><a href="#刨根问底" class="headerlink" title="刨根问底"></a>刨根问底</h2><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1gm2qsqvvbaj30dv0bbq33-20211206135642109.jpg" alt="107-slots-刨根问底.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    __slots__=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">f1=Foo()</span><br><span class="line">f1.name=<span class="string">&#x27;alex&#x27;</span></span><br><span class="line">f1.age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(f1.__slots__)  <span class="comment"># [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f2=Foo()</span><br><span class="line">f2.name=<span class="string">&#x27;egon&#x27;</span></span><br><span class="line">f2.age=<span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(f2.__slots__)  <span class="comment"># [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>f1与f2都没有属性字典<strong>dict</strong>了，统一归<strong>slots</strong>管，节省内存</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(Foo.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__slots__&#x27;: [&#x27;name&#x27;, &#x27;age&#x27;], &#x27;age&#x27;: &lt;member &#x27;age&#x27; of &#x27;Foo&#x27; objects&gt;, &#x27;name&#x27;: &lt;member &#x27;name&#x27; of &#x27;Foo&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="doc"><a href="#doc" class="headerlink" title="doc"></a><strong>doc</strong></h1><ul>
<li>返回类的注释信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">&#x27;我是描述信息&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__doc__)</span><br><span class="line">我是描述信息</span><br></pre></td></tr></table></figure>

<ul>
<li>该属性无法被继承</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">&#x27;我是描述信息&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(Bar.__doc__) <span class="comment">#该属性无法继承给子类</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>




<h1 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h1><ul>
<li>对象后面加括号时，触发执行。</li>
<li>注：构造方法的执行是由创建对象触发的，即：对象 = 类名() ；而对于 <strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__触发了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__触发了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 __init__</span></span><br><span class="line">obj = Foo()  <span class="comment"># __init__触发了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 __call__</span></span><br><span class="line">obj()  <span class="comment"># __call__</span></span><br></pre></td></tr></table></figure>



<h1 id="init和new"><a href="#init和new" class="headerlink" title="init和new"></a>init和new</h1><p>曾经我幼稚的以为认识了python的<strong>init</strong>()方法就相当于认识了类构造器，结果，<strong>new</strong>()方法突然出现在我眼前，让我突然认识到原来<strong>new</strong>才是老大。为什么这么说呢？</p>
<p>我们首先得从<strong>new</strong>(cls[,…])的参数说说起，<strong>new</strong>方法的第一个参数是这个类，而其余的参数会在调用成功后全部传递给<strong>init</strong>方法初始化，这一下子就看出了谁是老子谁是小子的关系。</p>
<p>所以，<strong>new</strong>方法（第一个执行）先于<strong>init</strong>方法执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__new__方法被执行&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__init__方法被执行&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__new__方法被执行</span></span><br><span class="line"><span class="string">__init__方法被执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们比较两个方法的参数，可以发现<strong>new</strong>方法是传入类(cls)，而<strong>init</strong>方法传入类的实例化对象(self)，而有意思的是，<strong>new</strong>方法返回的值就是一个实例化对象（ps:如果<strong>new</strong>方法返回None，则<strong>init</strong>方法不会被执行，并且返回值只能调用父类中的<strong>new</strong>方法，而不能调用毫无关系的类的<strong>new</strong>方法）。我们可以这么理解它们之间的关系，<strong>new</strong>是开辟疆域的大将军，而<strong>init</strong>是在这片疆域上辛勤劳作的小老百姓，只有<strong>new</strong>执行完后，开辟好疆域后，<strong>init</strong>才能工作。</p>
<p>绝大多数情况下，我们都不需要自己重写<strong>new</strong>方法，但在当继承一个不可变的类型（例如str类,int类等）时，它的特性就尤显重要了。我们举下面这个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CapStr</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, string</span>):</span></span><br><span class="line">        string = string.upper()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = CapStr(<span class="string">&quot;I love China!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">I love China!</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CapStr</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, string</span>):</span></span><br><span class="line">        string = string.upper()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = CapStr(<span class="string">&quot;I love China!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># I LOVE CHINA!</span></span><br></pre></td></tr></table></figure>

<p>我们可以根据上面的理论可以这样分析，我们知道字符串是不可改变的，所以第一个例子中，传入的字符串相当于已经被打下的疆域，而这块疆域除了将军其他谁也无法改变，<strong>init</strong>只能在这块领地上干瞪眼，此时这块疆域就是”I love China!“。而第二个例子中，<strong>new</strong>大将军重新去开辟了一块疆域，所以疆域上的内容也发生了变化，此时这块疆域变成了”I LOVE CHINA!“。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>小结：****new**和*<em>init*<em>想配合才是python中真正的类构造器</em></em></p>
<h1 id="str"><a href="#str" class="headerlink" title="str"></a><strong>str</strong></h1><ul>
<li>打印时触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)  <span class="comment"># &lt;__main__.Foo object at 0x10d2b8f98&gt;</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;  <span class="comment"># d = dict(&#123;&#x27;x&#x27;:1&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;a&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>obj和dic都是实例化的对象，但是obj打印的是内存地址，而dic打印的是有用的信息，很明显dic的打印是非常好的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;对象实例化的时候自动触发&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;打印的时候自动触发，但是其实不需要print即可打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>:<span class="subst">&#123;self.age&#125;</span>&#x27;</span>  <span class="comment"># 如果不返回字符串类型，则会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">&#x27;nick&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj)  <span class="comment"># obj.__str__() # 打印的时候就是在打印返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印的时候自动触发，但是其实不需要print即可打印</span></span><br><span class="line"><span class="string">nick:18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">obj2 = Foo(<span class="string">&#x27;tank&#x27;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印的时候自动触发，但是其实不需要print即可打印</span></span><br><span class="line"><span class="string">tank:30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="repr"><a href="#repr" class="headerlink" title="repr"></a><strong>repr</strong></h1><ul>
<li>str函数或者print函数—&gt;obj.<strong>str</strong>()</li>
<li>repr或者交互式解释器—&gt;obj.<strong>repr</strong>()</li>
<li>如果<strong>str</strong>没有被定义，那么就会使用<strong>repr</strong>来代替输出</li>
<li>注意：这俩方法的返回值必须是字符串，否则抛出异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, addr, <span class="built_in">type</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;School(%s,%s)&#x27;</span> % (self.name, self.addr)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s,%s)&#x27;</span> % (self.name, self.addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = School(<span class="string">&#x27;oldboy1&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;私立&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;from repr: &#x27;</span>, <span class="built_in">repr</span>(s1))  <span class="comment"># # from repr:  School(oldboy1,北京)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;from str: &#x27;</span>, <span class="built_in">str</span>(s1))  <span class="comment"># from str:  (oldboy1,北京)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># (oldboy1,北京)</span></span><br></pre></td></tr></table></figure>

<h1 id="module和class"><a href="#module和class" class="headerlink" title="module和class"></a>module和class</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lib/aa.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;SB&#x27;</span></span><br><span class="line"><span class="comment"># index.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.aa <span class="keyword">import</span> C</span><br><span class="line"></span><br><span class="line">obj = C()</span><br></pre></td></tr></table></figure>

<h2 id="module"><a href="#module" class="headerlink" title="module"></a><strong>module</strong></h2><ul>
<li><strong>module</strong> 表示当前操作的对象在那个模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(obj.__module__)  <span class="comment"># 输出 lib.aa，即：输出模块</span></span><br></pre></td></tr></table></figure>

<h2 id="class"><a href="#class" class="headerlink" title="class"></a><strong>class</strong></h2><ul>
<li><strong>class</strong>表示当前操作的对象的类是什么</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(obj.__class__)  <span class="comment"># 输出 lib.aa.C，即：输出类</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器、with、元类</title>
    <url>/75c8d1ab.html</url>
    <content><![CDATA[<h1 id="实现迭代器"><a href="#实现迭代器" class="headerlink" title="实现迭代器"></a>实现迭代器</h1><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><ul>
<li>死循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = Foo(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="StopIteration异常版"><a href="#StopIteration异常版" class="headerlink" title="StopIteration异常版"></a>StopIteration异常版</h2><ul>
<li>加上StopIteration异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start, stop</span>):</span></span><br><span class="line">        self.num = start</span><br><span class="line">        self.stop = stop</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.num &gt;= self.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        n = self.num</span><br><span class="line">        self.num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = Foo(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(f, Iterator))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Foo(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="模拟range"><a href="#模拟range" class="headerlink" title="模拟range"></a>模拟range</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n, stop, step</span>):</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.stop = stop</span><br><span class="line">        self.step = step</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.n &gt;= self.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        x = self.n</span><br><span class="line">        self.n += self.step</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._a = <span class="number">0</span></span><br><span class="line">        self._b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._a, self._b = self._b, self._a + self._b</span><br><span class="line">        <span class="keyword">return</span> self._a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Fib()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s &#x27;</span> % i, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 1 1 2 3 5 8 13 21 34 55 89</span></span><br></pre></td></tr></table></figure>

<h1 id="实现文件上下文管理"><a href="#实现文件上下文管理" class="headerlink" title="实现文件上下文管理"></a>实现文件上下文管理</h1><ul>
<li>我们知道在操作文件对象的时候可以这么写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="string">&#x27;代码块&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上述叫做上下文管理协议，即with语句，为了让一个对象兼容with语句，必须在这个对象的类中声明<strong>enter</strong>和<strong>exit</strong>方法</li>
</ul>
<h2 id="上下文管理协议"><a href="#上下文管理协议" class="headerlink" title="上下文管理协议"></a>上下文管理协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句，对象的__enter__被触发，有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line">        <span class="comment"># return self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(f,f.name)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量</span></span><br><span class="line"><span class="string">=====&gt;执行代码块</span></span><br><span class="line"><span class="string">with中代码块执行完毕时执行我啊</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>exit</strong>()中的三个参数分别代表异常类型，异常值和追溯信息,with语句中代码块出现异常，则with后的代码都无法执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句，对象的__enter__被触发，有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exc_type)</span><br><span class="line">        <span class="built_in">print</span>(exc_val)</span><br><span class="line">        <span class="built_in">print</span>(exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;***着火啦，救火啊***&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">出现with语句，对象的__enter__被触发，有返回值则赋值给as声明的变量</span></span><br><span class="line"><span class="string">=====&gt;执行代码块</span></span><br><span class="line"><span class="string">with中代码块执行完毕时执行我啊</span></span><br><span class="line"><span class="string">&lt;class &#x27;AttributeError&#x27;&gt;</span></span><br><span class="line"><span class="string">***着火啦，救火啊***</span></span><br><span class="line"><span class="string">&lt;traceback object at 0x1065f1f88&gt;</span></span><br><span class="line"><span class="string">***着火啦，救火啊***</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果__exit()返回值为True,那么异常会被清空，就好像啥都没发生一样，with后的语句正常执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句，对象的__enter__被触发，有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exc_type)</span><br><span class="line">        <span class="built_in">print</span>(exc_val)</span><br><span class="line">        <span class="built_in">print</span>(exc_tb)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;***着火啦，救火啊***&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span> * <span class="number">100</span>)  <span class="comment">#-------------&gt;会执行</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">出现with语句，对象的__enter__被触发，有返回值则赋值给as声明的变量</span></span><br><span class="line"><span class="string">=====&gt;执行代码块</span></span><br><span class="line"><span class="string">with中代码块执行完毕时执行我啊</span></span><br><span class="line"><span class="string">&lt;class &#x27;AttributeError&#x27;&gt;</span></span><br><span class="line"><span class="string">***着火啦，救火啊***</span></span><br><span class="line"><span class="string">&lt;traceback object at 0x1062ab048&gt;</span></span><br><span class="line"><span class="string">0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="模拟open"><a href="#模拟open" class="headerlink" title="模拟open"></a>模拟open</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filepath, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">        self.filepath = filepath</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.encoding = encoding</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;enter&#x27;)</span></span><br><span class="line">        self.f = <span class="built_in">open</span>(self.filepath, mode=self.mode, encoding=self.encoding)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;exit&#x27;)</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.f, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f)</span><br><span class="line">    f.write(<span class="string">&#x27;aaaaaa&#x27;</span>)</span><br><span class="line">    f.wasdf  <span class="comment">#抛出异常，交给__exit__处理</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;    </span></span><br><span class="line"><span class="string">&lt;_io.TextIOWrapper name=&#x27;a.txt&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>使用with语句的目的就是把代码块放入with中执行，with结束后，自动完成清理工作，无须手动干预</li>
<li>在需要管理一些资源比如文件，网络连接和锁的编程环境中，可以在<strong>exit</strong>中定制自动释放资源的机制，你无须再去关系这个问题，这将大有用处</li>
</ol>
<h1 id="什么是元类"><a href="#什么是元类" class="headerlink" title="什么是元类"></a>什么是元类</h1><ul>
<li>在python中一切皆对象，那么我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类，即元类可以简称为类的类</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Foo:  # Foo=元类()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1gm2qxadyxlj30i70463ye.jpg" alt="114-元类metaclass-类的创建.png"></p>
<h1 id="为什么用元类"><a href="#为什么用元类" class="headerlink" title="为什么用元类"></a>为什么用元类</h1><ul>
<li>元类是负责产生类的，所以我们学习元类或者自定义元类的目的：是为了控制类的产生过程，还可以控制对象的产生过程</li>
</ul>
<h1 id="内置函数exec-储备"><a href="#内置函数exec-储备" class="headerlink" title="内置函数exec(储备)"></a>内置函数exec(储备)</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x=1</span></span><br><span class="line"><span class="string">print(&#x27;exec函数运行了&#x27;)</span></span><br><span class="line"><span class="string">def func(self):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line"><span class="comment"># 执行cmd中的代码，然后把产生的名字丢入class_dic字典中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(cmd, &#123;&#125;, class_dic)  <span class="comment"># exec函数运行了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(class_dic)  <span class="comment"># &#123;&#x27;x&#x27;: 1, &#x27;func&#x27;: &lt;function func at 0x10a0bc048&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="class创建类"><a href="#class创建类" class="headerlink" title="class创建类"></a>class创建类</h1><ul>
<li>如果说类也是对象，那么用class关键字的去创建类的过程也是一个实例化的过程，该实例化的目的是为了得到一个类，调用的是元类</li>
<li>用class关键字创建一个类，用的默认的元类type，因此以前说不要用type作为类别判断</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span>  <span class="comment"># People=type(...)</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(People))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm2qxvspp3j30vu0epdgx.jpg" alt="114-元类metaclass-class关键字.png"></p>
<h2 id="5-1-type实现"><a href="#5-1-type实现" class="headerlink" title="5.1 type实现"></a>5.1 type实现</h2><ul>
<li>创建类的3个要素：类名，基类，类的名称空间</li>
<li>People = type(类名，基类，类的名称空间)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_name = <span class="string">&#x27;People&#x27;</span>  <span class="comment"># 类名</span></span><br><span class="line"></span><br><span class="line">class_bases = (<span class="built_in">object</span>, )  <span class="comment"># 基类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类的名称空间</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">country=&#x27;China&#x27;</span></span><br><span class="line"><span class="string">def __init__(self,name,age):</span></span><br><span class="line"><span class="string">    self.name=name</span></span><br><span class="line"><span class="string">    self.age=age</span></span><br><span class="line"><span class="string">def eat(self):</span></span><br><span class="line"><span class="string">    print(&#x27;%s is eating&#x27; %self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(</span><br><span class="line">    class_body,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    class_dic,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(class_name)  <span class="comment"># People</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(class_bases)  <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(class_dic)  <span class="comment"># 类的名称空间</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;country&#x27;: &#x27;China&#x27;, &#x27;__init__&#x27;: &lt;function __init__ at 0x10a0bc048&gt;, &#x27;eat&#x27;: &lt;function eat at 0x10a0bcd08&gt;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>People = type(类名，基类，类的名称空间)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">People1 = <span class="built_in">type</span>(class_name, class_bases, class_dic)</span><br><span class="line"><span class="built_in">print</span>(People1)  <span class="comment"># &lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">obj1 = People1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">obj1.eat()  <span class="comment"># 1 is eating</span></span><br></pre></td></tr></table></figure>

<ul>
<li>class创建的类的调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(People)  <span class="comment"># &lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">obj = People1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">obj.eat()  <span class="comment"># 1 is eating</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义元类控制类的创建"><a href="#自定义元类控制类的创建" class="headerlink" title="自定义元类控制类的创建"></a>自定义元类控制类的创建</h1><ul>
<li>使用自定义的元类</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Mymeta(type):  # 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span><br><span class="line">    def __init__(self, class_name, class_bases, class_dic):</span><br><span class="line">        print(&#x27;self:&#x27;, self)  # 现在是People</span><br><span class="line">        print(&#x27;class_name:&#x27;, class_name)</span><br><span class="line">        print(&#x27;class_bases:&#x27;, class_bases)</span><br><span class="line">        print(&#x27;class_dic:&#x27;, class_dic)</span><br><span class="line">        super(Mymeta, self).__init__(class_name, class_bases,</span><br><span class="line">                                     class_dic)  # 重用父类type的功能</span><br></pre></td></tr></table></figure>

<ul>
<li>分析用class自定义类的运行原理（而非元类的的运行原理）：<ol>
<li>拿到一个字符串格式的类名class_name=’People’</li>
<li>拿到一个类的基类们class_bases=(obejct,)</li>
<li>执行类体代码，拿到一个类的名称空间class_dic={…}</li>
<li>调用People=type(class_name,class_bases,class_dic)</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span>, metaclass=Mymeta</span>):</span>  <span class="comment"># People=Mymeta(类名,基类们,类的名称空间)</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;        </span></span><br><span class="line"><span class="string">self: &lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line"><span class="string">class_name: People</span></span><br><span class="line"><span class="string">class_bases: (&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line"><span class="string">class_dic: &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;People&#x27;, &#x27;country&#x27;: &#x27;China&#x27;, &#x27;__init__&#x27;: &lt;function People.__init__ at 0x10a0bcbf8&gt;, &#x27;eat&#x27;: &lt;function People.eat at 0x10a0bc2f0&gt;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>自定义元类控制类的产生过程，类的产生过程其实就是元类的调用过程</li>
<li>我们可以控制类必须有文档，可以使用如下的方式实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span>  <span class="comment"># 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span></span><br><span class="line">        <span class="keyword">if</span> class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(</span><br><span class="line">                class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>).strip()) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> class_name.istitle():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名首字母必须大写&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases,</span><br><span class="line">                                     class_dic)  <span class="comment"># 重用父类的功能</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span>, metaclass=Mymeta</span></span></span><br><span class="line"><span class="params"><span class="class">                 </span>):</span>  <span class="comment"># People  = Mymeta(&#x27;People&#x27;,(object,),&#123;....&#125;)</span></span><br><span class="line">        <span class="comment"># &quot;&quot;&quot;这是People类&quot;&quot;&quot;</span></span><br><span class="line">        country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">            self.name = name</span><br><span class="line">            self.age = age</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;类中必须有文档注释，并且文档注释不能为空&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="call-储备"><a href="#call-储备" class="headerlink" title="call(储备)"></a><strong>call</strong>(储备)</h1><ul>
<li>要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法、、<strong>call</strong>方法，该方法会在调用对象时自动触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__实现了，实例化对象可以加括号调用了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj(<span class="string">&#x27;lqz&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line">(<span class="string">&#x27;lqz&#x27;</span>,)</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">__call__实现了，实例化对象可以加括号调用了</span><br></pre></td></tr></table></figure>

<h1 id="new-储备"><a href="#new-储备" class="headerlink" title="new(储备)"></a><strong>new</strong>(储备)</h1><p>我们之前说类实例化第一个调用的是<strong>init</strong>，但<strong>init</strong>其实不是实例化一个类的时候第一个被调用 的方法。当使用 Persion(name, age) 这样的表达式来实例化一个类时，最先被调用的方法 其实是 <strong>new</strong> 方法。</p>
<p><strong>new</strong>方法接受的参数虽然也是和<strong>init</strong>一样，但<strong>init</strong>是在类实例创建之后调用，而 <strong>new</strong>方法正是创建这个类实例的方法。</p>
<p>注意：<strong><em>*new*</em>() 函数只能用于从object继承的新式类。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__new__方法被执行&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls.__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__init__方法被执行&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br></pre></td></tr></table></figure>

<h1 id="自定义元类控制类的实例化"><a href="#自定义元类控制类的实例化" class="headerlink" title="自定义元类控制类的实例化"></a>自定义元类控制类的实例化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self)  <span class="comment"># self是People</span></span><br><span class="line">        <span class="built_in">print</span>(args)  <span class="comment"># args = (&#x27;lqz&#x27;,)</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs)  <span class="comment"># kwargs = &#123;&#x27;age&#x27;:18&#125;</span></span><br><span class="line">        <span class="comment"># return 123</span></span><br><span class="line">        <span class="comment"># 1. 先造出一个People的空对象，申请内存空间</span></span><br><span class="line">        <span class="comment"># __new__方法接受的参数虽然也是和__init__一样，但__init__是在类实例创建之后调用，而 __new__方法正是创建这个类实例的方法。</span></span><br><span class="line">        obj = self.__new__(self)  <span class="comment"># 虽然和下面同样是People，但是People没有，找到的__new__是父类的</span></span><br><span class="line">        <span class="comment"># 2. 为该对空对象初始化独有的属性</span></span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 3. 返回一个初始化好的对象</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure>

<ul>
<li>People = Mymeta()，People()则会触发<strong>call</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span>, metaclass=Mymeta</span>):</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     在调用Mymeta的__call__的时候，首先会找自己（如下函数）的，自己的没有才会找父类的</span></span><br><span class="line"><span class="comment">#     def __new__(cls, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#         # print(cls)  # cls是People</span></span><br><span class="line"><span class="comment">#         # cls.__new__(cls) # 错误，无限死循环，自己找自己的，会无限递归</span></span><br><span class="line"><span class="comment">#         obj = super(People, cls).__new__(cls)  # 使用父类的，则是去父类中找__new__</span></span><br><span class="line"><span class="comment">#         return obj</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类的调用，即类实例化就是元类的调用过程，可以通过元类Mymeta的<strong>call</strong>方法控制</li>
<li>分析：调用Pepole的目的<ol>
<li>先造出一个People的空对象</li>
<li>为该对空对象初始化独有的属性</li>
<li>返回一个初始化好的对象</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = People(<span class="string">&#x27;lqz&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.People&#x27;&gt;</span></span><br><span class="line"><span class="string">(&#x27;lqz&#x27;,)</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqz&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义元类后类的继承顺序"><a href="#自定义元类后类的继承顺序" class="headerlink" title="自定义元类后类的继承顺序"></a>自定义元类后类的继承顺序</h1><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p>
<p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的 一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象OldboyTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span>  <span class="comment"># 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n = <span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args,</span></span></span><br><span class="line"><span class="params"><span class="function">                 **kwargs</span>):</span>  <span class="comment">#self=&lt;class &#x27;__main__.OldboyTeacher&#x27;&gt;</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    n = <span class="number">333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">Foo, metaclass=Mymeta</span>):</span></span><br><span class="line">    n = <span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the oldboy to learn Python&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OldboyTeacher.n)  <span class="comment"># 111 # 自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为OldboyTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OldboyTeacher.n)  <span class="comment"># 111</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查找顺序：<ol>
<li>先对象层：OldoyTeacher-&gt;Foo-&gt;Bar-&gt;object</li>
<li>然后元类层：Mymeta-&gt;type</li>
</ol>
</li>
</ul>
<p>依据上述总结，我们来分析下元类Mymeta中<strong>call</strong>里的self.<strong>new</strong>的查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    n = <span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args,</span></span></span><br><span class="line"><span class="params"><span class="function">                 **kwargs</span>):</span>  <span class="comment">#self=&lt;class &#x27;__main__.OldboyTeacher&#x27;&gt;</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__new__ <span class="keyword">is</span> <span class="built_in">object</span>.__new__)  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    n = <span class="number">333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n = <span class="number">222</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">Foo, metaclass=Mymeta</span>):</span></span><br><span class="line">    n = <span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the oldboy to learn Python&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;OldboyTeacher.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>,</span><br><span class="line">              <span class="number">18</span>)  <span class="comment"># 触发OldboyTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找</span></span><br></pre></td></tr></table></figure>

<p>总结，Mymeta下的<strong>call</strong>里的self.<strong>new</strong>在OldboyTeacher、Foo、Bar里都没有找到<strong>new</strong>的情况下，会去找object里的<strong>new</strong>，而object下默认就有一个<strong>new</strong>，所以即便是之前的类均未实现<strong>new</strong>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找<strong>new</strong></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>需求：使用元类修改属性为隐藏属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span></span><br><span class="line">        <span class="comment"># 加上逻辑，控制类Foo的创建</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases, class_dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 加上逻辑，控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 修改属性为隐藏属性</span></span><br><span class="line">        obj.__dict__ = &#123;</span><br><span class="line">            <span class="string">&#x27;_%s__%s&#x27;</span> % (self.__name__, k): v</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> obj.__dict__.items()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span>, metaclass=Mymeta</span>):</span>  <span class="comment"># Foo = Mymeta(...)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)  <span class="comment"># &#123;&#x27;_Foo__name&#x27;: &#x27;egon&#x27;, &#x27;_Foo__age&#x27;: 18, &#x27;_Foo__sex&#x27;: &#x27;male&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>类和数据类型、类的继承</title>
    <url>/9d01c62a.html</url>
    <content><![CDATA[<h1 id="类和数据类型"><a href="#类和数据类型" class="headerlink" title="类和数据类型"></a>类和数据类型</h1><h2 id="python3中统一了类与类型的概念，类就是类型"><a href="#python3中统一了类与类型的概念，类就是类型" class="headerlink" title="python3中统一了类与类型的概念，类就是类型"></a>python3中统一了类与类型的概念，类就是类型</h2><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(obj))  <span class="comment"># &lt;class &#x27;__main__.Foo&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lis2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lis))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>lis和lis2都是实例化的对象，因此lis使用append方法和lis2无关</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis.append(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(lis)  <span class="comment"># [1, 2, 3, 7]</span></span><br><span class="line"><span class="built_in">print</span>(lis2)  <span class="comment"># [4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="list-append-方法原理"><a href="#list-append-方法原理" class="headerlink" title="list.append()方法原理"></a>list.append()方法原理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;nick&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu1.choose_course(<span class="number">1</span>)  <span class="comment"># 1 choosing course</span></span><br><span class="line">OldboyStudent.choose_course(stu1, <span class="number">1</span>)  <span class="comment"># 1 choosing course</span></span><br><span class="line"></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># lis = list([1,2,3])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lis))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">lis.append(<span class="number">4</span>)  <span class="comment"># list.append(lis,4)</span></span><br><span class="line"><span class="built_in">print</span>(lis)  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.append(lis, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(lis)  <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h1 id="对象的高度整合"><a href="#对象的高度整合" class="headerlink" title="对象的高度整合"></a>对象的高度整合</h1><h2 id="没有对象"><a href="#没有对象" class="headerlink" title="没有对象"></a>没有对象</h2><ul>
<li>以未来我们要连接数据库举例，如果没有面向对象的思想，我们只要想要使用一个方法，就必须得这样做</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql  <span class="comment"># 连接mysql的三方库，可以pip3 install pymysql安装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exc1</span>(<span class="params">host, port, db, charset, sql</span>):</span></span><br><span class="line">    conn = pymysql.connect(host, port, db, charset)</span><br><span class="line">    conn.execute(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exc2</span>(<span class="params">proc_name</span>):</span></span><br><span class="line">    conn = pymysql.connect(host, port, db, charsett)</span><br><span class="line">    conn.call_proc(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exc1(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;select * from t1&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;select * from t2&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;select * from t3&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;select * from t4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>由于host、port、db、charset可能是固定不变的，sql一直在变化，因此我们通过上述的方法实现不同的sql语句，非常麻烦，因此我们可以改用默认形参</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exc1</span>(<span class="params">sql, host=<span class="string">&#x27;1.1.1.1&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;db1&#x27;</span>, charset=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    conn = pymysql.connect(host, port, db, charset)</span><br><span class="line">    conn.execute(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line">exc1(<span class="string">&#x27;select * from t1&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;select * from t2&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;select * from t3&#x27;</span>)</span><br><span class="line">exc1(<span class="string">&#x27;select * from t4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>虽然是用默认参数简化了操作，但是对于不同引用的对象，参数并不是一成不变的，或者我们需要对exc2方法进行修改，这是非常麻烦的，因此可以考虑使用面向对象</li>
</ul>
<h2 id="有对象"><a href="#有对象" class="headerlink" title="有对象"></a>有对象</h2><ul>
<li>有了面向对象之后，对于上述的例子，我们可以这样做</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port, db, chartset</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.db = db</span><br><span class="line">        self.charset = chartset</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exc1</span>(<span class="params">self, sql</span>):</span></span><br><span class="line">        conn = pymysql.connect(self.host, self.port, self.db, self.charset)</span><br><span class="line">        conn.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exc2</span>(<span class="params">self, proc_name</span>):</span></span><br><span class="line">        conn = pymysql.connect(self.host, self.port, self.db, self.charsett)</span><br><span class="line">        conn.call_proc(sql)</span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">obj1.exc1(<span class="string">&#x27;select * from t1&#x27;</span>)</span><br><span class="line">obj1.exc1(<span class="string">&#x27;select * from t2&#x27;</span>)</span><br><span class="line">obj1.exc1(<span class="string">&#x27;select * from t3&#x27;</span>)</span><br><span class="line">obj1.exc1(<span class="string">&#x27;select * from t4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj2 = Foo(<span class="string">&#x27;1.1.1.2&#x27;</span>, <span class="number">3306</span>, <span class="string">&#x27;db1&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">obj2.exc1(<span class="string">&#x27;select * from t4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>对于上述发生的现象，我们可以总结对象其实就是一个高度整合的产物，整合数据与专门操作该数据的方法（绑定方法）</li>
</ul>
<h1 id="面向对象基础小结"><a href="#面向对象基础小结" class="headerlink" title="面向对象基础小结"></a>面向对象基础小结</h1><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>面向过程编程：类似于工厂的流水线</p>
<ul>
<li>优点：逻辑清晰</li>
<li>缺点：扩展性差</li>
</ul>
<p>面向对象编程：核心是对象二字，对象属性和方法的集合体，面向对象编程就是一堆对象交互</p>
<ul>
<li>优点：扩展性强</li>
<li>缺点：逻辑非常乱</li>
</ul>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul>
<li>对象：属性和方法的集合体</li>
<li>类：一系列相同属性和方法的集合体</li>
</ul>
<p>现实世界中先有对象后有类，python中先有类，再实例化出对象</p>
<h2 id="对象的属性的查找顺序"><a href="#对象的属性的查找顺序" class="headerlink" title="对象的属性的查找顺序"></a>对象的属性的查找顺序</h2><p>先对象本身-–&gt;类–-&gt;父类-–&gt;父类的父类-–&gt;object–-&gt;自己定制的元类-–&gt;type</p>
<h2 id="给对象定制独有属性"><a href="#给对象定制独有属性" class="headerlink" title="给对象定制独有属性"></a>给对象定制独有属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = Peolple()</span><br><span class="line">p1.name = <span class="string">&#x27;nick&#x27;</span></span><br><span class="line"></span><br><span class="line">p2 = People()</span><br><span class="line">p2.name = <span class="string">&#x27;tank&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象的绑定方法"><a href="#对象的绑定方法" class="headerlink" title="对象的绑定方法"></a>对象的绑定方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="built_in">print</span>(self, <span class="string">&#x27;eat....&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = Peolple()</span><br><span class="line">p1.eat() </span><br><span class="line">p1.name = <span class="string">&#x27;nick&#x27;</span></span><br><span class="line"></span><br><span class="line">p2 = People()</span><br><span class="line">p2.eat()</span><br><span class="line">p2.name = <span class="string">&#x27;tank&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="类与数据类型"><a href="#类与数据类型" class="headerlink" title="类与数据类型"></a>类与数据类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  <span class="comment"># lis = list([1,2,3])</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">    	self.name = name</span><br><span class="line"></span><br><span class="line">f = foo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lis.append(<span class="number">4</span>)  <span class="comment"># 对象调对象绑定的方法,会自动传参</span></span><br><span class="line"><span class="built_in">list</span>.append(lis,<span class="number">4</span>)  <span class="comment"># 类调用对象绑定的方法,必须得传参</span></span><br></pre></td></tr></table></figure>

<h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><h4 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h4><ul>
<li>继承是一种新建类的方式，新建的类称为子类，被继承的类称为父类</li>
<li>继承的特性是：子类会遗传父类的属性</li>
<li>继承是类与类之间的关系</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1glvts5mfutj30dv085gm8.jpg" alt="89-类的继承-继承.jpg"></p>
<h4 id="为什么用继承"><a href="#为什么用继承" class="headerlink" title="为什么用继承"></a>为什么用继承</h4><ul>
<li>使用继承可以减少代码的冗余</li>
</ul>
<h2 id="对象的继承"><a href="#对象的继承" class="headerlink" title="对象的继承"></a>对象的继承</h2><ul>
<li>Python中支持一个类同时继承多个父类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span>(<span class="params">Parent1, Parent2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<strong>bases</strong>方法可以获取对象继承的类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(Sub1.__bases__)  <span class="comment"># (&lt;class &#x27;__main__.Parent1&#x27;&gt;, &lt;class &#x27;__main__.Parent2&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在Python3中如果一个类没有继承任何类，则默认继承object类</li>
<li>在Python2中如果一个类没有继承任何类，不会继承object类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(Parent1.__bases__)  <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br></pre></td></tr></table></figure>

<h2 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h2><h3 id="新式类"><a href="#新式类" class="headerlink" title="新式类"></a>新式类</h3><ul>
<li>继承了object的类以及该类的子类，都是新式类</li>
<li>Python3中所有的类都是新式类</li>
</ul>
<h3 id="经典类"><a href="#经典类" class="headerlink" title="经典类"></a>经典类</h3><ul>
<li>没有继承object的类以及该类的子类，都是经典类</li>
<li>只有Python2中才有经典类</li>
</ul>
<h2 id="继承与抽象"><a href="#继承与抽象" class="headerlink" title="继承与抽象"></a>继承与抽象</h2><p>继承描述的是子类与父类之间的关系，是一种什么是什么的关系。要找出这种关系，必须先抽象再继承，抽象即抽取类似或者说比较像的部分。</p>
<p>抽象分成两个层次：</p>
<ol>
<li>将奥巴马和梅西这俩对象比较像的部分抽取成类；</li>
<li>将人，猪，狗这三个类比较像的部分抽取成父类。</li>
</ol>
<p>抽象最主要的作用是划分类别（可以隔离关注点，降低复杂度），如下图所示：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glvtsjiddoj30lq0afgp4.jpg" alt="89-类的继承-抽象图.png"></p>
<p>继承：基于抽象的结果，通过编程语言去实现它，肯定是先经历抽象这个过程，才能通过继承的方式去表达出抽象的结构。</p>
<p>抽象只是分析和设计的过程中，一个动作或者说一种技巧，通过抽象可以得到类，如下图所示：</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/0081Kckwgy1glvtst5jygj30nu0bjn1o.jpg" alt="89-类的继承-继承图.png"></p>
<h2 id="继承的应用"><a href="#继承的应用" class="headerlink" title="继承的应用"></a>继承的应用</h2><ul>
<li>牢记对象是特征与功能的集合体，我们可以拿选课系统举例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;由于学生和老师都是人，因此人都有姓名、年龄、性别&quot;&quot;&quot;</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing course&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, stu_obj, num</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is scoring&#x27;</span> % self.name)</span><br><span class="line">        stu_obj.score = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">tea1 = OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>对象查找属性的顺序：对象自己—》对象的类—》父类—》父类。。。</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glvttee3l6j308c094t8s.jpg" alt="89-类的继承-查找.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.school)  <span class="comment"># oldboy</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tea1.school)  <span class="comment"># oldboy</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">tea1.score(stu1, <span class="number">99</span>)  <span class="comment"># lqz is scoring</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;, &#x27;score&#x27;: 99&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性查找练习"><a href="#属性查找练习" class="headerlink" title="属性查找练习"></a>属性查找练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象查找属性的顺序：对象自己-》对象的类-》父类-》父类。。。</span></span><br><span class="line">obj = Bar()  <span class="comment"># self是obj本身，即找到Bar的f1()</span></span><br><span class="line">obj.f2()</span><br><span class="line">Foo.f2</span><br><span class="line">Bar.f1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>类和对象、属性查找及绑定方法</title>
    <url>/152c7478.html</url>
    <content><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><ul>
<li>类的意思：种类、分类、类别</li>
</ul>
<p>对象是特征与技能的结合体，我可能有身高体重、而你也有身高体重，所以你会说你像我，但是你一定不会说你像阿猫阿狗。并且我和你其实就可以说成是一类，而你和选课系统不能说是一类，因此给出类的定义：类就是一系列对象相似的特征与技能的结合体。</p>
<p>在现实世界中：先有一个个具体存在的对象，然后随着人类文明的发展才了分类的概念，既然现实世界中有类这个概念，Python程序中也一定有类这个概念，但是在Python程序中：必须先定义类，然后调用类来产生对象。</p>
<span id="more"></span>

<h2 id="现实世界中定义类和对象"><a href="#现实世界中定义类和对象" class="headerlink" title="现实世界中定义类和对象"></a>现实世界中定义类和对象</h2><h3 id="定义对象"><a href="#定义对象" class="headerlink" title="定义对象"></a>定义对象</h3><p>就拿未来我们的选课系统来讲，我们先总结一套现实世界中的学生对象：</p>
<ul>
<li>对象1：<ul>
<li>特征：<ul>
<li>学校=’oldboy’</li>
<li>姓名=’耗哥’</li>
<li>年龄=18</li>
<li>性别=’male’</li>
</ul>
</li>
<li>技能：<ul>
<li>选课</li>
</ul>
</li>
</ul>
</li>
<li>对象2：<ul>
<li>特征：<ul>
<li>学校=’oldboy’</li>
<li>姓名=’猪哥’</li>
<li>年龄=17</li>
<li>性别=’male’</li>
</ul>
</li>
<li>技能：<ul>
<li>选课</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>站在未来选课系统的角度，我们还可以总结现实世界中的学生类：</p>
<ul>
<li>老男孩学生类：<ul>
<li>相似的特征：<ul>
<li>学校=’oldboy’</li>
</ul>
</li>
<li>相似的技能<ul>
<li>选课</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="程序中定义类和对象"><a href="#程序中定义类和对象" class="headerlink" title="程序中定义类和对象"></a>程序中定义类和对象</h2><h3 id="定义类-1"><a href="#定义类-1" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意类中定义变量使用驼峰体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>():</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<ul>
<li>曾经定义函数，函数只检测语法，不执行代码，但是定义类的时候，类体代码会在类定义阶段就立刻执行，并且会产生一个类的名称空间，也就是说类的本身其实就是一个容器/名称空间，是用来存放名字的，这是类的用途之一</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(OldboyStudent.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;school&#x27;: &#x27;oldboy&#x27;, &#x27;choose_course&#x27;: &lt;function OldboyStudent.choose_course at 0x10d653ae8&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;OldboyStudent&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;OldboyStudent&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.__dict__[<span class="string">&#x27;school&#x27;</span>])  <span class="comment"># oldboy</span></span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.__dict__[<span class="string">&#x27;choose_course&#x27;</span>])  <span class="comment"># &lt;function OldboyStudent.choose_course at 0x10d653ae8&gt;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    OldboyStudent.__dict__[<span class="string">&#x27;choose_course&#x27;</span>]()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:&#x27;</span>, e)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">error: choose_course() missing 1 required positional argument: &#x27;self&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>   </span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.school)  <span class="comment"># oldboy</span></span><br><span class="line">OldboyStudent.choose_course(<span class="number">111</span>)  <span class="comment"># is choosing course</span></span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.choose_course)  <span class="comment"># &lt;function OldboyStudent.choose_course at 0x10d653ae8&gt;</span></span><br><span class="line">OldboyStudent.__dict__[<span class="string">&#x27;choose_course&#x27;</span>]  <span class="comment"># &lt;function __main__.OldboyStudent.choose_course(self)&gt;</span></span><br><span class="line">OldboyStudent.country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">OldboyStudent.__dict__[<span class="string">&#x27;country&#x27;</span>]  <span class="comment"># &#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">OldboyStudent.country=<span class="string">&#x27;CHINA&#x27;</span></span><br><span class="line">OldboyStudent.__dict__[<span class="string">&#x27;country&#x27;</span>]  <span class="comment"># &#x27;CHINA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> OldboyStudent.school</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;school&#x27;: &#x27;oldboy&#x27;, &#x27;choose_course&#x27;: &lt;function OldboyStudent.choose_course at 0x10d653ae8&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;OldboyStudent&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;OldboyStudent&#x27; objects&gt;, &#x27;__doc__&#x27;: None, &#x27;country&#x27;: &#x27;CHINA&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="定义对象-1"><a href="#定义对象-1" class="headerlink" title="定义对象"></a>定义对象</h3><ul>
<li>调用类即可产生对象，调用类的过程，又称为类的实例化，实例化的结果称为类的对象/实例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1=OldboyStudent() <span class="comment"># 调用类会得到一个返回值，该返回值就是类的一个具体存在的对象/实例</span></span><br><span class="line"><span class="built_in">print</span>(stu1.school)  <span class="comment"># oldboy</span></span><br><span class="line"></span><br><span class="line">stu2=OldboyStudent() <span class="comment"># 调用类会得到一个返回值，该返回值就是类的一个具体存在的对象/实例</span></span><br><span class="line"><span class="built_in">print</span>(stu2.school)  <span class="comment"># oldboy</span></span><br><span class="line"></span><br><span class="line">stu3=OldboyStudent() <span class="comment"># 调用类会得到一个返回值，该返回值就是类的一个具体存在的对象/实例</span></span><br><span class="line">stu3.choose_course() <span class="comment"># is choosing course</span></span><br></pre></td></tr></table></figure>

<h1 id="定制对象独有特征"><a href="#定制对象独有特征" class="headerlink" title="定制对象独有特征"></a>定制对象独有特征</h1><p>类中定义的函数是类的函数属性，类可以使用，但使用的就是一个普通的函数而已，意味着需要完全遵循函数的参数规则，该传几个值就传几个</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent()</span><br><span class="line">stu2 = OldboyStudent()</span><br><span class="line">stu3 = OldboyStudent()</span><br></pre></td></tr></table></figure>

<ul>
<li>对于上述的学生类，如果类的属性改了，则其他对象的属性也会随之改变</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OldboyStudent.school = <span class="string">&#x27;OLDBOY&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1.school)  <span class="comment"># OLDBOY</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.school)  <span class="comment"># OLDBOY</span></span><br></pre></td></tr></table></figure>

<h2 id="定制对象独有特征-1"><a href="#定制对象独有特征-1" class="headerlink" title="定制对象独有特征"></a>定制对象独有特征</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.__dict__)  <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象本质类似于类，也是一个名称空间，但是对象的名称空间存放对象独有的名字，而类中存放的是对象们共有的名字。因此我们可以直接为对象单独定制名字。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1.name = <span class="string">&#x27;tank&#x27;</span></span><br><span class="line">stu1.age = <span class="number">18</span></span><br><span class="line">stu1.gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.name, stu1.age, stu1.gender)</span><br><span class="line">tank <span class="number">18</span> male</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(stu2.name, stu2.age, stu2.gender)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># &#x27;OldboyStudent&#x27; object has no attribute &#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu2.name = <span class="string">&#x27;sean&#x27;</span></span><br><span class="line">stu2.age = <span class="number">19</span></span><br><span class="line">stu2.gender = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.name, stu2.age, stu2.gender)  <span class="comment"># sean 19 female</span></span><br></pre></td></tr></table></figure>

<h2 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h2><ul>
<li>首先从自身查找，没找到往类中找，类中没有则会报错。即对象的属性查找顺序为：自身–》类–》报错</li>
</ul>
<h2 id="类定义阶段定制属性"><a href="#类定义阶段定制属性" class="headerlink" title="类定义阶段定制属性"></a>类定义阶段定制属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">obj, x, y, z</span>):</span></span><br><span class="line">    obj.name = x</span><br><span class="line">    obj.age = y</span><br><span class="line">    obj.gender = z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init(stu1, <span class="string">&#x27;tank1&#x27;</span>, <span class="number">181</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1.name, stu1.age, stu1.gender)  <span class="comment"># tank1 181 male</span></span><br><span class="line"></span><br><span class="line">init(stu2, <span class="string">&#x27;sean1&#x27;</span>, <span class="number">191</span>, <span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu2.name, stu2.age, stu2.gender)  <span class="comment"># sean1 191 female</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用上述方法虽然让我们定制属性更简单，但是还是太麻烦了，如果可以在实例化对象的时候自动触发定时属性，那就更方便了，因此可以使用类的<strong>init</strong>方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;调用类的时候自动触发&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    stu1 = OldboyStudent()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># __init__() missing 3 required positional arguments: &#x27;name&#x27;, &#x27;age&#x27;, and &#x27;gender&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="comment"># **************************************************</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过上述现象可以发现，调用类时发生两件事：<ol>
<li>创造一个空对象</li>
<li>自动触发类中<strong>init</strong>功能的执行，将stu1以及调用类括号内的参数一同传入</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;lqz&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="属性查找-1"><a href="#属性查找-1" class="headerlink" title="属性查找"></a>属性查找</h1><ul>
<li>先从对象自己的名称空间找，没有则去类中找，如果类也没有则报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    aa = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, z</span>):</span>  <span class="comment">#会在调用类时自动触发</span></span><br><span class="line">        self.name = x  <span class="comment"># stu1.name=&#x27;耗哥&#x27;</span></span><br><span class="line">        self.age = y  <span class="comment"># stu1.age=18</span></span><br><span class="line">        self.sex = z  <span class="comment"># stu1.sex=&#x27;male&#x27;</span></span><br><span class="line">        OldboyStudent.count += <span class="number">1</span></span><br><span class="line">        <span class="comment">#         self.count += 5</span></span><br><span class="line">        self.aa = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.count)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;nick&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1.count)  <span class="comment">#  1</span></span><br><span class="line"></span><br><span class="line">stu2 = OldboyStudent(<span class="string">&#x27;sean&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu2.count)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">stu3 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu3.count)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OldboyStudent.count) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name)  <span class="comment"># nick</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>由于上述修改的是类属性，类属性的count已经被修改为3，所以其他实例的count都为3</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.count)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.count)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu3.count)  <span class="comment"># 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>由于aa是私有属性，因此stu们都会用自己私有的aa，不会用类的aa</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;nick&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;aa&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;sean&#x27;, &#x27;age&#x27;: 17, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;aa&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu3.__dict__)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;tank&#x27;, &#x27;age&#x27;: 19, &#x27;sex&#x27;: &#x27;female&#x27;, &#x27;aa&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="对象的绑定方法"><a href="#对象的绑定方法" class="headerlink" title="对象的绑定方法"></a>对象的绑定方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>类名称空间中定义的数据属性和函数属性都是共享给所有对象用的</li>
<li>对象名称空间中定义的只有数据属性，而且是对象所独有的数据属性</li>
</ul>
<h2 id="类使用对象的绑定对象"><a href="#类使用对象的绑定对象" class="headerlink" title="类使用对象的绑定对象"></a>类使用对象的绑定对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1 = OldboyStudent(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu2 = OldboyStudent(<span class="string">&#x27;sean&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu3 = OldboyStudent(<span class="string">&#x27;tank&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1.name)  <span class="comment"># lqz</span></span><br><span class="line"><span class="built_in">print</span>(stu1.school)  <span class="comment"># oldboy</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类中定义的函数是类的函数属性，类可以使用，但使用的就是一个普通的函数而已，意味着需要完全遵循函数的参数规则，该传几个值就传几个</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(OldboyStudent.choose_course)  <span class="comment"># &lt;function OldboyStudent.choose_course at 0x10558e840&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    OldboyStudent.choose_course(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;    </span></span><br><span class="line"><span class="string">&#x27;int&#x27; object has no attribute &#x27;name&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象使用对象的绑定方法"><a href="#对象使用对象的绑定方法" class="headerlink" title="对象使用对象的绑定方法"></a>对象使用对象的绑定方法</h2><ul>
<li>类中定义的函数是共享给所有对象的，对象也可以使用，而且是绑定给对象用的，</li>
<li>绑定的效果：绑定给谁，就应该由谁来调用，谁来调用就会将谁当作第一个参数自动传入</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1.choose_course))  <span class="comment"># 4379911304</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2.choose_course))  <span class="comment"># 4379911304</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu3.choose_course))  <span class="comment"># 4379911304</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(OldboyStudent.choose_course))  <span class="comment"># 4384680000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1.school))  <span class="comment"># 4380883688</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2.school))  <span class="comment"># 4380883688</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu3.school))  <span class="comment"># 4380883688</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1.name), <span class="built_in">id</span>(stu2.name), <span class="built_in">id</span>(stu3.name))</span><br><span class="line"><span class="comment"># 4384509600 4384506072 4384507864</span></span><br><span class="line"></span><br><span class="line">stu1.choose_course()  <span class="comment"># lqz choosing course</span></span><br><span class="line"></span><br><span class="line">stu2.choose_course()  <span class="comment"># sean choosing course</span></span><br><span class="line"></span><br><span class="line">stu3.choose_course()  <span class="comment"># tank choosing course</span></span><br></pre></td></tr></table></figure>

<ul>
<li>补充：类中定义的函数，类确实可以使用，但其实类定义的函数大多情况下都是绑定给对象用的，所以在类中定义的函数都应该自带一个参数self</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1.func()  <span class="comment"># from func</span></span><br><span class="line"></span><br><span class="line">stu2.func()  <span class="comment"># from func</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins安装</title>
    <url>/5d15ec84.html</url>
    <content><![CDATA[<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins 是一个开源提供友好操作界面的持续集成的工 具，是由 JAVA 开发而成</p>
<p>Jenkins 是一个调度平台，本身不处理任何事情，调用 插件来完成所有的工作</p>
<span id="more"></span>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方文档: https://www.jenkins.io/zh/doc/book/installing/</span></span><br><span class="line"><span class="comment"># 安装方式有多种</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙和selinux</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i  s<span class="comment">#enforcing#disabled#g /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置语言环境</span></span><br><span class="line">localectl set-locale LANG=en_US.UTF-8</span><br><span class="line">localectl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装jdk11</span></span><br><span class="line">yum install java-11-openjdk-devel -y</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum localinstall -y https://mirror.tuna.tsinghua.edu.cn/jenkins/redhat/jenkins-2.303-1.1.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录结构</span></span><br><span class="line">rpm -ql jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_USER=<span class="string">&quot;root&quot;</span> <span class="comment"># 运行Jenkins的用户身份，避免后期权限不足的情况 </span></span><br><span class="line">JENKINS_PORT=<span class="string">&quot;80&quot;</span>  <span class="comment"># 如果jenkins监听在80端口，运行身份必须为root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start jenkins</span><br><span class="line">systemctl <span class="built_in">enable</span> jenkins</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>访问的时候需要解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line"><span class="comment"># 这个密码也是默认的admin密码</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109104122460.png" alt="image-20220109104122460"></p>
<p>   跳过插件安装</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109104325063.png" alt="image-20220109104325063"></p>
<p>直接进入Jenkins</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109104343502.png" alt="image-20220109104343502"></p>
<p>先配置管理密码</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109104456161.png" alt="image-20220109104456161"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109104541671.png" alt="image-20220109104541671"></p>
<h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p> Jenkins系统管理中的插件管理非常重要，因为的工作全部是由插件来完成，但插件默认从国外下载，速度会很慢，所以需要在安装插件前将下载地址改为国内的下载地址</p>
<p>1.修改jenkins “下载插件” 地址为国内源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jenkins检测地址</span></span><br><span class="line">sed -i <span class="string">&#x27;s#http://www.google.com/#https://www.baidu.com/#g&#x27;</span> /var/lib/jenkins/updates/default.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins插件下载地址</span></span><br><span class="line">sed -i <span class="string">&#x27;s#updates.jenkins.io/download#mirror.tuna.tsinghua.edu.cn/jenkins#g&#x27;</span> /var/lib/jenkins/updates/default.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https://mirror.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109105629652.png" alt="image-20220109105629652"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面地址填入该地址</span></span><br><span class="line">https://mirror.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109105730451.png" alt="image-20220109105730451"></p>
<p>插件可以选择上传hpi文件安装</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109111909979.png" alt="image-20220109111909979"></p>
<p>安装中文插件</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109105902878.png" alt="image-20220109105902878"></p>
<p>离线安装插件</p>
<p>将之前jenkins服务器的插件保存下来，然后导入到服务器中，(离线安装)，最后重启 Jenkins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget plugins.tar.gz</span><br><span class="line">tar xf jenkins_plugin.tar.gz -C /var/lib/jenkins/plugins/</span><br><span class="line">chown -R jenkins.jenkins /var/lib/jenkins/plugins/</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>





<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>这个版本有告警漏洞提示</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220109110751446.png" alt="image-20220109110751446"></p>
<p>根据提示下载对应的war包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载高版本war包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/2.314/jenkins.war</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Jenkins</span></span><br><span class="line">systemctl stop jenkins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份war包</span></span><br><span class="line">mv /usr/lib/jenkins/jenkins.war /usr/lib/jenkins/jenkins.war.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新版本的war包替换过来</span></span><br><span class="line">mv jenkins.war /usr/lib/jenkins/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab安装使用</title>
    <url>/82fee27f.html</url>
    <content><![CDATA[<h2 id="gitlab-ce"><a href="#gitlab-ce" class="headerlink" title="gitlab-ce"></a><code>gitlab-ce</code></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙和selinux</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i  s<span class="comment">#enforcing#disabled#g /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">yum install -y curl wget postfix openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载gitlab包</span></span><br><span class="line"><span class="comment"># 下载地址：https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.9.9-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum localinstall -y gitlab-ce-12.9.9-ce.0.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab相关配置</span></span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名配置</span></span><br><span class="line">external_url <span class="string">&#x27;http://gitlab.example.com&#x27;</span></span><br><span class="line"><span class="comment"># 如果要配置https，将url改成https，然后将证书拷贝到 /etc/gitlab/ssl/域名.&#123;key,crt&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置发送的邮箱</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;2564334707@qq.com&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_display_name&#x27;</span>] = <span class="string">&#x27;gitlab-admin&#x27;</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;2564334707@qq.com&quot;</span>  <span class="comment"># 发件人邮箱账户</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;&quot;</span>  <span class="comment"># 授权码</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭监控组件(按需求关闭或启用)</span></span><br><span class="line">prometheus[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">prometheus[<span class="string">&#x27;monitor_kubernetes&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">alertmanager[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">node_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">redis_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">postgres_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">prometheus_monitoring[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">grafana[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  初始化gitlab组件</span></span><br><span class="line">gitlab-ctl reconfigure  <span class="comment"># 初始化</span></span><br><span class="line">gitlab-ctl status       <span class="comment"># 查看状态</span></span><br><span class="line">gitlab-ctl stop         <span class="comment"># 停止 </span></span><br><span class="line">gitlab-ctl start        <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证邮箱组件</span></span><br><span class="line">gitlab-rails console Notify.test_email(<span class="string">&#x27;接收者地址&#x27;</span>,<span class="string">&#x27;标题&#x27;</span>,<span class="string">&#x27;内容&#x27;</span>).deliver_now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网页访问，第一次进入需要修改密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 汉化包地址: https://gitlab.com/xhang/gitlab</span></span><br><span class="line">wget https://gitlab.com/xhang/gitlab/-/archive/12-3-stable-zh/gitlab-12-3-stable-zh.tar.gz</span><br><span class="line">tar xf gitlab-12-3-stable-zh.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line">\cp -r gitlab-12-3-stable-zh/* /opt/gitlab/embedded/service/gitlab-rails/</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文</span></span><br><span class="line">头像位置 --&gt; settings --&gt; Preferences --&gt; Localization --&gt; 选择简体中文</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果使用user创建一个仓库，那么这个用户就是这个仓库的owner</p>
<p>如果使用group创建一个仓库，那么这个组下添加的所有用户就是这个仓库的owner</p>
<p>主程序员角色能对master分支及其他分支操作</p>
<p>开发者只能对非master分支操作(默认master分支是受保护的，可以关闭)</p>
<p>开发者在其他分支上操作之后可以提交合并master请求</p>
<h3 id="备份恢复迁移"><a href="#备份恢复迁移" class="headerlink" title="备份恢复迁移"></a>备份恢复迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份配置</span></span><br><span class="line">cat /etc/gitlab/gitlab.rb</span><br><span class="line">...</span><br><span class="line">gitlab_rails[<span class="string">&#x27;manage_backup_path&#x27;</span>] = <span class="literal">true</span>                  <span class="comment"># 开启备份</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/var/opt/gitlab/backups&quot;</span>    <span class="comment"># 备份路径，可变更</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800                  <span class="comment"># 备份保留时间</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变更了路径需要重新配置</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line">gitlab-ctl reconfigure </span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#  备份命令(可以写入定时任务)</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="comment"># 停止写入数据</span></span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复(BACKUP 后面只需要备份文件的时间名称就行)</span></span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1641691573_2022_01_09_12.3.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启组件</span></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移升级步骤</span></span><br><span class="line">备份: /etc/gitlab/gitlab.rb 和 backup 备份文件</span><br><span class="line">新节点安装对应版本的gitlab进行恢复数据</span><br><span class="line">新节点此时可以选择升级或者不升级，升级不能跨版本升级，12.3 --&gt; 12.9.9(当前版本的最后一个版本) --&gt; 13</span><br></pre></td></tr></table></figure>

<h3 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记<code>root</code>密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-rails console -e production</span><br><span class="line"></span><br><span class="line">User.where(username:<span class="string">&quot;root&quot;</span>).first</span><br><span class="line">user.password = <span class="string">&quot;test123456&quot;</span></span><br><span class="line">user.save!</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/ca675cd4.html</url>
    <content><![CDATA[<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.windows系统</span><br><span class="line">https://git-scm.com/download/win</span><br><span class="line"></span><br><span class="line">2.linux系统</span><br><span class="line">yum install git -y</span><br><span class="line"></span><br><span class="line">3.macos系统</span><br><span class="line">https://git-scm.com/download/mac</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入要管理的文件夹进行初始化</span></span><br><span class="line">mkdir app</span><br><span class="line"><span class="built_in">cd</span> app</span><br><span class="line">git init </span><br><span class="line">ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;app01 20%&#x27;</span> &gt; index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理目录下的文件状态</span></span><br><span class="line">git status  <span class="comment"># 当前可以看到提示 index.html 文件没有被追踪</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理指定文件或者当前目录 . 代表当前目录所有</span></span><br><span class="line">git add index.html</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置个人信息</span></span><br><span class="line">git config --global user.email <span class="string">&quot;2564334707@qq.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;klcc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户配置</span></span><br><span class="line"> git config --global --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># git颜色配置</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成版本 -m 后面是描述信息</span></span><br><span class="line">git commit -m <span class="string">&quot;app is 20% --v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;app is complete&#x27;</span> &gt;&gt; index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加变化</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git commit -m <span class="string">&quot;app complete --v2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退代码</span></span><br><span class="line">git <span class="built_in">log</span>  <span class="comment"># 查看提交的历史记录</span></span><br><span class="line">git reset --hard ID  <span class="comment"># 根据ID回退(填写七位就行)</span></span><br><span class="line"></span><br><span class="line">git reflog  <span class="comment"># 查看所有的提交历史记录</span></span><br></pre></td></tr></table></figure>

<h3 id="基础命令总结"><a href="#基础命令总结" class="headerlink" title="基础命令总结"></a>基础命令总结</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init           <span class="comment"># 就是将普通目录转为git的仓库(这个目录就支持版本管理了)</span></span><br><span class="line">git add            <span class="comment"># 将工作区的数据，拷贝到暂存区</span></span><br><span class="line">git commit         <span class="comment"># 将暂存区的数据同步到本地s仓库</span></span><br><span class="line">git <span class="built_in">log</span>            <span class="comment"># 查看所有的提交记录</span></span><br><span class="line">git reflog         <span class="comment"># 查看所有的历史提交记录</span></span><br><span class="line">git reset --hard   <span class="comment"># 回退到指定的commitID</span></span><br><span class="line">git status         <span class="comment"># 查看提交状态</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220108114451077.png" alt="image-20220108114451077"></p>
<h3 id="分支使用"><a href="#分支使用" class="headerlink" title="分支使用"></a>分支使用</h3><p>分支可以给使用者提供多个环境的可以，意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch        <span class="comment"># 查看分支</span></span><br><span class="line">git branch dev    <span class="comment"># 创建dev分支开发商城项目</span></span><br><span class="line">git checkout dev  <span class="comment"># 切换到dev分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟商城代码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;shopping system is 20%&#x27;</span> &gt;  shopping.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次提交</span></span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&#x27;shopping system 20% --v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次提交</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;shopping system is 50%&#x27;</span> &gt;&gt;  shopping.py</span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&#x27;shopping system 50% --v4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现 app --v2 完成后有bug需要切换回去修复</span></span><br><span class="line">git checkout master</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 bug 分支单独修复 基于app --v2的代码</span></span><br><span class="line">git branch bug</span><br><span class="line">git checkout bug</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟修复</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;bug repair&#x27;</span> &gt;&gt; index.html</span><br><span class="line"><span class="comment"># 可以进行上线测试bug是否修复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交修复bug后的代码</span></span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&#x27;app bug repair --v5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并 bug 分支到 master 分支上</span></span><br><span class="line">git checkout master</span><br><span class="line">git branch</span><br><span class="line">git merge bug -m <span class="string">&#x27;app bug repair master merge bug --v6&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切回 dev 分支继续完成商城开发</span></span><br><span class="line">git checkout dev  </span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;shopping system is 100%&#x27;</span> &gt;&gt;  shopping.py</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;shopping system 100% --v7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并主分支到dev分支测试 shop system 然后提交测试</span></span><br><span class="line">git merge master  -m <span class="string">&#x27;dev merge master test shopping --v8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到master 合并dev分支功能 </span></span><br><span class="line">git checkout master</span><br><span class="line">git branch </span><br><span class="line">git merge dev -m <span class="string">&#x27;master merge dev shop system --v9&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="分支命令总结"><a href="#分支命令总结" class="headerlink" title="分支命令总结"></a>分支命令总结</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch          <span class="comment"># 查看所有分支</span></span><br><span class="line">git branch name     <span class="comment"># 创建 name 分支</span></span><br><span class="line">git branch -d name  <span class="comment"># 删除 name 分支</span></span><br><span class="line">git checkout name   <span class="comment"># 切换到 name 分支</span></span><br><span class="line">git merge dev       <span class="comment"># 将dev分支最新代码合并到当前所在的分支</span></span><br></pre></td></tr></table></figure>

<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220108124207557.png" alt="image-20220108124207557"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220108124319492.png" alt="image-20220108124319492"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给远程仓库起别名</span></span><br><span class="line">git remote add origin git@gitee.com:liuzhijin1/gittest.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前</span></span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前仓库配置</span></span><br><span class="line">git config --<span class="built_in">local</span>  --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向远程推送代码，需要添加公钥才能推送</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以切换分支推送代码</span></span><br><span class="line">git checkout dev </span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载代码(git https都可以) 需要认证</span></span><br><span class="line">git <span class="built_in">clone</span> git@gitee.com:liuzhijin1/gittest.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后就可以正常的本地操作</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步远程仓库最新代码</span></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">git <span class="built_in">clone</span> 第一次必须要克隆项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取代码</span></span><br><span class="line">git pull origin master</span><br><span class="line">git push origin master</span><br><span class="line">等价于</span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程连接(别名)</span></span><br><span class="line">git remote add origin 地址</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送代码</span></span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录图形展示</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220108131519462.png" alt="image-20220108131519462"></p>
<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><h3 id="tag标签"><a href="#tag标签" class="headerlink" title="tag标签"></a><code>tag</code>标签</h3><p>git标签就是对commit的一次快照，便于后续将特定时期 的代码快速取出，在代码发布时可以使用标签发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对当前最新提交的代码创建标签，-a标签名称，-m标 签描述</span></span><br><span class="line">git tag -a <span class="string">&quot;v1.1&quot;</span> -m <span class="string">&quot;描述信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建标签，指定commitID</span></span><br><span class="line">git tag -a v1.2 CommitID -m <span class="string">&quot;Messages&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签详情</span></span><br><span class="line">git tag</span><br><span class="line">git <span class="built_in">log</span> -l </span><br><span class="line"></span><br><span class="line"><span class="comment">## 实例: </span></span><br><span class="line"><span class="comment"># 当前代码打上标签</span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&quot;shopping up&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到你想打上标签的ID</span></span><br><span class="line">git reflog   <span class="comment"># f4ad9ef 是完成app时候的ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定ID创建标签</span></span><br><span class="line">git tag -a v1.0 f4ad9ef -m <span class="string">&quot;app complete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定标签</span></span><br><span class="line">git push orgin --tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据版本查看commit ID信息</span></span><br><span class="line">git show v1.0</span><br></pre></td></tr></table></figure>

<h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTPS</span></span><br><span class="line"><span class="comment"># 原来的地址：https://gitee.com/xxx/treenb.git</span></span><br><span class="line"><span class="comment"># 修改的地址：https://用户名:密码@gitee.com/xxx/treenb.git</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://用户名:密码@gitee.com/xxx/treenb.git</span><br><span class="line">git push origin maste</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH </span></span><br><span class="line"><span class="comment"># 生成公钥和私钥(默认放在 ~/.ssh目录下id_rsa.pub公钥、id_rsa私钥）</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝公钥的内容，并设置到github中</span></span><br><span class="line"><span class="comment"># 在git本地中配置ssh地址</span></span><br><span class="line">git remote add origin git@github.com:/dbhot.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以后使用</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="ignore文件忽略"><a href="#ignore文件忽略" class="headerlink" title="ignore文件忽略"></a><code>ignore</code>文件忽略</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">让 Git 不再管理当前目录下的某些文件 .gitignore 通常情况下有如下文件可能需要忽略</span><br><span class="line">1.程序运行时产生的垃圾文件</span><br><span class="line">2.程序运行时产生的缓存文件</span><br><span class="line">3.程序本地开发使用的图片文件</span><br><span class="line">4.程序连接数据一类的配置文件</span><br><span class="line"></span><br><span class="line">例如以下文件类型:</span><br><span class="line">.idea/</span><br><span class="line">*.h</span><br><span class="line">!a.h</span><br><span class="line">files/</span><br><span class="line">*.py[c|a|d]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line"><span class="built_in">cd</span> workdir</span><br><span class="line">cat .gitignore</span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交之后才会生效</span></span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&quot;ignore&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">touch a.txt</span><br><span class="line">touch 1.pyc</span><br><span class="line">touch 2.pyc</span><br><span class="line"></span><br><span class="line">git status  <span class="comment"># 此时 1.pyc 和 2.pyc 都被屏蔽了</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2和Role</title>
    <url>/658bdd20.html</url>
    <content><![CDATA[<h2 id="template模板"><a href="#template模板" class="headerlink" title="template模板"></a>template模板</h2><blockquote>
<p>模板是一个文本文件，可以做为生成文件的模版，并且模板文件中还可嵌套jinja语法。</p>
</blockquote>
<span id="more"></span>
<h3 id="jinja2语言"><a href="#jinja2语言" class="headerlink" title="jinja2语言"></a>jinja2语言</h3><blockquote>
<p>官方网站：</p>
<p><a href="http://jinja.pocoo.org/">http://jinja.pocoo.org/</a></p>
<p><a href="https://jinja.palletsprojects.com/en/2.11.x/">https://jinja.palletsprojects.com/en/2.11.x/</a></p>
</blockquote>
<p><img src="https://jinja.palletsprojects.com/en/3.0.x/_images/jinja-logo.png" alt="img"></p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><strong>jinja2 语言支持多种数据类型和操作:</strong></p>
<ul>
<li>字符串：使用单引号或双引号,</li>
<li>数字：整数，浮点数</li>
<li>列表：[item1, item2, …]</li>
<li>元组：(item1, item2, …)</li>
<li>字典：{key1:value1, key2:value2, …}</li>
<li>布尔型：true/false</li>
<li>算术运算：+, -, *, /, //, %, **</li>
<li>比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=</li>
<li>逻辑运算：and，or，not</li>
<li>流表达式：For，If，When</li>
</ul>
<h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>template功能：可以根据和参考模块文件，动态生成相类似的配置文件，template文件必须存放于templates目录下，且命名为 .j2 结尾，yaml/yml 文件需和templates目录平级，目录结构如下示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> ./</span><br><span class="line">├── temnginx.yml</span><br><span class="line">└── templates</span><br><span class="line">    └── nginx.conf.j2Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>范例：利用template 同步nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#准备templates/nginx.conf.j2文件</span></span><br><span class="line">[root@ansible ~]<span class="comment">#vim temnginx.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: web</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: template config to remote hosts</span><br><span class="line">     template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line"> [root@ansible ~]<span class="comment">#ansible-playbook temnginx.ymlCopy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure>

<h4 id="template变更替换"><a href="#template变更替换" class="headerlink" title="template变更替换"></a>template变更替换</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改文件nginx.conf.j2 </span></span><br><span class="line">[root@ansible ~]<span class="comment">#mkdir templates</span></span><br><span class="line">[root@ansible ~]<span class="comment">#vim templates/nginx.conf.j2</span></span><br><span class="line">......</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus &#125;&#125;;</span><br><span class="line">......</span><br><span class="line">[root@ansible ~]<span class="comment">#vim temnginx2.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: web</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: install nginx</span><br><span class="line">      yum: name=nginx</span><br><span class="line">    - name: template config to remote hosts</span><br><span class="line">      template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf </span><br><span class="line">    - name: start service</span><br><span class="line">      service: name=nginx state=started enabled=yes</span><br><span class="line">       </span><br><span class="line">[root@ansible ~]<span class="comment">#ansible-playbook temnginx2.ymlCopy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure>

<h4 id="常用的系统参数"><a href="#常用的系统参数" class="headerlink" title="常用的系统参数"></a>常用的系统参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible_all_ipv4_addresses：仅显示ipv4的信息</span><br><span class="line">ansible_devices：仅显示磁盘设备信息</span><br><span class="line">ansible_distribution：显示是什么系统，例：centos,suse等</span><br><span class="line">ansible_distribution_version：仅显示系统版本</span><br><span class="line">ansible_distribution_major_version：显示系统版本号（7）</span><br><span class="line">ansible_machine：显示系统类型，例：32位，还是64位</span><br><span class="line">ansible_eth0：仅显示eth0的信息</span><br><span class="line">ansible_hostname：仅显示主机名</span><br><span class="line">ansible_kernel：仅显示内核版本</span><br><span class="line">ansible_lvm：显示lvm相关信息</span><br><span class="line">ansible_memtotal_mb：显示系统总内存</span><br><span class="line">ansible_memfree_mb：显示可用系统内存</span><br><span class="line">ansible_memory_mb：详细显示内存情况</span><br><span class="line">ansible_swaptotal_mb：显示总的swap内存</span><br><span class="line">ansible_swapfree_mb：显示swap内存的可用内存</span><br><span class="line">ansible_mounts：显示系统磁盘挂载情况</span><br><span class="line">ansible_processor：显示cpu个数(具体显示每个cpu的型号)</span><br><span class="line">ansible_processor_vcpus：显示cpu个数(只显示总的个数)</span><br><span class="line">ansible_python_version：显示python版本</span><br></pre></td></tr></table></figure>

<h4 id="template算术运算"><a href="#template算术运算" class="headerlink" title="template算术运算"></a>template算术运算</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ansible]<span class="comment">#vim templates/nginx.conf.j2</span></span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus**3 &#125;&#125;;</span><br><span class="line">[root@ansible ansible]<span class="comment">#cat templnginx.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install nginx</span><br><span class="line">      yum: name=nginx</span><br><span class="line">    - name: template config to remote hosts</span><br><span class="line">      template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">      notify: restart nginx</span><br><span class="line">    - name: start service</span><br><span class="line">      service: name=nginx state=started enabled=yes</span><br><span class="line"> handlers:</span><br><span class="line">    - name: restart nginx</span><br><span class="line">      service: name=nginx state=restarted</span><br><span class="line">[root@ansible ~]<span class="comment">#-playbook templnginx.yml --limit 10.0.0.8Copy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure>

<h4 id="template中使用流程控制for和if"><a href="#template中使用流程控制for和if" class="headerlink" title="template中使用流程控制for和if"></a>template中使用流程控制for和if</h4><blockquote>
<p>template中也可以使用流程控制 for 循环和 if 条件判断，实现动态生成文件功能</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#temlnginx2.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: websrvs</span><br><span class="line"> remote_user: root</span><br><span class="line"> vars:</span><br><span class="line">   nginx_vhosts:</span><br><span class="line">     - 81</span><br><span class="line">     - 82</span><br><span class="line">     - 83</span><br><span class="line"> tasks:</span><br><span class="line">   - name: template config</span><br><span class="line">     template: src=nginx.conf2.j2 dest=/data/nginx.conf</span><br><span class="line"><span class="comment">#templates/nginx.conf2.j2</span></span><br><span class="line">&#123;% <span class="keyword">for</span> vhost <span class="keyword">in</span> nginx_vhosts %&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen &#123;&#123; vhost &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">ansible-playbook -C templnginx2.yml --<span class="built_in">limit</span> 192.168.15.8</span><br><span class="line"><span class="comment">#生成的结果：</span></span><br><span class="line">server &#123;</span><br><span class="line">   listen 81   </span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 82   </span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 83   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#templnginx4.yml</span></span><br><span class="line">- hosts: websrvs</span><br><span class="line"> remote_user: root</span><br><span class="line"> vars:</span><br><span class="line">   nginx_vhosts:</span><br><span class="line">     - listen: 8080</span><br><span class="line">       server_name: <span class="string">&quot;web1.oldboy.com&quot;</span></span><br><span class="line">       root: <span class="string">&quot;/var/www/nginx/web1/&quot;</span></span><br><span class="line">     - listen: 8081</span><br><span class="line">       server_name: <span class="string">&quot;web2.oldboy.com&quot;</span></span><br><span class="line">       root: <span class="string">&quot;/var/www/nginx/web2/&quot;</span></span><br><span class="line">     - &#123;listen: 8082, server_name: <span class="string">&quot;web3.oldboy.com&quot;</span>, root: </span><br><span class="line"><span class="string">&quot;/var/www/nginx/web3/&quot;</span>&#125;</span><br><span class="line"> tasks:</span><br><span class="line">   - name: template config </span><br><span class="line">     template: src=nginx.conf4.j2 dest=/data/nginx4.conf</span><br><span class="line">      </span><br><span class="line">   </span><br><span class="line"><span class="comment"># templates/nginx.conf4.j2</span></span><br><span class="line">&#123;% <span class="keyword">for</span> vhost <span class="keyword">in</span> nginx_vhosts %&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen &#123;&#123; vhost.listen &#125;&#125;</span><br><span class="line">   server_name &#123;&#123; vhost.server_name &#125;&#125;</span><br><span class="line">   root &#123;&#123; vhost.root &#125;&#125;  </span><br><span class="line">&#125;&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment">#ansible-playbook templnginx4.yml --limit 10.0.0.8</span></span><br><span class="line"><span class="comment">#生成结果：</span></span><br><span class="line">server &#123;</span><br><span class="line">   listen 8080</span><br><span class="line">   server_name web1.oldboy.com</span><br><span class="line">   root /var/www/nginx/web1/  </span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 8081</span><br><span class="line">   server_name web2.oldboy.com</span><br><span class="line">   root /var/www/nginx/web2/  </span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 8082</span><br><span class="line">   server_name web3.oldboy.com</span><br><span class="line">   root /var/www/nginx/web3/  </span><br><span class="line">&#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h4 id="playbook使用when"><a href="#playbook使用when" class="headerlink" title="playbook使用when"></a>playbook使用when</h4><p>when语句，可以实现条件测试。如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试,通过在task后添加when子句即可使用条件测试，jinja2的语法格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: <span class="string">&quot;shut down CentOS 6 and Debian 7 systems&quot;</span></span><br><span class="line">   <span class="built_in">command</span>: /sbin/shutdown -t now</span><br><span class="line">   when: (ansible_facts[<span class="string">&#x27;distribution&#x27;</span>] == <span class="string">&quot;CentOS&quot;</span> and ansible_facts[<span class="string">&#x27;distribution_major_version&#x27;</span>] == <span class="string">&quot;6&quot;</span>) or (ansible_facts[<span class="string">&#x27;distribution&#x27;</span>] == <span class="string">&quot;Debian&quot;</span> and ansible_facts[<span class="string">&#x27;distribution_major_version&#x27;</span>] == <span class="string">&quot;7&quot;</span>)Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h4 id="playbook使用迭代with-items-loop"><a href="#playbook使用迭代with-items-loop" class="headerlink" title="playbook使用迭代with_items(loop)"></a>playbook使用迭代with_items(loop)</h4><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制对迭代项的引用，固定内置变量名为”item”，要在task中使用with_items给定要迭代的元素列表</p>
<p>注意: ansible2.5版本后,可以用loop代替with_items</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: websrvs</span><br><span class="line"> remote_user: root</span><br><span class="line">  </span><br><span class="line"> tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">     user: name=&#123;&#123; item &#125;&#125; state=present groups=wheel</span><br><span class="line">     with_items:</span><br><span class="line">        - testuser1</span><br><span class="line">        - testuser2</span><br><span class="line">        - testuser3</span><br><span class="line">        </span><br><span class="line"><span class="comment">#上面语句的功能等同于下面的语句</span></span><br><span class="line">    - name: add several users</span><br><span class="line">      user: name=testuser1 state=present groups=wheel</span><br><span class="line">    - name: add several users</span><br><span class="line">      user: name=testuser2 state=present groups=wheel</span><br><span class="line">    - name: add several users</span><br><span class="line">      user: name=testuser3 state=present groups=wheel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#remove mariadb server</span></span><br><span class="line">- hosts: 172.16.1.7</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: stop service</span><br><span class="line">      shell: /etc/init.d/mysqld stop</span><br><span class="line">    - name: delete files and dir</span><br><span class="line">      file: path=&#123;&#123;item&#125;&#125; state=absent</span><br><span class="line">      with_items:</span><br><span class="line">        - /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">        - /usr/<span class="built_in">local</span>/mariadb-10.2.27-linux-x86_64</span><br><span class="line">        - /etc/init.d/mysqld</span><br><span class="line">        - /etc/profile.d/mysql.sh</span><br><span class="line">        - /etc/my.cnf</span><br><span class="line">        - /data/mysql</span><br><span class="line">    - name: delete user</span><br><span class="line">      user: name=mysql state=absent remove=yesCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>迭代嵌套子变量：</strong>在迭代中，还可以嵌套子变量，关联多个变量在一起使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: add some groups</span><br><span class="line">      group: name=&#123;&#123; item &#125;&#125; state=present</span><br><span class="line">      with_items:</span><br><span class="line">        - nginx</span><br><span class="line">        - mysql</span><br><span class="line">        - apache</span><br><span class="line">    - name: add some users</span><br><span class="line">      user: name=&#123;&#123; item.name &#125;&#125; group=&#123;&#123; item.group &#125;&#125; state=present</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; name: <span class="string">&#x27;nginx&#x27;</span>, group: <span class="string">&#x27;nginx&#x27;</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">&#x27;mysql&#x27;</span>, group: <span class="string">&#x27;mysql&#x27;</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">&#x27;apache&#x27;</span>, group: <span class="string">&#x27;apache&#x27;</span> &#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h3 id="管理节点过多导致的超时问题解决方法"><a href="#管理节点过多导致的超时问题解决方法" class="headerlink" title="管理节点过多导致的超时问题解决方法"></a>管理节点过多导致的超时问题解决方法</h3><blockquote>
<p>默认情况下，Ansible将尝试并行管理playbook中所有的机器。对于滚动更新用例，可以使用serial关键字定义Ansible一次应管理多少主机，还可以将serial关键字指定为百分比，表示每次并行执行的主机数占总数的比例</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim test_serial.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  serial: 2  <span class="comment">#每次只同时处理2个主机,将所有task执行完成后,再选下2个主机再执行所有task,直至所有主机</span></span><br><span class="line">  gather_facts: False</span><br><span class="line">  tasks:</span><br><span class="line">    - name: task one</span><br><span class="line">  comand: hostname</span><br><span class="line">    - name: task two</span><br><span class="line">      <span class="built_in">command</span>: hostname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：</span></span><br><span class="line">- name: <span class="built_in">test</span> serail</span><br><span class="line">  hosts: all</span><br><span class="line">  serial: <span class="string">&quot;20%&quot;</span>   <span class="comment">#每次只同时处理20%的主机</span></span><br></pre></td></tr></table></figure>




<h1 id="Role"><a href="#Role" class="headerlink" title="Role"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=role">Role</a></h1><p>角色是ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</p>
<p>运维复杂的场景：建议使用 roles，代码复用度高</p>
<p>roles：多个角色的集合目录， 可以将多个的role，分别放至roles目录下的独立子目录中,如下示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roles/</span><br><span class="line"> mysql/</span><br><span class="line"> nginx/</span><br><span class="line"> tomcat/</span><br><span class="line"> redis/Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>默认roles存放路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/root/.ansible/roles</span><br><span class="line">/usr/share/ansible/roles</span><br><span class="line">/etc/ansible/rolesCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h2 id="Ansible-Roles目录编排"><a href="#Ansible-Roles目录编排" class="headerlink" title="Ansible Roles目录编排"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=ansible-roles%E7%9B%AE%E5%BD%95%E7%BC%96%E6%8E%92">Ansible Roles目录编排</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── nginx -------------role1名称</span><br><span class="line">│   ├── defaults  ---------必须存在的目录，存放默认的变量，模板文件中的变量就是引用自这里。defaults中的变量优先级最低，通常我们可以临时指定变量来进行覆盖</span><br><span class="line">│   │   └── main.yml</span><br><span class="line">│   ├── files -------------ansible中unarchive、copy等模块会自动来这里找文件，从而我们不必写绝对路径，只需写文件名</span><br><span class="line">│   │   ├── mysql.tar.gz</span><br><span class="line">│   │   └── nginx.tar.gz</span><br><span class="line">│   ├── handlers -----------存放tasks中的notify指定的内容</span><br><span class="line">│   │   └── main.yml</span><br><span class="line">│   ├── meta</span><br><span class="line">│   ├── tasks --------------存放playbook的目录，其中main.yml是主入口文件，在main.yml中导入其他yml文件，要采用import_tasks关键字，include要弃用了</span><br><span class="line">│   │   ├── install.yml</span><br><span class="line">│   │   └── main.yml -------主入口文件</span><br><span class="line">│   ├── templates ----------存放模板文件。template模块会将模板文件中的变量替换为实际值，然后覆盖到客户机指定路径上</span><br><span class="line">│   │   └── nginx.conf.j2</span><br><span class="line">│   └── varsCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h2 id="Roles各目录作用"><a href="#Roles各目录作用" class="headerlink" title="Roles各目录作用"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=roles%E5%90%84%E7%9B%AE%E5%BD%95%E4%BD%9C%E7%94%A8">Roles各目录作用</a></h2><ul>
<li><p>files/ ：存放由copy或script模块等调用的文件</p>
</li>
<li><p>templates/：template模块查找所需要模板文件的目录</p>
</li>
<li><p>tasks/：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</p>
</li>
<li><p>handlers/：至少应该包含一个名为main.yml的文件；此目录下的其它的文件需要在此文件中通过</p>
</li>
<li><p>include进行包含</p>
</li>
<li><p>vars/：定义变量，至少应该包含一个名为main.yml的文件；此目录下的其它的变量文件需要在此文件中通过include进行包含</p>
</li>
<li><p>meta/：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含</p>
</li>
<li><p>default/：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低</p>
<h2 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=%E5%88%9B%E5%BB%BArole">创建role</a></h2></li>
</ul>
<blockquote>
<p>创建role的步骤</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 创建以roles命名的目录</span><br><span class="line">2 在roles目录中分别创建以各角色名称命名的目录，如mysql等</span><br><span class="line">3 在每个角色命名的目录中分别创建files、handlers、tasks、templates和vars等目录；用不到的目录可以创建为空目录，也可以不创建</span><br><span class="line">4 在每个角色相关的子目录中创建相应的文件,如 tasks/main.yml,templates/nginx.conf.j2</span><br><span class="line">5 在playbook文件中，调用需要的角色</span><br><span class="line"></span><br><span class="line">[root@m01 package]<span class="comment"># mkdir -p /root/package/roles/nginx/&#123;files,handlers,tasks,templates,vars,meta&#125;</span></span><br><span class="line">[root@m01 package]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── roles</span><br><span class="line">    └── nginx</span><br><span class="line">        ├── files</span><br><span class="line">        ├── handlers</span><br><span class="line">        ├── meta</span><br><span class="line">        ├── tasks</span><br><span class="line">        ├── templates</span><br><span class="line">        └── vars</span><br><span class="line">Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h3 id="针对大型项目使用Roles进行编排"><a href="#针对大型项目使用Roles进行编排" class="headerlink" title="针对大型项目使用Roles进行编排"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=%E9%92%88%E5%AF%B9%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8roles%E8%BF%9B%E8%A1%8C%E7%BC%96%E6%8E%92">针对大型项目使用Roles进行编排</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 范例</span></span><br><span class="line">nginx-role.yml </span><br><span class="line">roles/</span><br><span class="line">└── nginx </span><br><span class="line">     ├── files</span><br><span class="line">     │   └── main.yml </span><br><span class="line">     ├── tasks</span><br><span class="line">     │   ├── groupadd.yml </span><br><span class="line">     │   ├── install.yml </span><br><span class="line">     │   ├── main.yml </span><br><span class="line">     │   ├── restart.yml </span><br><span class="line">     │   └── useradd.yml </span><br><span class="line">     └── vars </span><br><span class="line">         └── main.ymlCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h2 id="playbook调用角色"><a href="#playbook调用角色" class="headerlink" title="playbook调用角色"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=playbook%E8%B0%83%E7%94%A8%E8%A7%92%E8%89%B2">playbook调用角色</a></h2><ul>
<li>调用角色方法1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: web</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - mysql</span><br><span class="line">    - memcached</span><br><span class="line">    - nginx  Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<ul>
<li>调用角色方法2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - mysql</span><br><span class="line">    - &#123; role: nginx, username: nginx &#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<ul>
<li>调用角色方法3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: nginx, username: nginx, when: ansible_distribution_major_version == <span class="string">&#x27;7&#x27;</span> &#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<ul>
<li>调用角色方法4</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: nginx ,tags: [ <span class="string">&#x27;nginx&#x27;</span>, <span class="string">&#x27;web&#x27;</span> ] ,when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span> &#125;</span><br><span class="line">    - &#123; role: httpd ,tags: [ <span class="string">&#x27;httpd&#x27;</span>, <span class="string">&#x27;web&#x27;</span> ] &#125;</span><br><span class="line">    - &#123; role: mysql ,tags: [ <span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;db&#x27;</span> ] &#125;</span><br><span class="line">    - &#123; role: mariadb ,tags: [ <span class="string">&#x27;mariadb&#x27;</span>, <span class="string">&#x27;db&#x27;</span> ] &#125;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=%E6%A1%88%E4%BE%8B">案例</a></h2><h3 id="httpd角色"><a href="#httpd角色" class="headerlink" title="httpd角色"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=httpd%E8%A7%92%E8%89%B2">httpd角色</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建角色相关的目录</span></span><br><span class="line">[root@ansible ~]<span class="comment">#mkdir -pv /data/ansible/roles/httpd/&#123;tasks,handlers,files&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#创建角色相关的文件</span></span><br><span class="line">[root@ansible ~]<span class="comment">#cd /data/ansible/roles/httpd/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#main.yml 是task的入口文件</span></span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/main.yml</span></span><br><span class="line">- include: group.yml</span><br><span class="line">- include: user.yml</span><br><span class="line">- include: install.yml</span><br><span class="line">- include: config.yml</span><br><span class="line">- include: index.yml</span><br><span class="line">- include: service.yml</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/group.yml</span></span><br><span class="line">- name: create apache group</span><br><span class="line">  group: name=apache system=yes gid=80</span><br><span class="line">  </span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/user.yml</span></span><br><span class="line">- name: create apache user</span><br><span class="line">  user: name=apache system=yes shell=/sbin/nologin home=/var/www/ uid=80 group=apache</span><br><span class="line">  </span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/install.yml</span></span><br><span class="line">- name: install httpd package</span><br><span class="line">  yum: name=httpd</span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/config.yml</span></span><br><span class="line">- name: config file</span><br><span class="line">  copy: src=httpd.conf dest=/etc/httpd/conf/ backup=yes</span><br><span class="line">  notify: restart</span><br><span class="line">[root@ansible ~]<span class="comment"># tasks/index.yml</span></span><br><span class="line">- name: index.html</span><br><span class="line">  copy: src=index.html dest=/var/www/html/</span><br><span class="line">[root@ansible ~]<span class="comment">#vim tasks/service.yml</span></span><br><span class="line">- name: start service</span><br><span class="line">  service: name=httpd state=started enabled=yes</span><br><span class="line">[root@ansible ~]<span class="comment">#vim handlers/main.yml</span></span><br><span class="line">- name: restart</span><br><span class="line">  service: name=httpd state=restarted</span><br><span class="line">  </span><br><span class="line"><span class="comment">#在files目录下准备两个文件</span></span><br><span class="line">[root@ansible ~]<span class="comment">#ls files/</span></span><br><span class="line">httpd.conf index.html</span><br><span class="line">[root@ansible ~]<span class="comment">#tree /data/ansible/roles/httpd/</span></span><br><span class="line">/data/ansible/roles/httpd/</span><br><span class="line">├── files</span><br><span class="line">│   ├── httpd.conf</span><br><span class="line">│   └── index.html</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">└── tasks</span><br><span class="line">   ├── config.yml</span><br><span class="line">   ├── group.yml</span><br><span class="line">   ├── index.yml</span><br><span class="line">   ├── install.yml</span><br><span class="line">   ├── main.yml</span><br><span class="line">   ├── service.yml</span><br><span class="line">   └── user.yml</span><br><span class="line">3 directories, 10 files</span><br><span class="line"><span class="comment">#在playbook中调用角色</span></span><br><span class="line">[root@ansible ~]<span class="comment">#vim /data/ansible/role_httpd.yml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># httpd role</span></span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - httpd</span><br><span class="line">    </span><br><span class="line"><span class="comment">#运行playbook</span></span><br><span class="line">[root@ansible ~]<span class="comment">#ansible-playbook /data/ansible/role_httpd.ymlCopy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure>

<h3 id="NGINX角色"><a href="#NGINX角色" class="headerlink" title="NGINX角色"></a><a href="http://192.168.13.73:3000/#/file/roles%E8%A7%92%E8%89%B2?id=nginx%E8%A7%92%E8%89%B2">NGINX角色</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment">#mkdir -pv /data/ansible/roles/nginx/&#123;tasks,handlers,templates,vars&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建task文件</span></span><br><span class="line">[root@ansible ~]<span class="comment">#cd /data/ansible/roles/nginx/</span></span><br><span class="line">[root@ansible nginx]<span class="comment">#vim tasks/main.yml </span></span><br><span class="line">- include: install.yml</span><br><span class="line">- include: config.yml</span><br><span class="line">- include: index.yml</span><br><span class="line">- include: service.yml</span><br><span class="line">[root@ansible nginx]<span class="comment">#vim tasks/install.yml </span></span><br><span class="line">- name: install</span><br><span class="line">  yum: name=nginx </span><br><span class="line"> </span><br><span class="line">[root@ansible nginx]<span class="comment">#vim tasks/config.yml </span></span><br><span class="line">- name: config file <span class="keyword">for</span> centos7</span><br><span class="line">  template: src=nginx7.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  when: ansible_distribution_major_version==<span class="string">&quot;7&quot;</span></span><br><span class="line">  notify: restart</span><br><span class="line">- name: config file <span class="keyword">for</span> centos8</span><br><span class="line">  template: src=nginx8.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  when: ansible_distribution_major_version==<span class="string">&quot;8&quot;</span></span><br><span class="line">  notify: restart</span><br><span class="line">  </span><br><span class="line"><span class="comment">#跨角色调用文件</span></span><br><span class="line">[root@ansible nginx]<span class="comment">#vim tasks/index.yml </span></span><br><span class="line">- name: index.html</span><br><span class="line">  copy: src=roles/httpd/files/index.html dest=/usr/share/nginx/html/</span><br><span class="line">[root@ansible nginx]<span class="comment">#vim tasks/service.yml </span></span><br><span class="line">- name: start service</span><br><span class="line">  service: name=nginx state=started enabled=yes</span><br><span class="line"><span class="comment">#创建handler文件</span></span><br><span class="line">[root@ansible nginx]<span class="comment">#cat handlers/main.yml </span></span><br><span class="line">- name: restart</span><br><span class="line">  service: name=nginx state=restarted</span><br><span class="line"><span class="comment">#创建两个template文件</span></span><br><span class="line">[root@ansible nginx]<span class="comment">#cat templates/nginx7.conf.j2</span></span><br><span class="line">...省略...</span><br><span class="line">user &#123;&#123;user&#125;&#125;;</span><br><span class="line">worker_processes &#123;&#123;ansible_processor_vcpus+3&#125;&#125;;   <span class="comment">#修改此行</span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">...省略...</span><br><span class="line">[root@ansible nginx]<span class="comment">#cat templates/nginx8.conf.j2</span></span><br><span class="line">...省略...</span><br><span class="line">user nginx;</span><br><span class="line">worker_processes &#123;&#123;ansible_processor_vcpus**3&#125;&#125;;  <span class="comment">#修改此行</span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">...省略...</span><br><span class="line"><span class="comment">#创建变量文件</span></span><br><span class="line">[root@ansible nginx]<span class="comment">#vim vars/main.yml </span></span><br><span class="line">user: daemon</span><br><span class="line"><span class="comment">#目录结构如下</span></span><br><span class="line">[root@ansible ~]<span class="comment">#tree /data/ansible/roles/nginx/</span></span><br><span class="line">/data/ansible/roles/nginx/</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── file.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   └── service.yml</span><br><span class="line">├── templates</span><br><span class="line">│   ├── nginx7.conf.j2</span><br><span class="line">│   └── nginx8.conf.j2</span><br><span class="line">└── vars</span><br><span class="line">   └── main.yml</span><br><span class="line">4 directories, 9 files</span><br><span class="line"><span class="comment">#在playbook中调用角色</span></span><br><span class="line">[root@ansible ~]<span class="comment">#vim /data/ansible/role_nginx.yml </span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#nginx role </span></span><br><span class="line">- hosts: web</span><br><span class="line"> roles:</span><br><span class="line">    - role: nginx</span><br><span class="line">    </span><br><span class="line"><span class="comment">#运行playbook</span></span><br><span class="line">[root@ansible ~]<span class="comment">#ansible-playbook /data/ansible/role_nginx.yml</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Nginx的roles"><a href="#创建Nginx的roles" class="headerlink" title="创建Nginx的roles"></a>创建Nginx的roles</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建初始文件</span></span><br><span class="line">[root@m01 roles]<span class="comment"># ansible-galaxy init nginx</span></span><br><span class="line">- Role nginx was created successfully</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录层级结构</span></span><br><span class="line">baim0/</span><br><span class="line">└── roles</span><br><span class="line">    └── nginx</span><br><span class="line">        ├── defaults</span><br><span class="line">        │   └── main.yml</span><br><span class="line">        ├── files</span><br><span class="line">        ├── handlers</span><br><span class="line">        │   └── main.yml</span><br><span class="line">        ├── meta</span><br><span class="line">        │   └── main.yml</span><br><span class="line">        ├── README.md</span><br><span class="line">        ├── tasks</span><br><span class="line">        │   └── main.yml</span><br><span class="line">        ├── templates</span><br><span class="line">        ├── tests</span><br><span class="line">        │   ├── inventory</span><br><span class="line">        │   └── test.yml</span><br><span class="line">        └── vars</span><br><span class="line">            └── main.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Task控制</title>
    <url>/d30594ae.html</url>
    <content><![CDATA[<h2 id="Task-Control"><a href="#Task-Control" class="headerlink" title="Task Control"></a><code>Task Control</code></h2><h3 id="when条件语句"><a href="#when条件语句" class="headerlink" title="when条件语句"></a><code>when</code>条件语句</h3><p>when 关键字主要针对 TASK 任务进行判断，对于此前我 们使用过的 yum 模块是可以自动检测软件包是否已被安 装，无需人为干涉；但对于有些任务则是需要进行判断 才可以实现的。</p>
<ul>
<li><p>web 节点都需要配置 nginx 仓库，但其他节 点并不需要，此时就会用到 when 判断</p>
</li>
<li><p>Centos 与 Ubuntu 都需要安装 Apache，而 Centos 系统软件包为 httpd，而 Ubuntu系统软件 包为httpd2，那么此时就需要判断主机系统，然后 为不同的主机系统安装不同的软件包</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为所有主机安装 Apache 软件</span></span><br><span class="line">1.系统为CentOS：安装 httpd</span><br><span class="line">2.系统为Ubuntu：安装 httpd2</span><br><span class="line"></span><br><span class="line">cat facts4.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Centos Install httpd </span><br><span class="line">      yum:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: present</span><br><span class="line">      when: (ansible_distribution ==<span class="string">&quot;CentOS&quot;</span>)</span><br><span class="line">    - name: Ubuntu Install httpd </span><br><span class="line">      yum:</span><br><span class="line">        name: apache2</span><br><span class="line">        state: present</span><br><span class="line">      when: (ansible_distribution ==<span class="string">&quot;Ubuntu&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>针对主机名为web的机器添加nginx仓库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">Nginx</span> <span class="string">Yum</span> <span class="string">Repository</span></span><br><span class="line">    <span class="attr">yum_repository:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ansible_web_nginx</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Nginx</span> <span class="string">Repository</span></span><br><span class="line">      <span class="attr">baseurl:</span> <span class="string">http://nginx.org/packages/centos/7/$basearch/</span></span><br><span class="line">      <span class="attr">gpgcheck:</span> <span class="literal">no</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">(ansible_hostname</span> <span class="string">is</span> <span class="string">match(&quot;web*&quot;))</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#当然when也可以使用and与or方式</span></span><br><span class="line"><span class="comment">#when: (ansible_hostname is match(&quot;web*&quot;)) or</span></span><br><span class="line"><span class="comment"># (ansible_hostname is match(&quot;lb*&quot;))</span></span><br></pre></td></tr></table></figure>

<p>判断 httpd 服务是否处于运行状态</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断 httpd 服务是否处于运行状态</span></span><br><span class="line"><span class="comment"># 已运行：则重启服务</span></span><br><span class="line"><span class="comment"># 未运行：则不做处理</span></span><br><span class="line"><span class="comment"># 通过 register 将命令执行结果保存至变量，然后通过 when 语句进行判断</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Httpd</span> <span class="string">Server</span> <span class="string">Status</span></span><br><span class="line">      <span class="attr">shell:</span></span><br><span class="line">        <span class="attr">cmd:</span> <span class="string">systemctl</span> <span class="string">status</span> <span class="string">httpd</span> <span class="string">&amp;&gt;/dev/null</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">Httpd_Check</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Debug</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; Httpd_Check.rc &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Httpd</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">Httpd_Check.rc</span> <span class="string">==</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>为特定的主机执行任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有2台 server</span></span><br><span class="line"><span class="comment"># 第一台：172.16.1.7安装了 nginx</span></span><br><span class="line"><span class="comment"># 第二台：172.16.1.8没有安装 nginx</span></span><br><span class="line"><span class="comment"># 现在需要在没有安装 nginx的节点上做操作，需要通过 when 条件语句实现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Get System Install Nginx</span><br><span class="line">      shell:</span><br><span class="line">        cmd: rpm -qa nginx | wc -l</span><br><span class="line">      register: get_nginx</span><br><span class="line"></span><br><span class="line">    - name: Create Nginx File</span><br><span class="line">      file:</span><br><span class="line">        path: /tmp/nginx_not_install.txt</span><br><span class="line">        state: touch</span><br><span class="line">      when: get_nginx.stdout == <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="loop-循环语句"><a href="#loop-循环语句" class="headerlink" title="loop 循环语句"></a><code>loop</code> 循环语句</h3><p>在写 playbook 的时候发现了很多 task 都要重复引用 某个相同的模块，比如一次启动10个服务，或者一次拷 贝10个文件，如果按照传统的写法最少要写10次，这样 会显得 playbook 很臃肿。如果使用循环的方式来编写 playbook，这样可以减少重复编写 task 带来的臃肿</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 循环启动nginx和php-fpm</span></span><br><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: Systemd Nginx php</span><br><span class="line">      systemd:</span><br><span class="line">        name: <span class="string">&quot;&#123;&#123; item &#125;&#125;&quot;</span></span><br><span class="line">        state: started</span><br><span class="line">      loop:</span><br><span class="line">        - nginx</span><br><span class="line">        - php-fpm</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 循环安装httpd mariadb</span></span><br><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: Installed Httpd Mariadb Package</span><br><span class="line">      yum:</span><br><span class="line">        name: <span class="string">&quot;&#123;&#123; item &#125;&#125;&quot;</span></span><br><span class="line">        state: latest</span><br><span class="line">      loop:</span><br><span class="line">         - httpd</span><br><span class="line">         - mariadb-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环拷贝配置文件</span></span><br><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: Rsync rsyncd.conf</span><br><span class="line">      copy:</span><br><span class="line">        src: <span class="string">&quot;&#123;&#123; item.src &#125;&#125;&quot;</span></span><br><span class="line">        dest: <span class="string">&quot;&#123;&#123; item.dest &#125;&#125;&quot;</span></span><br><span class="line">        owner: root</span><br><span class="line">        group: root</span><br><span class="line">        mode: <span class="string">&quot;&#123;&#123; item.mode &#125;&#125;&quot;</span></span><br><span class="line">      loop:</span><br><span class="line">        - &#123; src: rsyncd.conf , dest: /tmp/rsyncd.conf , mode: <span class="string">&quot;0644&quot;</span>  &#125;</span><br><span class="line">        - &#123; src: rsyncd.pass , dest: /root/rsync.pass , mode: <span class="string">&quot;0600&quot;</span> &#125;</span><br><span class="line">        - &#123; src: rsynnd.test , dest: /mnt/rsync.test , mode: <span class="string">&quot;0000&quot;</span> &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 循环创建user</span></span><br><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Add Users</span><br><span class="line">      user:</span><br><span class="line">        name: <span class="string">&quot;&#123;&#123; item.name &#125;&#125;&quot;</span></span><br><span class="line">        groups: <span class="string">&quot;&#123;&#123; item.groups &#125;&#125;&quot;</span></span><br><span class="line">        state: present</span><br><span class="line">      loop:</span><br><span class="line">        - &#123; name: <span class="string">&#x27;testuser1&#x27;</span>, groups: <span class="string">&#x27;bin&#x27;</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">&#x27;testuser2&#x27;</span>, groups: <span class="string">&#x27;root&#x27;</span> &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 循环创建文件</span></span><br><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: Create /data /backup</span><br><span class="line">      file:</span><br><span class="line">        path: <span class="string">&quot;&#123;&#123; item &#125;&#125;&quot;</span></span><br><span class="line">        state: directory</span><br><span class="line">      loop:</span><br><span class="line">        - /data</span><br><span class="line">        - /backup</span><br></pre></td></tr></table></figure>

<h3 id="Handlers和Notify"><a href="#Handlers和Notify" class="headerlink" title="Handlers和Notify"></a><code>Handlers</code>和<code>Notify</code></h3><p><code>Handlers</code> 是一个触发器，同时是一个特殊的 <code>tasks</code>， 它无法直接运行，它需要被 tasks 通知后才会运行</p>
<p>比如：httpd 服务配置文件发生变更，我们则可通过 Notify 通知给指定的 handlers 触发器，然后执行相 应重启服务的操作，如果配置文件不发生变更操作，则 不会触发 Handlers 任务的执行</p>
<p>handlers 注意事项 </p>
<ul>
<li><p>1.无论多少个 task 通知了相同的 <code>handlers</code>， <code>handlers</code>仅会在所有<code>tasks</code> 结束后运行一次</p>
</li>
<li><p>2.只有<code>task</code>发生改变了才会通知<code>handlers</code>，没 有改变则不会触发<code>handlers</code> </p>
</li>
<li><p>3.不能使用 handlers 替代 <code>tasks</code>、因为<code>handlers</code>是一个特殊的<code>tasks</code></p>
</li>
</ul>
<h3 id="tags任务标签"><a href="#tags任务标签" class="headerlink" title="tags任务标签"></a><code>tags</code>任务标签</h3><p>默认情况下，<code>Ansible</code> 在执行一个<code> playbook</code> 时，会执 行<code> playbook</code>中所有的任务。而标签功能是用来指定要 运行 <code>playbook</code>中的某个特定的任务；</p>
<ul>
<li><p>为 <code>playbook</code> 添加标签的方式有如下几种</p>
<ol>
<li>对一个<code>task</code>打一个标签 </li>
<li>对一个 <code>task</code>打多个标签 </li>
<li>对多个 <code>task</code>打一个标签</li>
</ol>
</li>
<li><p><code>task</code>打完标签使用的几种方式 </p>
<ol>
<li><code>-t</code> 执行指定<code>tag</code>标签对应的任务 </li>
<li><code>--skip-tags</code> 执行除<code> --skip-tags</code> 标签之外的所有任务</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat f5.yml</span><br><span class="line">- hosts: nfs</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install Nfs Server</span><br><span class="line">      yum: name=nfs-utils state=present</span><br><span class="line">      tags:</span><br><span class="line">        - install_nfs</span><br><span class="line">        - install_nfs-server</span><br><span class="line">      </span><br><span class="line">    - name: Service Nfs Server</span><br><span class="line">      service: name=nfs-server state=started enabled=yes</span><br><span class="line">      tags: start_nfs-server</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">ansible-playbook f5.yml -t install_nfs</span><br><span class="line">ansible-playbook f5.yml --skip-tags install_nfs</span><br></pre></td></tr></table></figure>

<h3 id="include任务复用"><a href="#include任务复用" class="headerlink" title="include任务复用"></a><code>include</code>任务复用</h3><p>有时，我们发现大量的 Playbook 内容需要重复编写， 各 Tasks 之间功能需相互调用才能完成各自功能， Playbook 庞大到维护困难，这时我们需要使用 include 比如：A项目需要用到重启 httpd，B项目需要用到，重 启 httpd，那么我们可以使用 Include来减少重复编 写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat main.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: Install Tomcat8 Server</span><br><span class="line">    include: install_tomcat_8.yml</span><br><span class="line">    tags: install_tomcat_8</span><br><span class="line"></span><br><span class="line">  - name: Install Tomcat9 Server</span><br><span class="line">    include: install_tomcat_9.yml</span><br><span class="line">    tags: install_tomcat_9</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">install_tomcat_8.yml</span><br><span class="line">install_tomcat_9.yml</span><br><span class="line"></span><br><span class="line">ansible-playbook main.yml -t install_tomcat_8</span><br></pre></td></tr></table></figure>

<h2 id="Playbook异常处理"><a href="#Playbook异常处理" class="headerlink" title="Playbook异常处理"></a><code>Playbook</code>异常处理</h2><p>在 playbook 执行的过程中，难免会遇到一些错误。由 于 playbook 遇到错误后，不会执行之后的任务，不便 于调试，此时，可以使用 ignore_errors 来暂时忽略 错误，使得 playbook 继续执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Ignore False</span><br><span class="line">      <span class="built_in">command</span>: /bin/<span class="literal">false</span></span><br><span class="line">      ignore_errors: yes</span><br><span class="line"></span><br><span class="line">    - name: touch new file</span><br><span class="line">      file: path=/tmp/oldxu_ignore state=touch</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Variable和Register的使用</title>
    <url>/27816ec8.html</url>
    <content><![CDATA[<h2 id="Ansible-Variable"><a href="#Ansible-Variable" class="headerlink" title="Ansible Variable"></a><code>Ansible Variable</code></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">变量提供了便捷的方式来管理 ansible 项目中的动态值。</span><br><span class="line">比如 nginx-1.12，可能后期会反复的使用到这个版本的值，那么如果将此值设置为变量，后续使用和修改都将变得非常方便</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在 Ansible 中定义变量分为如下三种方式：</span><br><span class="line">1.通过命令行传递变量参数定义</span><br><span class="line">2.在play文件中进行定义变量</span><br><span class="line">    2.1 通过vars定义变量</span><br><span class="line">    2.2 通过vars_files定义变量</span><br><span class="line">3.通过inventory在主机组或单个主机中设置变量</span><br><span class="line">  3.1 通过host_vars对主机进行定义</span><br><span class="line">  3.2 通过group_vars对主机组进行定义</span><br><span class="line">  </span><br><span class="line">问题：如果定义的变量出现重复，造成冲突，如何解决？</span><br></pre></td></tr></table></figure>

<h3 id="在playbook中定义变量"><a href="#在playbook中定义变量" class="headerlink" title="在playbook中定义变量"></a>在playbook中定义变量</h3><h4 id="vars方式"><a href="#vars方式" class="headerlink" title="vars方式"></a>vars方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 playbook 的文件中开头通过 vars 关键字进行变量定义</span></span><br><span class="line"></span><br><span class="line">- hosts: web</span><br><span class="line">  gather_facts: <span class="literal">false</span>  <span class="comment"># 不获取被控集机器的fact数据，速度会变快</span></span><br><span class="line">  vars:</span><br><span class="line">    - web_packages: httpd</span><br><span class="line">    - ftp_packages: vsftpd</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Output Vaiables</span><br><span class="line">      debug:</span><br><span class="line">        msg:</span><br><span class="line">          - <span class="string">&quot;&#123;&#123; web_packages &#125;&#125;&quot;</span></span><br><span class="line">          - <span class="string">&quot;&#123;&#123; ftp_packages &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="vars-file方式"><a href="#vars-file方式" class="headerlink" title="vars_file方式"></a><code>vars_file</code>方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在 playbook 中使用 vars_files 指定文件作为变量文件，好处就是其他的 playbook 也可以调用</span><br><span class="line"></span><br><span class="line">cat vars.yml</span><br><span class="line">web_packages:</span><br><span class="line">  - httpd</span><br><span class="line">  - nginx</span><br><span class="line">ftp_packages: vsftpd</span><br><span class="line"></span><br><span class="line">cat f2.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  gather_facts: <span class="literal">false</span></span><br><span class="line">  vars_files: ./vars.yml</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Output Vaiables</span><br><span class="line">      debug:</span><br><span class="line">        msg:</span><br><span class="line">          - <span class="string">&quot;&#123;&#123; web_packages &#125;&#125;&quot;</span></span><br><span class="line">          - <span class="string">&quot;&#123;&#123; ftp_packages &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="在inventory中定义变量"><a href="#在inventory中定义变量" class="headerlink" title="在inventory中定义变量"></a>在inventory中定义变量</h3><p>定义主机变量和组变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/ansible/hosts</span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.7 myid=1 state=master    <span class="comment"># 定义的主机变量</span></span><br><span class="line">172.16.1.8 myid=2 state=backup</span><br><span class="line"></span><br><span class="line">[webserver:vars]</span><br><span class="line">port=80  <span class="comment"># 定义组变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟配置文件</span></span><br><span class="line">cat ./files/test.conf.j2</span><br><span class="line">hostrole: &#123;&#123; state  &#125;&#125;</span><br><span class="line">myid: &#123;&#123; myid &#125;&#125;</span><br><span class="line">port: &#123;&#123; port &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据变量替换公共配置文件，使不同的主机有不同的配置</span></span><br><span class="line">cat f3.yml</span><br><span class="line">- hosts: webserver</span><br><span class="line">  gather_facts: <span class="literal">false</span></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Output Vaiables</span><br><span class="line">      template:</span><br><span class="line">        src: ./files/test.conf.j2</span><br><span class="line">        dest: /tmp/test.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">ansible-playbook f3.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录每一台主机进行检查配置文件查看是否根据变换配置</span></span><br></pre></td></tr></table></figure>

<h4 id="host-vars定义变量"><a href="#host-vars定义变量" class="headerlink" title="host_vars定义变量"></a>host_vars定义变量</h4><p>在项目目录中创建 host_vars目录，然后在创建一个 文件，文件的文件名称要与 inventory 清单中的主机名 称要保持完全一致，如果是ip地址，则创建相同ip地址 的文件即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hosts文件改回去</span></span><br><span class="line">cat /etc/ansible/hosts</span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.7</span><br><span class="line">172.16.1.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前项目创建这个固定的目录</span></span><br><span class="line">mkdir host_vars</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对应的IP文件，写入变量内容</span></span><br><span class="line">cat host_vars/172.16.1.7</span><br><span class="line">state: MASTER</span><br><span class="line">myid: 10</span><br><span class="line"></span><br><span class="line">cat host_vars/172.16.1.8</span><br><span class="line">state: BACKUP</span><br><span class="line">myid: 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行上述 f3.yml</span></span><br><span class="line">ansible-playbook f3.yml</span><br></pre></td></tr></table></figure>

<h4 id="group-vars定义变量"><a href="#group-vars定义变量" class="headerlink" title="group_vars定义变量"></a><code>group_vars</code>定义变量</h4><p>在项目目录中创建 group_vars目录，然后在创建一 个文件，文件的文件名称要与 inventory 清单中的组名 称保持完全一致，但是系统提供了特殊的 all 组，也就说在 group_vars 目录下创建一个 all 文件，定义变量对所 有的主机组都生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/ansible/hosts</span><br><span class="line">[webserver]</span><br><span class="line">172.16.1.7</span><br><span class="line">172.16.1.8</span><br><span class="line"></span><br><span class="line">mkdir group_vars</span><br><span class="line"></span><br><span class="line">cat group_vars/webserver</span><br><span class="line">port: 8080</span><br><span class="line"></span><br><span class="line">ansible-playbook f3.yml</span><br></pre></td></tr></table></figure>

<h3 id="Playbook传递变量"><a href="#Playbook传递变量" class="headerlink" title="Playbook传递变量"></a><code>Playbook</code>传递变量</h3><p>在执行Playbook时，可以通过命令行 –extra-vars 或 - e 外置传参设定变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f group_vars/webserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递单个变量</span></span><br><span class="line">ansible-playbook f3.yml  -e <span class="string">&quot;port=9090&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用多个 -e 拼接或者在一个 &quot;&quot; 内，可以使用这个方法运行不同的组定义不同的变量</span></span><br><span class="line">cat group_vars/all</span><br><span class="line">port: 8080</span><br><span class="line"></span><br><span class="line">cat f4.yml</span><br><span class="line">- hosts: <span class="string">&quot;&#123;&#123; host &#125;&#125;&quot;</span></span><br><span class="line">  gather_facts: <span class="literal">false</span></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Output Vaiables</span><br><span class="line">      template:</span><br><span class="line">        src: ./files/test.conf.j2</span><br><span class="line">        dest: /tmp/test.conf</span><br><span class="line"></span><br><span class="line">ansible-playbook f4.yml  -e <span class="string">&quot;host=lb port=9090 state=MasTer myid=23&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级"></a>变量优先级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义相同的变量不同的值，来测试变量的优先级。操作步骤如下:</span><br><span class="line">1）在plabook中定义vars变量</span><br><span class="line">2）在playbook中定义vars_files变量</span><br><span class="line">3）在host_vars中定义变量</span><br><span class="line">4）在group_vars中定义变量</span><br><span class="line">5）通过执行命令传递变量</span><br><span class="line"></span><br><span class="line">结果(从高到低):</span><br><span class="line">命令行传参</span><br><span class="line">playbook中的vars_files</span><br><span class="line">playbook中的vars</span><br><span class="line">host_vars</span><br><span class="line">group_vars</span><br><span class="line">group_vars/all</span><br></pre></td></tr></table></figure>

<h3 id="使用变量改写NFS"><a href="#使用变量改写NFS" class="headerlink" title="使用变量改写NFS"></a>使用变量改写<code>NFS</code></h3><p>变量文件已经配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat exports.j2</span><br><span class="line">&#123;&#123; nfs_share_data &#125;&#125; (rw,all_squash,anonuid=&#123;&#123; nfs_uid &#125;&#125;,anongid=&#123;&#123; nfs_gid &#125;&#125;)</span><br><span class="line"></span><br><span class="line">cat nfs_variables.yml</span><br><span class="line">nfs_share_data: /fff</span><br><span class="line">nfs_uid: 5655</span><br><span class="line">nfs_gid: 5655</span><br><span class="line">nfs_group: dddd</span><br><span class="line">nfs_user: dddd</span><br></pre></td></tr></table></figure>

<p>playbook文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">nfs-server</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">./nfs_variables.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1.</span><span class="string">Install</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs-utils</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2.</span><span class="string">Configure</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./exports.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/exports</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3.</span><span class="string">Created</span> <span class="string">Group</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_group &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_gid &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4.</span><span class="string">Created</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_user &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_uid &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_group &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/sbin/nologin</span></span><br><span class="line">        <span class="attr">create_home:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">5.</span><span class="string">Init</span> <span class="string">Create</span>  <span class="string">Directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_share_data &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_user &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nfs_group &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0755&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">6.</span><span class="string">Started</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">        </span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">./nfs_variables.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">7.</span><span class="string">Install</span> <span class="string">NFS</span> <span class="string">Cli</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs-utils</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">8</span><span class="string">.</span> <span class="string">Cli</span> <span class="string">Mount</span></span><br><span class="line">      <span class="attr">mount:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">&quot;192.168.100.7:<span class="template-variable">&#123;&#123; nfs_share_data &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/mnt</span></span><br><span class="line">        <span class="attr">fstype:</span> <span class="string">nfs</span></span><br><span class="line">        <span class="attr">opts:</span> <span class="string">defaults</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">mounted</span></span><br></pre></td></tr></table></figure>

<h2 id="Ansible-Register"><a href="#Ansible-Register" class="headerlink" title="Ansible Register"></a><code>Ansible Register</code></h2><p>register 可以将 task 执行的任务结果存储至某个变 量中，便于后续的引用</p>
<p>输出命令的结果</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Network</span> <span class="string">Port</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">netstat</span> <span class="string">-lntp</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">System_Port</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debug</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;执行了 <span class="template-variable">&#123;&#123; System_Port.cmd &#125;&#125;</span> 命令&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; System_Port.stdout_lines  &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>批量修改随机主机名称</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">$RANDOM</span> <span class="string">|md5sum</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-c</span> <span class="number">2</span><span class="number">-10</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">systemd_sj</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debug</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; systemd_sj.stdout &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Chanage</span> <span class="string">Hostname</span></span><br><span class="line">      <span class="attr">hostname:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;web_<span class="template-variable">&#123;&#123; systemd_sj.stdout &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Facts-Variables"><a href="#Facts-Variables" class="headerlink" title=" Facts Variables"></a><code> Facts Variables</code></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ansible facts 变量主要用来自动采集，“被控端主机”自身的状态信息。 比如：被动端的，主机名、IP地址、系统版本、CPU数 量、内存状态、磁盘状态等等。</span><br><span class="line"></span><br><span class="line">使用场景:</span><br><span class="line">1.通过facts变量检查被控端硬件CPU信息，从而生成不同的Nginx配置文件</span><br><span class="line">2.通过facts变量检查被控端内存状态信息，从而生成不同的memcached的配置文件</span><br><span class="line">3.通过facts变量检查被控端主机名称信息，从而生成不同的Zabbix配置文件</span><br><span class="line">4.通过facts变量检查被控端主机IP地址信息，从而生成不同的redis配置文件</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以获取被控端的主机信息</span></span><br><span class="line">ansible localhost -m setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看被控端的hostname IP 系统类型，注：gather_facts 此时就不能为 false 了</span></span><br><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Print msg</span><br><span class="line">      debug:</span><br><span class="line">        msg: <span class="string">&quot;&#123;&#123; ansible_nodename &#125;&#125; &#123;&#123; ansible_default_ipv4.address &#125;&#125; &#123;&#123; ansible_distribution &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="根据主机地址IP生成配置"><a href="#根据主机地址IP生成配置" class="headerlink" title="根据主机地址IP生成配置"></a>根据主机地址IP生成配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ./files/tes2t.conf.j2</span><br><span class="line">IP_Server: &#123;&#123; ansible_default_ipv4.address &#125;&#125;</span><br><span class="line"></span><br><span class="line">cat facts2.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Output Vaiables</span><br><span class="line">      template:</span><br><span class="line">        src: ./files/test2.conf.j2</span><br><span class="line">        dest: /tmp/test2.conf</span><br><span class="line"></span><br><span class="line">ansible-playbook facts2.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查web组内的每个主机查看 /tmp/test2.conf 是否按照IP生成了对应内容</span></span><br></pre></td></tr></table></figure>

<h3 id="批量修改主机名"><a href="#批量修改主机名" class="headerlink" title="批量修改主机名"></a>批量修改主机名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat facts3.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Get msg</span><br><span class="line">      debug:</span><br><span class="line">        msg: <span class="string">&quot;&#123;&#123; ansible_default_ipv4.address &#125;&#125;&quot;</span></span><br><span class="line">        </span><br><span class="line">    - name: Change hostname</span><br><span class="line">      hostname: </span><br><span class="line">        name: <span class="string">&quot;web_&#123;&#123; ansible_default_ipv4.address.split(&#x27;.&#x27;)[-1] &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">ansible-playbook facts3.yml</span><br></pre></td></tr></table></figure>

<h3 id="Redis缓存facts变量加速"><a href="#Redis缓存facts变量加速" class="headerlink" title="Redis缓存facts变量加速"></a><code>Redis</code>缓存<code>facts</code>变量加速</h3><p>当我们使用 gather_facts: no 关闭 facts，确实能加速 Ansible 执行，但是有时候又需要使用 facts 中的内容，还希望执行的速度快一点，这时候可以设置facts 的缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line"><span class="comment"># smart 表示默认收集 facts，但 facts 已有的情况下不会收集，即使用缓存 facts</span></span><br><span class="line"><span class="comment"># implicit 表示默认收集 facts，要禁止收集，必须使用 gather_facts: False；</span></span><br><span class="line"><span class="comment"># explicit 则表示默认不收集，要显式收集，必须使用gather_facts: Ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在使用 facts 缓存时设置为smart</span></span><br><span class="line">gathering = smart</span><br><span class="line">fact_caching_timeout = 86400</span><br><span class="line">fact_caching = redis</span><br><span class="line">fact_caching_connection = 172.16.1.41:6379:1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若 redis 设置了密码</span></span><br><span class="line"><span class="comment"># fact_caching_connection =172.16.1.41:6379:1:passwd  1 库</span></span><br><span class="line"><span class="comment"># 整体性能可以提升二到三倍以上</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Playbook使用</title>
    <url>/c3cdc4c2.html</url>
    <content><![CDATA[<h2 id="Playbook入门"><a href="#Playbook入门" class="headerlink" title="Playbook入门"></a><code>Playbook</code>入门</h2><h3 id="Playbook简介"><a href="#Playbook简介" class="headerlink" title="Playbook简介"></a>Playbook简介</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">playbook 是一个由 yml 语法编写的文本文件，它由 play 和 task 两部分组成</span><br><span class="line">play:主要定义要操作主机或者主机组</span><br><span class="line">task:主要定义对主机或主机组具体执行的任务，可以是一个任务，也可以是多个任务（模块）</span><br><span class="line"></span><br><span class="line">总结: playbook 是由一个或多个 play 组成，一个play 可以包含多个 task 任务，</span><br><span class="line">可以理解为: 使用多个不同的模块来共同完成一件事情</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220106100622359.png" alt="image-20220106100622359"></p>
<h3 id="Playbook与Ad-hoc"><a href="#Playbook与Ad-hoc" class="headerlink" title="Playbook与Ad-hoc"></a><code>Playbook</code>与<code>Ad-hoc</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) playbook 是对 AD-Hoc 的一种编排方式</span><br><span class="line">2) playbook 可以持久运行，而 Ad-Hoc 只能临时运行</span><br><span class="line">3) playbook 适合复杂的任务，而 Ad-Hoc 适合做快速简单的任务</span><br><span class="line">4) playbook 能控制任务执行的先后顺序</span><br></pre></td></tr></table></figure>

<h3 id="Playbook格式"><a href="#Playbook格式" class="headerlink" title="Playbook格式"></a><code>Playbook</code>格式</h3><p>playbook 是由 yml 语法书写，结构清晰，可读性强， 所以必须掌握 yml 语法</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>缩 进</td>
<td>YAML使用固定的缩进风格表示层级结构,每个缩进由两个空格组成, 不能使用tab</td>
</tr>
<tr>
<td>冒 号</td>
<td>以冒号结尾的除外，其他所有冒号后面所有必须 有空格</td>
</tr>
<tr>
<td>短 横 线</td>
<td>表示列表项，使用一个短横杠加一个空格，多个项使用同样的缩进级别作为同一列表</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">host: 对哪些主机进行操作</span><br><span class="line">remote_user: 我要使用什么用户执行</span><br><span class="line">tasks: 具体执行什么任务</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示playbook执行时间</span></span><br><span class="line">ansible2.0以上的版本需要在ansible.cfg中加入</span><br><span class="line">callback_whitelist = profile_tasks</span><br></pre></td></tr></table></figure>
<p>安装nginx的playbook，install-nginx.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Systemd</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook --syntax-check install-nginx.yml   <span class="comment"># 检查语法</span></span><br><span class="line">ansible-playbook -C install-nginx.yml         <span class="comment"># 模拟执行</span></span><br><span class="line">ansible-playbook install-nginx.yml            <span class="comment"># 真实执行</span></span><br><span class="line"></span><br><span class="line">执行playbook，注意观察执行返回的状态颜色:</span><br><span class="line">红色：表示有task执行失败，通常都会提示错误信息</span><br><span class="line">黄色：表示远程主机按照编排的任务执行且进行了改变</span><br><span class="line">绿色：表示该主机已经是描述后的状态，无需在次运行</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="部署NFS"><a href="#部署NFS" class="headerlink" title="部署NFS"></a>部署<code>NFS</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat exports.j2</span><br><span class="line">/ansible_test (rw,all_squash,anonuid=7777,anongid=7777)</span><br></pre></td></tr></table></figure>

<p><code>install-yaml</code>文件内容:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">nfs-server</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1.</span><span class="string">Install</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs-utils</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2.</span><span class="string">Configure</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./exports.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/exports</span></span><br><span class="line">      <span class="comment"># 定义触发器</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3.</span><span class="string">Created</span> <span class="string">Group</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">bbb</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="number">7777</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4.</span><span class="string">Created</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">bbb</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">7777</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">bbb</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/sbin/nologin</span></span><br><span class="line">        <span class="attr">create_home:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">5.</span><span class="string">Init</span> <span class="string">Create</span>  <span class="string">Directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/ansible_test</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">bbb</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">bbb</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;0755&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">6.</span><span class="string">Started</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="comment"># 激活触发器,进行重启nfs，因为nfs服务如果在启动状态的话就不会再启动</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">NFS</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nfs</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>

<h4 id="部署Rsync"><a href="#部署Rsync" class="headerlink" title="部署Rsync"></a>部署<code>Rsync</code></h4><p><code>rsyncd.conf.j2</code>文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uid = ansible_www</span><br><span class="line">gid = ansible_www</span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 600</span><br><span class="line"><span class="comment">#ignore errors</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line">list = <span class="literal">false</span></span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">[backup]</span><br><span class="line">path = /backup=</span><br></pre></td></tr></table></figure>

<p><code>install-rsync.yml</code>文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">rsync-server</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rsync</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./rsyncd.conf.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/rsyncd.conf</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Group</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ansible_www</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ansible_www</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">8888</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/sbin/nologin</span></span><br><span class="line">        <span class="attr">create_home:</span> <span class="literal">no</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Create</span> <span class="string">Directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/backup</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">ansible_www</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">ansible_www</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">        <span class="attr">recurse:</span> <span class="literal">yes</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Rsync</span> <span class="string">Server</span> <span class="string">Virtual</span> <span class="string">User</span> <span class="string">Passwd</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">&quot;rsync_backup:123456&quot;</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/rsync.passwd</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0600</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Started</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rsyncd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Rsync</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rsyncd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>

<p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avz exports.j2 rsync_backup@192.168.0.12::backup</span><br></pre></td></tr></table></figure>

<h4 id="部署Redis"><a href="#部署Redis" class="headerlink" title="部署Redis"></a>部署<code>Redis</code></h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Redis</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Redis</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">./files/redis.conf.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/redis.conf</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0640</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">Redis</span> <span class="string">Server</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Systemd</span> <span class="string">Redis</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line">        </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Redis</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Redis</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>

<h4 id="部署Nginx-PHP"><a href="#部署Nginx-PHP" class="headerlink" title="部署Nginx+PHP"></a>部署<code>Nginx+PHP</code></h4><p><code>PHP</code>源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible web -m shell -a <span class="string">&quot;rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm&quot;</span></span><br><span class="line">ansible web -m shell -a <span class="string">&quot;rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm&quot;</span></span><br><span class="line">ansible web -m shell -a <span class="string">&quot;yum makecache&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>nginx+php</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installed</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installed</span> <span class="string">PHP</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; pack &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">vars:</span></span><br><span class="line">        <span class="attr">pack:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-fpm</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-gd</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-mbstring</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-mcrypt</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-mysqlnd</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-opcache</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pdo</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pear</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pecl-igbinary</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pecl-memcached</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mod_php71w</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pecl-mongodb</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-pecl-redis</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-cli</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-process</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-common</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-xml</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-devel</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php71w-embedded</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Nginx</span> <span class="string">nginx.conf</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">files/nginx.conf.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/nginx/nginx.conf</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Group</span> <span class="string">www</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">User</span> <span class="string">www</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">666</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">www</span></span><br><span class="line">        <span class="attr">create_home:</span> <span class="literal">no</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/sbin/nologin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Started</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># php</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Confgiure</span> <span class="string">PHP</span> <span class="string">Server</span> <span class="string">php.ini</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./files/php.ini.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/php.ini</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">PHP</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Confgiure</span> <span class="string">PHP</span> <span class="string">Server</span> <span class="string">php-fpm.d/www.conf</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./files/php-fpm.www.conf.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/php-fpm.d/www.conf</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">PHP</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Started</span> <span class="string">PHP</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">php-fpm</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># code</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">Nginx</span> <span class="string">Virtual</span> <span class="string">Site</span> </span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./files/ansible.oldxu.net.conf.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/nginx/conf.d/ansible.oldxu.net.conf</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Restart</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Ansible</span> <span class="string">Directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/ansible</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">www</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">www</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">        <span class="attr">recurse:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unarchive</span> <span class="string">PHP</span> <span class="string">Code</span></span><br><span class="line">      <span class="attr">unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">files/phpMyAdmin-5.1.1-all-languages.zip</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/ansible/</span></span><br><span class="line">        <span class="attr">creates:</span> <span class="string">/ansible/phpMyAdmin-5.1.1-all-languages/config.inc.php</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Link</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/ansible/phpMyAdmin-5.1.1-all-languages/</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/ansible/phpmyadmin</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">link</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Change</span> <span class="string">phpmyadmin</span> <span class="string">Configure</span> </span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./files/config.inc.php.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/ansible/phpmyadmin/config.inc.php</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Nginx</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">PHP</span> <span class="string">Server</span></span><br><span class="line">      <span class="attr">systemd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">php-fpm</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible常用模块</title>
    <url>/6beab3d3.html</url>
    <content><![CDATA[<h2 id="ad-hoc与常用模块"><a href="#ad-hoc与常用模块" class="headerlink" title="ad-hoc与常用模块"></a><code>ad-hoc</code>与常用模块</h2><p><code>ad-hoc</code>就是临时命令，执行完成即结束，并不会保存</p>
<p>可以查看多台节点是的进程是否存在</p>
<p>拷贝指定文件至本地</p>
<span id="more"></span>
<h3 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ansible &#x27;groups&#x27; -m command -a &quot;df -h&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220103175305795.png" alt="image-20220103175305795"></p>
<h3 id="ad-hoc执行过程"><a href="#ad-hoc执行过程" class="headerlink" title="ad-hoc执行过程"></a><code>ad-hoc</code>执行过程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.加载配置文件，默认 /etc/ansible/ansible.cfg</span><br><span class="line">2.读取inventory</span><br><span class="line">3.操作对应的目标主机组；如果组不存在则报错</span><br><span class="line">4.构建对应的py文件，推送到远程目标主机</span><br><span class="line">5.远程主机执行该文件</span><br><span class="line">6.执行完成后，删除对应的py文件</span><br><span class="line">7.像服务端返回最终执行结果</span><br></pre></td></tr></table></figure>

<h3 id="执行状态"><a href="#执行状态" class="headerlink" title="执行状态"></a>执行状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">返回结果的颜色说明</span><br><span class="line">绿色: 代表被管理端主机没有被修改</span><br><span class="line">黄色: 代表被管理端主机发现变更</span><br><span class="line">红色: 代表出现了故障，注意查看提示</span><br></pre></td></tr></table></figure>

<h3 id="单独项目使用ansible"><a href="#单独项目使用ansible" class="headerlink" title="单独项目使用ansible"></a>单独项目使用<code>ansible</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir project1</span><br><span class="line"><span class="built_in">cd</span> project1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目配置文件和主机文件</span></span><br><span class="line">cp /etc/ansible/ansible.cfg .</span><br><span class="line">cp /etc/ansible/hosts  hosts_group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim ansible.cfg</span><br><span class="line">...</span><br><span class="line">inventory      = ./hosts_group</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看读取的配置文件</span></span><br><span class="line">ansible --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure>

<h2 id="Ansible常用模块"><a href="#Ansible常用模块" class="headerlink" title="Ansible常用模块"></a><code>Ansible</code>常用模块</h2><p>常用模块较多，可以使用<code>ansible-doc  模块名</code>查看帮助</p>
<h3 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h3><p>功能：在远程主机执行shell命令，是一个默认模块，可以忽略参数 <code>-m</code>，但是不支持管道命令 <code>|</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>chdir</td>
<td>chdir /opt</td>
<td>执行ansible时，切换到指定的目录</td>
</tr>
<tr>
<td>creates</td>
<td>creates /data/file</td>
<td>如果文件在，则跳过执行</td>
</tr>
<tr>
<td>removes</td>
<td>removes /data/file</td>
<td>如果文件存在，则执行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当 /data/opt 不存在时，就会执行 ifconfig eth0 命令</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;creates=/data/opt ifconfig eth0&quot;</span></span><br><span class="line"><span class="comment"># 备份: 如果备份的文件存在，则不执行备份的命令；如果文件不存在，则执行备份的命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 /data/opt 存在时，就会执行 ifconfig eth0 命令</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;removes=/data/opt ifconfig eth0&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a><code>shell</code>模块</h3><p>command支持在这个模块一样能执行，被控端已有的<code>shell</code>命令都可以执行，且支持管道</p>
<h3 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a><code>yum</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name:  <span class="comment"># 软件包名称</span></span><br><span class="line">  state: <span class="comment"># 状态</span></span><br><span class="line">		present <span class="comment"># 安装</span></span><br><span class="line">		absent <span class="comment"># 删除</span></span><br><span class="line">		latest <span class="comment"># 最新版</span></span><br><span class="line">		</span><br><span class="line">enablerepo  <span class="comment"># 通过哪个仓库获取</span></span><br><span class="line">disablerepo  <span class="comment"># 不使用哪些仓库的包</span></span><br><span class="line">excludekernel  <span class="comment"># kernel排除</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.安装vsftpd软件包</span></span><br><span class="line">ansible all -m yum -a <span class="string">&#x27;name=vsftpd state=present&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.删除vsftpd</span></span><br><span class="line">ansible all -m yum -a <span class="string">&#x27;name=vsftpd state=absent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.安装httpd服务，必须从epel仓库中安装(所有的被控都有这个epel仓库)</span></span><br><span class="line">ansible all -m yum -a <span class="string">&#x27;name=httpd state=present enablerepo=epel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.更新所有的软件包，唯独kernel程序不更新</span></span><br><span class="line">ansible all -m yum -a <span class="string">&#x27;name=* state=present exclude=&quot;kernel*&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a><code>copy</code>模块</h3><p>控制端的文件，拷贝到被控端，实现替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src:      控制端的源文件路径</span><br><span class="line">dest:     被控端的文件路径</span><br><span class="line">owner:    属主</span><br><span class="line">group:    属组</span><br><span class="line">mode:     权限</span><br><span class="line">backup：   备份</span><br><span class="line">validate： 验证</span><br><span class="line">content:   往一个文件写入内容</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.更新nfs配置，将控制端的 exports.j2 文件同步到被控端的 /etc/exports </span></span><br><span class="line">ansible all -m copy -a <span class="string">&#x27;src=./exports.j2 dest=/etc/exports owner=root group=root mode=0644 backup=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.往一个文件中写入内容，如果文件不存在则创建</span></span><br><span class="line">ansible all -m copy -a <span class="string">&#x27;content=&quot;123&quot; dest=/data/test.txt owner=root group=root mode=&quot;0600&quot; backup=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.验证sudo配置是否正确(adhoc测试失败)：</span></span><br><span class="line">cat tt.yaml </span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: Copy a <span class="string">&quot;sudoers&quot;</span> file on the remote machine <span class="keyword">for</span> editing</span><br><span class="line">    copy:</span><br><span class="line">      src: ./sudoers</span><br><span class="line">      dest: /etc/sudoers</span><br><span class="line">      validate: /usr/sbin/visudo -csf %s</span><br><span class="line"></span><br><span class="line">ansible-ploybook tt.yamy</span><br></pre></td></tr></table></figure>

<h3 id="systemd模块"><a href="#systemd模块" class="headerlink" title="systemd模块"></a><code>systemd</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name                <span class="comment"># 服务名称</span></span><br><span class="line">state               <span class="comment"># 服务状态</span></span><br><span class="line">  started           <span class="comment"># 启动</span></span><br><span class="line">  stopped           <span class="comment"># 停止</span></span><br><span class="line">  restarted         <span class="comment"># 重启</span></span><br><span class="line">  reloaded          <span class="comment"># 重载</span></span><br><span class="line">enabled              <span class="comment"># 开启自启动</span></span><br><span class="line">daemon_reload: yes  <span class="comment"># 重新刷新daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nfs并设置开机自启</span></span><br><span class="line">ansible all -m systemd -a <span class="string">&quot;name=nfs state=started enabled=yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止nfs并关闭开机自启动</span></span><br><span class="line">ansible all -m systemd -a <span class="string">&quot;name=nfs state=stopped enabled=no&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a><code>file</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件、创建目录、授权</span></span><br><span class="line">  file:</span><br><span class="line">    path: 		在被控端创建的路径</span><br><span class="line">    owner: 		属主</span><br><span class="line">    group: 		属组</span><br><span class="line">    mode: 		权限</span><br><span class="line">	state: 		  类型</span><br><span class="line">		touch:    文件</span><br><span class="line">		directory： 目录</span><br><span class="line">		link: 软链接</span><br><span class="line">		hard：硬链接</span><br><span class="line">	recurse： yes 递归授权</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被控端需要有 www 用户</span></span><br><span class="line">gropuadd -g 888 www</span><br><span class="line">useradd -u 888 -g 888 www</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个/data/www 目录，授权为 www 身份</span></span><br><span class="line">ansible webservers -m file -a <span class="string">&#x27;path=/data/www owner=www group=www mode=&quot;0755&quot; state=directory recurse=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /data/www/ 目录中创建一个文件</span></span><br><span class="line">ansible webservers -m file -a <span class="string">&#x27;path=/data/www/books.html owner=www group=www mode=&quot;0644&quot; state=touch&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a><code>group</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: 指定组名称</span><br><span class="line">  gid： 指定gid</span><br><span class="line">	state:</span><br><span class="line">		present：创建  默认</span><br><span class="line">		absent：删除</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 指定 gid 为 666 创建 www 组</span></span><br><span class="line">ansible webservers -m group -a <span class="string">&#x27;name=www gid=666 state=present&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 mysqldb 组为系统的 gid</span></span><br><span class="line">ansible webservers -m group -a <span class="string">&#x27;name=mysqldb system=yes state=present&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a><code>user</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user:</span><br><span class="line">  name: 				创建的名称</span><br><span class="line">  uid: 				  指定uid</span><br><span class="line">  group: 				指定基本组</span><br><span class="line">  shell: 				登录shell类型默认/bin/bash</span><br><span class="line">  create_home		是否创建家目录</span><br><span class="line">	password			设定对应的密码，必须是加密后的字符串才行，否则不生效；</span><br><span class="line">	system				系统用户</span><br><span class="line"></span><br><span class="line">	groups: admins,dev  附加组</span><br><span class="line">	append: yes			追加</span><br><span class="line"></span><br><span class="line">  state: absent		删除</span><br><span class="line">  remove: yes			家目录一起结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 www 用户，指定 uid 666，基本组 www ，不创建家目录</span></span><br><span class="line">ansible webservers -m user -a <span class="string">&#x27;name=www uid=666 group=www shell=/sbin/nologin create_home=no&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建db用户，基本组是root，附加组，adm，sys</span></span><br><span class="line">ansible webservers -m user -a <span class="string">&#x27;name=db group=root groups=adm,sys append=yes shell=/bin/bash create_home=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个ddd用户，密码123，需要正常登录系统</span></span><br><span class="line"><span class="comment"># 生成密码</span></span><br><span class="line">ansible localhost -m debug -a <span class="string">&quot;msg=&#123;&#123; &#x27;123&#x27; | password_hash(&#x27;sha512&#x27;,&#x27;salt&#x27;)&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">ansible webservers -m user -a <span class="string">&#x27;name=ddd password=$6$salt$jkHSO0tOjmLW0S1NFlw5veSIDRAVsiQQMTrkOKy4xdCCLPNIsHhZkIRlzfzIvKyXeGdOfCBoW1wJZPLyQ9Qx/1 shell=/bin/bash create_home=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个dev用户，并为其生成对应的秘钥</span></span><br><span class="line">ansible webservers -m user -a <span class="string">&#x27;name=dev generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="mount模块"><a href="#mount模块" class="headerlink" title="mount模块"></a><code>mount</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src: 源设备路径，或网络地址；</span><br><span class="line">  path: 挂载至本地哪个路径下；</span><br><span class="line">  fstype: 设备类型； nfs</span><br><span class="line">  opts:   挂载的选项</span><br><span class="line">  state:  挂载还是卸载</span><br><span class="line">    present			永久挂载，但没有立即生效</span><br><span class="line">    absent			卸载，临时挂载+永久挂载</span><br><span class="line">    mounted			临时(fstab)挂载</span><br><span class="line">    unmounted		临时卸载</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 172.16.1.7 的 /data 目录挂载到 172.16.1.8 /mnt 目录</span></span><br><span class="line">ansible 172.16.1.8 -m mount -a <span class="string">&#x27;src=172.16.1.7:/data path=/opt fstype=nfs opts=defaults state=mounted&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a><code>cron</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: 		 描述信息，描述脚本的作用</span><br><span class="line">minute: 	 分钟</span><br><span class="line">hour:		   小时</span><br><span class="line">weekday:	 周</span><br><span class="line">user:		   该任务由哪个用户取运行；默认root</span><br><span class="line">job: 		   任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天凌晨3点执行 /bin/bash /scripts/client_push_data_server.sh &amp;&gt;/dev/null</span></span><br><span class="line">ansible webservers -m cron -a <span class="string">&#x27;name=&quot;backups app data scripts&quot; hour=03 minute=00 job=&quot;/bin/bash /scripts/client_push_data_server.sh &amp;&gt;/dev/null&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 backups app data script  执行</span></span><br><span class="line">ansible webservers -m cron -a <span class="string">&#x27;name=&quot;backups app data scripts&quot; hour=03 minute=00 job=&quot;/bin/bash /scripts/client_push_data_server.sh &amp;&gt;/dev/null&quot; state=absent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释 backups app data script  执行</span></span><br><span class="line">ansible webservers -m cron -a <span class="string">&#x27;name=&quot;backups app data scripts&quot; hour=03 minute=00 job=&quot;/bin/bash /scripts/client_push_data_server.sh &amp;&gt;/dev/null&quot; disabled=yes&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="get-url"><a href="#get-url" class="headerlink" title="get_url"></a><code>get_url</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get_url:</span><br><span class="line">  url: 下载地址</span><br><span class="line">  dest: 下载到本地的路径；</span><br><span class="line">  mode: 权限；</span><br><span class="line">  checksum：对资源做校验；</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个资源到本地/tmp目录；</span></span><br><span class="line">ansible webservers -m get_url -a <span class="string">&#x27;url=http://nginx.org/download/nginx-1.20.2.tar.gz dest=/tmp mode=0666&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对下载的资源做验证：</span></span><br><span class="line">ansible webservers -m get_url -a <span class="string">&#x27;url=http://nginx.org/download/nginx-1.20.2.tar.gz dest=/opt mode=0666 checksum=md5:3bcc5ccdc052c35d0d3c5557cf56c7d2&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="unarchive模块"><a href="#unarchive模块" class="headerlink" title="unarchive模块"></a><code>unarchive</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unarchive解压</span></span><br><span class="line">unarchive:</span><br><span class="line">  src: 			  控制端的源文件</span><br><span class="line">  dest: 			解压到被控端的路径</span><br><span class="line">remote_src: yes	源文本是否在被控端，yes则在，no则不在</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将控制端的压缩包，解压到被控端 remote_src: no</span></span><br><span class="line">ansible webservers -m unarchive -a <span class="string">&#x27;src=./test.tar.gz dest=/mnt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将被控端的压缩包解压到被控端  remote_src: yes   config_vpn_new.zip</span></span><br><span class="line">ansible webservers -m unarchive -a <span class="string">&#x27;src=/tmp/test.tar.gz dest=/mnt remote_src=yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># archive 压缩</span></span><br><span class="line"><span class="comment"># 将被控端的/opt 打包到 /mnt 目录下，并命名为 opt.tar.gz </span></span><br><span class="line">ansible webservers -m archive -a <span class="string">&#x27;path=/opt dest=/mnt/opt.tar.gz format=gz&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="selinux模块"><a href="#selinux模块" class="headerlink" title="selinux模块"></a><code>selinux</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">selinux 防火墙模块：</span><br><span class="line">ansible webservers -m selinux -a <span class="string">&#x27;state=disabled&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="firewalld模块"><a href="#firewalld模块" class="headerlink" title="firewalld模块"></a><code>firewalld</code>模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zone：		要操作的区域  默认public</span><br><span class="line">	<span class="built_in">source</span>：	来源地址</span><br><span class="line">    service: 	 服务名称 http,https,sshd,......</span><br><span class="line">	port:		端口</span><br><span class="line">    permanent:	永久生效，但不会立即生效</span><br><span class="line">	immediate：	临时生效；</span><br><span class="line">    state: 		启用和关闭；</span><br><span class="line">		disabled</span><br><span class="line">		enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让被控端都放行80端口；</span></span><br><span class="line">ansible webservers -m systemd -a <span class="string">&#x27;name=firewalld state=started&#x27;</span></span><br><span class="line">ansible webservers -m firewalld -a <span class="string">&#x27;port=80/tcp immediate=yes state=present&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让被控端都放行https端口；</span></span><br><span class="line">ansible webservers -m systemd -a <span class="string">&#x27;name=firewalld state=started&#x27;</span></span><br><span class="line">ansible webservers -m firewalld -a <span class="string">&#x27;service=https immediate=yes state=present&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a><code>iptables</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables:</span><br><span class="line">	table: 					  表</span><br><span class="line">    chain: 					链</span><br><span class="line">    <span class="built_in">source</span>: 				来源IP</span><br><span class="line">	destination				目标IP</span><br><span class="line">	destination_port  目标端口</span><br><span class="line">	protocol	协议</span><br><span class="line">    jump: DROP	动作</span><br><span class="line">	action		如何添加规则</span><br><span class="line">		insert：插入</span><br><span class="line">		append：追加</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 来源IP是192.168.1.1 目标地址 1.1.1.1 目标端口 80  协议 tcp  则拒绝； 规则要写入第一行；</span></span><br><span class="line">ansible webservers -m iptables -a <span class="string">&#x27;table=filter chain=INPUT source=192.168.1.1/32 destination=1.1.1.1 destination_port=80 protocol=tcp jump=DROP action=insert&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NAT：SNAT和DNAT：</span></span><br><span class="line">	DNAT： 如果请求1.1.1:80端口，则DNAT到2.2.2.2:8800</span><br><span class="line">	ansible webservers -m iptables -a <span class="string">&#x27;table=nat chain=PREROUTING protocol=tcp destination=1.1.1.1 destination_port=80 jump=DNAT to_destination=&quot;2.2.2.2:8800&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">	DNAT： 如果请求1.1.1:81端口，则DNAT到3.3.3.3:8800</span><br><span class="line">	ansible webservers -m iptables -a <span class="string">&#x27;table=nat chain=PREROUTING protocol=tcp destination=1.1.1.1 destination_port=81 jump=DNAT to_destination=&quot;3.3.3.3:8800&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">SNAT:  </span><br><span class="line">	POSTROUTING</span><br><span class="line">	iptables -t nat -I POSTROUTING -s 172.16.1.0/24 -j SNAT --to-source 5.5.5.5</span><br><span class="line"></span><br><span class="line">ansible webservers -m iptables -a <span class="string">&#x27;table=nat chain=POSTROUTING source=172.16.2.0/24 jump=SNAT to_source=6.6.6.6&#x27;</span></span><br><span class="line">ansible webservers -m iptables -a <span class="string">&#x27;table=nat chain=POSTROUTING source=172.16.3.0/24 jump=SNAT to_source=7.7.7.7 action=insert&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="yum-repo"><a href="#yum-repo" class="headerlink" title="yum_repo"></a><code>yum_repo</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum_repository</span><br><span class="line">	name				  名称,文件名称</span><br><span class="line">	description	  描述，必填</span><br><span class="line">	baseurl				仓库的地址</span><br><span class="line">	gpgcheck			验证开启</span><br><span class="line">	gpgkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ansible webservers -m yum_repository -a <span class="string">&#x27;name=ansible_nginx description=xxx baseurl=&quot;http://nginx.org/packages/centos/$releasever/$basearch/&quot; gpgcheck=yes gpgkey=&quot;https://nginx.org/keys/nginx_signing.key&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a><code>hostname</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname 修改主机名称：</span><br><span class="line">    name: 	修改后的主机名称；</span><br><span class="line"></span><br><span class="line">ansible webservers -m hostname -a <span class="string">&#x27;name=web_cluster&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a><code>sysctl</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl	修改内核参数模块</span><br><span class="line">- sysctl:</span><br><span class="line">    name: vm.swappiness</span><br><span class="line">    value: <span class="string">&#x27;5&#x27;</span></span><br><span class="line">    state: present</span><br><span class="line"></span><br><span class="line">ansible webservers -m sysctl -a <span class="string">&#x27;name=net.ipv4.ip_forward value=1 state=present&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="lineinfile"><a href="#lineinfile" class="headerlink" title="lineinfile"></a><code>lineinfile</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lineinfile	替换|追加|删除</span><br><span class="line">    path: 					      被控端的路径</span><br><span class="line">    regexp: <span class="string">&#x27;^Listen &#x27;</span>		正则匹配语法格式</span><br><span class="line">    line: Listen 8080			填充的内容</span><br><span class="line">	state: absent					  删除</span><br><span class="line">	insertafter: <span class="string">&#x27;^#Listen &#x27;</span></span><br><span class="line">	insertbefore: <span class="string">&#x27;^www.*80/tcp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换httpd.conf文件中， ^Listen   为  Linsten 8080</span></span><br><span class="line">ansible webservers -m lineinfile -a <span class="string">&#x27;path=/etc/httpd/conf/httpd.conf regexp=&quot;^Listen&quot; line=&quot;Listen 8080&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给主机增加一个网关</span></span><br><span class="line">ansible webservers -m lineinfile -a <span class="string">&#x27;path=/etc/sysconfig/network-scripts/ifcfg-eth1 line=&quot;GATEWAY=172.16.1.200&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除主机的网关</span></span><br><span class="line">ansible webservers -m lineinfile -a <span class="string">&#x27;path=/etc/sysconfig/network-scripts/ifcfg-eth1 regexp=&quot;^GATEWAY&quot; state=absent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给主机增加一个网关，但需要增加到ONBOOT下面</span></span><br><span class="line">ansible webservers -m lineinfile -a <span class="string">&#x27;path=/etc/sysconfig/network-scripts/ifcfg-eth1 insertafter=&quot;ONBOOT=yes&quot; line=&quot;GATEWAY=172.16.1.200&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给主机增加一个网关，但需要增加到ONBOOT上面</span></span><br><span class="line">ansible webservers -m lineinfile -a <span class="string">&#x27;path=/etc/sysconfig/network-scripts/ifcfg-eth1 insertbefore=&quot;ONBOOT=yes&quot; line=&quot;test=172.16.1.200&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible简介、安装</title>
    <url>/1452b361.html</url>
    <content><![CDATA[<h2 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a><code>Ansible</code>介绍</h2><h3 id="简-介"><a href="#简-介" class="headerlink" title="简 介"></a>简 介</h3><p>ansible是自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等</p>
<span id="more"></span>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><p>优势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.ansible不需要单独安装客户端，也不需要启动任何服务</span><br><span class="line">2.ansible是python中的一套完整的自动化执行任务模块</span><br><span class="line">3.ansible playbook，采用yaml配置，对于自动化任务执行一目了然</span><br><span class="line">4.ansible 模块较多，对于自动化的场景支持较丰富</span><br></pre></td></tr></table></figure></li>
<li><p>劣势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.幂等性，每次的描述一种状态后，服务器会按照你所期望的状态去运行；出了问题无法回退，需要重新在描述一次状态，然后执行，以实现回退的效果</span><br><span class="line"></span><br><span class="line">2.效率，如果连接的主机较多，执行的速度会比较的慢，速度相对比saltstack慢</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.连接插件connectior plugins用于连接主机 用来连接被管理端</span><br><span class="line">2.核心模块 core modules 连接主机实现操作， 它依赖于具体的模块来做具体的事情</span><br><span class="line">3.自定义模块 custom modules，根据自己的需求编写具体的模块</span><br><span class="line">4.插件 plugins，完成模块功能的补充</span><br><span class="line">5.剧本 playbooks，ansible的配置文件,将多个任务定义在剧本中，由ansible自动执行</span><br><span class="line">6.主机清单 inventor，定义ansible需要操作主机的范围</span><br><span class="line">最重要的一点是 ansible是模块化的 它所有的操作都依赖于模块</span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220103130441938.png" alt="image-20220103130441938"></p>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="包管理方式-yum"><a href="#包管理方式-yum" class="headerlink" title="包管理方式(yum)"></a>包管理方式(<code>yum</code>)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos需要有epel源</span></span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接安装</span></span><br><span class="line">yum install ansible -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">ansible --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line">ansible localhost -m ping</span><br></pre></td></tr></table></figure>

<h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a><code>pip</code>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装python3</span></span><br><span class="line">yum -y install python3 python3-devel python3-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级pip3</span></span><br><span class="line">pip3 install --upgrade pip -i https://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ansible</span></span><br><span class="line">pip3 install ansible -i https://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ansible安装位置</span></span><br><span class="line"><span class="built_in">which</span> ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ansible版本</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/ansible --version</span><br></pre></td></tr></table></figure>

<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><h3 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看默认配置文件路径</span></span><br><span class="line">rpm -qc ansible</span><br><span class="line">/etc/ansible/ansible.cfg  <span class="comment"># 主配置文件</span></span><br><span class="line">/etc/ansible/hosts				<span class="comment"># 主机清单文件 inventory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/ansible/ansible.cfg 部分说明</span></span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts			    # 默认主机清单路径</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/      # 模块存放路径</span></span><br><span class="line"><span class="comment">#module_utils   = /usr/share/my_module_utils/ # 模块存放路径</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp              # 将模块推送到被控端的临时位置</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp              # 本地模块临时存放位置</span></span><br><span class="line"><span class="comment">#forks          = 5											      #	默认并行的主机数量  可以使用参数 -f 单独指定</span></span><br><span class="line"><span class="comment">#poll_interval  = 15</span></span><br><span class="line"><span class="comment">#sudo_user      = root</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True</span></span><br><span class="line"><span class="comment">#ask_pass      = True</span></span><br><span class="line"><span class="comment">#remote_port    = 22</span></span><br><span class="line"><span class="comment">#host_key_checking = False								    # 第一次连接主机的 yes 需要打开注释</span></span><br><span class="line"><span class="comment">#roles_path    = /etc/ansible/roles           # 默认角色路径</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件加载顺序</span></span><br><span class="line">第一步读取：ANSIBLE_CONFIG</span><br><span class="line">第二步读取：当前项目目录下的ansible.cfg</span><br><span class="line">第三步读取：当前用户家目录下的 .ansible.cfg </span><br><span class="line">第四步读取: /etc/ansible/ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> ANSIBLE_CONFIG=/tmp/ansible.cfg  <span class="comment"># 定义</span></span><br><span class="line">touch /tmp/ansible.cfg</span><br><span class="line">ansible --version     <span class="comment"># 可以看到配置文件位置是 /tmp/ansible.cfg</span></span><br><span class="line"><span class="built_in">unset</span> ANSIBLE_CONFIG  <span class="comment"># 取消定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为项目单独定义配置文件，非常的重要</span></span><br><span class="line">mkdir project1</span><br><span class="line"><span class="built_in">cd</span> project1/</span><br><span class="line">touch ansible.cfg</span><br><span class="line">ansible --version  <span class="comment"># 此时加载的配置文件位置就是 /root/project1/ansible.cfg</span></span><br><span class="line"><span class="comment"># 退出当前目录就变成默认的配置文件了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为当前执行的用户家目录植入一个配置文件；</span></span><br><span class="line">touch ~/.ansible.cfg</span><br><span class="line">ansible --version  <span class="comment"># 此时加载的配置文件位置就是 ~/.ansible.cfg</span></span><br><span class="line">rm -f ~/.ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的配置文件加载路径，优先级是最低的</span></span><br><span class="line">ansible --version</span><br></pre></td></tr></table></figure>

<h2 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a><code>Inventory</code></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主要用来填写被管理主机及主机组信息(逻辑定义)</span><br><span class="line">默认Inventory文件为/etc/ansible/hosts</span><br><span class="line">也可以自定义一个我看，使用ansible命令 -i 参数指定Inventory文件位置</span><br></pre></td></tr></table></figure>

<h3 id="主机清单定义方式"><a href="#主机清单定义方式" class="headerlink" title="主机清单定义方式"></a>主机清单定义方式</h3><h4 id="用户密码"><a href="#用户密码" class="headerlink" title="用户密码"></a>用户密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接写主机IP</span></span><br><span class="line">[server1]</span><br><span class="line">192.168.0.11 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">192.168.0.12 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将密码改成变量，等同于上面</span></span><br><span class="line">[server1]</span><br><span class="line">192.168.0.11</span><br><span class="line">192.168.0.11</span><br><span class="line"></span><br><span class="line">[server1:vars]</span><br><span class="line">ansible_ssh_port=22</span><br><span class="line">ansible_ssh_user=root</span><br><span class="line">ansible_ssh_pass=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多台机器时</span></span><br><span class="line">[server1]</span><br><span class="line">192.168.0.[11:100] ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过域名简写(前提在 hosts 文件中解析)</span></span><br><span class="line">[server1]</span><br><span class="line">server[1:2].test.com ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=<span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="免密"><a href="#免密" class="headerlink" title="免密"></a>免密</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 免交互生成秘钥对</span></span><br><span class="line">ssh-keygen -f ~/.ssh/id_rsa  -P <span class="string">&#x27;&#x27;</span> -q</span><br><span class="line"></span><br><span class="line">yum install sshpass</span><br><span class="line"></span><br><span class="line">sshpass -p123456 ssh-copy-id -f -i ~/.ssh/id_rsa.pub <span class="string">&quot;-o StrictHostKeyChecking=no&quot;</span> root@10.0.0.100 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="comment"># 可以依据上述编写批量免密推送脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机清单</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">[server1]</span><br><span class="line">192.168.0.11</span><br><span class="line">192.168.0.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">[db]</span><br><span class="line">192.168.0.[100:110]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line">[server1]</span><br><span class="line">server[1:100]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 server 主机组内有多少机器，两种方式通用</span></span><br><span class="line">ansible server  --list-hosts</span><br></pre></td></tr></table></figure>

<h3 id="匹配主机组的方式"><a href="#匹配主机组的方式" class="headerlink" title="匹配主机组的方式"></a>匹配主机组的方式</h3><p><code>ansible</code>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [-m module_name] [-a args]</span><br></pre></td></tr></table></figure>

<p><code>host-pattern</code>的使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定所有组</span></span><br><span class="line">ansible all -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符</span></span><br><span class="line">ansible <span class="string">&quot;server*&quot;</span> -m ping</span><br><span class="line">ansible 192.168.0.* -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与: 在server1组，并且在db1组中的主机</span></span><br><span class="line">ansible <span class="string">&quot;server1:&amp;db1&quot;</span> -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或: 在server1组，或者在db1组中的主机</span></span><br><span class="line">ansible <span class="string">&quot;server1:db1&quot;</span> -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非: 在server1组，或者在db1组中的主机</span></span><br><span class="line">ansible <span class="string">&quot;server1:!db1&quot;</span> -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式</span></span><br><span class="line">ansible <span class="string">&quot;~(web|db).*&quot;</span> -m ping </span><br></pre></td></tr></table></figure>

<h3 id="使用普通用户管理被控端"><a href="#使用普通用户管理被控端" class="headerlink" title="使用普通用户管理被控端"></a>使用普通用户管理被控端</h3><p><code>ansible</code>使用<code>test</code>普通用户统一管理所有被控端节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有主机都创建 test 普通用户</span></span><br><span class="line">useradd <span class="built_in">test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span> |passwd --stdin <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理机推送秘钥到被控端</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line">ssh-keygen -f ~/.ssh/id_rsa  -P <span class="string">&#x27;&#x27;</span> -q</span><br><span class="line">sshpass -p123 ssh-copy-id -f -i ~/.ssh/id_rsa.pub <span class="string">&quot;-o StrictHostKeyChecking=no&quot;</span> <span class="built_in">test</span>@192.168.0.12 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启所有主机的sudo权限</span></span><br><span class="line">visudo</span><br><span class="line"><span class="built_in">test</span> ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制端配置文件中配置普通用户提权</span></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=True</span><br><span class="line">become_method=sudo</span><br><span class="line">become_user=root</span><br><span class="line">become_ask_pass=False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不配置上述参数可以使用 -b -K 输入密码即可</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB监控</title>
    <url>/8ba5944d.html</url>
    <content><![CDATA[<h3 id="常用监控工具手段"><a href="#常用监控工具手段" class="headerlink" title="常用监控工具手段"></a>常用监控工具手段</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Ops Manager</span><br><span class="line">Percona</span><br><span class="line">通用监控平台</span><br><span class="line">程序脚本</span><br></pre></td></tr></table></figure>

<h3 id="获取监控数据"><a href="#获取监控数据" class="headerlink" title="获取监控数据"></a>获取监控数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">监控信息的来源</span><br><span class="line">1.db.serverStatus()（主要）</span><br><span class="line">2.db.isMaster()（次要）</span><br><span class="line">3.mongostats 命令行工具（只有部分信息）</span><br><span class="line"></span><br><span class="line">注意：db.serverStatus() 包含的监控信息是从上次开机到现在为止的累计数据，因此不能简单使用。</span><br></pre></td></tr></table></figure>

<h3 id="serverStatus-主要信息"><a href="#serverStatus-主要信息" class="headerlink" title="serverStatus() 主要信息"></a><code>serverStatus()</code> 主要信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connections: 关于连接数的信息</span><br><span class="line">locks: 关于 MongoDB 使用的锁情况</span><br><span class="line">network: 网络使用情况统计</span><br><span class="line">opcounters: CRUD 的执行次数统计</span><br><span class="line">repl: 复制集配置信息</span><br><span class="line">wiredTiger: 包含大量 WirdTiger 执行情况的信息</span><br><span class="line">    block-manager: WT 数据块的读写情况</span><br><span class="line">    session: session 使用数量</span><br><span class="line">    concurrentTransactions: Ticket 使用情况</span><br><span class="line">mem: 内存使用情况</span><br><span class="line">metrics: 一系列性能指标统计信息</span><br></pre></td></tr></table></figure>

<h3 id="监控报警的考量"><a href="#监控报警的考量" class="headerlink" title="监控报警的考量"></a>监控报警的考量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">具备一定的容错机制以减少误报的发生</span><br><span class="line">总结应用各指标峰值</span><br><span class="line">适时调整报警阈值</span><br><span class="line">留出足够的处理时间</span><br></pre></td></tr></table></figure>

<h3 id="建议监控指标"><a href="#建议监控指标" class="headerlink" title="建议监控指标"></a>建议监控指标</h3><table>
<thead>
<tr>
<th>指标</th>
<th>功能</th>
<th>采集方法</th>
</tr>
</thead>
<tbody><tr>
<td>opcounters（操作计数 器）</td>
<td>查询、更新、插入、删除、getmore 和其 他命令的的数量</td>
<td>db.serverStatus().opcounters</td>
</tr>
<tr>
<td>tickets（令牌）</td>
<td>对 WiredTiger 存储引擎的读/写令牌数量 。令牌数量表示了可以进入存储引擎的并 发操作数量。</td>
<td>db.serverStatus().wiredTiger.c oncurrentTransactions</td>
</tr>
<tr>
<td>replication lag（复制 延迟）</td>
<td>这个指标代表了写操作到达从结点所需要 的最小时间。过高的 replication lag 会 减小从结点的价值并且不利于配置了写关 注 w&gt;1 的那些操作。</td>
<td>db.adminCommand({‘replSet GetStatus’: 1})</td>
</tr>
<tr>
<td>oplog window （复制时间窗）</td>
<td>这个指标代表oplog可以容纳多长时间的写 操作。它表示了一个从结点可以离线多长时 间仍能够追上主节点。通常建议该值应大于 24小时为佳。</td>
<td>db.oplog.rs.find().sort({$natura l: -1}).limit(1).next().ts - db.oplog.rs.find().sort({$natura l: 1}).limit(1).next().ts</td>
</tr>
<tr>
<td>connections（连接数）</td>
<td>连接数应作为监控指标的一部分，因为每个 连接都将消耗资源。应该计算低峰/正常/高 峰时间的连接数，并制定合理的报警阈值范 围。</td>
<td>db.serverStatus().connections</td>
</tr>
<tr>
<td>Query targeting （查询专注度）</td>
<td>索引键/文档扫描数量比返回的文档数量， 按秒平均。如果该值比较高表示查询系需要 进行很多低效的扫描来满足查询。这个情况 通常代表了索引不当或缺少索引来支持查询 。</td>
<td>var status = db.serverStatus() status.metrics.queryExecutor.scanned / status.metrics.document.returned status.metrics.queryExecutor.scannedO bjects / status.metrics.document.returned</td>
</tr>
<tr>
<td>Scan and Order（扫描 和排序）</td>
<td>每秒内内存排序操作所占的平均比例。内存 排序可能会十分昂贵，因为它们通常要求缓 冲大量数据。如果有适当索引的情况下，内 存排序是可以避免的。</td>
<td>var status = db.serverStatus() status.metrics.operation.scanA ndOrder / status.opcounters.query</td>
</tr>
<tr>
<td>节点状态</td>
<td>每个节点的运行状态。如果节点状态不是 PRIMARY、SECONDARY、ARBITER 中的 一个，或无法执行上述命令则报警</td>
<td>db.runCommand(“isMaster”)</td>
</tr>
<tr>
<td>dataSize（数据大小）</td>
<td>整个实例数据总量（压缩前）</td>
<td>每个 DB 执行 db.stats()；</td>
</tr>
<tr>
<td>StorageSize（磁盘空间 大小）</td>
<td>已使用的磁盘空间占总空间的百分比。</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB备份与恢复迁移</title>
    <url>/d4437f91.html</url>
    <content><![CDATA[<h3 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.mongoexport/mongoimport</span><br><span class="line">2.mongodump/mongorestore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区别</span></span><br><span class="line">mongoexport/mongoimport  导入/导出的是JSON格式或者CSV格式</span><br><span class="line">mongodump/mongorestore   导入/导出的是BSON格式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line">mongoexport/mongoimport:json csv </span><br><span class="line">1.异构平台迁移      mysql  &lt;---&gt; mongodb</span><br><span class="line">2.同平台,跨大版本   mongodb2  ----&gt; mongodb3</span><br><span class="line"></span><br><span class="line">mongodump/mongorestore</span><br><span class="line">日常备份恢复时使用</span><br></pre></td></tr></table></figure>

<h3 id="mongoexport导出"><a href="#mongoexport导出" class="headerlink" title="mongoexport导出"></a><code>mongoexport</code>导出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-h   指明数据库宿主机的IP</span><br><span class="line">-u   指明数据库的用户名</span><br><span class="line">-p   指明数据库的密码</span><br><span class="line">-d   指明数据库的名字</span><br><span class="line">-c   指明collection的名字</span><br><span class="line">-f   指明要导出那些列</span><br><span class="line">-o   指明到要导出的文件名</span><br><span class="line">-q   指明导出数据的过滤条件</span><br><span class="line">--authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;10000;i++)&#123; db.log.insert(&#123;<span class="string">&quot;uid&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;age&quot;</span>:6,<span class="string">&quot;date&quot;</span>:new Date()&#125;);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单表备份至json格式</span></span><br><span class="line">mongoexport -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c <span class="built_in">log</span> -o /mongodb/log.json</span><br><span class="line"><span class="comment">## 备份文件的名字可以自定义，默认导出了JSON格式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  单表备份至csv格式</span></span><br><span class="line"><span class="comment">## 如果我们需要导出CSV格式的数据，则需要使用----type=csv参数</span></span><br><span class="line">mongoexport -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c <span class="built_in">log</span> --<span class="built_in">type</span>=csv -f uid,name,age,date  -o /mongodb/log.csv</span><br></pre></td></tr></table></figure>

<h3 id="mongoimport-导入"><a href="#mongoimport-导入" class="headerlink" title="mongoimport 导入"></a><code>mongoimport</code> 导入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-h  指明数据库宿主机的IP</span><br><span class="line">-u  指明数据库的用户名</span><br><span class="line">-p  指明数据库的密码</span><br><span class="line">-d  指明数据库的名字</span><br><span class="line">-c  指明collection的名字</span><br><span class="line">-f  指明要导入那些列</span><br><span class="line">-j  并发数</span><br><span class="line"></span><br><span class="line">//并行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据恢复</span></span><br><span class="line"><span class="comment"># 恢复json格式表数据到log1 ( --drop 就可以删除之前的表导入或者换个表，如导入到这边的 log1 )</span></span><br><span class="line">mongoimport -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c log1 /mongodb/log.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复csv格式的文件到log2</span></span><br><span class="line">上面演示的是导入JSON格式的文件中的内容，如果要导入CSV格式文件中的内容，则需要通过--<span class="built_in">type</span>参数指定导入格式，具体如下所示：</span><br><span class="line">错误的恢复</span><br><span class="line"></span><br><span class="line"><span class="comment"># csv格式的文件头行，有列名字</span></span><br><span class="line">mongoimport   -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c log2 --<span class="built_in">type</span>=csv --headerline --file  /mongodb/log.csv</span><br><span class="line"><span class="comment"># --headerline 指明第一行是列名，不需要导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># csv格式的文件头行，没有列名字</span></span><br><span class="line">mongoimport   -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c log3 -j 4 --<span class="built_in">type</span>=csv -f id,name,age,date --file  /mongodb/log.csv</span><br></pre></td></tr></table></figure>

<h3 id="异构平台迁移"><a href="#异构平台迁移" class="headerlink" title="异构平台迁移"></a>异构平台迁移</h3><h4 id="MySQL到MongoDB"><a href="#MySQL到MongoDB" class="headerlink" title="MySQL到MongoDB"></a><code>MySQL</code>到<code>MongoDB</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql ---&gt; mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备mysql数据库，略</span></span><br><span class="line"><span class="comment"># 添加配置文件，导出文件存放位置</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">...</span><br><span class="line">secure-file-priv=/data/bak</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">chown -R mysql.mysql /data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入一个world库，下载地址: https://dev.mysql.com/doc/index-other.html</span></span><br><span class="line">mysql -uroot -p123 &lt; world.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># sql导出city表为csv格式</span></span><br><span class="line">use world;</span><br><span class="line">select * from city into outfile <span class="string">&#x27;/data/bak/city.csv&#x27;</span> fields terminated by <span class="string">&#x27;,&#x27;</span> enclosed by <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出的格式缺少mongodb的头信息，可以用desc 查看补齐</span></span><br><span class="line">desc world.city;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者用下列语句查看</span></span><br><span class="line">select table_name,group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;world&#x27;</span> group by table_name;</span><br><span class="line"><span class="comment"># 得到 Name,CountryCode,District,Population,ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb 导入</span></span><br><span class="line">mongoimport -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -c city --<span class="built_in">type</span>=csv -f Name,CountryCode,District,Population,ID --file /data/bak/city.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">mongo -uroot -proot123 --port 27017 admin</span><br><span class="line">use world</span><br><span class="line">show collections  // show tables</span><br><span class="line">db.city.count()</span><br><span class="line">db.city.find().pretty()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="大量数据批量迁移"><a href="#大量数据批量迁移" class="headerlink" title="大量数据批量迁移"></a>大量数据批量迁移</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟大量数据</span></span><br><span class="line">wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/100w.sql.zip </span><br><span class="line">unzip 100w.sql.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到mysql </span></span><br><span class="line">use world;</span><br><span class="line"><span class="built_in">source</span> /root/100w.sql;</span><br><span class="line">create table t1 like t100w;</span><br><span class="line">insert into t1 select * from t100w;</span><br><span class="line">create table t2 like t100w;</span><br><span class="line">insert into t2 select * from t100w;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据批量导出，world库的数据</span></span><br><span class="line">mysqldump --fields-terminated-by <span class="string">&#x27;,&#x27;</span> --fields-enclosed-by <span class="string">&#x27;&quot;&#x27;</span> world -T /data/bak/</span><br><span class="line">rm -f /data/bak/*.sql</span><br><span class="line">find ./ -name <span class="string">&quot;*.txt&quot;</span>|awk -F <span class="string">&quot;.&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> |xargs -i -t mv ./&#123;&#125;.txt ./&#123;&#125;.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mysql 的SQL语句，拼接批量导入mongodb的语句</span></span><br><span class="line">select concat(<span class="string">&quot;mongoimport -uroot -proot123 --port 27017 --authenticationDatabase admin -d &quot;</span>,table_schema,<span class="string">&quot; -c &quot;</span>,table_name,<span class="string">&quot; --type=csv -f &quot;</span>,group_concat(column_name),<span class="string">&quot; --file /data/bak/&quot;</span>, table_name,<span class="string">&quot;.csv&quot;</span>) from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;world&#x27;</span> group by table_name into outfile <span class="string">&#x27;/data/bak/import-mongodb.sh&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看批量导入语句</span></span><br><span class="line">cat /data/bak/import-mongodb.sh</span><br><span class="line">chmod +x /data/bak/import-mongodb.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除之前的数据</span></span><br><span class="line">su - mongod</span><br><span class="line"> mongo -uroot -proot123 --port 27017 admin</span><br><span class="line"> use world</span><br><span class="line"> db.dropDatabase();</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本批量导入数据</span></span><br><span class="line">su - mongod</span><br><span class="line">bash /data/bak/import-mongodb.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据</span></span><br></pre></td></tr></table></figure>

<h3 id="mongodump备份"><a href="#mongodump备份" class="headerlink" title="mongodump备份"></a><code>mongodump</code>备份</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodump能够在Mongodb运行时进行备份，它的工作原理是对运行的Mongodb做查询，然后将所有查到的文档写入磁盘,</span><br><span class="line">但是存在的问题时使用mongodump产生的备份不一定是数据库的实时快照，如果我们在备份时对数据库进行了写入操作,</span><br><span class="line">则备份出来的文件可能不完全和Mongodb实时数据相等。另外在备份时可能会对其它客户端性能产生不利的影响,</span><br></pre></td></tr></table></figure>

<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-h  指明数据库宿主机的IP</span><br><span class="line">-u  指明数据库的用户名</span><br><span class="line">-p  指明数据库的密码</span><br><span class="line">-d  指明数据库的名字</span><br><span class="line">-c  指明collection的名字</span><br><span class="line">-o  指明到要导出的文件名</span><br><span class="line">-q  指明导出数据的过滤条件</span><br><span class="line">-j  指定并发数</span><br><span class="line">--oplog  备份的同时备份oplog</span><br></pre></td></tr></table></figure>

<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全库备份</span></span><br><span class="line">mkdir /mongodb/backup</span><br><span class="line">mongodump -uroot -proot123 --port 27017 --authenticationDatabase admin -o /mongodb/backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份world库</span></span><br><span class="line">mongodump -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -o /mongodb/backup/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份world库下的city集合</span></span><br><span class="line">mongodump -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -c city -o /mongodb/backup/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩备份</span></span><br><span class="line">mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -o /mongodb/backup/ --gzip</span><br><span class="line">mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -o /mongodb/backup/ --gzip</span><br><span class="line">mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -c city -o /mongodb/backup/ --gzip</span><br></pre></td></tr></table></figure>

<h3 id="mongorestore恢复"><a href="#mongorestore恢复" class="headerlink" title="mongorestore恢复"></a><code>mongorestore</code>恢复</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全库恢复</span></span><br><span class="line">mongorestore   -uroot -proot123 --port 27017 --authenticationDatabase admin /mongodb/backup/ --gzip </span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复world库</span></span><br><span class="line">mongorestore   -uroot -proot123 --port 27017 --authenticationDatabase admin -d world1  /mongodb/backup/world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复world库下的t1集合</span></span><br><span class="line">mongorestore   -uroot -proot123 --port 27017 --authenticationDatabase admin -d world -c t1  --gzip /mongodb/backup.bak/oldboy/log1.bson.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># --drop 表示恢复的时候把之前的集合删除再导入</span></span><br><span class="line">mongorestore  -uroot -proot123 --port 27017 --authenticationDatabase admin -d world --drop  /mongodb/backup/world</span><br></pre></td></tr></table></figure>

<h3 id="oplog"><a href="#oplog" class="headerlink" title="oplog"></a><code>oplog</code></h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这是replica <span class="built_in">set</span>或者master/slave模式专用</span><br><span class="line">在replica <span class="built_in">set</span>中oplog是一个定容集合(capped collection),它的默认大小是磁盘空间的5%(可以通过--oplogSizeMB参数修改),位于<span class="built_in">local</span>库的db.oplog.rs</span><br><span class="line">其中记录的是整个mongod实例一段时间内数据库的所有变更（插入/更新/删除）操作,当空间用完时新记录自动覆盖最老的记录</span><br><span class="line">其覆盖范围被称作oplog时间窗口。需要注意的是，因为oplog是一个定容集合，所以时间窗口能覆盖的范围会因为你单位时间内的更新次数不同而变化</span><br><span class="line"></span><br><span class="line">想要查看当前的oplog时间窗口预计值，可以使用以下命令:</span><br><span class="line"> use <span class="built_in">local</span> </span><br><span class="line"> db.oplog.rs.find().pretty()</span><br><span class="line"></span><br><span class="line">rs.printReplicationInfo()</span><br><span class="line">configured oplog size:   1561.5615234375MB      //&lt;--集合大小</span><br><span class="line"><span class="built_in">log</span> length start to end: 423849secs (117.74hrs) //&lt;--预计窗口覆盖时间</span><br></pre></td></tr></table></figure>

<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现热备，在备份时使用 --oplog 选项</span></span><br><span class="line"><span class="comment"># 搭建复制集，略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据</span></span><br><span class="line">mongo --port 28018</span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line"><span class="keyword">for</span>(var i = 1 ;i &lt; 100; i++) &#123;</span><br><span class="line">    db.foo.insert(&#123;a:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.oplog.rs.find(&#123;<span class="string">&quot;op&quot;</span>:<span class="string">&quot;i&quot;</span>&#125;).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># oplog 配合mongodump实现热备</span></span><br><span class="line">mongodump --port 28018 --oplog -o /mongodb/backup</span><br><span class="line"><span class="comment"># 作用介绍：--oplog 会记录备份过程中的数据变化。会以oplog.bson保存下来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">mongorestore  --port 28018 --oplogReplay /mongodb/backup</span><br></pre></td></tr></table></figure>

<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">背景：每天0点全备，oplog恢复窗口为48小时。某天，上午10点world.city 业务表被误删除</span><br><span class="line">恢复思路：</span><br><span class="line">    0、停应用</span><br><span class="line">    2、找测试库</span><br><span class="line">    3、恢复昨天晚上全备</span><br><span class="line">    4、截取全备之后到world.city误删除时间点的oplog，并恢复到测试库</span><br><span class="line">    5、将误删除表导出，恢复到生产库</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复步骤如下</span></span><br><span class="line"><span class="comment"># 全备数据库</span></span><br><span class="line">    <span class="comment"># 模拟原始数据</span></span><br><span class="line">    mongo --port 28017</span><br><span class="line">    use wo</span><br><span class="line">    <span class="keyword">for</span>(var i = 1 ;i &lt; 20; i++) &#123;</span><br><span class="line">        db.ci.insert(&#123;a: i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全备</span></span><br><span class="line">    rm -rf /mongodb/backup/*</span><br><span class="line">    mongodump --port 28018 --oplog -o /mongodb/backup</span><br><span class="line">   <span class="comment">#  --oplog功能:在备份同时,将备份过程中产生的日志进行备份，文件必须存放在/mongodb/backup下,自动命令为oplog.bson</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再次模拟数据</span></span><br><span class="line">    db.ci1.insert(&#123;id:1&#125;)</span><br><span class="line">    db.ci2.insert(&#123;id:2&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上午10点：删除wo库下的ci表，10:00时刻,误删除</span></span><br><span class="line">db.ci.drop()</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份现有的oplog.rs表</span></span><br><span class="line">mongodump --port 28018 -d <span class="built_in">local</span> -c oplog.rs  -o /mongodb/backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取oplog并恢复到drop之前的位置，更合理的方法：登陆到原数据库</span></span><br><span class="line">mongo --port 28018</span><br><span class="line">use <span class="built_in">local</span></span><br><span class="line">db.oplog.rs.find(&#123;op:<span class="string">&quot;c&quot;</span>&#125;).pretty();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;ts&quot;</span> : Timestamp(1553659908, 1),</span><br><span class="line">    <span class="string">&quot;t&quot;</span> : NumberLong(2),</span><br><span class="line">    <span class="string">&quot;h&quot;</span> : NumberLong(<span class="string">&quot;-7439981700218302504&quot;</span>),</span><br><span class="line">    <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;op&quot;</span> : <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;wo.<span class="variable">$cmd</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ui&quot;</span> : UUID(<span class="string">&quot;db70fa45-edde-4945-ade3-747224745725&quot;</span>),</span><br><span class="line">    <span class="string">&quot;wall&quot;</span> : ISODate(<span class="string">&quot;2019-03-27T04:11:48.890Z&quot;</span>),</span><br><span class="line">    <span class="string">&quot;o&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;drop&quot;</span> : <span class="string">&quot;ci&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到oplog误删除时间点位置</span></span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1553659908, 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复备份+应用oplog</span></span><br><span class="line"><span class="built_in">cd</span> /mongodb/backup/<span class="built_in">local</span>/</span><br><span class="line">ls</span><br><span class="line">oplog.rs.bson  oplog.rs.metadata.json</span><br><span class="line"></span><br><span class="line">cp oplog.rs.bson ../oplog.bson </span><br><span class="line">rm -rf /mongodb/backup/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">mongorestore --port 38021  --oplogReplay --oplogLimit <span class="string">&quot;1553659908:1&quot;</span>  --drop   /mongodb/backup/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB全球多写</title>
    <url>/2a426223.html</url>
    <content><![CDATA[<h3 id="全球多写-Zone-Sharding"><a href="#全球多写-Zone-Sharding" class="headerlink" title="全球多写(Zone Sharding)"></a>全球多写(<code>Zone Sharding</code>)</h3><span id="more"></span>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104181800463.png" alt="image-20220104181800463"></p>
<h3 id="db1复制集配置"><a href="#db1复制集配置" class="headerlink" title="db1复制集配置"></a><code>db1</code>复制集配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/&#123;20001..20003&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt;  /mongodb/20001/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/20001/log/mongodb.log   </span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/20001/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 20001</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: CN_sh</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: shardsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp /mongodb/20001/conf/mongodb.conf  /mongodb/20002/conf</span><br><span class="line">cp /mongodb/20001/conf/mongodb.conf  /mongodb/20003/conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20001#20002#g&#x27;</span> /mongodb/20002/conf/mongodb.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20001#20003#g&#x27;</span> /mongodb/20003/conf/mongodb.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#CN_sh#US_sh#g&#x27;</span> /mongodb/20003/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/20001/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20002/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20003/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h3 id="db2复制集配置"><a href="#db2复制集配置" class="headerlink" title="db2复制集配置"></a><code>db2</code>复制集配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/&#123;20001..20003&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt;  /mongodb/20001/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/20001/log/mongodb.log   </span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/20001/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 20001</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: US_sh</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: shardsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp /mongodb/20001/conf/mongodb.conf  /mongodb/20002/conf</span><br><span class="line">cp /mongodb/20001/conf/mongodb.conf  /mongodb/20003/conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20001#20002#g&#x27;</span> /mongodb/20002/conf/mongodb.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20001#20003#g&#x27;</span> /mongodb/20003/conf/mongodb.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#US_sh#CN_sh#g&#x27;</span> /mongodb/20003/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/20001/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20002/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20003/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h3 id="db1上config节点"><a href="#db1上config节点" class="headerlink" title="db1上config节点"></a><code>db1</code>上<code>config</code>节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/&#123;20004..20006&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line"></span><br><span class="line">cat &gt; /mongodb/20004/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/20004/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/20004/data/</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 20004</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: configReplSet</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: configsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cp /mongodb/20004/conf/mongodb.conf  /mongodb/20005/conf</span><br><span class="line">cp /mongodb/20004/conf/mongodb.conf  /mongodb/20006/conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20004#20005#g&#x27;</span> /mongodb/20005/conf/mongodb.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#20004#20006#g&#x27;</span> /mongodb/20006/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/20004/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20005/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/20006/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h3 id="复制集配置"><a href="#复制集配置" class="headerlink" title="复制集配置"></a>复制集配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置复制集1</span></span><br><span class="line">mongo 192.168.0.11:20001/admin</span><br><span class="line">use  admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;CN_sh&#x27;</span>, members: [</span><br><span class="line">                        &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:20001&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 1, host: <span class="string">&#x27;192.168.0.11:20002&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 2, host: <span class="string">&#x27;192.168.0.12:20003&#x27;</span>&#125;]</span><br><span class="line">         &#125;</span><br><span class="line">rs.initiate(config)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置复制集2</span></span><br><span class="line">mongo 192.168.0.12:20001/admin</span><br><span class="line">use  admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;US_sh&#x27;</span>, members: [</span><br><span class="line">                        &#123;_id: 0, host: <span class="string">&#x27;192.168.0.12:20001&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 1, host: <span class="string">&#x27;192.168.0.12:20002&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 2, host: <span class="string">&#x27;192.168.0.11:20003&#x27;</span>&#125;]</span><br><span class="line">         &#125;</span><br><span class="line">rs.initiate(config)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置config节点，db1节点</span></span><br><span class="line">mongo --port 20004 admin</span><br><span class="line">use  admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;configReplSet&#x27;</span>, members: [</span><br><span class="line">                        &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:20004&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 1, host: <span class="string">&#x27;192.168.0.11:20005&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 2, host: <span class="string">&#x27;192.168.0.11:20006&#x27;</span>&#125;]</span><br><span class="line">         &#125;</span><br><span class="line">rs.initiate(config)  </span><br></pre></td></tr></table></figure>

<h3 id="mongos配置"><a href="#mongos配置" class="headerlink" title="mongos配置"></a><code>mongos</code>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db1上操作</span></span><br><span class="line">mkdir -p /mongodb/20010/&#123;conf,<span class="built_in">log</span>&#125;</span><br><span class="line"></span><br><span class="line">cat &gt; /mongodb/20010/conf/mongos.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/20010/log/mongos.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true </span></span><br><span class="line"><span class="string">  port: 20010</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  configDB: configReplSet/192.168.0.11:20004,192.168.0.11:20005,192.168.0.11:20006</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">mongos -f /mongodb/20010/conf/mongos.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># db2上操作</span></span><br><span class="line">mkdir -p /mongodb/20011/&#123;conf,<span class="built_in">log</span>&#125;</span><br><span class="line"></span><br><span class="line">cat &gt; /mongodb/20011/conf/mongos.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/20011/log/mongos.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true </span></span><br><span class="line"><span class="string">  port: 20011</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  configDB: configReplSet/192.168.0.11:20004,192.168.0.11:20005,192.168.0.11:20006</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mongos -f /mongodb/20011/conf/mongos.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在db1上操作(随便一台都行)</span></span><br><span class="line"><span class="comment"># 连接到mongs的admin数据库</span></span><br><span class="line">su - mongod</span><br><span class="line">mongo 192.168.0.11:20010/admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加分片</span></span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;CN_sh/192.168.0.11:20001,192.168.0.11:20002,192.168.0.12:20003&quot;</span>,name:<span class="string">&quot;CN_sh&quot;</span>&#125; )</span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;US_sh/192.168.0.12:20001,192.168.0.12:20002,192.168.0.11:20003&quot;</span>,name:<span class="string">&quot;US_sh&quot;</span>&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出分片</span></span><br><span class="line">db.runCommand( &#123; listshards : 1 &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体状态查看</span></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录 mongos 操作</span></span><br><span class="line">mongo 192.168.0.11:20010/admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对shard添加标记</span></span><br><span class="line">use config</span><br><span class="line">sh.addShardTag(<span class="string">&quot;CN_sh&quot;</span>,<span class="string">&quot;ASIA&quot;</span>)</span><br><span class="line">sh.addShardTag(<span class="string">&quot;US_sh&quot;</span>,<span class="string">&quot;AMERICA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启crm库的功能</span></span><br><span class="line">use admin</span><br><span class="line">db.runCommand( &#123; enablesharding : <span class="string">&quot;crm&quot;</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启路由规则</span></span><br><span class="line">use config</span><br><span class="line">sh.addTagRange( <span class="string">&quot;crm.orders&quot;</span>,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;CN&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MinKey &#125;,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;CN&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MaxKey &#125;,</span><br><span class="line"><span class="string">&quot;ASIA&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.addTagRange( <span class="string">&quot;crm.orders&quot;</span>,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;US&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MinKey &#125;,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;US&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MaxKey &#125;,</span><br><span class="line"><span class="string">&quot;AMERICA&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.addTagRange( <span class="string">&quot;crm.orders&quot;</span>,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;CA&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MinKey &#125;,</span><br><span class="line">&#123; <span class="string">&quot;locationCode&quot;</span> : <span class="string">&quot;CA&quot;</span>, <span class="string">&quot;order_id&quot;</span> : MaxKey &#125;,</span><br><span class="line"><span class="string">&quot;AMERICA&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB两地三中心部署</title>
    <url>/ec5ee46f.html</url>
    <content><![CDATA[<h3 id="容灾级别"><a href="#容灾级别" class="headerlink" title="容灾级别"></a>容灾级别</h3><span id="more"></span>
<table>
<thead>
<tr>
<th>级别</th>
<th>方式</th>
<th>RPO</th>
<th>RTO</th>
</tr>
</thead>
<tbody><tr>
<td>L0</td>
<td>无备源中心 : 没有灾难恢复能力，只在本地进行数据备份</td>
<td>24小时</td>
<td>4小时</td>
</tr>
<tr>
<td>L1</td>
<td>本地备份+异地保存: 本地将关键数据备份，然后送到异地保存。 灾难发生后，按预定数据恢复程序恢复系统和数据</td>
<td>24小时</td>
<td>8小时</td>
</tr>
<tr>
<td>L2</td>
<td>双中心主备模式:  在异地建立一个热备份点，通过网络进行数据备份。 当出现灾难时，备份站点接替主站点的业务，维护业务连续性</td>
<td>秒</td>
<td>数分钟到半小时</td>
</tr>
<tr>
<td>L3</td>
<td>双中心双活: 在相隔较远的地方分别建立两个数据中心，进行相互数据备份。 当某个数据中心发生灾难时，另一个数据中心接替其工作任务</td>
<td>秒</td>
<td>秒</td>
</tr>
<tr>
<td>L4</td>
<td>双中心双活 + 异地热备 = 两地三中心:  在同城分别建立两个数据中心，进行相互数据备份。 当该城市的2个中心同时不可用（地震/大面积停电/网络等），快速切换到异地 L4 秒</td>
<td>秒</td>
<td>分钟</td>
</tr>
</tbody></table>
<h3 id="简单架构"><a href="#简单架构" class="headerlink" title="简单架构"></a>简单架构</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104155254690.png" alt="image-20220104155254690"></p>
<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><table>
<thead>
<tr>
<th>配置</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>2c4g</td>
<td>192.168.0.11(db1)</td>
<td>Primary(10011)、Secondary(10002)</td>
</tr>
<tr>
<td>2c4g</td>
<td>192.168.0.12(db2)</td>
<td>Secondary(10003)、Secondary(10004)</td>
</tr>
<tr>
<td>2c4g</td>
<td>192.168.0.13(db3)</td>
<td>Secondary(10005)</td>
</tr>
</tbody></table>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="db1配置"><a href="#db1配置" class="headerlink" title="db1配置"></a>db1配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/&#123;10001..10002&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line">tree -L 2 /mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt; /mongodb/10001/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/10001/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/10001/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">processManagement:</span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 10001</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: my_repl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cp /mongodb/10001/conf/mongodb.conf  /mongodb/10002/conf</span><br><span class="line">sed -i <span class="string">&#x27;s#10001#10002#g&#x27;</span> /mongodb/10002/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/10001/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10002/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h4 id="db2配置"><a href="#db2配置" class="headerlink" title="db2配置"></a>db2配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/&#123;10003..10004&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line">tree -L 2 /mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt; /mongodb/10003/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/10003/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/10003/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">processManagement:</span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 10003</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: my_repl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cp /mongodb/10003/conf/mongodb.conf  /mongodb/10004/conf</span><br><span class="line">sed -i <span class="string">&#x27;s#10003#10004#g&#x27;</span> /mongodb/10004/conf/mongodb.conf</span><br><span class="line"> </span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/10003/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10004/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h4 id="db3配置"><a href="#db3配置" class="headerlink" title="db3配置"></a>db3配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /mongodb/10005/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line">tree -L 2 /mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt; /mongodb/10005/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/10005/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/10005/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">processManagement:</span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 10005</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: my_repl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/10005/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h4 id="配置复制集和权重"><a href="#配置复制集和权重" class="headerlink" title="配置复制集和权重"></a>配置复制集和权重</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 10001 admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;my_repl&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:10001&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;192.168.0.11:10002&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;192.168.0.12:10003&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 3, host: <span class="string">&#x27;192.168.0.12:10004&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 4, host: <span class="string">&#x27;192.168.0.13:10005&#x27;</span>&#125;]</span><br><span class="line">          &#125;                   </span><br><span class="line">rs.initiate(config) </span><br><span class="line">rs.status()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权重配置</span></span><br><span class="line">cfg = rs.conf()</span><br><span class="line">cfg.members[0].priority = 5</span><br><span class="line">cfg.members[1].priority = 10</span><br><span class="line">rs.reconfig(cfg)</span><br></pre></td></tr></table></figure>

<h4 id="复制集安全加固"><a href="#复制集安全加固" class="headerlink" title="复制集安全加固"></a>复制集安全加固</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 756 &gt; /mongodb/10001/conf/keyfile</span><br><span class="line">chmod 600 /mongodb/10001/conf/keyfile</span><br><span class="line">cp -a /mongodb/10001/conf/keyfile /mongodb/10002/conf</span><br><span class="line">scp -rp /mongodb/10001/conf/keyfile db2:/mongodb/10003/conf</span><br><span class="line">scp -rp /mongodb/10001/conf/keyfile db2:/mongodb/10004/conf</span><br><span class="line">scp -rp /mongodb/10001/conf/keyfile db3:/mongodb/10005/conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /mongodb/10001/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">security:</span></span><br><span class="line"><span class="string">  keyFile: /mongodb/10001/conf/keyfile</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /mongodb/10002/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">security:</span></span><br><span class="line"><span class="string">  keyFile: /mongodb/10002/conf/keyfile</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /mongodb/10003/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">security:</span></span><br><span class="line"><span class="string">  keyFile: /mongodb/10003/conf/keyfile</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /mongodb/10004/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">security:</span></span><br><span class="line"><span class="string">  keyFile: /mongodb/10004/conf/keyfile</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /mongodb/10005/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">security:</span></span><br><span class="line"><span class="string">  keyFile: /mongodb/10005/conf/keyfile</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭的时候最后关闭主节点</span></span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/10001/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/10002/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/10003/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/10004/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/10005/conf/mongodb.conf --shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">mongod -f /mongodb/10001/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10002/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10003/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10004/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/10005/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主节点上添加用户密码</span></span><br><span class="line">mongo --port 10001 admin</span><br><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&quot;root123&quot;</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式输入密码</span></span><br><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;root1&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: passwordPrompt(),</span><br><span class="line">    roles: [ &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式验证</span></span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">&quot;root1&quot;</span>,passwordPrompt())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB分片集群搭建及扩容</title>
    <url>/d8bf061a.html</url>
    <content><![CDATA[<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>测试机器没有那么多，所以采用三台机器多实例的办法，应该一台机器一个实例</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>配置</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>4c8g</td>
<td>192.168.0.11(db1)</td>
<td>shard1(node1(28017))、shard2(node1(28018))、config(node1(28019))、mongos(28021)</td>
</tr>
<tr>
<td>4c8g</td>
<td>192.168.0.12(db2)</td>
<td>shard1(node2(28017))、shard2(node2(28018))、config(node1(28019))</td>
</tr>
<tr>
<td>4c8g</td>
<td>192.168.0.13(db3)</td>
<td>shard1(node3(27017))、shard2(node3(28018))、config(node1(28019))</td>
</tr>
</tbody></table>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211231194820648.png" alt="image-20211231194820648"></p>
<h3 id="配置分片集群"><a href="#配置分片集群" class="headerlink" title="配置分片集群"></a>配置分片集群</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全部机器操作，软件按照上述安装部署</span></span><br><span class="line"><span class="comment"># hosts解析</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.0.11 db1</span></span><br><span class="line"><span class="string">192.168.0.12 db2</span></span><br><span class="line"><span class="string">192.168.0.13 db3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群目录</span></span><br><span class="line">mkdir -p /mongodb/&#123;28017..28019&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line">chown -R mongod.mongod /mongodb</span><br><span class="line"></span><br><span class="line">su - mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集一配置文件</span></span><br><span class="line">cat &gt;  /mongodb/28017/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/28017/log/mongodb.log   </span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/28017/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 28017</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: sh1</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: shardsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集二配置文件</span></span><br><span class="line">cat &gt;  /mongodb/28018/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/28018/log/mongodb.log   </span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/28018/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 28018</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: sh2</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: shardsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config集群配置文件</span></span><br><span class="line">cat &gt; /mongodb/28019/conf/mongodb.conf  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/28019/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/28019/data/</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 28019</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: configReplSet</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  clusterRole: configsvr</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有机器</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">mongod -f /mongodb/28017/conf/mongodb.conf</span><br><span class="line">mongod -f /mongodb/28018/conf/mongodb.conf      </span><br><span class="line">mongod -f /mongodb/28019/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">mongod -f /mongodb/28017/conf/mongodb.conf  --shutdown</span><br><span class="line">mongod -f /mongodb/28018/conf/mongodb.conf  --shutdown     </span><br><span class="line">mongod -f /mongodb/28019/conf/mongodb.conf  --shutdown</span><br></pre></td></tr></table></figure>

<h4 id="配置复制集"><a href="#配置复制集" class="headerlink" title="配置复制集"></a>配置复制集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在db1上操作即可</span></span><br><span class="line">su - mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集1</span></span><br><span class="line">mongo --port 28017 admin</span><br><span class="line">use admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;sh1&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;192.168.0.12:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;192.168.0.13:28017&#x27;</span>&#125;]</span><br><span class="line">           &#125;</span><br><span class="line">rs.initiate(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集2</span></span><br><span class="line">mongo --port 28018 admin </span><br><span class="line">use admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;sh2&#x27;</span>, members: [</span><br><span class="line">                        &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:28018&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 1, host: <span class="string">&#x27;192.168.0.12:28018&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 2, host: <span class="string">&#x27;192.168.0.13:28018&#x27;</span>&#125;]</span><br><span class="line">         &#125;</span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure>

<h4 id="配置config节点"><a href="#配置config节点" class="headerlink" title="配置config节点"></a>配置<code>config</code>节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 28019 admin</span><br><span class="line">use  admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;configReplSet&#x27;</span>, members: [</span><br><span class="line">                        &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:28019&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 1, host: <span class="string">&#x27;192.168.0.12:28019&#x27;</span>&#125;,</span><br><span class="line">                        &#123;_id: 2, host: <span class="string">&#x27;192.168.0.13:28019&#x27;</span>&#125;]</span><br><span class="line">         &#125;</span><br><span class="line">rs.initiate(config)  </span><br><span class="line">  </span><br><span class="line">注：configserver 可以是一个节点，官方建议复制集。configserver不能有arbiter</span><br><span class="line">新版本中，要求必须是复制集</span><br><span class="line">注：mongodb 3.4之后，虽然要求config server为replica <span class="built_in">set</span>，但是不支持arbiter</span><br></pre></td></tr></table></figure>

<h4 id="配置mongos节点"><a href="#配置mongos节点" class="headerlink" title="配置mongos节点"></a>配置<code>mongos</code>节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db1单独配置</span></span><br><span class="line">mkdir -p /mongodb/28020/&#123;conf,<span class="built_in">log</span>&#125;</span><br><span class="line">cat &gt; /mongodb/28020/conf/mongos.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/28020/log/mongos.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true </span></span><br><span class="line"><span class="string">  port: 28020</span></span><br><span class="line"><span class="string">sharding:</span></span><br><span class="line"><span class="string">  configDB: configReplSet/192.168.0.11:28019,192.168.0.12:28019,192.168.0.13:28019</span></span><br><span class="line"><span class="string">processManagement: </span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 mongos 命令有差别</span></span><br><span class="line">mongos -f /mongodb/28020/conf/mongos.conf </span><br></pre></td></tr></table></figure>

<h4 id="mongos添加分片集群"><a href="#mongos添加分片集群" class="headerlink" title="mongos添加分片集群"></a>mongos添加分片集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在db1上操作(随便一台都行)</span></span><br><span class="line"><span class="comment"># 连接到mongs的admin数据库</span></span><br><span class="line">su - mongod</span><br><span class="line">mongo 192.168.0.11:28020/admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加分片</span></span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;sh1/192.168.0.11:28017,192.168.0.12:28017,192.168.0.13:28017&quot;</span>,name:<span class="string">&quot;shard1&quot;</span>&#125; )</span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;sh2/192.168.0.11:28018,192.168.0.12:28018,192.168.0.13:28018&quot;</span>,name:<span class="string">&quot;shard2&quot;</span>&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出分片</span></span><br><span class="line">db.runCommand( &#123; listshards : 1 &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体状态查看</span></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>

<h3 id="使用分片"><a href="#使用分片" class="headerlink" title="使用分片"></a>使用分片</h3><h4 id="RANGE分片配置及测试"><a href="#RANGE分片配置及测试" class="headerlink" title="RANGE分片配置及测试"></a><code>RANGE</code>分片配置及测试</h4><h5 id="激活数据库分片功能"><a href="#激活数据库分片功能" class="headerlink" title="激活数据库分片功能"></a>激活数据库分片功能</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.runCommand( &#123; enablesharding : <span class="string">&quot;数据库名称&quot;</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如激活test库分片功能，先登录 mongos </span></span><br><span class="line">mongo 192.168.0.11:28020/admin</span><br><span class="line">db.runCommand( &#123; enablesharding : <span class="string">&quot;test&quot;</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体状态查看</span></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>

<h5 id="指定分片键对集合分片"><a href="#指定分片键对集合分片" class="headerlink" title="指定分片键对集合分片"></a>指定分片键对集合分片</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line">db.vast.ensureIndex( &#123; id: 1 &#125; )</span><br><span class="line">show tables;</span><br><span class="line">db.vest.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启分片</span></span><br><span class="line">use admin</span><br><span class="line">db.runCommand( &#123; shardcollection : <span class="string">&quot;test.vast&quot;</span>,key : &#123;id: 1&#125; &#125; )</span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>

<h5 id="集合分片验证"><a href="#集合分片验证" class="headerlink" title="集合分片验证"></a>集合分片验证</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use <span class="built_in">test</span></span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;1000000;i++)&#123; db.vast.insert(&#123;<span class="string">&quot;id&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shenzheng&quot;</span>,<span class="string">&quot;age&quot;</span>:70,<span class="string">&quot;date&quot;</span>:new Date()&#125;); &#125;</span><br><span class="line">db.vast.stats()</span><br></pre></td></tr></table></figure>

<h5 id="分片结果测试"><a href="#分片结果测试" class="headerlink" title="分片结果测试"></a>分片结果测试</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制集1</span></span><br><span class="line">mongo --port 28017</span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line">db.vast.count();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集2</span></span><br><span class="line">mongo --port 28018</span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line">db.vast.count();</span><br></pre></td></tr></table></figure>

<h4 id="Hash分片"><a href="#Hash分片" class="headerlink" title="Hash分片"></a><code>Hash</code>分片</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对test1库下的vast大表进行hash</span></span><br><span class="line"><span class="comment"># 创建哈希索引</span></span><br><span class="line"><span class="comment"># 对于test1开启分片功能，连接到mongos</span></span><br><span class="line">mongo 192.168.0.11:28020/admin</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.runCommand( &#123; enablesharding : <span class="string">&quot;test1&quot;</span> &#125; )</span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于test1库下的vast表建立hash索引</span></span><br><span class="line">use test1</span><br><span class="line">db.vast.ensureIndex( &#123; id: <span class="string">&quot;hashed&quot;</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启分片 </span></span><br><span class="line">use admin</span><br><span class="line">sh.shardCollection( <span class="string">&quot;test1.vast&quot;</span>, &#123; id: <span class="string">&quot;hashed&quot;</span> &#125; )</span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 录入10w行数据测试</span></span><br><span class="line">use test1</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;100000;i++)&#123; db.vast.insert(&#123;<span class="string">&quot;id&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shenzheng&quot;</span>,<span class="string">&quot;age&quot;</span>:70,<span class="string">&quot;date&quot;</span>:new Date()&#125;); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash分片结果测试</span></span><br><span class="line"><span class="comment"># 复制集1</span></span><br><span class="line">mongo --port 28017</span><br><span class="line">use test1</span><br><span class="line">db.vast.count();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制集2</span></span><br><span class="line">mongo --port 28018</span><br><span class="line">use test1</span><br><span class="line">db.vast.count();</span><br></pre></td></tr></table></figure>

<h3 id="分片集群查询及管理"><a href="#分片集群查询及管理" class="headerlink" title="分片集群查询及管理"></a>分片集群查询及管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否Shard集群</span></span><br><span class="line">db.runCommand(&#123; isdbgrid : 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有分片信息</span></span><br><span class="line">db.runCommand(&#123; listshards : 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出开启分片的数据库</span></span><br><span class="line">use config</span><br><span class="line">db.databases.find( &#123; <span class="string">&quot;partitioned&quot;</span>: <span class="literal">true</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分片的片键</span></span><br><span class="line">db.collections.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分片的详细信息</span></span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分片节点(谨慎)</span></span><br><span class="line">    <span class="comment"># 确认blance是否在工作</span></span><br><span class="line">    sh.getBalancerState()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除shard2节点(谨慎)</span></span><br><span class="line">    db.runCommand( &#123; removeShard: <span class="string">&quot;shard2&quot;</span> &#125; )</span><br><span class="line">    <span class="comment"># 注意：删除操作一定会立即触发blancer</span></span><br></pre></td></tr></table></figure>

<h3 id="balancer操作"><a href="#balancer操作" class="headerlink" title="balancer操作"></a>balancer操作</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos的一个重要功能，自动巡查所有shard节点上的chunk的情况，自动做chunk迁移，什么时候工作？</span><br><span class="line">1、自动运行，会检测系统不繁忙的时候做迁移</span><br><span class="line">2、在做节点删除的时候，立即开始迁移工作</span><br><span class="line">3、balancer只能在预设定的时间窗口内运行</span><br><span class="line"></span><br><span class="line">有需要时可以关闭和开启blancer（备份的时候）</span><br><span class="line">sh.stopBalancer()</span><br><span class="line">sh.startBalancer()</span><br></pre></td></tr></table></figure>

<h4 id="自动平衡时间段"><a href="#自动平衡时间段" class="headerlink" title="自动平衡时间段"></a>自动平衡时间段</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方文档: https://docs.mongodb.com/manual/tutorial/manage-sharded-cluster-balancer/#schedule-the-balancing-window</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到mongos</span></span><br><span class="line">use config</span><br><span class="line">sh.setBalancerState( <span class="literal">true</span> )</span><br><span class="line">db.settings.update(&#123; _id : <span class="string">&quot;balancer&quot;</span> &#125;, &#123; <span class="variable">$set</span> : &#123; activeWindow : &#123; start : <span class="string">&quot;3:00&quot;</span>, stop : <span class="string">&quot;5:00&quot;</span> &#125; &#125; &#125;, <span class="literal">true</span> )</span><br><span class="line"></span><br><span class="line">sh.getBalancerWindow()</span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于集合的balancer</span></span><br><span class="line">    <span class="comment"># 关闭某个集合的balance</span></span><br><span class="line">    sh.disableBalancing(<span class="string">&quot;students.grades&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开某个集合的balancer</span></span><br><span class="line">    sh.enableBalancing(<span class="string">&quot;students.grades&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确定某个集合的balance是开启或者关闭</span></span><br><span class="line">    db.getSiblingDB(<span class="string">&quot;config&quot;</span>).collections.findOne(&#123;_id : <span class="string">&quot;students.grades&quot;</span>&#125;).noBalance</span><br></pre></td></tr></table></figure>

<h3 id="分片集群设计"><a href="#分片集群设计" class="headerlink" title="分片集群设计"></a>分片集群设计</h3><h4 id="分片的基本标准"><a href="#分片的基本标准" class="headerlink" title="分片的基本标准"></a>分片的基本标准</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.关于数据：数据量不超过3TB，尽可能保持在2TB一个片</span><br><span class="line">2.关于索引：常用索引必须容纳进内存</span><br><span class="line">3.按照以上标准初步确定分片后，还需要考虑业务压力，随着压力增大，CPU、RAM、磁盘中的任何一项出现瓶颈时，都可以通过添加更多分片来解决</span><br></pre></td></tr></table></figure>

<h4 id="需求多少分片"><a href="#需求多少分片" class="headerlink" title="需求多少分片"></a>需求多少分片</h4><table>
<thead>
<tr>
<th>条件</th>
<th>分片个数</th>
</tr>
</thead>
<tbody><tr>
<td>A = 所需存储总量 / 单服务器可挂载容量</td>
<td>8TB / 2TB = 4</td>
</tr>
<tr>
<td>B = 工作集大小 / 单服务器内存容量</td>
<td>400GB / （256G * 0.6） = 3</td>
</tr>
<tr>
<td>C = 并发量总数 / （单服务器并发量 * 0.7）</td>
<td>30000 / (9000*0.7) = 6</td>
</tr>
<tr>
<td>额外开销</td>
<td></td>
</tr>
</tbody></table>
<h4 id="其他需求"><a href="#其他需求" class="headerlink" title="其他需求"></a>其他需求</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">考虑分片的分布：</span><br><span class="line">1.是否需要跨机房分布分片</span><br><span class="line">2.是否需要容灾</span><br><span class="line">3.高可用的要求如何</span><br></pre></td></tr></table></figure>

<h4 id="正确的姿势"><a href="#正确的姿势" class="headerlink" title="正确的姿势"></a>正确的姿势</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104111409719.png" alt="image-20220104111409719"></p>
<h5 id="选择合适的片键"><a href="#选择合适的片键" class="headerlink" title="选择合适的片键"></a>选择合适的片键</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">影响片键效率的主要因素:</span><br><span class="line">1.取值基数(Cardinality)</span><br><span class="line">2.取值分布</span><br><span class="line">3.分散写，集中读</span><br><span class="line">4.被尽可能多的业务场景用到</span><br><span class="line">5.避免单调递增或递减的片键</span><br></pre></td></tr></table></figure>

<h5 id="选择基数大的片键"><a href="#选择基数大的片键" class="headerlink" title="选择基数大的片键"></a>选择基数大的片键</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于小基数的片键:</span><br><span class="line">1.因为备选值有限，那么块的总数量就有限</span><br><span class="line">2.随着数据增多，块的大小会越来越大</span><br><span class="line">3.水平扩展时移动块会非常困难</span><br><span class="line"></span><br><span class="line">例如：存储一个高中的师生数据，以年龄（假设年龄范围为15~65岁）作为片键，那么:</span><br><span class="line">1.15&lt;=年龄&lt;=65，且只为整数</span><br><span class="line">2.最多只会有51个 chunk</span><br><span class="line">结论：取值基数要大</span><br></pre></td></tr></table></figure>

<h5 id="选择分布均匀的片键"><a href="#选择分布均匀的片键" class="headerlink" title="选择分布均匀的片键"></a>选择分布均匀的片键</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于分布不均匀的片键</span><br><span class="line">1.造成某些块的数据量急剧增大</span><br><span class="line">2.这些块压力随之增大</span><br><span class="line">3.数据均衡以 chunk 为单位，所以系统无能为力</span><br><span class="line"></span><br><span class="line">例如：存储一个学校的师生数据，以年龄（假设年龄范围为15~65岁）作为片键，那么：</span><br><span class="line">1.15&lt;=年龄&lt;=65，且只为整数</span><br><span class="line">2.大部分人的年龄范围为15~18岁（学生）</span><br><span class="line">3.15、16、17、18四个 chunk 的数据量、访问压力远大于其他 chunk</span><br><span class="line">结论：取值分布应尽可能均匀</span><br></pre></td></tr></table></figure>

<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  _id: ObjectId(),</span><br><span class="line">  user: <span class="number">123</span>,</span><br><span class="line">  time: Date(),</span><br><span class="line">  subject: “...”,</span><br><span class="line">  recipients: [],</span><br><span class="line">  body: “...”,</span><br><span class="line">  attachments: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="片键-id-1"><a href="#片键-id-1" class="headerlink" title="片键: { _id: 1}"></a>片键: { _id: 1}</h6><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104114356075.png" alt="image-20220104114356075"></p>
<h6 id="片键：-id-”hashed”"><a href="#片键：-id-”hashed”" class="headerlink" title="片键： { _id: ”hashed”}"></a>片键： { _id: ”hashed”}</h6><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104114436035.png" alt="image-20220104114436035"></p>
<h6 id="片键：-user-id-1"><a href="#片键：-user-id-1" class="headerlink" title="片键： { user_id: 1 }"></a>片键： { user_id: 1 }</h6><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104114502342.png" alt="image-20220104114502342"></p>
<h6 id="片键：-user-id-1-time-1"><a href="#片键：-user-id-1-time-1" class="headerlink" title="片键： { user_id: 1, time:1 }"></a>片键： { user_id: 1, time:1 }</h6><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220104114530321.png" alt="image-20220104114530321"></p>
<h5 id="硬件规划"><a href="#硬件规划" class="headerlink" title="硬件规划"></a>硬件规划</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos 与 config 通常消耗很少的资源，可以选择低规格虚拟机，资源的重点在于 shard 服务器:</span><br><span class="line">  1.需要足以容纳热数据索引的内存</span><br><span class="line">  2.正确创建索引后 CPU 通常不会成为瓶颈，除非涉及非常多的计算</span><br><span class="line">  3.磁盘尽量选用 SSD</span><br><span class="line">  4.最后，实际测试是最好的检验，来看你的资源配置是否完备</span><br><span class="line"></span><br><span class="line">即使项目初期已经具备了足够的资源，仍然需要考虑在合适的时候扩展。建议监控各项资源使用情况，无论哪一项达到60%以上，则开始考虑扩展，因为：</span><br><span class="line">  1.扩展需要新的资源，申请新资源需要时间</span><br><span class="line">  2.扩展后数据需要均衡，均衡需要时间。应保证新数据入库速度慢于均衡速度</span><br><span class="line">  3.均衡需要资源，如果资源即将或已经耗尽，均衡也是会很低效的</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB复制集</title>
    <url>/37db6981.html</url>
    <content><![CDATA[<h3 id="复制集的作用"><a href="#复制集的作用" class="headerlink" title="复制集的作用"></a>复制集的作用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB 复制集的主要意义在于实现服务高可用，它的现实依赖于两个方面的功能</span><br><span class="line">1.数据写入时将数据迅速复制到另一个独立节点上</span><br><span class="line">2.在接受写入的节点发生故障时自动选举出一个新的替代节点</span><br><span class="line"></span><br><span class="line">在实现高可用的同时，复制集实现了其他几个附加作用</span><br><span class="line">1.数据分发：将数据从一个区域复制到另一个区域，减少另一个区域的读延迟</span><br><span class="line">2.读写分离：不同类型的压力分别在不同的节点上执行</span><br><span class="line">3.异地容灾：在数据中心故障时候快速切换到异地</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="典型复制集结构"><a href="#典型复制集结构" class="headerlink" title="典型复制集结构"></a>典型复制集结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">一个典型的复制集由3个以上具有投票权的节点组成</span><br><span class="line">1.一个主节点（PRIMARY）：接受写入操作和选举时投票</span><br><span class="line">2.两个（或多个）从节点（SECONDARY）：复制主节点上的新数据和选举时投票</span><br><span class="line">3.不推荐使用 Arbiter（投票节点）</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/B6n7ov.png" alt="B6n7ov"></p>
<h3 id="数据是如何复制的"><a href="#数据是如何复制的" class="headerlink" title="数据是如何复制的"></a>数据是如何复制的</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.当一个修改操作，无论是插入、更新或删除，到达主节点时，它对数据的操作将被记录下来（经过一些必要的转换），这些记录称为 oplog (是一张表)</span><br><span class="line">2.从节点通过在主节点上打开一个 tailable 游标不断获取新进入主节点的 oplog，并在自己的数据上回放，以此保持跟主节点的数据一致</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/cTeuoL.png" alt="cTeuoL"></p>
<h3 id="通过选举完成故障恢复"><a href="#通过选举完成故障恢复" class="headerlink" title="通过选举完成故障恢复"></a>通过选举完成故障恢复</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.具有投票权的节点之间两两互相发送心跳</span><br><span class="line">2.当5次心跳未收到时判断为节点失联</span><br><span class="line">3.如果失联的是主节点，从节点会发起选举，选出新的主节点</span><br><span class="line">4.如果失联的是从节点则不会产生新的选举</span><br><span class="line">5.选举基于 RAFT一致性算法 实现，选举成功的必要条件是大多数投票节点存活</span><br><span class="line">6.复制集中最多可以有50个节点，但具有投票权的节点最多7个</span><br></pre></td></tr></table></figure>

<h3 id="影响选举的因素"><a href="#影响选举的因素" class="headerlink" title="影响选举的因素"></a>影响选举的因素</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">整个集群必须有大多数节点存活，被选举为主节点的节点必须</span><br><span class="line">  1.能够与多数节点建立连接</span><br><span class="line">  2.具有较新的 oplog</span><br><span class="line">  3.具有较高的优先级（如果有配置）</span><br></pre></td></tr></table></figure>

<h3 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">复制集节点有以下常见的选配项</span><br><span class="line">1.是否具有投票权（v 参数）：有则参与投票</span><br><span class="line">2.优先级（priority 参数）：优先级越高的节点越优先成为主节点。优先级为0的节点无法成为主节点</span><br><span class="line">3.隐藏（hidden 参数）：复制数据，但对应用不可见。隐藏节点可以具有投票仅，但优先级必须为0</span><br><span class="line">4.延迟（slaveDelay 参数）：复制 n 秒之前的数据，保持与主节点的时间差</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3QYZEh.png" alt="3QYZEh"></p>
<h3 id="复制集注意事项"><a href="#复制集注意事项" class="headerlink" title="复制集注意事项"></a>复制集注意事项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关于硬件:</span><br><span class="line">1.因为正常的复制集节点都有可能成为主节点，它们的地位是一样的，因此硬件配置上必须一致</span><br><span class="line">2.为了保证节点不会同时宕机，各节点使用的硬件必须具有独立性</span><br><span class="line"></span><br><span class="line">关于软件:</span><br><span class="line">1.复制集各节点软件版本必须一致，以避免出现不可预知的问题。</span><br><span class="line"> </span><br><span class="line">增加节点不会增加系统写性能</span><br></pre></td></tr></table></figure>

<h3 id="搭建复制集"><a href="#搭建复制集" class="headerlink" title="搭建复制集"></a>搭建复制集</h3><h4 id="多实例配置启动"><a href="#多实例配置启动" class="headerlink" title="多实例配置启动"></a>多实例配置启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三个以上的mongodb节点（或多实例）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用多实例的端口规划</span></span><br><span class="line">28017、28018、28019、28020</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建相关目录</span></span><br><span class="line">mkdir -p /mongodb/&#123;28017..28020&#125;/&#123;conf,data,<span class="built_in">log</span>&#125;</span><br><span class="line">tree -L 2 /mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt; /mongodb/28017/conf/mongod.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: /mongodb/28017/log/mongodb.log</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: /mongodb/28017/data</span></span><br><span class="line"><span class="string">  directoryPerDB: true</span></span><br><span class="line"><span class="string">  #engine: wiredTiger</span></span><br><span class="line"><span class="string">  wiredTiger:</span></span><br><span class="line"><span class="string">    engineConfig:</span></span><br><span class="line"><span class="string">      cacheSizeGB: 1</span></span><br><span class="line"><span class="string">      directoryForIndexes: true</span></span><br><span class="line"><span class="string">    collectionConfig:</span></span><br><span class="line"><span class="string">      blockCompressor: zlib</span></span><br><span class="line"><span class="string">    indexConfig:</span></span><br><span class="line"><span class="string">      prefixCompression: true</span></span><br><span class="line"><span class="string">processManagement:</span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">  port: 28017</span></span><br><span class="line"><span class="string">replication:</span></span><br><span class="line"><span class="string">  oplogSizeMB: 2048</span></span><br><span class="line"><span class="string">  replSetName: my_repl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件说明</span></span><br><span class="line">engine: wiredTiger   <span class="comment"># 存储引擎，默认就是wiredTiger</span></span><br><span class="line">cacheSizeGB: 1       <span class="comment"># 类似缓冲区大小</span></span><br><span class="line">oplogSizeMB: 2048    <span class="comment"># 设置  oplog 大小</span></span><br><span class="line">replSetName: my_repl <span class="comment"># 设置 oplog 名字，要和配置复制内的名称一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多配置文件复制</span></span><br><span class="line">cp  /mongodb/28017/conf/mongod.conf  /mongodb/28018/conf/</span><br><span class="line">cp  /mongodb/28017/conf/mongod.conf  /mongodb/28019/conf/</span><br><span class="line">cp  /mongodb/28017/conf/mongod.conf  /mongodb/28020/conf/</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s#28017#28018#g&#x27;</span> /mongodb/28018/conf/mongod.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#28017#28019#g&#x27;</span> /mongodb/28019/conf/mongod.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#28017#28020#g&#x27;</span> /mongodb/28020/conf/mongod.conf</span><br><span class="line"></span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">su - mongod</span><br><span class="line">mongod -f /mongodb/28017/conf/mongod.conf</span><br><span class="line">mongod -f /mongodb/28018/conf/mongod.conf</span><br><span class="line">mongod -f /mongodb/28019/conf/mongod.conf</span><br><span class="line">mongod -f /mongodb/28020/conf/mongod.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">netstat -lntp |grep 280</span><br></pre></td></tr></table></figure>

<h4 id="配置复制集"><a href="#配置复制集" class="headerlink" title="配置复制集"></a>配置复制集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1主2从，从库普通从库 PSS</span></span><br><span class="line">mongo --port 28017 admin</span><br><span class="line"></span><br><span class="line">config = &#123;_id: <span class="string">&#x27;my_repl&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;192.168.0.11:28018&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;192.168.0.11:28019&#x27;</span>&#125;]</span><br><span class="line">          &#125;                   </span><br><span class="line">rs.initiate(config) </span><br><span class="line">rs.status();  //查询复制集状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1主1从1个arbiter PSA</span></span><br><span class="line">mongo -port 28017 admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;my_repl&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;192.168.0.11:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;192.168.0.11:28018&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;192.168.0.11:28019&#x27;</span>,<span class="string">&quot;arbiterOnly&quot;</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">          &#125;                </span><br><span class="line">rs.initiate(config) </span><br></pre></td></tr></table></figure>

<h3 id="复制集测试"><a href="#复制集测试" class="headerlink" title="复制集测试"></a>复制集测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主库插入数据</span></span><br><span class="line">mongo --port 28017 admin</span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line">db.movies.insert([&#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Jaws&quot;</span>,<span class="string">&quot;year&quot;</span>:1975 ,<span class="string">&quot;imdb_rating&quot;</span>:8.1&#125;,</span><br><span class="line">                  &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Batman&quot;</span>,<span class="string">&quot;year&quot;</span>:1989,<span class="string">&quot;imdb_rating&quot;</span>:7.6&#125;]);</span><br><span class="line">                  </span><br><span class="line">db.movies.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从库查看</span></span><br><span class="line">mongo --port 28018 admin</span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line">db.movies.find().pretty()  //默认情况下从库不允许读写</span><br><span class="line">rs.slaveOk()               //当前版本4.4还可以用，提示后续会弃用，use secondaryOk() instead</span><br><span class="line">db.movies.find().pretty()  //此时就可以查看到数据了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭主库查看从库接管情况</span></span><br><span class="line">mongod -f /mongodb/28017/conf/mongod.conf --shutdown</span><br></pre></td></tr></table></figure>

<h3 id="复制集管理"><a href="#复制集管理" class="headerlink" title="复制集管理"></a>复制集管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">rs.status();    //查看整体复制集状态</span><br><span class="line">rs.isMaster();  // 查看当前是否是主节点</span><br><span class="line">rs.conf()；     //查看复制集配置信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加和删除节点命令</span></span><br><span class="line">rs.add(<span class="string">&quot;ip:port&quot;</span>); // 新增从节点</span><br><span class="line">rs.remove(<span class="string">&quot;ip:port&quot;</span>); // 删除一个节点</span><br><span class="line">rs.addArb(<span class="string">&quot;ip:port&quot;</span>); // 新增仲裁节点</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到主节点(shell命令)</span></span><br><span class="line">mongo --port 28017 admin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增从节点</span></span><br><span class="line">rs.add(<span class="string">&quot;192.168.0.11:28020&quot;</span>)</span><br><span class="line">rs.status();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个节点</span></span><br><span class="line">rs.remove(<span class="string">&quot;192.168.0.11:28020&quot;</span>);</span><br><span class="line">rs.status();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 arbiter节点</span></span><br><span class="line">rs.addArb(<span class="string">&quot;192.168.0.11:28020&quot;</span>)</span><br><span class="line">rs.status();</span><br><span class="line"></span><br><span class="line">从其他集群踢出的节点不能直接加入新的集群，强行加入也会被踢出，需要先清空这个节点的数据再加入</span><br></pre></td></tr></table></figure>

<h3 id="特殊从节点"><a href="#特殊从节点" class="headerlink" title="特殊从节点"></a>特殊从节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">priority (0-1000): 优先级越高的节点越优先成为主节点，优先级为0的节点无法成为主节点</span><br><span class="line">hidden 参数: 复制数据，但对应用不可见，隐藏节点可以具有投票仅，但优先级必须为0</span><br><span class="line">slaveDelay 参数: 复制 n 秒之前的数据，保持与主节点的时间差</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点种类</span></span><br><span class="line">arbiter节点: 主要负责选主过程中的投票，但是不存储任何数据，也不提供任何服务</span><br><span class="line">hidden节点: 隐藏节点，不参与选主，也不对外提供服务</span><br><span class="line">delay节点: 延时节点，数据落后于主库一段时间，因为数据是延时的，也不应该提供服务或参与选主，所以通常会配合hidden（隐藏）</span><br><span class="line">一般情况下会将delay+hidden一起配置使用</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看副本集的配置信息</span></span><br><span class="line">rs.<span class="function"><span class="title">conf</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;_id&quot;</span> : <span class="string">&quot;my_repl&quot;</span>,</span><br><span class="line">	<span class="string">&quot;version&quot;</span> : 2,</span><br><span class="line">	<span class="string">&quot;protocolVersion&quot;</span> : NumberLong(1),</span><br><span class="line">	<span class="string">&quot;writeConcernMajorityJournalDefault&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">	<span class="string">&quot;members&quot;</span> : [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line">			<span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.0.11:28017&quot;</span>,  // 主机和端口</span><br><span class="line">			<span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,  //是不是arbiter节点</span><br><span class="line">			<span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>, </span><br><span class="line">			<span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,  //隐藏节点</span><br><span class="line">			<span class="string">&quot;priority&quot;</span> : 1,  //权重</span><br><span class="line">			<span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line">			<span class="string">&quot;votes&quot;</span> : 1  //参与节点投票</span><br><span class="line">		&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置延时节点（一般延时节点也配置成hidden）</span></span><br><span class="line"><span class="comment"># MongoDB数据库内配置</span></span><br><span class="line">rs.conf()  //查看当前配置</span><br><span class="line">cfg=rs.conf() </span><br><span class="line">//members[num]中，num是从0开始依次往下数的节点数字，不是根据 _id 数字，因为后续添加删除之后这个数字容易混乱</span><br><span class="line">cfg.members[3].priority=0  //不能成为主节点</span><br><span class="line">cfg.members[3].hidden=<span class="literal">true</span>  //隐藏节点</span><br><span class="line">cfg.members[3].slaveDelay=120  //延时2小时同步</span><br><span class="line">cfg.members[3].votes=0  //不参与投票</span><br><span class="line">rs.reconfig(cfg)  //生效</span><br><span class="line">rs.conf()  //再次查看</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消以上配置,恢复</span></span><br><span class="line">cfg=rs.conf() </span><br><span class="line">cfg.members[3].priority=1</span><br><span class="line">cfg.members[3].hidden=<span class="literal">false</span></span><br><span class="line">cfg.members[3].slaveDelay=0</span><br><span class="line">cfg.members[3].votes=1</span><br><span class="line">rs.reconfig(cfg)    </span><br><span class="line">rs.conf();</span><br></pre></td></tr></table></figure>

<h3 id="其他命令操作"><a href="#其他命令操作" class="headerlink" title="其他命令操作"></a>其他命令操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看副本集各成员的状态</span></span><br><span class="line">rs.status()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 副本集角色切换（不要人为随便操作）</span></span><br><span class="line">rs.stepDown()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定从，使其不会转变成主库</span></span><br><span class="line">rs.freeze(300)</span><br><span class="line">//freeze()和stepDown单位都是秒</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置副本节点可读：在副本节点执行</span></span><br><span class="line">rs.slaveOk()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看副本节点（监控主从延时）</span></span><br><span class="line">rs.printSlaveReplicationInfo()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB聚合框架</title>
    <url>/3bf43096.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB 聚合框架（Aggregation Framework）是一个计算框架</span><br><span class="line">1.作用在一个或几个集合上</span><br><span class="line">2.对集合中的数据进行的一系列运算</span><br><span class="line">3.将这些数据转化为期望的形式</span><br><span class="line"></span><br><span class="line">从效果而言，聚合框架相当于 SQL 查询里的 GROUP BY，LEFT OUTER JOIN， AS等</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="管道和步骤"><a href="#管道和步骤" class="headerlink" title="管道和步骤"></a>管道和步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">整个聚合运算过程称为管道（Pipeline），它是由多个步骤（Stage）组成的，每个管道：</span><br><span class="line">接受一系列文档（原始数据）</span><br><span class="line">每个步骤对这些文档进行一系列运算</span><br><span class="line">结果文档输出给下一个步骤</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/6CZpmp.png" alt="6CZpmp"></p>
<h3 id="聚合运算的基本格式"><a href="#聚合运算的基本格式" class="headerlink" title="聚合运算的基本格式"></a>聚合运算的基本格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline = [<span class="variable">$stage1</span>, <span class="variable">$stage2</span>, ...<span class="variable">$stageN</span>];</span><br><span class="line"></span><br><span class="line">db.&lt;COLLECTION&gt;.aggregate(</span><br><span class="line">pipeline,</span><br><span class="line">&#123; options &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/qtz4v5.png" alt="qtz4v5"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/OiAelr.png" alt="OiAelr"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/hn9SKU.png" alt="hn9SKU"></p>
<h3 id="MQL常用步骤与SQL对比"><a href="#MQL常用步骤与SQL对比" class="headerlink" title="MQL常用步骤与SQL对比"></a>MQL常用步骤与SQL对比</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/jOXO8p.png" alt="jOXO8p"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/5Gmlwo.png" alt="5Gmlwo"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/6yyGxc.png" alt="6yyGxc"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/TEfb3m.png" alt="TEfb3m"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ozaeeI.png" alt="ozaeeI"></p>
<h3 id="运算实例"><a href="#运算实例" class="headerlink" title="运算实例"></a>运算实例</h3><p>测试数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/dump.tar.gz</span></span><br><span class="line">curl -O -k https://raw.githubusercontent.com/tapdata/geektimemongodb-course/master/aggregation/dump.tar.gz</span><br><span class="line">tar xf dump.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果按照上述修改了用户和密码如下导入</span></span><br><span class="line">mongorestore -uroot -proot123 --port 27017 --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入数据库查看</span></span><br><span class="line">mongo -uroot -proot123 admin</span><br><span class="line"></span><br><span class="line">show dbs</span><br><span class="line">use mock</span><br><span class="line">show collections  //查看集合</span><br><span class="line">db.orders.findOne()  //查看数据</span><br></pre></td></tr></table></figure>

<p>计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算到目前为止的所有订单总销售额</span></span><br><span class="line">db.orders.aggregate([</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			_id:null,  //将整个表做汇总</span><br><span class="line">			total: &#123;<span class="variable">$sum</span>: <span class="string">&quot;<span class="variable">$total</span>&quot;</span>&#125;  //total自定义的，<span class="string">&quot;<span class="variable">$total</span>&quot;</span>才是数据的字段</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">])</span><br><span class="line">// 结果 &#123; <span class="string">&quot;_id&quot;</span> : null, <span class="string">&quot;total&quot;</span> : NumberDecimal(<span class="string">&quot;44019609&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询2019年第一季度（1月1日~3月31日）已完成订单（completed）的订单总金额和订单总数</span></span><br><span class="line"></span><br><span class="line">db.orders.aggregate([</span><br><span class="line">// 步骤1：匹配条件</span><br><span class="line">&#123; <span class="variable">$match</span>: &#123; status: <span class="string">&quot;completed&quot;</span>, orderDate: &#123;</span><br><span class="line">		<span class="variable">$gte</span>: ISODate(<span class="string">&quot;2019-01-01&quot;</span>),</span><br><span class="line">		<span class="variable">$lt</span>: ISODate(<span class="string">&quot;2019-04-01&quot;</span>) &#125; &#125; &#125;,</span><br><span class="line"></span><br><span class="line">// 步骤二：聚合订单总金额、总运费、总数量</span><br><span class="line">&#123; <span class="variable">$group</span>: &#123;</span><br><span class="line">_id: null,</span><br><span class="line">total: &#123; <span class="variable">$sum</span>: <span class="string">&quot;<span class="variable">$total</span>&quot;</span> &#125;,</span><br><span class="line">shippingFee: &#123; <span class="variable">$sum</span>: <span class="string">&quot;<span class="variable">$shippingFee</span>&quot;</span> &#125;,</span><br><span class="line">count: &#123; <span class="variable">$sum</span>: 1 &#125; &#125; &#125;,</span><br><span class="line"></span><br><span class="line">&#123; <span class="variable">$project</span>: &#123;</span><br><span class="line">// 计算总金额</span><br><span class="line">grandTotal: &#123; <span class="variable">$add</span>: [<span class="string">&quot;<span class="variable">$total</span>&quot;</span>, <span class="string">&quot;<span class="variable">$shippingFee</span>&quot;</span>] &#125;,</span><br><span class="line">count: 1,</span><br><span class="line">_id: 0 &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 结果：</span><br><span class="line">// &#123; <span class="string">&quot;count&quot;</span> : 5875, <span class="string">&quot;grandTotal&quot;</span> : NumberDecimal(<span class="string">&quot;2636376.00&quot;</span>) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="compass使用聚合"><a href="#compass使用聚合" class="headerlink" title="compass使用聚合"></a>compass使用聚合</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/I01uEx.png" alt="I01uEx"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ZuMRhx.png" alt="ZuMRhx"></p>
<p>语句导出不同的开发语言</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/XT5Uxr.png" alt="XT5Uxr"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/UpX1kj.png" alt="UpX1kj"></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基本的CRUD</title>
    <url>/cb1bd433.html</url>
    <content><![CDATA[<h3 id="通用方法和获取帮助"><a href="#通用方法和获取帮助" class="headerlink" title="通用方法和获取帮助"></a>通用方法和获取帮助</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line">db.help()</span><br><span class="line">db.t1.help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用操作</span></span><br><span class="line">//查看当前db版本</span><br><span class="line">db.version()</span><br><span class="line"></span><br><span class="line">//显示当前数据库</span><br><span class="line">db</span><br><span class="line">db.getName()</span><br><span class="line"></span><br><span class="line">// 查询所有数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">//切换数据库</span><br><span class="line">use <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">// 显示当前数据库状态</span><br><span class="line">  //查看<span class="built_in">local</span>数据</span><br><span class="line">  use <span class="built_in">local</span></span><br><span class="line">  db.stats()</span><br><span class="line"></span><br><span class="line">//查看当前数据库的连接机器地址</span><br><span class="line">db.getMongo()</span><br><span class="line"></span><br><span class="line">// 指定数据库进行连接：（默认连接本机<span class="built_in">test</span>数据库）</span><br><span class="line"><span class="comment"># mongo 192.168.0.11/admin</span></span><br><span class="line">[mongod@mongodb ~]$ mongo 192.168.0.11/admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 库和表的操作 </span></span><br><span class="line">// 建库 </span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">db.<span class="function"><span class="title">dropDatabase</span></span>()</span><br><span class="line">&#123; <span class="string">&quot;dropped&quot;</span> : <span class="string">&quot;test&quot;</span>, <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br><span class="line"></span><br><span class="line">// 创建集合(表)</span><br><span class="line">//方法1</span><br><span class="line">use app</span><br><span class="line">db.createCollection(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">db.createCollection(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">//方法2：当插入一个文档的时候，一个集合就会自动创建</span><br><span class="line">use app</span><br><span class="line">db.c.insert(&#123;username:<span class="string">&quot;mongodb&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">//查看当前全部集合</span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line">//查看指定集合</span><br><span class="line">db.c.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5743c9a9bf72d9f7b524713d&quot;</span>), <span class="string">&quot;username&quot;</span> : <span class="string">&quot;mongodb&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">// 删除集合</span><br><span class="line">use app</span><br><span class="line">db.a.drop()</span><br><span class="line"></span><br><span class="line">// 重命名集合</span><br><span class="line">app&gt; db.log.renameCollection(<span class="string">&quot;log1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用insert完成插入操作"><a href="#使用insert完成插入操作" class="headerlink" title="使用insert完成插入操作"></a>使用<code>insert</code>完成插入操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作格式</span></span><br><span class="line">db.&lt;集合&gt;.insertOne(&lt;JSON对象&gt;)</span><br><span class="line">db.&lt;集合&gt;.insertMany([&lt;JSON 1&gt;, &lt;JSON 2&gt;, …&lt;JSON n&gt;])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">db.fruit.insertOne(&#123;name: <span class="string">&quot;apple&quot;</span>&#125;)</span><br><span class="line">db.fruit.insertMany([</span><br><span class="line">&#123;name: <span class="string">&quot;apple&quot;</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;pear&quot;</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量插入数据</span></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;1000;i++)&#123; db.test.insert(&#123;<span class="string">&quot;uid&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;age&quot;</span>:6,<span class="string">&quot;date&quot;</span>:new Date()&#125;);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区问题，中国当前时间需要解决</span></span><br></pre></td></tr></table></figure>

<h3 id="使用find查询文档"><a href="#使用find查询文档" class="headerlink" title="使用find查询文档"></a>使用<code>find</code>查询文档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关于 find:</span></span><br><span class="line">find 是 MongoDB 中查询数据的基本指令，相当于 SQL 中的 SELECT</span><br><span class="line">find 返回的是游标</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">db.movies.find( &#123; <span class="string">&quot;year&quot;</span> : 1975 &#125; ) //单条件查询</span><br><span class="line">db.movies.find( &#123; <span class="string">&quot;year&quot;</span> : 1989, <span class="string">&quot;title&quot;</span> : <span class="string">&quot;Batman&quot;</span> &#125; ) //多条件and查询</span><br><span class="line">db.movies.find( &#123; <span class="variable">$and</span> : [ &#123;<span class="string">&quot;title&quot;</span> : <span class="string">&quot;Batman&quot;</span>&#125;, &#123; <span class="string">&quot;category&quot;</span> : <span class="string">&quot;action&quot;</span> &#125;] &#125; ) // and的另一种形式</span><br><span class="line">db.movies.find( &#123; <span class="variable">$or</span>: [&#123;<span class="string">&quot;year&quot;</span> : 1989&#125;, &#123;<span class="string">&quot;title&quot;</span> : <span class="string">&quot;Batman&quot;</span>&#125;] &#125; ) //多条件or查询</span><br><span class="line">db.movies.find( &#123; <span class="string">&quot;title&quot;</span> : /^B/&#125; ) //按正则表达式查找</span><br></pre></td></tr></table></figure>

<h3 id="查询条件对照表"><a href="#查询条件对照表" class="headerlink" title="查询条件对照表"></a>查询条件对照表</h3><table>
<thead>
<tr>
<th>SQL</th>
<th>MSQL</th>
</tr>
</thead>
<tbody><tr>
<td>a = 1</td>
<td>{a:1}</td>
</tr>
<tr>
<td>a &lt;&gt; 1</td>
<td>{a:{$ne:1}}</td>
</tr>
<tr>
<td>a &gt; 1</td>
<td>{a:{$gt:1}}</td>
</tr>
<tr>
<td>a &gt;= 1</td>
<td>{a:{$gte:1}}</td>
</tr>
<tr>
<td>a &lt; 1</td>
<td>{a:{$lt:1}}</td>
</tr>
<tr>
<td>a &lt;= 1</td>
<td>{a:{$lte:1}}</td>
</tr>
</tbody></table>
<h3 id="查询逻辑对照表"><a href="#查询逻辑对照表" class="headerlink" title="查询逻辑对照表"></a>查询逻辑对照表</h3><table>
<thead>
<tr>
<th>SQL</th>
<th>MSQL</th>
</tr>
</thead>
<tbody><tr>
<td>a = 1 AND  b= 1</td>
<td>{a:1,b:1}或者{$and:[{a:1},{b:1}]}</td>
</tr>
<tr>
<td>a = 1 OR b = 1</td>
<td>{$or:[{$a:1},{$b:1}]}</td>
</tr>
<tr>
<td>a IS NULL</td>
<td>{a:{$exists:false}}</td>
</tr>
<tr>
<td>a IN (1,2,3)</td>
<td>{a:{$in:[1,2,3]}}</td>
</tr>
</tbody></table>
<h3 id="逻辑查询运算符"><a href="#逻辑查询运算符" class="headerlink" title="逻辑查询运算符"></a>逻辑查询运算符</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$lt</span>: 存在并小于</span><br><span class="line"><span class="variable">$lte</span>: 存在并小于等于</span><br><span class="line"><span class="variable">$gt</span>: 存在并大于</span><br><span class="line"><span class="variable">$gte</span>: 存在并大于等于</span><br><span class="line"><span class="variable">$ne</span>: 不存在或存在但不等于</span><br><span class="line"><span class="variable">$in</span>: 存在并在指定数组中</span><br><span class="line"><span class="variable">$nin</span>: 不存在或不在指定数组中</span><br><span class="line"><span class="variable">$or</span>: 匹配两个或多个条件中的一个</span><br><span class="line"><span class="variable">$and</span>: 匹配全部条件</span><br></pre></td></tr></table></figure>

<h3 id="使用find搜索子文档"><a href="#使用find搜索子文档" class="headerlink" title="使用find搜索子文档"></a>使用<code>find</code>搜索子文档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find 支持使用“field.sub_field”的形式查询子文档。假设有一个文档：</span></span><br><span class="line">db.fruit.insertOne(&#123;</span><br><span class="line">name: <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">from: &#123;</span><br><span class="line">country: <span class="string">&quot;China&quot;</span>,</span><br><span class="line">province: <span class="string">&quot;Guangdong&quot;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确写法</span></span><br><span class="line">db.fruit.find( &#123; <span class="string">&quot;from.country&quot;</span> : <span class="string">&quot;China&quot;</span> &#125; )</span><br></pre></td></tr></table></figure>

<h3 id="使用-find-搜索数组"><a href="#使用-find-搜索数组" class="headerlink" title="使用 find 搜索数组"></a>使用 find 搜索数组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find 支持对数组中的元素进行搜索。假设有一个文档：</span></span><br><span class="line">db.fruit.insert([</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Apple&quot;</span>, color: [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span> ] &#125;,</span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Mango&quot;</span>, color: [<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>] &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看单个条件</span></span><br><span class="line">db.fruit.find(&#123;color: <span class="string">&quot;red&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多个条件</span></span><br><span class="line">db.fruit.find(&#123;<span class="variable">$or</span>: [&#123;color: <span class="string">&quot;red&quot;</span>&#125;, &#123;color: <span class="string">&quot;yellow&quot;</span>&#125;]&#125; )</span><br></pre></td></tr></table></figure>

<h3 id="使用-find-搜索数组中的对象"><a href="#使用-find-搜索数组中的对象" class="headerlink" title="使用 find 搜索数组中的对象"></a>使用 find 搜索数组中的对象</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">考虑以下文档，在其中搜索</span><br><span class="line">db.movies.insertOne( &#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span> : <span class="string">&quot;Raiders of the Lost Ark&quot;</span>,</span><br><span class="line"><span class="string">&quot;filming_locations&quot;</span> : [ </span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;Los Angeles&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;CA&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;USA&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;Rome&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;Lazio&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;Italy&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;Florence&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;SC&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;USA&quot;</span> &#125;</span><br><span class="line">] </span><br><span class="line">&#125;)</span><br><span class="line">// 查找城市是 Rome 的记录</span><br><span class="line">db.movies.find(&#123;<span class="string">&quot;filming_locations.city&quot;</span>: <span class="string">&quot;Rome&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用-find-搜索数组中的对象-1"><a href="#使用-find-搜索数组中的对象-1" class="headerlink" title="使用 find 搜索数组中的对象"></a>使用 find 搜索数组中的对象</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在数组中搜索子对象的多个字段时，如果使用 $elemMatch，它表示必须是同一个子对象满足多个条件，考虑以下两个查询</span></span><br><span class="line">db.getCollection(<span class="string">&#x27;movies&#x27;</span>).find(&#123;</span><br><span class="line"><span class="string">&quot;filming_locations.city&quot;</span>: <span class="string">&quot;Rome&quot;</span>,</span><br><span class="line"><span class="string">&quot;filming_locations.country&quot;</span>: <span class="string">&quot;USA&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.movies.insertOne( &#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span> : <span class="string">&quot;11111&quot;</span>,</span><br><span class="line"><span class="string">&quot;filming_locations&quot;</span> : [ </span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;bj&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;CA&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;CHN&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;Rome&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;Lazio&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;Italy&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;city&quot;</span> : <span class="string">&quot;tlp&quot;</span>, <span class="string">&quot;state&quot;</span> : <span class="string">&quot;SC&quot;</span>, <span class="string">&quot;country&quot;</span> : <span class="string">&quot;USA&quot;</span> &#125;</span><br><span class="line">] </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;movies&#x27;</span>).find(&#123;</span><br><span class="line"><span class="string">&quot;filming_locations&quot;</span>: &#123;</span><br><span class="line"><span class="variable">$elemMatch</span>:&#123;<span class="string">&quot;city&quot;</span>:<span class="string">&quot;bj&quot;</span>, <span class="string">&quot;country&quot;</span>: <span class="string">&quot;CHN&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="控制-find-返回的字段"><a href="#控制-find-返回的字段" class="headerlink" title="控制 find 返回的字段"></a>控制 find 返回的字段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find 可以指定只返回指定的字段</span></span><br><span class="line">_id字段必须明确指明不返回，否则默认返回</span><br><span class="line">在 MongoDB 中我们称这为投影(projection)</span><br><span class="line"></span><br><span class="line">db.movies.find(&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;action&quot;</span>&#125;,&#123;<span class="string">&quot;_id&quot;</span>:0, title:1&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用remove删除文档"><a href="#使用remove删除文档" class="headerlink" title="使用remove删除文档"></a>使用remove删除文档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remove 命令需要配合查询条件使用</span><br><span class="line">匹配查询条件的的文档会被删除</span><br><span class="line">指定一个空文档条件会删除所有文档</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下示例</span></span><br><span class="line">db.testcol.remove( &#123; a : 1 &#125; ) // 删除a 等于1的记录</span><br><span class="line">db.testcol.remove( &#123; a : &#123; <span class="variable">$lt</span> : 5 &#125; &#125; ) // 删除a 小于5的记录</span><br><span class="line">db.testcol.remove( &#123; &#125; ) // 删除所有记录</span><br></pre></td></tr></table></figure>

<h3 id="使用-update-更新文档"><a href="#使用-update-更新文档" class="headerlink" title="使用 update 更新文档"></a>使用 update 更新文档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Update 操作执行格式: db.&lt;集合&gt;.update(&lt;查询条件&gt;, &lt;更新字段&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以以下数据为例</span></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.fruit.insertMany([</span><br><span class="line">&#123;name: <span class="string">&quot;apple&quot;</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;pear&quot;</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">db.fruit.updateOne(&#123;name: <span class="string">&quot;apple&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;from: <span class="string">&quot;China&quot;</span>&#125;&#125;) //有就更新，没有就行添加</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用规则</span></span><br><span class="line">使用 updateOne 表示无论条件匹配多少条记录，始终只更新第一条</span><br><span class="line">使用 updateMany 表示条件匹配多少条就更新多少条</span><br><span class="line">updateOne/updateMany 方法要求更新条件部分必须具有以下之一，否则将报错</span><br><span class="line">    <span class="variable">$set</span>/<span class="variable">$unset</span></span><br><span class="line">    <span class="variable">$push</span>/<span class="variable">$pushAll</span>/<span class="variable">$pop</span></span><br><span class="line">    <span class="variable">$pull</span>/<span class="variable">$pullAll</span></span><br><span class="line">    <span class="variable">$addToSet</span></span><br><span class="line">// 报错</span><br><span class="line">db.fruit.updateOne(&#123;name: <span class="string">&quot;apple&quot;</span>&#125;, &#123;from: <span class="string">&quot;China&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用-update-更新数组"><a href="#使用-update-更新数组" class="headerlink" title="使用 update 更新数组"></a>使用 update 更新数组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$push</span>: 增加一个对象到数组底部</span><br><span class="line"><span class="variable">$pushAll</span>: 增加多个对象到数组底部</span><br><span class="line"><span class="variable">$pop</span>: 从数组底部删除一个对象</span><br><span class="line"><span class="variable">$pull</span>: 如果匹配指定的值，从数组中删除相应的对象</span><br><span class="line"><span class="variable">$pullAll</span>: 如果匹配任意的值，从数据中删除相应的对象</span><br><span class="line"><span class="variable">$addToSet</span>: 如果不存在则增加一个值到数组</span><br></pre></td></tr></table></figure>

<h3 id="使用-drop-删除集合"><a href="#使用-drop-删除集合" class="headerlink" title="使用 drop 删除集合"></a>使用 drop 删除集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 db.&lt;集合&gt;.drop() 来删除一个集合</span><br><span class="line">集合中的全部文档都会被删除</span><br><span class="line">集合相关的索引也会被删除</span><br><span class="line"></span><br><span class="line">db.colToBeDropped.drop()</span><br></pre></td></tr></table></figure>

<h3 id="使用-dropDatabase-删除数据库"><a href="#使用-dropDatabase-删除数据库" class="headerlink" title="使用 dropDatabase 删除数据库"></a>使用 dropDatabase 删除数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 db.dropDatabase() 来删除数据库</span><br><span class="line">数据库相应文件也会被删除，磁盘空间将被释放</span><br><span class="line"></span><br><span class="line">use tempDB</span><br><span class="line">db.dropDatabase()</span><br><span class="line">show collections // No collections</span><br><span class="line">show dbs // The db is gone</span><br></pre></td></tr></table></figure>

<h3 id="Python操作MongoDB"><a href="#Python操作MongoDB" class="headerlink" title="Python操作MongoDB"></a>Python操作MongoDB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境准备</span></span><br><span class="line"><span class="comment"># Centos安装python3</span></span><br><span class="line">yum install python3</span><br><span class="line">pip3 install pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">在 python 交互模式下导入 pymongo，检查驱动是否已正确安装</span><br><span class="line">import pymongo </span><br><span class="line">pymongo.version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定 MongoDB 连接串</span></span><br><span class="line">使用驱动连接到 MongoDB 集群只需要指定 MongoDB 连接字符串即可。其基本格式可以参考文档: Connection String URI Format </span><br><span class="line">最简单的形式是mongodb://数据库服务器主机地址：端口号</span><br><span class="line">如：mongodb://127.0.0.1:27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接以下操作在python终端操作就行</span></span><br><span class="line">from pymongo import MongoClient </span><br><span class="line">uri = <span class="string">&quot;mongodb://root:root123@db1:27017&quot;</span></span><br><span class="line">client = MongoClient(uri) </span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="comment"># 初始化数据库和集合</span></span><br><span class="line">db = client[<span class="string">&quot;eshop&quot;</span>]</span><br><span class="line">user_coll = db[<span class="string">&quot;users&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一条新的用户数据</span></span><br><span class="line">new_user = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;nina&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;xxxx&quot;</span>, <span class="string">&quot;email&quot;</span>: </span><br><span class="line"><span class="string">&quot;123456@qq.com &quot;</span>&#125;</span><br><span class="line">result = user_coll.insert_one(new_user)  <span class="comment"># 这条执行之后MongoDB才会有数据</span></span><br><span class="line">result</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB远程连接方式</title>
    <url>/3358d614.html</url>
    <content><![CDATA[<h3 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h3><h4 id="compass"><a href="#compass" class="headerlink" title="compass"></a><code>compass</code></h4><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址，直安装即可</span></span><br><span class="line">https://www.mongodb.com/try/download/compass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一的连接方法</span></span><br><span class="line">mongodb://root:root123@db1:27017/admin</span><br><span class="line"></span><br><span class="line">root          用户名</span><br><span class="line">root123       密码</span><br><span class="line">db1:27017     主机地址+端口</span><br><span class="line">admin         验证库</span><br></pre></td></tr></table></figure>

<p>方式一</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/6gLJgx.png" alt="6gLJgx"></p>
<p>方式二，在下图位置填入相应信息</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211230160335813.png" alt="image-20211230160335813"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211230160400469.png" alt="image-20211230160400469"></p>
<h4 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a><code>Navicat</code></h4><p>不做演示了</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Vd8uLU.png" alt="Vd8uLU"></p>
<h3 id="命令远程"><a href="#命令远程" class="headerlink" title="命令远程"></a>命令远程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host 192.168.0.11 --port 27017 -uroot -proot123 admin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB用户管理</title>
    <url>/ff4ef26d.html</url>
    <content><![CDATA[<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证库，建立用户时use到的库，在使用用户时，要加上验证库才能登陆</span><br><span class="line">对于管理员用户,必须在admin下创建</span><br><span class="line">1. 建用户时,use到的库,就是此用户的验证库</span><br><span class="line">2. 登录时,必须明确指定验证库才能登录</span><br><span class="line">3. 通常,管理员用的验证库是admin,普通用户的验证库一般是所管理的库设置为验证库</span><br><span class="line">4. 如果直接登录到数据库,不进行use,默认的验证库是test,不是我们生产建议的</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo 10.0.0.151/admin</span><br><span class="line">use admin </span><br><span class="line"></span><br><span class="line">db.createUser</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;&lt;name&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&quot;&lt;cleartext password&gt;&quot;</span>,</span><br><span class="line">    roles: [</span><br><span class="line">       &#123; role: <span class="string">&quot;&lt;role&gt;&quot;</span>,</span><br><span class="line">     db: <span class="string">&quot;&lt;database&gt;&quot;</span> &#125; | <span class="string">&quot;&lt;role&gt;&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本语法</span></span><br><span class="line">user:用户名</span><br><span class="line"><span class="built_in">pwd</span>:密码</span><br><span class="line">roles:</span><br><span class="line">    role:角色名</span><br><span class="line">    db:作用对象 </span><br><span class="line">role：root, readWrite,<span class="built_in">read</span>   </span><br><span class="line"></span><br><span class="line">验证数据库：</span><br><span class="line">mongo -u <span class="built_in">test</span> -p 123 10.0.0.21/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h3 id="用法实例"><a href="#用法实例" class="headerlink" title="用法实例"></a>用法实例</h3><h4 id="管理员用户"><a href="#管理员用户" class="headerlink" title="管理员用户"></a>管理员用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建超级管理员 管理所有数据库（必须use admin再去创建）</span></span><br><span class="line">$ mongo  <span class="comment"># 命令行输入mongo进入数据库</span></span><br><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&quot;root123&quot;</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证用户</span></span><br><span class="line">db.auth(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root123&#x27;</span>)  <span class="comment"># 结果为1代表成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件中，加入以下配置</span></span><br><span class="line">vim /mongodb/conf/mongodb.conf</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启mongodb</span></span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录验证</span></span><br><span class="line">mongo -uroot -proot123  admin</span><br><span class="line">mongo -uroot -proot123  192.168.0.11/admin</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 或者</span></span><br><span class="line">  mongo</span><br><span class="line">  use admin</span><br><span class="line">  db.auth(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">use admin</span><br><span class="line">db.system.users.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建库管理用户</span></span><br><span class="line">mongo -uroot -proot123  admin</span><br><span class="line"></span><br><span class="line">use app</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">user: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line"><span class="built_in">pwd</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">roles: [ &#123; role: <span class="string">&quot;dbAdmin&quot;</span>, db: <span class="string">&quot;app&quot;</span> &#125; ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.auth(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录测试</span></span><br><span class="line">mongo -uadmin -padmin app</span><br></pre></td></tr></table></figure>

<h4 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建对app数据库，读、写权限的用户app01：</span></span><br><span class="line">    <span class="comment"># 超级管理员用户登陆</span></span><br><span class="line">    mongo -uroot -proot123 admin</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择一个验证库</span></span><br><span class="line">    use app</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建用户</span></span><br><span class="line">    db.createUser(</span><br><span class="line">        &#123;</span><br><span class="line">            user: <span class="string">&quot;app01&quot;</span>,</span><br><span class="line">            <span class="built_in">pwd</span>: <span class="string">&quot;app01&quot;</span>,</span><br><span class="line">            roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span> , db: <span class="string">&quot;app&quot;</span> &#125; ]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证</span></span><br><span class="line">    mongo  -uapp01 -papp01 app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app数据库读写权限的用户并对test数据库具有读权限</span></span><br><span class="line">mongo -uroot -proot123 admin</span><br><span class="line"></span><br><span class="line">use app</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">user: <span class="string">&quot;app03&quot;</span>,</span><br><span class="line"><span class="built_in">pwd</span>: <span class="string">&quot;app03&quot;</span>,</span><br><span class="line">roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;app&quot;</span> &#125;,</span><br><span class="line">&#123; role: <span class="string">&quot;read&quot;</span>, db: <span class="string">&quot;test&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询mongodb中的用户信息</span></span><br><span class="line">mongo -uroot -proot123 admin</span><br><span class="line">db.system.users.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户（root身份登录，use到验证库）</span></span><br><span class="line">mongo -uroot -proot123 admin</span><br><span class="line">use app</span><br><span class="line">db.dropUser(<span class="string">&quot;admin&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="角色关系"><a href="#角色关系" class="headerlink" title="角色关系"></a>角色关系</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/VX8Kie.png" alt="VX8Kie"></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装部署</title>
    <url>/55c06d78.html</url>
    <content><![CDATA[<h3 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址</span></span><br><span class="line">https://www.mongodb.com/try/download/community</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos7下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.2.17.tgz</span><br></pre></td></tr></table></figure>

<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><h4 id="关闭THP"><a href="#关闭THP" class="headerlink" title="关闭THP"></a>关闭THP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭THP</span></span><br><span class="line"><span class="comment"># root用户下</span></span><br><span class="line"><span class="comment"># 在 /etc/rc.local 最后添加如下代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/defrag; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled        </span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag </span><br><span class="line"></span><br><span class="line"><span class="comment">#其他系统关闭参照官方文档</span></span><br><span class="line">https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为什么要关闭</span></span><br><span class="line">Transparent Huge Pages (THP) is a Linux memory management system </span><br><span class="line">that reduces the overhead of Translation Lookaside Buffer (TLB) </span><br><span class="line">lookups on machines with large amounts of memory by using larger memory pages.</span><br><span class="line">However, database workloads often perform poorly with THP, </span><br><span class="line">because they tend to have sparse rather than contiguous memory access patterns. </span><br><span class="line">You should <span class="built_in">disable</span> THP on Linux machines to ensure best performance with MongoDB.</span><br></pre></td></tr></table></figure>

<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf mongodb-linux-x86_64-rhel70-4.2.17.tgz</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-4.2.17 /usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">useradd mongod</span><br><span class="line">passwd mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建相关目录</span></span><br><span class="line">mkdir -p /mongodb/&#123;data,conf,<span class="built_in">log</span>&#125;</span><br><span class="line">chown -R mongod:mongod /mongodb</span><br><span class="line">chown -R mongod:mongod /usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=/usr/local/mongodb/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化mongodb</span></span><br><span class="line">mongod --dbpath=/mongodb/data --logpath=/mongodb/<span class="built_in">log</span>/mongodb.log --port=27017 --logappend --fork</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录mongodb数据库</span></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h3 id="普通配置文件"><a href="#普通配置文件" class="headerlink" title="普通配置文件"></a>普通配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通配置文件</span></span><br><span class="line">cat &gt; /mongodb/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">logpath=/mongodb/log/mongodb.log</span></span><br><span class="line"><span class="string">dbpath=/mongodb/data </span></span><br><span class="line"><span class="string">port=27017</span></span><br><span class="line"><span class="string">logappend=true</span></span><br><span class="line"><span class="string">fork=true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭mongodb</span></span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf --shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动mongodb</span></span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h3 id="YAML格式配置文件"><a href="#YAML格式配置文件" class="headerlink" title="YAML格式配置文件"></a>YAML格式配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件解释</span></span><br><span class="line">--系统日志有关  </span><br><span class="line">systemLog:</span><br><span class="line">   destination: file        </span><br><span class="line">   path: <span class="string">&quot;/mongodb/log/mongodb.log&quot;</span>    --日志位置</span><br><span class="line">   logAppend: <span class="literal">true</span>                     --日志以追加模式记录</span><br><span class="line"></span><br><span class="line">--数据存储有关   </span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   dbPath: <span class="string">&quot;/mongodb/data&quot;</span>            --数据路径的位置</span><br><span class="line"></span><br><span class="line">-- 进程控制  </span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span>                         --后台守护进程</span><br><span class="line">   pidFilePath: &lt;string&gt;              --pid文件的位置，一般不用配置，可以去掉这行，自动生成到data中</span><br><span class="line"></span><br><span class="line">--网络配置有关   </span><br><span class="line">net:            </span><br><span class="line">   bindIp: &lt;ip&gt;                       -- 监听地址</span><br><span class="line">   bindIpAll: <span class="literal">true</span>                    -- 开启所有端口</span><br><span class="line">   port: &lt;port&gt;                       -- 端口号,默认不配置端口号，是27017</span><br><span class="line"></span><br><span class="line">-- 安全验证有关配置      </span><br><span class="line">security:</span><br><span class="line">  authorization: enabled              --是否打开用户名密码验证，授权完成之后再开启</span><br><span class="line"></span><br><span class="line">------------------以下是复制集与分片集群有关----------------------  </span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line"> oplogSizeMB: &lt;NUM&gt;</span><br><span class="line"> replSetName: <span class="string">&quot;&lt;REPSETNAME&gt;&quot;</span></span><br><span class="line"> secondaryIndexPrefetch: <span class="string">&quot;all&quot;</span></span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: &lt;string&gt;</span><br><span class="line">   archiveMovedChunks: &lt;boolean&gt;</span><br><span class="line"></span><br><span class="line">---<span class="keyword">for</span> mongos only</span><br><span class="line">replication:</span><br><span class="line">   localPingThresholdMs: &lt;int&gt;</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">   configDB: &lt;string&gt;</span><br><span class="line">---</span><br><span class="line">------------------------------------  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML例子</span></span><br><span class="line">cat &gt;  /mongodb/conf/mongodb.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">  destination: file</span></span><br><span class="line"><span class="string">  path: &quot;/mongodb/log/mongodb.log&quot;</span></span><br><span class="line"><span class="string">  logAppend: true</span></span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">  journal:</span></span><br><span class="line"><span class="string">    enabled: true</span></span><br><span class="line"><span class="string">  dbPath: &quot;/mongodb/data/&quot;</span></span><br><span class="line"><span class="string">processManagement:</span></span><br><span class="line"><span class="string">  fork: true</span></span><br><span class="line"><span class="string">net:</span></span><br><span class="line"><span class="string">  port: 27017</span></span><br><span class="line"><span class="string">  bindIpAll: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭和启动</span></span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf --shutdown</span><br><span class="line">mongod -f /mongodb/conf/mongodb.conf</span><br></pre></td></tr></table></figure>

<h3 id="优化启动警告"><a href="#优化启动警告" class="headerlink" title="优化启动警告"></a>优化启动警告</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine</span><br><span class="line">建议使用xfs文件系统，但不影响使用</span><br><span class="line"></span><br><span class="line">** WARNING: Access control is not enabled <span class="keyword">for</span> the database.</span><br><span class="line">配置密码之后开启安全</span><br><span class="line"></span><br><span class="line">** WARNING: This server is bound to localhost.</span><br><span class="line">配置文件中绑定IP就可以解决</span><br><span class="line"></span><br><span class="line">** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is <span class="string">&#x27;always&#x27;</span>.</span><br><span class="line">** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is <span class="string">&#x27;always&#x27;</span>.</span><br><span class="line">这两条参考上面关闭THP即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">** WARNING: soft rlimits too low. rlimits <span class="built_in">set</span> to 31192 processes, 100001 files. Number of processes....</span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># end of file</span></span><br><span class="line">mongod soft nofile 64000</span><br><span class="line">mongod hard nofile 64000</span><br><span class="line">mongod soft nproc 32000</span><br><span class="line">mongod hard nproc 32000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB简介</title>
    <url>/99ace97a.html</url>
    <content><![CDATA[<h3 id="简单认识"><a href="#简单认识" class="headerlink" title="简单认识"></a>简单认识</h3><table>
<thead>
<tr>
<th>Q</th>
<th>A</th>
</tr>
</thead>
<tbody><tr>
<td>什么是MongoDB</td>
<td>一个以JSON为数据模型的文档数据库</td>
</tr>
<tr>
<td>文档数据库</td>
<td>文档来自于’JSON Document’，并非PDF，Word等</td>
</tr>
<tr>
<td>主要用途</td>
<td>OLTP/OLAP 数据库，类似于Oracle，MySQL海量数据处理，数据平台</td>
</tr>
<tr>
<td>主要特点</td>
<td>无模式或可选，友好的JSON数据模型，开发方便</td>
</tr>
<tr>
<td>版本</td>
<td>企业版和社区版</td>
</tr>
</tbody></table>
<span id="more"></span>
<h3 id="版本变迁"><a href="#版本变迁" class="headerlink" title="版本变迁"></a>版本变迁</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211229213159423.png" alt="image-20211229213159423"></p>
<h3 id="与RDBMS比较"><a href="#与RDBMS比较" class="headerlink" title="与RDBMS比较"></a>与RDBMS比较</h3><table>
<thead>
<tr>
<th>功能</th>
<th>MongoDB</th>
<th>RDBMS</th>
</tr>
</thead>
<tbody><tr>
<td>数据模型</td>
<td>JSON</td>
<td>Relational</td>
</tr>
<tr>
<td>数据库类型</td>
<td>OLTP/OLAP</td>
<td>OLTP/OLAP</td>
</tr>
<tr>
<td>CRUD操作</td>
<td>MQL/SQL</td>
<td>SQL/SQLX</td>
</tr>
<tr>
<td>高可用</td>
<td>原生Replica-Set</td>
<td>Cluster、中间件</td>
</tr>
<tr>
<td>横向扩展能力</td>
<td>原生MSC</td>
<td>分片、中间件</td>
</tr>
<tr>
<td>索引支持</td>
<td>B-Tree、F-text、GIS、multikey、HASH、TTL</td>
<td>B-Tree</td>
</tr>
<tr>
<td>开发难度</td>
<td>简单</td>
<td>难</td>
</tr>
<tr>
<td>数据容量</td>
<td>无理论上限</td>
<td>千万、亿</td>
</tr>
<tr>
<td>扩展方式</td>
<td>垂直扩展+水平扩展</td>
<td>垂直扩展</td>
</tr>
</tbody></table>
<h3 id="逻辑结构对比"><a href="#逻辑结构对比" class="headerlink" title="逻辑结构对比"></a>逻辑结构对比</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211229213216469.png" alt="image-20211229213216469"></p>
<h3 id="MongoDB优势"><a href="#MongoDB优势" class="headerlink" title="MongoDB优势"></a>MongoDB优势</h3><ul>
<li><p>简单直观</p>
<p>以自然的方式来建模，以直观的方式来与数据库交互</p>
</li>
<li><p>结构灵活</p>
<p>弹性模式从容响应需求的频繁变化</p>
</li>
<li><p>快速开发</p>
<p>做更多的事情，写更少的代码</p>
</li>
</ul>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211229213046722.png" alt="image-20211229213046722"></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS搭建使用</title>
    <url>/e15f268d.html</url>
    <content><![CDATA[<h1 id="NFS-网络存储"><a href="#NFS-网络存储" class="headerlink" title="NFS 网络存储"></a>NFS 网络存储</h1><h2 id="NFS简介"><a href="#NFS简介" class="headerlink" title="NFS简介"></a>NFS简介</h2><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NFS : 共享存储，文件服务器</span><br><span class="line"></span><br><span class="line">基本概述：</span><br><span class="line">   1.NFS是Network File System的缩写及网络文件系统。NFS主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。</span><br><span class="line"></span><br><span class="line">   2.NFS系统和Windows网络共享、网络驱动器类似, 只不过windows用于局域网, NFS用于企业集群架构中, 如果是大型网站, 会用到更复杂的分布式文件系统FastDFS，glusterfs，HDFS，ceph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为何使用NFS：</span><br><span class="line">  1.实现多台服务器之间数据共享</span><br><span class="line">  2.实现多台服务器之间数据一致</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2251663-20210419213338770-1524770891.png" alt="2251663-20210419213338770-1524770891"></p>
<h2 id="NFS应用"><a href="#NFS应用" class="headerlink" title="NFS应用"></a>NFS应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.用户访问NFS客户端，将请求转化为函数</span><br><span class="line">2.NFS通过TCP/IP连接服务端</span><br><span class="line">3.NFS服务端接收请求，会先调用portmap进程进行端口映射</span><br><span class="line">4.Rpc.nfsd进程用于判断NFS客户端能否连接服务端；</span><br><span class="line">5.Rpc.mount进程用于判断客户端对服务端的操作权限</span><br><span class="line">6.如果通过权限验证，可以对服务端进行操作，修改或读取</span><br></pre></td></tr></table></figure>

<p>nfs运行原理</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/nfs%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86-1024x640.png" alt="nfs运行原理-1024x640"></p>
<h2 id="NFS实践"><a href="#NFS实践" class="headerlink" title="NFS实践"></a>NFS实践</h2><ul>
<li>为了实现文件共享</li>
<li>为了多台服务器之间数据一致</li>
</ul>
<p>nfs原理</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/nfs%E5%8E%9F%E7%90%86-1024x754.png" alt="nfs原理-1024x754"></p>
<h4 id="1、服务端"><a href="#1、服务端" class="headerlink" title="1、服务端"></a>1、服务端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装NFS和rpcbind</span><br><span class="line">[root@nfs ~]<span class="comment"># yum install nfs-utils rpcbind -y</span></span><br><span class="line"></span><br><span class="line">2、创建挂载点</span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir -p /web/nfs&#123;1..9&#125;</span></span><br><span class="line"></span><br><span class="line">3、配置挂载点</span><br><span class="line">[root@nfs ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">格式：</span><br><span class="line">[挂载点] [可以访问的IP]([权限])<span class="comment">#NFS配置详解参考下方</span></span><br><span class="line">/web/nfs1  172.16.1.0/20(rw,sync,all_squash)</span><br><span class="line"></span><br><span class="line">4、关闭selinux和防火墙</span><br><span class="line">[root@nfs ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line"></span><br><span class="line">5、启动nfs和rpcbind服务</span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start nfs-server </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start rpcbind</span></span><br><span class="line"></span><br><span class="line">6、检查服务端是否正常</span><br><span class="line">[root@nfs ~]<span class="comment"># showmount -e [服务端的地址，默认是本机地址]</span></span><br><span class="line"></span><br><span class="line">[root@nfs ~]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> nfs:</span><br><span class="line">/web/nfsv1 172.16.1.0/20</span><br><span class="line">[root@nfs ~]<span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/web/nfsv1 172.16.1.0/20</span><br><span class="line"></span><br><span class="line">[root@nfs ~]<span class="comment"># cat /var/lib/nfs/etab</span></span><br><span class="line"></span><br><span class="line">7、给挂载点授权</span><br><span class="line">[root@nfs ~]<span class="comment"># chown -R nfsnobody.nfsnobody /web</span></span><br></pre></td></tr></table></figure>

<h4 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装NFS</span><br><span class="line">[root@web01 opt]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line"></span><br><span class="line">2、创建目录</span><br><span class="line">[root@web01 opt]<span class="comment"># mkdir /opt/nfs/</span></span><br><span class="line"></span><br><span class="line">3、挂载NFS</span><br><span class="line">[root@web01 opt]<span class="comment"># mount -t nfs 172.16.1.31:/web/nfs1  /opt/nfs/</span></span><br><span class="line"></span><br><span class="line">4、测试NFS文件同步功能</span><br><span class="line">[root@web opt]<span class="comment"># touch nfs/&#123;1..9&#125;.txt</span></span><br><span class="line">[root@web opt]<span class="comment"># ll nfs/</span></span><br><span class="line"> 总用量 0</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 1.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 2.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 3.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 4.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 5.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 6.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 7.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 8.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 2021 9.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"> <span class="comment"># 切换到服务端nfs服务器上查看 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># ll /web/nfs1 #发现已经同步过来了</span></span><br><span class="line"> 总用量 0</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 1.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 2.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 3.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 4.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 5.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 6.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 7.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 8.txt</span><br><span class="line"> -rw-r--r-- 1 nfsnobody nfsnobody 0 12月 30 22:02 9.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="NFS配置详解"><a href="#NFS配置详解" class="headerlink" title="NFS配置详解"></a>NFS配置详解</h2><table>
<thead>
<tr>
<th>nfs共享参数</th>
<th>参数作用</th>
</tr>
</thead>
<tbody><tr>
<td>rw</td>
<td>读写权限 (常用)</td>
</tr>
<tr>
<td>ro</td>
<td>只读权限 (不常用)</td>
</tr>
<tr>
<td>root_squash</td>
<td>当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户 (不常用)</td>
</tr>
<tr>
<td>no_root_squash</td>
<td>当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员 (不常用)</td>
</tr>
<tr>
<td>all_squash</td>
<td>无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户 (常用)</td>
</tr>
<tr>
<td>no_all_squash</td>
<td>无论NFS客户端使用什么账户访问，都不进行压缩 (不常用)</td>
</tr>
<tr>
<td>sync</td>
<td>同时将数据写入到内存与硬盘中，保证不丢失数据 (常用)</td>
</tr>
<tr>
<td>async</td>
<td>优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据 (不常用)</td>
</tr>
<tr>
<td>anonuid</td>
<td>配置all_squash使用,指定NFS的用户UID,必须存在系统 (常用)</td>
</tr>
<tr>
<td>anongid</td>
<td>配置all_squash使用,指定NFS的用户GID,必须存在系统 (常用)</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、控制读写</span><br><span class="line">  rw  <span class="comment">#可读可写</span></span><br><span class="line">  ro  <span class="comment">#只读</span></span><br><span class="line"></span><br><span class="line">2、控制文件权限</span><br><span class="line">root_squash  </span><br><span class="line">no_root_squash</span><br><span class="line">all_squash</span><br><span class="line">no_all_squash</span><br><span class="line"></span><br><span class="line">3、控制写模式</span><br><span class="line">sync  <span class="comment">#同步写</span></span><br><span class="line">async <span class="comment">#异步写</span></span><br><span class="line"></span><br><span class="line">4、控制用户</span><br><span class="line">anonuid</span><br><span class="line">anongid</span><br><span class="line"></span><br><span class="line">统一用户：</span><br><span class="line"></span><br><span class="line">1、创建用户</span><br><span class="line">[root@nfs nfs1]<span class="comment"># groupadd www -g 666</span></span><br><span class="line">[root@nfs nfs1]<span class="comment"># useradd www -u 666 -g 666 -M -r -s /sbin/nologin </span></span><br><span class="line"></span><br><span class="line">2、修改配置挂载点</span><br><span class="line">[root@nfs nfs1]<span class="comment"># vim /etc/exports</span></span><br><span class="line"> /web/nfs1  172.16.1.0/20(rw,sync,all_squash，anonuid=666，anongid=666)</span><br><span class="line"><span class="comment"># 修改后重启</span></span><br><span class="line">[root@nfs nfs1]<span class="comment"># systemctl restart nfs-server rpcbind</span></span><br><span class="line"> </span><br><span class="line">3、修改挂载点权限</span><br><span class="line">[root@nfs nfs1]<span class="comment"># chown -R www.www /web/</span></span><br><span class="line"></span><br><span class="line">3、使用</span><br><span class="line"><span class="comment"># 先卸载再重新挂载</span></span><br><span class="line">[root@nfs nfs1]<span class="comment">#umount /opt/nfs/</span></span><br><span class="line">[root@nfs nfs1]<span class="comment">#mount -t nfs 172.16.1.31:/web/nfs1 /opt/nfs/</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">[root@nfs nfs1]<span class="comment"># touch nfs/10.txt</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[root@nfs nfs1]<span class="comment"># ll nfs/</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建考试系统"><a href="#搭建考试系统" class="headerlink" title="搭建考试系统"></a>搭建考试系统</h2><h4 id="1、搭建WEB服务"><a href="#1、搭建WEB服务" class="headerlink" title="1、搭建WEB服务"></a>1、搭建WEB服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装web软件</span><br><span class="line">[root@web01 opt]<span class="comment"># yum install httpd php php-devel -y</span></span><br><span class="line"></span><br><span class="line">2、将代码放置于网站的根目录</span><br><span class="line">[root@web01 opt]<span class="comment"># cd /var/www/html/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传代码</span></span><br><span class="line"></span><br><span class="line">3、授权</span><br><span class="line">[root@web01 html]<span class="comment"># chown -R www.www /var/www/html</span></span><br><span class="line"></span><br><span class="line">4、关闭selinux和防火墙</span><br><span class="line">[root@nfs ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line"></span><br><span class="line">5、修改web软件的用户</span><br><span class="line">[root@web01 html]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">User www</span><br><span class="line">Group www</span><br><span class="line"></span><br><span class="line">6、启动web软件</span><br><span class="line">[root@web01 html]<span class="comment"># systemctl start httpd</span></span><br><span class="line"></span><br><span class="line">7、测试</span><br><span class="line"></span><br><span class="line">	1、上传</span><br><span class="line">	</span><br><span class="line">	2、访问</span><br><span class="line">    http://172.16.1.7/upload/1_linux.jpg</span><br></pre></td></tr></table></figure>

<h4 id="2、配合NFS实现文件共享"><a href="#2、配合NFS实现文件共享" class="headerlink" title="2、配合NFS实现文件共享"></a>2、配合NFS实现文件共享</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、修改NFS配置文件</span><br><span class="line">[root@nfs nfs1]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/web/upload  172.16.1.0/20(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line"></span><br><span class="line">2、创建挂载点</span><br><span class="line">[root@nfs nfs1]<span class="comment"># mkdir /web/upload</span></span><br><span class="line">[root@nfs nfs1]<span class="comment"># chown www.www /web/upload</span></span><br><span class="line"></span><br><span class="line">3、重启NFS</span><br><span class="line">[root@nfs nfs1]<span class="comment"># systemctl restart nfs-server rpcbind</span></span><br><span class="line"></span><br><span class="line">4、客户端安装NFS软件</span><br><span class="line">[root@web01 html]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line">[root@web02 html]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line">[root@web03 html]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line"></span><br><span class="line">5、挂载</span><br><span class="line">[root@web01 html]<span class="comment"># mount -t nfs 172.16.1.31:/web/upload /var/www/html/upload</span></span><br><span class="line">[root@web02 html]<span class="comment"># mount -t nfs 172.16.1.31:/web/upload /var/www/html/upload</span></span><br><span class="line">[root@web03 html]<span class="comment"># mount -t nfs 172.16.1.31:/web/upload /var/www/html/upload</span></span><br><span class="line"></span><br><span class="line">6、测试</span><br><span class="line"><span class="comment"># 用web2上传，web3查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sed -i <span class="string">&#x27;s/.100/$1/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-eth[10]</span><br><span class="line">hostnamectl set-hostname <span class="variable">$2</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Rsync使用</title>
    <url>/340a13f1.html</url>
    <content><![CDATA[<h1 id="rsync同步工具"><a href="#rsync同步工具" class="headerlink" title="rsync同步工具"></a>rsync同步工具</h1><ul>
<li>rsync (remote synchronizetion) 一款开源的快速的，多功能的，可实现全量及增量（差异化备份）的本地或远程数据备份的优秀工具<span id="more"></span>
<img src="https://gitee.com/gengff/blogimage/raw/master/images/v2-6f26d816c7a3d517e75d8f4187d2c5b5_1440w.jpg" alt="v2-6f26d816c7a3d517e75d8f4187d2c5b5_1440w"></li>
</ul>
<h2 id="rsync介绍"><a href="#rsync介绍" class="headerlink" title="rsync介绍"></a>rsync介绍</h2><ul>
<li>rsync，从软件的名称就可以看出来，rsync具有可使本地和远程两台主机之间的数据快速复制同步镜像、远程备份的功能，这个功能类似于ssh带的scp命令，但是又优于scp命令的功能，scp每次都是全量拷贝，而rsync可以增量拷贝。当然，rsync还可以在本地主机的不同分区或目录之间全量及增量的复制数据，这又类似cp命令。但是同样也优于cp命令，cp每次都是全量拷贝，而rsync可以增量拷贝。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync官方地址：https://rsync.samba.org/</span><br><span class="line">rsync监听端口：873</span><br><span class="line">rsync运行模式：C/S   client/server</span><br><span class="line"></span><br><span class="line">rsync简称叫做远程同步，可以实现不同主机之间的数据同步，还支持全量和增量</span><br></pre></td></tr></table></figure>

<h2 id="rsync特性"><a href="#rsync特性" class="headerlink" title="rsync特性"></a>rsync特性</h2><ul>
<li>1)支持拷贝特殊文件，如链接文件、设备等。</li>
<li>2)可以有排除指定文件或目录同步的功能，相当于打包命令tar的排除功能。</li>
<li>3)可以做到保持原文件或目录的权限、时间、软硬链接、属主、组等所有属性均不改变 –p。</li>
<li>4)可以实现增量同步，既只同步发生变化的数据，因此数据传输效率很高（tar-N）。</li>
<li>5)可以使用rcp、rsh、ssh等方式来配合传输文件（rsync本身不对数据加密）。</li>
<li>6)可以通过socket（进程方式）传输文件和数据（服务端和客户端）。</li>
<li>7)支持匿名的活认证（无需系统用户）的进程模式传输，可以实现方便安全的进行数据备份和镜像。</li>
</ul>
<h2 id="rsync应用场景"><a href="#rsync应用场景" class="headerlink" title="rsync应用场景"></a>rsync应用场景</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">全量备份</span><br><span class="line">增量备份</span><br><span class="line"></span><br><span class="line">两台服务器之间数据同步。</span><br><span class="line">把所有客户服务器数据同步到备份服务器，生产场景集群架构服务器备份方案。</span><br><span class="line">rsync结合inotify的功能做实时的数据同步。</span><br></pre></td></tr></table></figure>

<h2 id="rsync的传输方式"><a href="#rsync的传输方式" class="headerlink" title="rsync的传输方式"></a>rsync的传输方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push 推：</span><br><span class="line">  客户端将数据从本地推送至服务端(rsync服务器主动推送数据给其他主机。服务器开销大，适合后端服务器少的情况)</span><br><span class="line"> </span><br><span class="line">pull 拉：</span><br><span class="line">  客户端将数据从服务端拉取到本地(客户端主动向rsync服务器拉取数据)</span><br></pre></td></tr></table></figure>

<h2 id="rsync传输模式"><a href="#rsync传输模式" class="headerlink" title="rsync传输模式"></a>rsync传输模式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.本地方式（类似于cp，不支持推送和拉取，只是单纯的复制）</span><br><span class="line">2.远程方式（类似于scp，又不同于scp），scp只支持全量备份，rsync支持增量备份和差异备份</span><br><span class="line">3.守护进程（socket）方式（客户端和服务端）</span><br></pre></td></tr></table></figure>

<h2 id="rsync使用"><a href="#rsync使用" class="headerlink" title="rsync使用"></a>rsync使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a   <span class="comment">#归档模式传输, 等于-tropgDl    -t -r -o -p -g -D -l</span></span><br><span class="line">-v   <span class="comment">#详细模式输出, 打印速率, 文件数量等</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -v ./2.txt  root@172.16.1.41:/opt/</span></span><br><span class="line">-z   <span class="comment">#传输时进行压缩以提高效率</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vz ./2.txt  root@172.16.1.41:/opt/</span></span><br><span class="line">-r   <span class="comment">#递归传输目录及子目录，即目录下得所有目录都同样传输。</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzr ./a  root@172.16.1.41:/opt/</span></span><br><span class="line">-t   <span class="comment">#保持文件时间信息</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzrt ./a/b/c/2.txt  root@172.16.1.41:/opt/</span></span><br><span class="line">-o   <span class="comment">#保持文件属主信息</span></span><br><span class="line">-g   <span class="comment">#保持文件属组信息</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzrtgo  ./a/b/c/2.txt  root@172.16.1.41:/opt/</span></span><br><span class="line">-p   <span class="comment">#保持文件权限</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzrtgop  ./a/b/c/2.txt  root@172.16.1.41:/opt/</span></span><br><span class="line">-l   <span class="comment">#保留软连接</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzrtgopl  ./*  root@172.16.1.41:/opt/</span></span><br><span class="line">-P   <span class="comment">#显示同步的过程及传输时的进度等信息</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -vzrtgoplP  ./*  root@172.16.1.41:/opt/</span></span><br><span class="line">-D   <span class="comment">#保持设备文件信息</span></span><br><span class="line">	[root@m01 dev]<span class="comment"># rsync -vzrtgDopl /dev/tty1   root@172.16.1.41:/opt/</span></span><br><span class="line">-L   <span class="comment">#保留软连接指向的目标文件</span></span><br><span class="line">-e   <span class="comment">#使用的信道协议,指定替代rsh的shell程序</span></span><br><span class="line"></span><br><span class="line">--append          <span class="comment"># 指定文件接着上次传输中断处继续传输</span></span><br><span class="line">--append-verify   <span class="comment"># 使用参数续传（在断点续传之后，验证一下文件，如果不同，修复文件）</span></span><br><span class="line"></span><br><span class="line">--exclude=PATTERN   <span class="comment"># 指定排除不需要传输的文件</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -avzP --append-verify --exclude=2.txt  ./* root@172.16.1.41:/opt/</span></span><br><span class="line"></span><br><span class="line">--exclude-from=file <span class="comment"># 按照文件指定内容排除</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -avzP --append-verify --exclude-from=/tmp/exclude.txt  ./* root@172.16.1.41:/opt/</span></span><br><span class="line"></span><br><span class="line">--bwlimit=100       <span class="comment"># 限速传输（单位：MB）</span></span><br><span class="line">	[root@m01 ~]<span class="comment"># rsync -avzP --append-verify --bwlimit=10  ./* root@172.16.1.41:/opt/</span></span><br><span class="line"></span><br><span class="line">--delete            <span class="comment"># 让目标目录和源目录数据保持一致</span></span><br><span class="line"></span><br><span class="line">--password-file=xxx <span class="comment"># 使用密码文件</span></span><br><span class="line"></span><br><span class="line">--port              <span class="comment"># 指定端口传输</span></span><br></pre></td></tr></table></figure>

<h2 id="rsync守护进程模式"><a href="#rsync守护进程模式" class="headerlink" title="rsync守护进程模式"></a>rsync守护进程模式</h2><h4 id="1、服务端"><a href="#1、服务端" class="headerlink" title="1、服务端"></a>1、服务端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装</span><br><span class="line"> [root@backup ~]<span class="comment"># yum install -y rsync</span></span><br><span class="line"></span><br><span class="line">2、修改配置文件</span><br><span class="line"> [root@m01 ~]<span class="comment"># vim /etc/rsyncd.conf </span></span><br><span class="line">  uid = rsync</span><br><span class="line">  gid = rsync</span><br><span class="line">  port = 873</span><br><span class="line">  fake super = yes</span><br><span class="line">  use chroot = no</span><br><span class="line">  max connections = 200</span><br><span class="line">  timeout = 600</span><br><span class="line">  ignore errors</span><br><span class="line">  <span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line">  list = <span class="literal">false</span></span><br><span class="line">  auth users = rsync_backup</span><br><span class="line">  secrets file = /etc/rsync.passwd</span><br><span class="line">  <span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line">  <span class="comment">#####################################</span></span><br><span class="line">  [backup]</span><br><span class="line">  comment = welcome to backup!</span><br><span class="line">  path = /backup</span><br><span class="line">  [linux]</span><br><span class="line">  comment = welcome to linux!</span><br><span class="line">  path=/tmp/linux</span><br><span class="line"></span><br><span class="line">3、创建系统用户</span><br><span class="line"> [root@backup opt]<span class="comment"># groupadd rsync -g 666</span></span><br><span class="line"> [root@backup opt]<span class="comment"># useradd rsync -u 666 -g 666 -M -s /sbin/nologin -r</span></span><br><span class="line"></span><br><span class="line">4、创建密码文件</span><br><span class="line"> [root@backup opt]<span class="comment"># echo &quot;rsync_backup:123456&quot; &gt; /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line">5、授权（必须授权为600）</span><br><span class="line"> [root@backup opt]<span class="comment"># chmod 600 /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line">6、创建备份目录</span><br><span class="line"> [root@backup opt]<span class="comment"># mkdir /backup</span></span><br><span class="line"> [root@backup opt]<span class="comment"># mkdir /tmp/linux</span></span><br><span class="line"></span><br><span class="line">7、目录授权</span><br><span class="line"> [root@backup opt]<span class="comment"># chown rsync.rsync /backup/</span></span><br><span class="line"> [root@backup opt]<span class="comment"># chown rsync.rsync /tmp/linux/</span></span><br><span class="line"></span><br><span class="line">8、关闭防火墙和selinux</span><br><span class="line"> [root@backup opt]<span class="comment"># systemctl disabel --now firewalld</span></span><br><span class="line"> [root@backup opt]<span class="comment"># setenforce 0</span></span><br><span class="line"></span><br><span class="line">9、启动rsyncd服务</span><br><span class="line"> [root@backup opt]<span class="comment"># systemctl start rsyncd</span></span><br></pre></td></tr></table></figure>

<h4 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法一：自己输入密码</span><br><span class="line">  [root@m01 ~]<span class="comment"># rsync -avzP ./* rsync_backup@172.16.1.41::backup</span></span><br><span class="line">	</span><br><span class="line">   rsync_backup ： 虚拟用户，只在数据传输时使用</span><br><span class="line">   172.16.1.41  ： backup服务端的IP</span><br><span class="line">   backup       ： 模块名称</span><br><span class="line">	</span><br><span class="line">方法二：设置密码文件，运行时读取</span><br><span class="line"></span><br><span class="line">	1、编写密码文件</span><br><span class="line">   [root@backup opt]<span class="comment"># echo &quot;123456&quot; &gt; /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line">	2、授权</span><br><span class="line">   [root@m01 ~]<span class="comment"># chmod 600 /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line">	3、连接</span><br><span class="line">   [root@m01 ~]<span class="comment"># rsync -avzP --password-file=/etc/rsync.passwd  ./* rsync_backup@172.16.1.41::linux</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法三：添加环境变量</span><br><span class="line">	1、定义环境变量</span><br><span class="line">   <span class="built_in">export</span> RSYNC_PASSWORD=123456</span><br><span class="line">	</span><br><span class="line">	2、同步</span><br><span class="line">   [root@m01 ~]<span class="comment"># rsync -avzP  ./* rsync_backup@172.16.1.41::linux</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="rsync实时同步"><a href="#rsync实时同步" class="headerlink" title="rsync实时同步"></a>rsync实时同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync是不支持实时同步的，通常我们借助于inotify这个软件来实时监控文件变化，一旦inotify监控到文件变，则立即调用rsync进行同步。</span><br><span class="line"></span><br><span class="line">1、安装inotify(装在客户端)</span><br><span class="line">[root@web01 ~]<span class="comment"># yum -y install inotify-tools</span></span><br><span class="line"></span><br><span class="line">2、inotify参数介绍</span><br><span class="line">-m 持续监控</span><br><span class="line">-r 递归</span><br><span class="line">-q 静默，仅打印时间信息</span><br><span class="line">--timefmt 指定输出时间格式</span><br><span class="line">--format 指定事件输出格式</span><br><span class="line">    %Xe 事件</span><br><span class="line">    %w 目录</span><br><span class="line">    %f 文件</span><br><span class="line">-e 指定监控的事件</span><br><span class="line">    access 访问</span><br><span class="line">    modify 内容修改</span><br><span class="line">    attrib 属性修改</span><br><span class="line">    close_write 修改真实文件内容</span><br><span class="line">    open 打开</span><br><span class="line">    create 创建</span><br><span class="line">    delete 删除</span><br><span class="line">    umount 卸载</span><br><span class="line">    </span><br><span class="line">3、开始监控</span><br><span class="line">[root@m01 ~]<span class="comment"># /usr/bin/inotifywait  -mrq  --format &#x27;%Xe  %w  %f&#x27; -e create,modify,delete,attrib,close_write  /root</span></span><br><span class="line"></span><br><span class="line">4、实时监控并同步</span><br><span class="line">[root@m01 ~]<span class="comment"># /usr/bin/inotifywait  -mrq  --format &#x27;%Xe  %w  %f&#x27; -e create,modify,delete,attrib,close_write  /root | while read line;do</span></span><br><span class="line">  <span class="built_in">cd</span>  /root</span><br><span class="line">  rsync -avzP --delete --password-file=/etc/rsyncd.passwd ./* rsync_backup@172.16.1.41::backup</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防火墙iptables</title>
    <url>/2efe136b.html</url>
    <content><![CDATA[<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><span id="more"></span>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84.png" alt="项目架构"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/6581640856451_.pic_%E5%89%AF%E6%9C%AC.jpg" alt="6581640856451_.pic_副本"></p>
<h1 id="防火墙种类及使用说明"><a href="#防火墙种类及使用说明" class="headerlink" title="防火墙种类及使用说明"></a>防火墙种类及使用说明</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2615753-20211226235009781-222102770.webp" alt="2615753-20211226235009781-222102770"></p>
<ul>
<li><p>什么是防火墙</p>
<ul>
<li>防火墙一直被认为是保护敏感信息的第一道防线。他们在安全与受控内部网络之间建立了一道屏障，提供低级保护，以及重要的日志记录和审计功能。它能监视传入和传出的流量，并根据一组以定义的安全规则决定是允许还是阻止特定流量。</li>
</ul>
</li>
<li><p>防火墙种类</p>
<ul>
<li>硬件防火墙（主机防火墙）<ul>
<li>三层路由： 华为 H3C(华三)</li>
<li>深信服</li>
</ul>
</li>
<li>软件防火墙（网络防火墙）<ul>
<li>iptables</li>
<li>firewalld</li>
</ul>
</li>
<li>云防火墙<ul>
<li>阿里云:安全组（默认的是白名单 防火墙默认规则是拒绝）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h1><p>Netfilter/Iptables（以下简称Iptables）是unix/linux自带的一款优秀且开放源代码的完全自由的基于包过滤的防火墙工具，它的功能十分强大，使用非常灵活，可以对流入和流出服务器的数据包进行很精细的控制。在早期的Linux系统中，默认使用的是iptables防火墙管理服务来配置防火墙。尽管新型的firewalld防火墙管理服务已经被投入使用多年，但是大量的企业在生产环境中依然出于各种原因而继续使用iptables。</p>
<ul>
<li>iptables是linux2.4及2.6内核中集成的服务。</li>
<li>iptables主要工作在OSI七层的二、三、四层，如果重新编译内核，iptables也可以支持7层控制</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20210823223210395.png" alt="image-20210823223210395"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户  ---&gt;  调用iptables  ---&gt;  ip_tables内核模块  ---&gt;  Netfilter（系统安全框架） ---&gt;  过滤请求</span><br></pre></td></tr></table></figure>



<h3 id="iptables防火墙网路安全前言介绍"><a href="#iptables防火墙网路安全前言介绍" class="headerlink" title="iptables防火墙网路安全前言介绍"></a>iptables防火墙网路安全前言介绍</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">学好iptables的基础：</span><br><span class="line">  1、OSI7层模型以及不同层对应哪些协议？</span><br><span class="line">  2、TCP/IP三次握手，四次断开的过程，TCP HEADER，状态转换</span><br><span class="line">  3、常用的服务端口要非常清楚了解。</span><br><span class="line">  4、常用服务协议原理http协议，icmp协议。</span><br><span class="line"></span><br><span class="line">企业中安全配置原则：</span><br><span class="line">  1、尽可能不给服务器配置外网IP，可以通过代理转发或者通过防火墙映射。</span><br><span class="line">  2、并发不是特别大情况有外网IP，可以开启防火墙服务。</span><br><span class="line">  3、大并发的情况，不能开iptables，影响性能，利用硬件防火墙提升架构安全。Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h3 id="包过滤防火墙"><a href="#包过滤防火墙" class="headerlink" title="包过滤防火墙"></a>包过滤防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、什么是包</span><br><span class="line">	在数据传输过程，并不是一次性传输完成的；而是将数据分成若干个数据包，一点一点的传输。</span><br><span class="line"></span><br><span class="line">2、 什么是包过滤防火墙</span><br><span class="line">	过滤数据包的防火墙。</span><br><span class="line"></span><br><span class="line">4、包过滤防火墙如何实现</span><br><span class="line">  通过系统安全框架，过滤数据包。</span><br><span class="line">  </span><br><span class="line">5、防火墙使用时名词概念理解  </span><br><span class="line">容器：装东西的器皿，docker容器技术，将镜像装在了一个系统中，这个系统就称为容器</span><br><span class="line">iptables称为一个容器---装着防火墙的表</span><br><span class="line">防火墙的表又是一个容器---装着防火墙的链</span><br><span class="line">防火墙的链也是一个容器---装着防火墙的规则</span><br><span class="line">iptables---表---链---规则</span><br><span class="line">  </span><br><span class="line">规则：防火墙一条一条安全策略</span><br><span class="line">防火墙匹配规则流程：</span><br><span class="line">  1. 防火墙是层层过滤的，实际是按照配置规则的顺序从上到下，从前到后进行过滤的。</span><br><span class="line">  2. 如果匹配上规则，即明确表示是阻止还是通过，数据包就不再向下匹配新的规则。</span><br><span class="line">  3. 如果规则中没有明确表明是阻止还是通过的，也就是没有匹配规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。</span><br><span class="line">  4. 防火墙的默认规则是所有规则执行完才执行的。Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h2 id="4表5链"><a href="#4表5链" class="headerlink" title="4表5链"></a>4表5链</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、四个表，有哪些作用</span><br><span class="line">   具备某种功能的集合叫做表。</span><br><span class="line"></span><br><span class="line">   filter：负责做过滤功能呢	  INPUT、OUTPUT、FORWARD</span><br><span class="line">   nat：	  网络地址转换	     PREROUTING、INPUT、OUTPUT、POSTROUTING</span><br><span class="line">   mangle：负责修改数据包内容  PREROUTING、INPUT、OUTPUT、POSTROUTING、FORWARD</span><br><span class="line">   raw：   负责数据包跟踪      PREROUTING、OUTPUT</span><br><span class="line"></span><br><span class="line">2、五条链，运行在那些地方</span><br><span class="line"></span><br><span class="line">   PREROUTING、INPUT、OUTPUT、FORWARD、POSTROUTING</span><br><span class="line"></span><br><span class="line">  1）PREROUTING: 主机外报文进入位置，允许的表mangle, nat（目标地址转换，把本机地址转换为真正的目标机地址，通常指响应报文）</span><br><span class="line">  2）INPUT：报文进入本机用户空间位置，允许的表filter, mangle</span><br><span class="line">  3）OUTPUT：报文从本机用户空间出去的位置，允许filter, mangle, nat</span><br><span class="line">  4）FOWARD：报文经过路由并且发觉不是本机决定转发但还不知道从哪个网卡出去，允许filter, mangle</span><br><span class="line">  5）POSTROUTING：报文经过路由被转发出去，允许mangle，nat（源地址转换，把原始地址转换为转发主机出口网卡地址）</span><br><span class="line"></span><br><span class="line">   流入本机：PREROUTING  --&gt;  INPUT  --&gt; PROCESS(进程)</span><br><span class="line">   流出本机：PROCESS(进程) --&gt;  OUTPUT --&gt; POSTROUTING</span><br><span class="line">   经过本机：PREROUTING  --&gt; FORWARD --&gt; POSTROUTING</span><br></pre></td></tr></table></figure>



<h4 id="流入本机"><a href="#流入本机" class="headerlink" title="流入本机"></a>流入本机</h4><ul>
<li>当外部的数据进入时通过网卡进入本机后，在网络层时会经过PREROUTING（主机外报文进入位置）链继续前进到达用户层之前会经过INPUT链。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据进入（通过网线）---&gt; 链接网卡设备 ---&gt; 网络接口层 ---&gt; netfilter ---&gt;</span><br><span class="line">在网络层时会经过PREROUTING（主机外报文进入的位置）链 ---&gt; TCP UDP协议 ---&gt;</span><br><span class="line">进入用户层之前（INPUT）---&gt; 到达用户层</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2615753-20211227000852784-704163914.png" alt="2615753-20211227000852784-704163914"></p>
<h4 id="流出本机"><a href="#流出本机" class="headerlink" title="流出本机"></a>流出本机</h4><ul>
<li>当用户从用户层发出数据之后，会先经过OUTPUT链，在经过了OUTPUT链到达Netfilter防火墙，在经过防火墙到达设备驱动之前，会经过POSTROUTING链，之后在发送出去。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户操作命令工具(iptables) --&gt; OUTPUT链 --&gt; ip_tables内核模块 --&gt;</span><br><span class="line">Netfilter(防火墙) --&gt; 网络层 --&gt; 网络接口层 --&gt; POSTROUTING链</span><br><span class="line">-- 设备驱动 --&gt; 网络传输出</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2615753-20211227002046380-1487109655.png" alt="2615753-20211227002046380-1487109655"></p>
<h4 id="经过本机"><a href="#经过本机" class="headerlink" title="经过本机"></a>经过本机</h4><ul>
<li>报文经过路由并且发觉目的并不是本机,在经过PREROUTING链进入本机发现最终目的并不是本机时被转到FORWORD链后经过POSTROUING链转发出去。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据进入 --&gt; PREROUTING --&gt; FORWARD --&gt; POSTROUTING --&gt; 出去</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2615753-20211227002203426-1208905019-20211230171628792.png" alt="2615753-20211227002203426-1208905019"></p>
<h2 id="Iptables流程图"><a href="#Iptables流程图" class="headerlink" title="Iptables流程图"></a>Iptables流程图</h2><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/1.jpeg" alt="1"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">流入本机： A  ---&gt;  PREROUTING  ---&gt;  INPUT ---&gt; B</span><br><span class="line">流出本机：OUTPUT  ---&gt;  POSTROUTING  ---&gt; B</span><br><span class="line">经过本机： A ---&gt; OUTPUT ---&gt; POSTROUTING | ---&gt; PREROUTING ---&gt; FORWARD  ---&gt; POSTROUTING ---&gt; C ---&gt; PREROUTING  ---&gt; INPUT ---&gt; B</span><br><span class="line"></span><br><span class="line">filter :  INPUT 、FORWARD、 OUTPUT </span><br><span class="line">nat : PREROUTING 、 INPUT、 OUTPUT、 POSTROUTING</span><br><span class="line">raw : PREROUTING、 OUTPUT</span><br><span class="line">mangle : PREROUTING INPUT FORWARD OUTPUT POSTROUTING</span><br></pre></td></tr></table></figure>







<h2 id="Iptables的使用"><a href="#Iptables的使用" class="headerlink" title="Iptables的使用"></a>Iptables的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装Iptables</span><br><span class="line">	[root@m01 ~]<span class="comment"># yum install iptables*</span></span><br><span class="line"></span><br><span class="line">2、启动Iptables</span><br><span class="line">	[root@m01 ~]<span class="comment"># systemctl start iptables</span></span><br><span class="line"></span><br><span class="line">3、关闭firewalld</span><br><span class="line">	[root@m01 ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式：iptables -t 表名 选项 链名称 条件  动作</span><br><span class="line"></span><br><span class="line">-t            <span class="comment">#指定操作的表</span></span><br><span class="line">-L, --list    <span class="comment">#以列表形式显示当前的规则</span></span><br><span class="line">-v            <span class="comment">#显示数据包和数据包大小</span></span><br><span class="line">-n            <span class="comment">#不反解地址</span></span><br><span class="line">-A, --append  <span class="comment">#追加一条规则到指定链中</span></span><br><span class="line">-I, --insert  <span class="comment">#插入一条规则，插入到顶部</span></span><br><span class="line">-F, --flush   <span class="comment">#清除防火墙默认规则</span></span><br><span class="line">-Z, --zero    <span class="comment">#清空计数器（包数量 、包大小）</span></span><br><span class="line">-D, --delete  <span class="comment">#删除链中的规则</span></span><br><span class="line">-R, --replace <span class="comment">#修改</span></span><br><span class="line">-S, --list-rules   <span class="comment">#列出所有的规则</span></span><br><span class="line">-N, --new-chain    <span class="comment">#创建一个自定义 链</span></span><br><span class="line">-X, --delete-chain <span class="comment">#删除防火墙自定义链</span></span><br><span class="line">-P, --policy       <span class="comment">#指定链的默认策略  </span></span><br></pre></td></tr></table></figure>

<h4 id="iptables动作"><a href="#iptables动作" class="headerlink" title="iptables动作"></a>iptables动作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCEPT   <span class="comment">#将数据包放行，进行完此处理动作后，将不再比对其它规则，直接跳往下一个规则链。</span></span><br><span class="line">REJECT   <span class="comment">#拦阻该数据包，并传送数据包通知对方。</span></span><br><span class="line">DROP     <span class="comment">#丢弃包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</span></span><br><span class="line">REDIRECT <span class="comment">#将包重新导向到另一个端口，进行完此处理动作后，将会继续比对其它规则。</span></span><br></pre></td></tr></table></figure>

<h4 id="Iptables基本的条件匹配"><a href="#Iptables基本的条件匹配" class="headerlink" title="Iptables基本的条件匹配"></a>Iptables基本的条件匹配</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TCP(http)</span><br><span class="line">UDP</span><br><span class="line">ICMP(ping)</span><br><span class="line">ALL</span><br></pre></td></tr></table></figure>

<h4 id="s、-d-源地址、目标地址"><a href="#s、-d-源地址、目标地址" class="headerlink" title="-s、-d  源地址、目标地址"></a>-s、-d  源地址、目标地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-s  <span class="comment">#源地址：发送请求的地址（指定匹配的源地址网段信息，或者匹配的主机信息）</span></span><br><span class="line"></span><br><span class="line">-d  <span class="comment">#目标地址：访问的地址（指定匹配的目标地址网段信息，或者匹配的主机信息）</span></span><br></pre></td></tr></table></figure>

<h4 id="–sport源端口、–dport-目标端口"><a href="#–sport源端口、–dport-目标端口" class="headerlink" title="–sport源端口、–dport 目标端口"></a>–sport源端口、–dport 目标端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--sport  <span class="comment">#源端口：发送请求的端口（表示指定源端口号信息）</span></span><br><span class="line"></span><br><span class="line">--dport  <span class="comment">#目标端口：访问的端口（表示指定目标端口信息）</span></span><br></pre></td></tr></table></figure>

<h4 id="i、-o、-m、-j-动作"><a href="#i、-o、-m、-j-动作" class="headerlink" title="-i、-o、-m、-j  动作"></a>-i、-o、-m、-j  动作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i  <span class="comment">#进来的网卡（指定匹配的进入流量接口信息 只能配置在INPUT链上）</span></span><br><span class="line">-o  <span class="comment">#出去的网卡（指定匹配的发出流量接口信息 只能配置在OUTPUT链上）</span></span><br><span class="line">-m  <span class="comment">#指定应用扩展模块参数</span></span><br><span class="line">-p  <span class="comment">#指定相应服务协议信息（tcp udp icmp all）</span></span><br><span class="line">-j  <span class="comment">#转发动作，指定对相应匹配规则执行什么操作（ACCEPT DROP REJECT REDIRECT）</span></span><br><span class="line">    ACCEPT 允许通过</span><br><span class="line">    DROP 直接拒绝 </span><br><span class="line">    REJECT 委婉拒绝</span><br><span class="line">    REDIRECT 重定向</span><br><span class="line">    MASQUERADE 地址伪装</span><br><span class="line">    SNAT 如果内网主机访问外网而经过路由时，源IP会发生改变，这种变更行为就是SNAT</span><br><span class="line">    DNAT 当外网的数据经过路由发往内网主机时，数据包中的目的IP (路由器上的公网IP) 将修改为内网IP，这种变更行为就是DNAT</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例1：只允许22端口可以访问，其他端口全部无法访问。 </span><br><span class="line">iptables -t filter -A INPUT -p TCP --dport 22  -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">案例2：只允许22，80，443端口可以访问，其他端口全部无法访问。 </span><br><span class="line">iptables -t filter -A INPUT -p TCP --dport 22  -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP --dport 80  -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP --dport 443  -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">案例3：只允许22，80，443端口可以访问，其他端口全部无法访问，但是本机可以访问百度。 </span><br><span class="line"></span><br><span class="line">案例4：要求使用192.168.15.81能够通过22端口链接，但是其他的不行</span><br><span class="line">iptables -t filter -A INPUT -p TCP -d 192.168.15.81 --dport 22  -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">案例5：只允许192.168.15.71能够通过22端口链接，其他的不行。</span><br><span class="line">iptables -t filter -A INPUT -p  TCP -s 192.168.15.71  -d 192.168.15.81 --dport 22 -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">案例6：要求192.168.15.71对外部不可见</span><br><span class="line">iptables -t filter -A INPUT -p TCP -d 192.168.15.71 -j DROP</span><br><span class="line"></span><br><span class="line">案例7：要求使用eth0网卡的所有请求全部拒绝</span><br><span class="line">iptables -t filter -A INPUT -p TCP -i etho -j DROP</span><br><span class="line"></span><br><span class="line">使用172.16.1.71登录进来的窗口，不允许访问百度。</span><br><span class="line">iptables -t filter -I OUTPUT -p TCP -o eth1 -j DROP</span><br><span class="line"></span><br><span class="line">案例8：要求访问服务器的8080端口转发至80端口</span><br><span class="line">iptables -t nat -A PREROUTING -p TCP --dport 8080 -j REDIRECT --to-port 80</span><br><span class="line"></span><br><span class="line">案例9：要求只允许windows通过ssh连接192.168.15.81，其他的拒绝</span><br><span class="line">iptables -t filter -I INPUT -p TCP -s 192.168.15.1 -d 192.168.15.81 --dport 22 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT -p TCP --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">	查看本机端口占用的命令：	</span><br><span class="line">		netstat -nutlp</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">拓展iptables的功能的。</span><br><span class="line"></span><br><span class="line">-m : 指定模块</span><br><span class="line"></span><br><span class="line">1、连续匹配多个端口（multiport）</span><br><span class="line"></span><br><span class="line">	--dports  : 指定多个端口(不同端口之间以逗号分割，连续的端口使用冒号分割)。</span><br><span class="line">	</span><br><span class="line">2、指定一段连续的ip地址范围(iprange)</span><br><span class="line">    --src-range from[-to]:	源地址范围</span><br><span class="line">    --dst-range from[-to]	目标地址范围</span><br><span class="line"></span><br><span class="line">3、匹配指定字符串(string)</span><br><span class="line">    --string pattern	<span class="comment"># 指定要匹配的字符串</span></span><br><span class="line">    --algo &#123;bm|kmp&#125;		<span class="comment"># 匹配的查询算法</span></span><br><span class="line">    </span><br><span class="line">4、根据时间段匹配报文(time)</span><br><span class="line">    --timestart hh:mm[:ss]		<span class="comment"># 开始时间</span></span><br><span class="line">    --timestop hh:mm[:ss]		<span class="comment"># 结束时间</span></span><br><span class="line">    --monthdays day[,day...]	<span class="comment"># 指定一个月的某一天</span></span><br><span class="line">    --weekdays day[,day...]		<span class="comment"># 指定周 还是  周天 </span></span><br><span class="line"></span><br><span class="line">5、禁ping, 默认本机无法ping别人 、别人无法ping自己</span><br><span class="line">	--icmp-type &#123;<span class="built_in">type</span>[/code]|typename&#125;</span><br><span class="line">		echo-request  (8) 请求 </span><br><span class="line">		echo-reply    (0) 回应</span><br><span class="line"></span><br><span class="line">6、限制链接数，并发连接数（connlimit）</span><br><span class="line">    --connlimit-upto n		<span class="comment">#  如果现有连接数小于或等于  n  则 匹配</span></span><br><span class="line">    --connlimit-above n		<span class="comment">#  如果现有连接数大于n 则匹配</span></span><br><span class="line"></span><br><span class="line">7、针对 报文速率 进行限制。 秒、分钟、小时、天。</span><br><span class="line"></span><br><span class="line">	--<span class="built_in">limit</span> rate[/second|/minute|/hour|/day] <span class="comment"># 报文数量 </span></span><br><span class="line">     --limit-burst number  <span class="comment"># 报文数量（默认：5）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、要求将22,80,443以及30000-50000之间所有的端口向外暴露，其他端口拒绝</span><br><span class="line"></span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m multiport --dports 22,80,443,30000:50000 -j ACCEPT</span><br><span class="line">	iptables -f filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">2、要求访问数据包中包含HelloWorld的数据不允许通过。</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m string --string <span class="string">&quot;HelloWorld&quot;</span> --algo kmp -j DROP</span><br><span class="line"></span><br><span class="line">3、要求192.168.15.1 - 192.168.15.10之间的所有IP能够连接192.168.15.81，其他拒绝</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m iprange --src-range 192.168.15.1-192.168.15.10 -j ACCEPT </span><br><span class="line">	iptables -f filter -A INPUT -p TCP -j DROP</span><br><span class="line"></span><br><span class="line">4、要求每天的12到13之间，不允许访问</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m time  --timestart 4:00   --timestop 5:00 -j DROP</span><br><span class="line">	</span><br><span class="line">	必须使用UTC时间</span><br><span class="line"></span><br><span class="line">5、要求别人不能ping本机，但是本机可以ping别人</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m icmp --icmp-type <span class="string">&quot;echo-request&quot;</span> -j DROP</span><br><span class="line">	</span><br><span class="line">6、要求主机连接最多有2个</span><br><span class="line">	iptables -t filter -A INPUT -p TCP --dport 22 -m connlimit --connlimit-above 2 -j DROP</span><br><span class="line">	</span><br><span class="line">7、要求限制速率在500k/s左右</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -m <span class="built_in">limit</span> 333/s -j ACCEPT</span><br><span class="line">	iptables -t filter -A INPUT -p TCP -j DROP</span><br><span class="line">	</span><br><span class="line">8、只允许windows连接本机的iptables规则</span><br><span class="line">iptables -t filter -A INPUT -p tcp -s 192.168.15.1 --dport 22 -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line">9、只允许192.168.15.0网段的IP连接本机，用两种方式实现。</span><br><span class="line">iptables -t filter -A INPUT -p tcp -m iprange  --src-range 192.168.15.1-192.168.15.254 -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line">iptables -t filter -A INPUT -p tcp -i eth0 --dport 22 -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line">10、要求本机流出的数据中包含“元旦快乐”</span><br><span class="line">iptables -t filter -A OUTPUT -p tcp --dport 80 -m string  --string <span class="string">&quot;元旦快乐&quot;</span> --algo kmp -j ACCEPT</span><br><span class="line">iptables -t filter -A OUTPUT -p tcp --dport 80 -j DROP</span><br><span class="line"></span><br><span class="line">11、要求每天的九点到17点之间可以正常访问</span><br><span class="line">iptables -t filetr -A INPUT -p tcp -m time  --timestart 1:00 --timestop 9:00 -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p tcp -j DROP</span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN搭建使用</title>
    <url>/7efc43b.html</url>
    <content><![CDATA[<h1 id="虚拟专用网络"><a href="#虚拟专用网络" class="headerlink" title="虚拟专用网络"></a>虚拟专用网络</h1><p>VPN(全称：Virtual Private Network)虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信的网络技术，可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。在VPN中任意两点之间的链接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术，所谓虚拟是指不需要去拉实际的长途物理线路，而是借用了公共Internet网络实现的。</p>
<span id="more"></span>
<h2 id="VPN的作用"><a href="#VPN的作用" class="headerlink" title="VPN的作用"></a>VPN的作用</h2><p>VPN的功能是帮助公司里的远程用户（出差，在家）、公司的分支机构、商业合作伙伴及供应商等公司和自己的公司内部网络之间建立可信的安全连接或者是局域网连接，确保数据的加密安全传输和业务访问，对于运维工程师来说，还可以连接不同的机房为局域网来处理相关事宜。</p>
<h2 id="VPN的分类"><a href="#VPN的分类" class="headerlink" title="VPN的分类"></a>VPN的分类</h2><ul>
<li>根据常用的使用场景来分类。</li>
</ul>
<h4 id="远程访问VPN服务"><a href="#远程访问VPN服务" class="headerlink" title="远程访问VPN服务"></a>远程访问VPN服务</h4><ul>
<li><p>通过个人电脑远程拨号到企业办公网络。</p>
<p>1、一般为企业内部员工出差、休假或特殊情况下载原理办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通过VPN拨号到公司内部。此时远程拨号的员工和办公室内的员工以及其他拨号的员工之间都相当于在一个局域网内。例如：访问内部的域控、文件服务器、OA系统等局域网应用。</p>
<p>2、对于运维人员来说就是需要个人电脑远程拨号到企业网站的服务器机房，远程维护机房中的（无外网IP的）服务器。</p>
<p>这种形式的VPN一般在运维人员在工作中会经常遇到。</p>
</li>
</ul>
<h4 id="企业内部网络互联"><a href="#企业内部网络互联" class="headerlink" title="企业内部网络互联"></a>企业内部网络互联</h4><ul>
<li>一般是建立一个网络隧道，多个机房之间互联。</li>
</ul>
<p>在公司的分支机构的局域网和公司总部LAN之间的VPN链接。通过公网Internet建立VPN将公司在各地的分支机构的LAN链接到公司总部的LAN。例如：各大银行之间的资金结算业务。</p>
<p>这是由于各个地域的原因产生的VPN的需求，通过VPN让不同地域的机器可以实现内网互联。例如远程协同办公，机房互联数据同步及业务访问。</p>
<h4 id="互联网各地域机房之间的互联"><a href="#互联网各地域机房之间的互联" class="headerlink" title="互联网各地域机房之间的互联"></a>互联网各地域机房之间的互联</h4><ul>
<li>主要是用于不同机房之间的内网互通。</li>
</ul>
<h4 id="企业外部的VPN服务"><a href="#企业外部的VPN服务" class="headerlink" title="企业外部的VPN服务"></a>企业外部的VPN服务</h4><ul>
<li>主要是提供给合作伙伴共享企业内网数据的VPN服务。</li>
</ul>
<h2 id="常见的隧道协议"><a href="#常见的隧道协议" class="headerlink" title="常见的隧道协议"></a>常见的隧道协议</h2><ul>
<li>这里列举常见的隧道协议</li>
</ul>
<h4 id="PPTP"><a href="#PPTP" class="headerlink" title="PPTP"></a>PPTP</h4><p>点对点协议（PPTP）是由包括微软和3Com等公司组成的PPTP论坛开发的一种点对点隧道协议，基于拨号使用的PPP协议，使用PAP或CHAP之类的加密算法，或者使用Microsoft的点对点加密算法MPPE。其通过跨越基于TCP/IP的数据网络创建VPN实现了从远程客户端到专用企业服务器之间数据的安全传输。PPTP支持通过公共网络建立按需的、多协议的、虚拟专用网络。PPTP允许加密IP通讯，然后在跨域公司IP网络或公共IP网络发送的IP头中对其进行封装。典型的Linux平台的开源软件为PPTP。PPTP属于点对点应用，比较合适远程的企业用户拨号到企业进行办公等应用。</p>
<h4 id="L2TP"><a href="#L2TP" class="headerlink" title="L2TP"></a>L2TP</h4><p>L2TP第2等隧道协议（L2TP）是IETF基于L2F（Cisco的第二层转发协议）开的的PPTP的后续版本。是一种工业标准Internet隧道协议，其可以为跨越面向数据包的媒体发送点到点的协议（PPP）框架提供封装。PPTP和L2TP都使用PPP协议对数据进行封装，然后添加附加爆头用于数据在互联网上传输。PPTP只能在两端点间建立单一隧道。L2TP支持在两端点间使用多隧道，用户可以针对不同的服务质量创建不同隧道。L2TP可以提供隧道验证，而PPTP则不支持隧道验证。但是当L2TP或PPTP与IPSEC共同使用时，可以由IPSEC提供隧道验证，不需要在第二层协议上验证隧道使用L2TP。PPTP要求互联网络为IP网络。L2TP只要求隧道媒介提供面向数据包的点对点的链接，L2TP可以在IP（使用UDP），祯中继续永久虚拟电路（PVCs）,X.25虚拟电路（VCs）或ATM VCS网络上使用。</p>
<h4 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h4><p>IP安全协议实际上是一套协议包而不是一个单独的协议。从1995年开始IPSec的研究以来，IETF IPSec工作组在它的主页上发布了几十个Internet草案文献和12个RFC文件。其中比较重要的有RFC2409IKE（互联网秘钥交换）、RFC2401 IPSec协议、RFC2402AH验证包头、RFC2406ESP加密数据等文件。</p>
<p>IPSec隧道模式隧道是封装、路由与解封的整个过程。隧道将原始数据包隐藏（或封装）在新的数据包内部。该新的数据包可能会有新的寻址与路由信息，从而使其能够通过网络传输。隧道与数据保密性结合使用时，在网络上窃听通讯的人将无法获取原始数据包数据（以及原始的源和目标）。封装的数据包到达目的地后，会删除封装，原始数据包头用于将数据包路由到最终目的地。</p>
<p>隧道本身是封装数据经过的逻辑数据路径，对原始的源和目的的端，隧道是不可见的，而只能看到网络路径中的点对点连接。将隧道和数据保密性结合使用时，可用于提供VPN。</p>
<p>封装的数据包在网络中的隧道内部传输。再次示例中，该网络是Internet。网关可以是外部Internet与专用网络之间的周边网关。周界网关可以是路由器、防火墙、代理服务器或其他安全网关。另外，在专用网络内部可以使用两个网关来保护网络中不信任的通讯。</p>
<p>当以隧道模式使用IPSEC时，其只为IP通讯提供封装。使用IPSec隧道模式主要是为了与其他不支持IPSec上的L2TP或PPTP VPN隧道技术的路由器、网关或终端系统之间的相互操作。</p>
<h4 id="SSL-VPN"><a href="#SSL-VPN" class="headerlink" title="SSL VPN"></a>SSL VPN</h4><p>SSL协议提供了数据私密性、端点验证、信息完整性等特性。SSL协议由许多子协议组成，其中两个主要的子协议是握手协议和记录协议。握手协议允许服务器和客户端在应用协议传输第一个数据字节以前，彼此确认，协商一种加密算法和密码钥匙。在数据传输期间，记录协议利用握手协议生成的秘钥加密和解密后来交换的数据。</p>
<p>SSL独立应用，因此任何一个应用程序都可以享受它的安全性而不必理会执行细节。SSL置身于网络结构体系的传输层和应用层之间。此外，SSL本身就被几乎所有的WEB浏览器支持。这意味着客户端不需要为了支持SSL链接安装额外的软件。这两个特征就是SSL能应用于VPN的关键点。</p>
<p>典型的SSL VPN应用：Open VPN，这是一个比较好的开源软件。Open VPN允许参与建立VPN的单点使用预设的私钥，第三方证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库，以及SSLv3/TLSv1协议。OpenVPN能在Linux、xBSD、MacOS 上运行。它并不是一个基于Web的VPN软件，也不能与IPSec及其他VPN软件包兼容。</p>
<h2 id="常见的VPN软件"><a href="#常见的VPN软件" class="headerlink" title="常见的VPN软件"></a>常见的VPN软件</h2><h4 id="PPTP-VPN"><a href="#PPTP-VPN" class="headerlink" title="PPTP VPN"></a>PPTP VPN</h4><p>使用PPTP VPN的最大优势在于，无需在Windows客户端独立安装客户端软件，Windows默认就知道PPTP VPN拨号连接功能。另外，PPTP VPN属于点对点方式的应用，比较适合远程的企业用户拨号到企业进行办公等应用。</p>
<h4 id="SSL-VPN-1"><a href="#SSL-VPN-1" class="headerlink" title="SSL VPN"></a>SSL VPN</h4><p>PPTP主要为那些经常外出移动办公或家庭办公的用户考虑，而OpenVPN不但使用于PPTP的应用场景，还适合针对企业异地两地总分公司之间的VPN不间断按需链接，例如：OA，及时通讯工具等在企业中的应用。</p>
<h4 id="IPSec-VPN"><a href="#IPSec-VPN" class="headerlink" title="IPSec VPN"></a>IPSec VPN</h4><p>IPSecVPN也适用针对企业异地办公或多个IDC机房之间VPN不间断按需链接，并且在部署使用上更简单方便。</p>
<h1 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h1><h2 id="OpenVPN介绍"><a href="#OpenVPN介绍" class="headerlink" title="OpenVPN介绍"></a>OpenVPN介绍</h2><p>专用网：专用网就是在两个网络（例如，北京和广州）之间架设一条专用线路，但是它并不需要真正地去铺设光缆之类的物理线路。虽然没有亲自去铺设，但是需要向电信运营商申请租用专线，在这条专用的线路上只传输自己的信息,所以安全稳定,同时也费用高昂</p>
<p>在众多的VPN产品中，OpenVPN无疑是Linux下开源VPN的经典产品，他提供了良好的访问性能和友好的用户GUI。</p>
<p>Open VPN是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。一个实现VPN的开源软件，OpenVPN 是一个健壮的、高度灵活的 VPN 守护进程。它支持SSL/TLS 安全、Ethernet bridging、经由代理的 TCP 或 UDP 隧道和 NAT。另外，它也支持动态 IP 地址以及DHCP，可伸缩性足以支持数百或数千用户的使用场景，同时可移植至大多数主流操作系统平台上。</p>
<p>官网：<a href="https://openvpn.net/">https://openvpn.net</a></p>
<p>GitHub地址：<a href="https://github.com/OpenVPN/openvpn">https://github.com/OpenVPN/openvpn</a></p>
<h4 id="OpenVPN依赖的SSL与TLS协议介绍"><a href="#OpenVPN依赖的SSL与TLS协议介绍" class="headerlink" title="OpenVPN依赖的SSL与TLS协议介绍"></a>OpenVPN依赖的SSL与TLS协议介绍</h4><p>众所周知，真正的通信实际上是两台主机之间的进程在交换数据，而运输层作为整个网络最关键的从层次之一，扮演沿着向上层（应用层）提供通信服务的角色。想要剖析运输层的数据安全传输策略就一定无法绕开三个至关重要的协议，它们分别是HTTPS协议、SSL协议、TSL协议。SSL（Secure Sockets Layer）协议既安全套接字层协议，TLS（Transport Layer Security）协议即<code>安全传输层协议</code>。</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/dasdasdas.jpg"></p>
<h2 id="部署OpenVPN"><a href="#部署OpenVPN" class="headerlink" title="部署OpenVPN"></a>部署OpenVPN</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenVPN 分为客户端和服务端</span><br></pre></td></tr></table></figure>

<h3 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h3><table>
<thead>
<tr>
<th>公网IP</th>
<th>内网IP</th>
<th>主机名</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.15.110</td>
<td>172.16.1.0</td>
<td>openvpn</td>
</tr>
</tbody></table>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="1、安装OpenVPN和证书工具，准备相关配置文件"><a href="#1、安装OpenVPN和证书工具，准备相关配置文件" class="headerlink" title="1、安装OpenVPN和证书工具，准备相关配置文件"></a>1、安装OpenVPN和证书工具，准备相关配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装openvpn和证书工具</span></span><br><span class="line">[root@m01 ~]<span class="comment"># yum -y install openvpn easy-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务器配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /usr/share/doc/openvpn-2.4.11/sample/sample-config-files/server.conf /etc/openvpn/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备证书签发相关文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备签发证书相关变量的配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /usr/share/doc/easy-rsa-3.0.8/vars.example /etc/openvpn/easy-rsa-server/3/vars</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议修改给CA和OpenVPN服务器颁发的证书的有效期,可适当加长（可忽略）</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/openvpn/easy-rsa-server/3/vars</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CA的证书有效期默为为10年,可以适当延长,比如:36500天</span></span><br><span class="line"><span class="comment">#set_var EASYRSA_CA_EXPIRE     3650</span></span><br><span class="line">set_var EASYRSA_CA_EXPIRE      36500</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务器证书默为为825天,可适当加长,比如:3650天</span></span><br><span class="line"><span class="comment">#set_var EASYRSA_CERT_EXPIRE   825 </span></span><br><span class="line"><span class="comment">#将上面行修改为下面</span></span><br><span class="line">set_var EASYRSA_CERT_EXPIRE    3650</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置文件目录结构</span></span><br><span class="line">[root@m01 ~]<span class="comment"># tree /etc/openvpn/</span></span><br><span class="line">/etc/openvpn/</span><br><span class="line">├── client</span><br><span class="line">├── easy-rsa-server</span><br><span class="line">│   ├── 3 -&gt; 3.0.8</span><br><span class="line">│   ├── 3.0 -&gt; 3.0.8</span><br><span class="line">│   └── 3.0.8</span><br><span class="line">│       ├── easyrsa</span><br><span class="line">│       ├── openssl-easyrsa.cnf</span><br><span class="line">│       ├── vars</span><br><span class="line">│       └── x509-types</span><br><span class="line">│           ├── ca</span><br><span class="line">│           ├── client</span><br><span class="line">│           ├── code-signing</span><br><span class="line">│           ├── COMMON</span><br><span class="line">│           ├── email</span><br><span class="line">│           ├── kdc</span><br><span class="line">│           ├── server</span><br><span class="line">│           └── serverClient</span><br><span class="line">├── server</span><br><span class="line">└── server.conf</span><br><span class="line"></span><br><span class="line">7 directories, 12 files</span><br></pre></td></tr></table></figure>

<h4 id="2、初始化PKI和CA签发机构环境"><a href="#2、初始化PKI和CA签发机构环境" class="headerlink" title="2、初始化PKI和CA签发机构环境"></a>2、初始化PKI和CA签发机构环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化PKI生成PKI相关目录和文件</span></span><br><span class="line">[root@m01 3]<span class="comment"># cd /etc/openvpn/easy-rsa-server/3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据,在当前目录下生成pki目录及相关文件</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa init-pki</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建CA机构必须在该目录下</span></span><br><span class="line">[root@m01 3]<span class="comment"># pwd</span></span><br><span class="line">/etc/openvpn/easy-rsa-server/3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建CA机构,回车</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa build-ca nopass </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证CA证书</span></span><br><span class="line">[root@m01 3]<span class="comment"># openssl x509 -in pki/ca.crt -noout -text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务端证书申请</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa gen-req server nopass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 签发证书，输入yes回车</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa sign server server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证证书，删除 BF97ECFB46EFB13E5A684AEF07DE4CD8.pem 该内容按tab键进行验证</span></span><br><span class="line">[root@m01 3]<span class="comment"># diff pki/certs_by_serial/BF97ECFB46EFB13E5A684AEF07DE4CD8.pem  pki/issued/server.crt</span></span><br><span class="line"><span class="comment"># 没有结果则为验证成功</span></span><br></pre></td></tr></table></figure>

<h4 id="3、创建-Diffie-Hellman-密钥"><a href="#3、创建-Diffie-Hellman-密钥" class="headerlink" title="3、创建 Diffie-Hellman 密钥"></a>3、创建 Diffie-Hellman 密钥</h4><p>Diffie-Hellman 密钥交换方法，由惠特菲尔德·迪菲（Bailey Whitfield Diffie）、马丁·赫尔曼（Martin Edward Hellman）于1976年发表。它是一种安全协议，让双方在完全没有对方任何预先信息的条件下通过不安全信道建立起一个密钥，这个密钥一般作为“对称加密”的密钥而被双方在后续数据传输中使用。DH数学原理是base离散对数问题。做类似功能的还有非对称加密类算法，如：RSA。其应用非常广泛，在SSH、VPN、Https等都有应用。</p>
<p>wiki参考链接: <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line"> [root@m01 3]<span class="comment"># ./easyrsa gen-dh</span></span><br><span class="line"> <span class="comment">#查看生成的文件</span></span><br><span class="line"> [root@m01 3]<span class="comment"># ll pki/dh.pem</span></span><br><span class="line"> [root@m01 3]<span class="comment"># cat pki/dh.pem</span></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"> [root@m01 3]<span class="comment"># openssl dhparam -out /etc/openvpn/dh2048.pem 2048</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="1、客户端证书环境"><a href="#1、客户端证书环境" class="headerlink" title="1、客户端证书环境"></a>1、客户端证书环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m01 3]<span class="comment"># cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-client</span></span><br><span class="line">[root@m01 3]<span class="comment"># cp /usr/share/doc/easy-rsa-3.0.8/vars.example /etc/openvpn/easy-rsa-client/3/vars</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到客户端目录</span></span><br><span class="line">[root@m01 3]<span class="comment"># cd /etc/openvpn/easy-rsa-client/3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化证书目录</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa init-pki</span></span><br><span class="line"></span><br><span class="line">[root@m01 3]<span class="comment"># pwd</span></span><br><span class="line">/etc/openvpn/easy-rsa-client/3</span><br><span class="line">[root@m01 3]<span class="comment"># ls</span></span><br><span class="line">easyrsa  openssl-easyrsa.cnf  varsa  x509-types</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成客户端证书，回车</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa gen-req gengfeng nopass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将客户端证书请求文件复制到CA的工作目录</span></span><br><span class="line">[root@m01 3]<span class="comment"># cd /etc/openvpn/easy-rsa-server/3</span></span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa import-req /etc/openvpn/easy-rsa-client/3/pki/reqs/gengfeng.req gengfeng</span></span><br><span class="line"><span class="comment"># 签发客户端证书，yes</span></span><br><span class="line">[root@m01 3]<span class="comment"># pwd</span></span><br><span class="line"> /etc/openvpn/easy-rsa-server/3</span><br><span class="line">[root@m01 3]<span class="comment"># ./easyrsa sign client gengfeng </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证，对比一下</span></span><br><span class="line">[root@m01 3]<span class="comment"># cat pki/index.txt</span></span><br><span class="line"> V 240401022739Z  ADBFFB9F45E5CEF861E7F642BA6C447E  unknown /CN=server</span><br><span class="line"> V 240401023724Z  47765AD8225E12A13FB1EEBAC769B999  unknown /CN=gengfeng</span><br><span class="line"><span class="comment"># 查看是否和上面一致</span></span><br><span class="line">[root@m01 3]<span class="comment"># ll pki/certs_by_serial/</span></span><br><span class="line">total 16</span><br><span class="line"> -rw------- 1 root root 4438 Dec 28 10:37 47765AD8225E12A13FB1EEBAC769B999.pem</span><br><span class="line"> -rw------- 1 root root 4552 Dec 28 10:27 ADBFFB9F45E5CEF861E7F642BA6C447E.pem</span><br></pre></td></tr></table></figure>

<h4 id="2、创建链接配置文件"><a href="#2、创建链接配置文件" class="headerlink" title="2、创建链接配置文件"></a>2、创建链接配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、修改openvpn配置文件</span><br><span class="line">[root@m01 3]<span class="comment"># &gt;/etc/openvpn/server.conf  #清空文件</span></span><br><span class="line">[root@m01 3]<span class="comment"># vim /etc/openvpn/server.conf</span></span><br><span class="line"></span><br><span class="line">cat &gt; /etc/openvpn/server.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 1194</span></span><br><span class="line"><span class="string">proto tcp</span></span><br><span class="line"><span class="string">dev tun</span></span><br><span class="line"><span class="string">ca  /etc/openvpn/certs/ca.crt</span></span><br><span class="line"><span class="string">cert  /etc/openvpn/certs/server.crt</span></span><br><span class="line"><span class="string">key  /etc/openvpn/certs/server.key</span></span><br><span class="line"><span class="string">dh  /etc/openvpn/certs/dh.pem</span></span><br><span class="line"><span class="string">server 10.8.0.0 255.255.255.0</span></span><br><span class="line"><span class="string">push &quot;route 172.16.1.0 255.255.255.0&quot;  #必须更改为自己的网卡地址</span></span><br><span class="line"><span class="string">keepalive 10 120</span></span><br><span class="line"><span class="string">cipher AES-256-CBC</span></span><br><span class="line"><span class="string">compress lz4-v2</span></span><br><span class="line"><span class="string">push &quot;compress lz4-v2&quot;</span></span><br><span class="line"><span class="string">max-clients 2048</span></span><br><span class="line"><span class="string">user openvpn</span></span><br><span class="line"><span class="string">group openvpn</span></span><br><span class="line"><span class="string">status  /var/log/openvpn/openvpn-status.log</span></span><br><span class="line"><span class="string">log-append   /var/log/openvpn/openvpn.log</span></span><br><span class="line"><span class="string">verb 3</span></span><br><span class="line"><span class="string">mute 20</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志文件目录</span></span><br><span class="line">[root@m01 3]<span class="comment"># mkdir -p /var/log/openvpn</span></span><br><span class="line"><span class="comment"># 创建权限</span></span><br><span class="line">[root@m01 ~]<span class="comment"># chown openvpn.openvpn /var/log/openvpn</span></span><br><span class="line"><span class="comment"># 创建存放证书目录</span></span><br><span class="line">[root@m01 ~]<span class="comment"># mkdir -p /etc/openvpn/certs</span></span><br><span class="line"><span class="comment"># 复制证书</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/dh.pem /etc/openvpn/certs/</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/certs/</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/private/server.key /etc/openvpn/certs/</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt /etc/openvpn/certs/</span></span><br><span class="line">[root@m01 ~]<span class="comment"># ll /etc/openvpn/certs/</span></span><br><span class="line">total 20</span><br><span class="line"> -rw------- 1 root root 1172 Dec 28 10:54 ca.crt</span><br><span class="line"> -rw------- 1 root root  424 Dec 28 10:54 dh.pem</span><br><span class="line"> -rw------- 1 root root 4552 Dec 28 10:54 server.crt</span><br><span class="line"> -rw------- 1 root root 1704 Dec 28 10:54 server.key</span><br><span class="line"></span><br><span class="line">2、启动OpenVPN</span><br><span class="line"><span class="comment"># 开启系统内核网络转发功能(该功能默认为关闭状态)</span></span><br><span class="line">[root@m01 ~]<span class="comment"># echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sysctl -p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装防火墙</span></span><br><span class="line">[root@m01 ~]<span class="comment"># yum install iptables-services -y</span></span><br><span class="line">[root@m01 ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line">[root@m01 ~]<span class="comment"># systemctl start iptables</span></span><br><span class="line">[root@m01 ~]<span class="comment"># iptables -F</span></span><br><span class="line">[root@m01 ~]<span class="comment"># iptables -F -t nat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加iptables规则</span></span><br><span class="line">[root@m01 ~]<span class="comment"># iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久保存Iptables规则</span></span><br><span class="line">[root@m01 ~]<span class="comment"># service iptables save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动OpenVPN</span></span><br><span class="line">[root@m01 ~]<span class="comment"># systemctl enable --now openvpn@server</span></span><br><span class="line"></span><br><span class="line">3、创建链接文件</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># mkdir -p /etc/openvpn/client/gengfeng/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备证书</span></span><br><span class="line">[root@m01 gengfeng]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/client/gengfeng/</span></span><br><span class="line">[root@m01 gengfeng]<span class="comment"># cp /etc/openvpn/easy-rsa-server/3/pki/issued/gengfeng.crt /etc/openvpn/client/gengfeng/</span></span><br><span class="line">[root@m01 gengfeng]<span class="comment"># cp /etc/openvpn/easy-rsa-client/3/pki/private/gengfeng.key /etc/openvpn/client/gengfeng/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备链接文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/openvpn/client/gengfeng/client.ovpn </span></span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp</span><br><span class="line">remote 192.168.15.110 1194</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">ca ca.crt</span><br><span class="line">cert gengfeng.crt</span><br><span class="line">key gengfeng.key</span><br><span class="line">remote-cert-tls server</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">verb 3</span><br><span class="line">compress lz4-v2</span><br></pre></td></tr></table></figure>

<h2 id="服务器端配置文件说明"><a href="#服务器端配置文件说明" class="headerlink" title="服务器端配置文件说明"></a>服务器端配置文件说明</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server.conf文件中以#或;开头的行都为注释</span></span><br><span class="line">[root@instance-gvpb80ao ~]<span class="comment"># grep -Ev &quot;^#|^$&quot; /etc/openvpn/server.conf</span></span><br><span class="line">;<span class="built_in">local</span> a.b.c.d  <span class="comment">#本机监听IP,默认为本机所有IP</span></span><br><span class="line">port 1194   <span class="comment">#端口</span></span><br><span class="line">;proto tcp  <span class="comment">#协议,生产推荐使用TCP</span></span><br><span class="line">proto udp <span class="comment">#默认协议</span></span><br><span class="line">;dev tap  <span class="comment">#创建一个以太网隧道，以太网使用tap,一个tap设备允许完整的以太网帧通过Openvpn隧道，可提供非ip协议的支持，比如IPX协议和AppleTalk协议,tap等同于一个以太网设备，它操作第二层数据包如以太网数据帧。</span></span><br><span class="line">dev tun  <span class="comment">#创建一个路由IP隧道，生产推存使用tun.互联网使用tun,一个tun设备大多时候，被用于基于IP协议的通讯。tun模拟了网络层设备，操作第三层数据包比如IP数据封包。</span></span><br><span class="line">;dev-node MyTap  <span class="comment">#TAP-Win32适配器。非windows不需要配置</span></span><br><span class="line">ca ca.crt   <span class="comment">#ca证书文件</span></span><br><span class="line">cert server.crt  <span class="comment">#服务器证书文件</span></span><br><span class="line">key server.key  <span class="comment">#服务器私钥文件</span></span><br><span class="line">dh dh2048.pem   <span class="comment">#dh参数文件</span></span><br><span class="line">;topology subnet</span><br><span class="line">server 10.8.0.0 255.255.255.0 <span class="comment">#客户端连接后分配IP的地址池，服务器默认会占用第一个IP 10.8.0.1将做为客户端的网关</span></span><br><span class="line">ifconfig-pool-persist ipp.txt <span class="comment">#为客户端分配固定IP，不需要配置,建议注释</span></span><br><span class="line">;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100 <span class="comment">#配置网桥模式，不需要配置,建议注释</span></span><br><span class="line">;server-bridge</span><br><span class="line">;push <span class="string">&quot;route 192.168.10.0 255.255.255.0&quot;</span> <span class="comment">#给客户端生成的到达服务器后面网段的静态路由，下一跳为openvpn服务器的10.8.0.1</span></span><br><span class="line">;push <span class="string">&quot;route 192.168.20.0 255.255.255.0&quot;</span> <span class="comment">#推送路由信息到客户端，以允许客户端能够连接到服务器背后的其它私有子网</span></span><br><span class="line">;client-config-dir ccd <span class="comment">#为指定的客户端添加路由，此路由通常是客户端后面的内网网段而不是服务端的，也不需要设置</span></span><br><span class="line">;route 192.168.40.128 255.255.255.248 </span><br><span class="line">;client-config-dir ccd </span><br><span class="line">;route 10.9.0.0 255.255.255.252</span><br><span class="line">;learn-address ./script   <span class="comment">#运行外部脚本，创建不同组的iptables规则，无需配置</span></span><br><span class="line">;push <span class="string">&quot;redirect-gateway def1 bypass-dhcp&quot;</span> <span class="comment">#启用后，客户端所有流量都将通过VPN服务器，因此生产一般无需配置此项</span></span><br><span class="line">;push <span class="string">&quot;dhcp-option DNS 208.67.222.222&quot;</span> <span class="comment">#推送DNS服务器，不需要配置</span></span><br><span class="line">;push <span class="string">&quot;dhcp-option DNS 208.67.220.220&quot;</span></span><br><span class="line">;client-to-client  <span class="comment">#允许不同的client直接通信,不安全,生产环境一般无需要配置</span></span><br><span class="line">;duplicate-cn     <span class="comment">#多个用户共用一个证书，一般用于测试环境，生产环境都是一个用户一个证书,无需开启</span></span><br><span class="line">keepalive 10 120  <span class="comment">#设置服务端检测的间隔和超时时间，默认为每10秒ping一次，如果 120 秒没有回应则认为对方已经down</span></span><br><span class="line">tls-auth ta.key 0 <span class="comment">#访止DoS等攻击的安全增强配置,可以使用以下命令来生成：openvpn --</span></span><br><span class="line">genkey --secret ta.key <span class="comment">#服务器和每个客户端都需要拥有该密钥的一个拷贝。第二个参数在服务器端应该为’0’，在客户端应该为’1’</span></span><br><span class="line">cipher AES-256-CBC <span class="comment">#加密算法</span></span><br><span class="line">;compress lz4-v2  <span class="comment">#启用Openvpn2.4.X新版压缩算法</span></span><br><span class="line">;push <span class="string">&quot;compress lz4-v2&quot;</span> <span class="comment">#推送客户端使用新版压缩算法,和下面的comp-lzo不要同时使用</span></span><br><span class="line">;comp-lzo  <span class="comment">#旧户端兼容的压缩配置，需要客户端配置开启压缩,openvpn2.4.X等新版可以不用开启</span></span><br><span class="line">;max-clients 100  <span class="comment">#最大客户端数</span></span><br><span class="line">;user nobody  <span class="comment">#运行openvpn服务的用户和组</span></span><br><span class="line">;group nobody</span><br><span class="line">persist-key  <span class="comment">#重启VPN服务时默认会重新读取key文件，开启此配置后保留使用第一次的key文件,生产环境无需开启</span></span><br><span class="line">persist-tun  <span class="comment">#启用此配置后,当重启vpn服务时，一直保持tun或者tap设备是up的，否则会先down然后再up,生产环境无需开启</span></span><br><span class="line">status openvpn-status.log <span class="comment">#openVPN状态记录文件，每分钟会记录一次</span></span><br><span class="line">;<span class="built_in">log</span>  openvpn.log  <span class="comment">#第一种日志记录方式,并指定日志路径，log会在openvpn启动的时候清空日志文件,不建议使用</span></span><br><span class="line">;log-append openvpn.log <span class="comment">#第二种日志记录方式,并指定日志路径，重启openvpn后在之前的日志后面追加新的日志,生产环境建议使用</span></span><br><span class="line">verb 3   <span class="comment">#设置日志级别，0-9，级别越高记录的内容越详细,0 表示静默运行，只记录致命错误,4 表示合理的常规用法,5 和 6 可以帮助调试连接错误。9 表示极度冗余，输出非常详细的日志信息</span></span><br><span class="line">;mute 20  <span class="comment">#相同类别的信息只有前20条会输出到日志文件中</span></span><br><span class="line">explicit-exit-notify 1  <span class="comment">#通知客户端，在服务端重启后自动重新连接，仅能用于udp模式，tcp模式不需要配置即可实现断开重新连接,且开启此项后tcp配置后将导致openvpn服务无法启动,所以tcp时必须不能开启此项</span></span><br></pre></td></tr></table></figure>

<h2 id="mac连接OpenVPN"><a href="#mac连接OpenVPN" class="headerlink" title="mac连接OpenVPN"></a>mac连接OpenVPN</h2><p>安装OpenVPN软件包</p>
<p>Windows下载：OpenVPN <a href="https://openvpn.net/">https://openvpn.net</a></p>
<p>Mac下载：Tunnelblick <a href="https://tunnelblick.en.softonic.com/mac">https://tunnelblick.en.softonic.com/mac</a></p>
<p>打开FinalShell找到/etc/openvpn/client/目标文件夹</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211230150939829.png" alt="image-20211230150939829"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211230151130162.png" alt="image-20211230151130162"></p>
<p>必须将文件夹重新命名，以.tblk结尾，文件名字必须和之前的配置一样</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211230151403052.png" alt="image-20211230151403052"></p>
<p>最后打开Tunnelblick连接即可</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211230151730831.png" alt="image-20211230151730831"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211230151600943.png" alt="image-20211230151600943"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘挂载分区</title>
    <url>/f9ef965d.html</url>
    <content><![CDATA[<h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux系统中磁盘管理就是将硬盘通过挂载的方式挂载到linux文件系统中。</span><br><span class="line"></span><br><span class="line">1、挂载磁盘的步骤</span><br><span class="line">	1、磁盘分区</span><br><span class="line">	2、挂载</span><br><span class="line"></span><br><span class="line">2、磁盘分区</span><br><span class="line">	fdisk：分区2TB以下的磁盘，最多可以分4个分区</span><br><span class="line">	gdisk：分区2TB以上的磁盘，最多可以分128个分区</span><br><span class="line"></span><br><span class="line">3、添加一块磁盘</span><br><span class="line">	lsblk   ： 查看本机的磁盘</span><br><span class="line">	df -h   :  查看本机的分区</span><br><span class="line"></span><br><span class="line">4、磁盘分区</span><br><span class="line">	n : 新建分区</span><br><span class="line">	p : 打印分区表</span><br><span class="line">	w : 写入磁盘保存并退出</span><br><span class="line">	q : 不保存退出</span><br><span class="line">	d : 删除分区</span><br><span class="line">	</span><br><span class="line">5、挂载磁盘分区</span><br><span class="line">	1、格式化文件系统</span><br><span class="line">		mkfs.xfs /dev/sdb1 </span><br><span class="line"></span><br><span class="line">6、总结</span><br><span class="line">	1、关机</span><br><span class="line">	2、添加硬盘</span><br><span class="line">	3、创建分区</span><br><span class="line">		fdisk /dev/sdb</span><br><span class="line">		或</span><br><span class="line">		gdisk /dev/sdb</span><br><span class="line">	4、格式化文件系统</span><br><span class="line">		mkfs.xfs /dev/sdb1 </span><br><span class="line">	5、挂载</span><br><span class="line">		mount /dev/sdb1 /mnt</span><br></pre></td></tr></table></figure>

<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><ul>
<li>逻辑分区属于扩展分区，扩展分区属于主分区</li>
<li>主分区又叫做引导分区，是可以安装系统的分区</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/mbr.jpeg" alt="mbr"></p>
<p>目前常见的磁盘分区格式有两种，MBR分区和GPT分区：</p>
<ul>
<li>MBR 分区，MBR 的意思是 “主引导记录”。MBR 最大支持 2TB 容量，在容量方面存在着极大的瓶颈。</li>
<li>GPT 分区，GPT 意为 GUID 分区表，它支持的磁盘容量比 MBR 大得多。这是一个正逐渐取代 MBR 的新标准，它是由 UEFI 辅住而形成的，将来 UEFI 用于取代老旧的 BIOS，而 GPT 则取代老旧的 MBR。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘分区工具</span></span><br><span class="line"></span><br><span class="line">fdisk 工具用于 MBR 格式</span><br><span class="line">gdisk 工具用于 GPT 格式</span><br></pre></td></tr></table></figure>

<h3 id="磁盘基本分区fdisk"><a href="#磁盘基本分区fdisk" class="headerlink" title="磁盘基本分区fdisk"></a>磁盘基本分区fdisk</h3><p><strong>1.添加一块小于2TB的磁盘进行使用，步骤如下:</strong></p>
<ul>
<li><p>1.给虚拟机添加一块新的硬盘</p>
</li>
<li><p>2.使用fdisk进行分区</p>
</li>
<li><p>3.使用mkfs进行格式化</p>
</li>
<li><p>4.使用mount进行挂载</p>
<p>PS: 生产分区建议，如无特殊需求直接使用整个磁盘即可，无需分区。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk -l</span></span><br><span class="line">[root@localhost ~]<span class="comment"># fdisk  /dev/sdb</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): m         <span class="comment">#输入m列出常用的命令</span></span><br><span class="line">Command action</span><br><span class="line">   a   toggle a bootable flag               <span class="comment">#切换分区启动标记</span></span><br><span class="line">   b   edit bsd disklabel                   <span class="comment">#编辑sdb磁盘标签</span></span><br><span class="line">   c   toggle the dos compatibility flag    <span class="comment">#切换dos兼容模式</span></span><br><span class="line">   d   delete a partition                   <span class="comment">#删除分区</span></span><br><span class="line">   l   list known partition types           <span class="comment">#显示分区类型</span></span><br><span class="line">   m   <span class="built_in">print</span> this menu                      <span class="comment">#显示帮助菜单</span></span><br><span class="line">   n   add a new partition                  <span class="comment">#新建分区</span></span><br><span class="line">   o   create a new empty DOS partition table   <span class="comment">#创建新的空白分区表</span></span><br><span class="line">   p   <span class="built_in">print</span> the partition table            <span class="comment">#显示分区表的信息</span></span><br><span class="line">   q   quit without saving changes          <span class="comment">#不保存退出</span></span><br><span class="line">   s   create a new empty Sun disklabel     <span class="comment">#创建新的Sun磁盘标签</span></span><br><span class="line">   t   change a partitions system id        <span class="comment">#修改分区ID,可以通过l查看id</span></span><br><span class="line">   u   change display/entry units           <span class="comment">#修改容量单位,磁柱或扇区</span></span><br><span class="line">   v   verify the partition table           <span class="comment">#检验分区表</span></span><br><span class="line">   w   write table to disk and <span class="built_in">exit</span>         <span class="comment">#保存退出</span></span><br><span class="line">   x   extra functionality (experts only)   <span class="comment">#拓展功能</span></span><br></pre></td></tr></table></figure>

<p>1). fdisk创建主分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)  <span class="comment">#主分区</span></span><br><span class="line">   e   extended  <span class="comment">#扩展分区</span></span><br><span class="line">Select (default p): p   <span class="comment">#选择创建主分区</span></span><br><span class="line">Partition number (1-4, default 1):  <span class="comment">#默认创建第一个主分区</span></span><br><span class="line">First sector (2048-2097151, default 2048): <span class="comment">#默认扇区回车</span></span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-2097151, default 2097151): +50M <span class="comment">#分配50MB</span></span><br></pre></td></tr></table></figure>

<p>2). fdisk创建扩展分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n  <span class="comment">#新建分区</span></span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): e   <span class="comment">#创建扩展分区</span></span><br><span class="line">Partition number (2-4, default 2):</span><br><span class="line">First sector (104448-2097151, default 104448):</span><br><span class="line">Using default value 104448</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (104448-2097151, default 2097151): <span class="comment">#空间都给到扩展分区</span></span><br></pre></td></tr></table></figure>

<p>3). fdisk创建逻辑分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n  <span class="comment">#新建分区</span></span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 1 extended, 2 free)</span><br><span class="line">   l   logical (numbered from 5)</span><br><span class="line">Select (default p): l   <span class="comment">#创建逻辑分区</span></span><br><span class="line">Adding logical partition 5</span><br><span class="line">First sector (106496-2097151, default 106496):</span><br><span class="line">Using default value 106496</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (106496-2097151, default 2097151): +100M  <span class="comment">#分配100MB空间</span></span><br></pre></td></tr></table></figure>

<p>4). fdisk查看分区情况，并保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p <span class="comment">#查看分区创建</span></span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048      104447       51200   83  Linux</span><br><span class="line">/dev/sdb2          104448     2097151      996352    5  Extended</span><br><span class="line">/dev/sdb5          106496      311295      102400   83  Linux</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查磁盘是否是MBR分区方式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># fdisk /dev/sdb -l|grep type</span></span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装parted, 刷新内核立即生效,无需重启</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install parted</span></span><br><span class="line">[root@localhost ~]<span class="comment"># partprobe /dev/sdb</span></span><br></pre></td></tr></table></figure>

<p><strong>2.格式化磁盘</strong></p>
<ul>
<li>mkfs格式化磁盘，实质创建文件系统，文件系统类似于将房子装修成3室一厅，还是2室一厅。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选项: </span></span><br><span class="line"><span class="comment"># -b  设定数据区块占用空间大小，目前支持1024、2048、4096 bytes每个块。</span></span><br><span class="line"><span class="comment"># -t  用来指定什么类型的文件系统，可以是ext4, xfs</span></span><br><span class="line"><span class="comment"># -i  设定inode的大小</span></span><br><span class="line"><span class="comment"># -N  设定inode数量，防止Inode数量不够导致磁盘不足</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.格式化整个磁盘</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkfs.ext4  /dev/sdb </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.格式化磁盘的某个分区</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkfs.xfs  /dev/sdb1</span></span><br></pre></td></tr></table></figure>

<p><strong>3.使用mount挂载并使用</strong></p>
<ul>
<li>如果需要使用该磁盘的空间，需要准备一个空的目录作为挂载点，与该设备进行关联。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sdb1 /data</span></span><br></pre></td></tr></table></figure>



<h3 id="磁盘的基本分区Gdisk"><a href="#磁盘的基本分区Gdisk" class="headerlink" title="磁盘的基本分区Gdisk"></a>磁盘的基本分区Gdisk</h3><p>前面我们已经了解到fdisk分区，但fdisk不支持给高于2TB的磁盘进行分区。如果有单块盘高于2TB，建议使用Gdisk进行分区。</p>
<p><strong>1.使用gdisk进行磁盘分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装gdisk分区工具</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install gdisk -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建一个新分区，500MB大小</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gdisk /dev/sdb</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n     <span class="comment">#创建新分区</span></span><br><span class="line">Partition number (1-128, default 1):</span><br><span class="line">First sector (34-2097118, default = 2048) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class="line">Last sector (2048-2097118, default = 2097118) or &#123;+-&#125;size&#123;KMGTP&#125;: +500M <span class="comment">#分配500M大小</span></span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p <span class="comment">#打印查看</span></span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   8300  Linux filesystem</span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w <span class="comment">#保存分区</span></span><br><span class="line">Do you want to proceed? (Y/N): y    <span class="comment">#确认</span></span><br><span class="line">OK; writing new GUID partition table (GPT) to /dev/sdb.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建完成后，可以尝试检查磁盘是否为gpt格式</span></span><br><span class="line">[root@localhost-node1 /]<span class="comment"># fdisk /dev/sdb -l|grep type</span></span><br><span class="line">Disk label <span class="built_in">type</span>: gpt</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.安装parted, 刷新内核立即生效,无需重启</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install parted</span></span><br><span class="line">[root@localhost ~]<span class="comment"># partprobe /dev/sdb</span></span><br></pre></td></tr></table></figure>

<p><strong>2.使用mkfs进行格式化磁盘。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkfs.xfs  /dev/sdb</span></span><br></pre></td></tr></table></figure>

<p><strong>3.使用mount命令将某个目录挂载该分区，进行使用。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data_gdisk</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sdb /data_gdisk</span></span><br></pre></td></tr></table></figure>

<h2 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h2><p>前面我们已经提到过，如果需要使用磁盘的空间，需要准备一个空的目录作为挂载点，与该设备进行关联。mount主要是为文件系统指定一个访问入口。</p>
<p><strong>1.通过mount进行挂载，但重启将会失效。我们称为临时生效。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选项：-t指定文件系统挂载分区 -a 挂载/etc/fstab中的配置文件 -o 指定挂载参数</span></span><br><span class="line"><span class="comment"># 挂载/dev/sdb1至db1目录</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mkdir /db1</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mount -t xfs /dev/sdb1  /db1/ </span></span><br><span class="line"></span><br><span class="line">ps：centos7选择xfs格式作为默认文件系统，而且不再使用以前的ext，仍然支持ext4，</span><br><span class="line">xfs专为大数据产生，每个单个文件系统最大可以支持8eb，单个文件可以支持16tb，不仅数据量大，</span><br><span class="line">而且扩展性高。还可以通过xfsdump，xfsrestore来备份和恢复。</span><br></pre></td></tr></table></figure>

<p><strong>2.挂载的磁盘，如果不想使用可以使用umount进行卸载。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选项： -l 强制卸载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.卸载目录方式</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># umount /db1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.卸载设备方式</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># umount /dev/sdb1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.umount不能卸载的情况</span></span><br><span class="line"> [root@localhost db1]<span class="comment"># umount /db1  </span></span><br><span class="line">  umount: /db1: device is busy.</span><br><span class="line">          (In some cases useful info about processes that use</span><br><span class="line">          the device is found by lsof(8) or fuser(1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#PS: 如上情况解决办法有两种, 1.切换至其他目录 2.使用&#x27;-l&#x27;选项强制卸载    </span></span><br><span class="line"> [root@student db1]<span class="comment"># umount -l /db1</span></span><br></pre></td></tr></table></figure>

<p><strong>3.如果需要实现永久挂载则需要将挂载信息写入/etc/fstab配置文件中实现。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.使用blkid命令获取各设备的UUID</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># blkid |grep &quot;sdb1&quot;</span></span><br><span class="line">  /dev/sdb1: UUID=<span class="string">&quot;e271b5b2-b1ba-4b18-bde5-66e394fb02d9&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.使用UUID挂载磁盘sdb1分区至于db1， 测试挂载</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mount UUID=&quot;e271b5b2-b1ba-4b18-bde5-66e394fb02d9&quot; /db1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.写入/etc/fstab中，实现开机自动挂载</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># tail -1 /etc/fstab    </span></span><br><span class="line">  UUID=e271b5b2-b1ba-4b18-bde5-66e394fb02d9 /db1 xfs  defaults 0  0</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.加载fstab配置文件, 同时检测语法是否有错误</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mount –a</span></span><br></pre></td></tr></table></figure>

<p><strong>4./etc/fstab配置文件编写格式</strong></p>
<table>
<thead>
<tr>
<th align="left">要挂载的设备</th>
<th align="left">挂载点(入口)</th>
<th align="left">文件系统类型</th>
<th align="left">挂载参数</th>
<th align="left">是否备份</th>
<th align="left">是否检查</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/dev/sdb1</td>
<td align="left">/db1</td>
<td align="left">xfs</td>
<td align="left">defaults</td>
<td align="left">0</td>
<td align="left">0</td>
</tr>
</tbody></table>
<p>第四列：挂载参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">async/sync</td>
<td align="left">是否为同步方式运行。默认async</td>
</tr>
<tr>
<td align="left">user/nouser</td>
<td align="left">是否允许普通用户使用mount命令挂载。默认nouser</td>
</tr>
<tr>
<td align="left">exec/noexe</td>
<td align="left">是否允许可执行文件执行。默认exec</td>
</tr>
<tr>
<td align="left">suid/nosuid</td>
<td align="left">是否允许存在suid属性的文件。默认suid</td>
</tr>
<tr>
<td align="left">auto/noauto</td>
<td align="left">执行mount -a 命令时，此文件系统是否被主动挂载。默认auto</td>
</tr>
<tr>
<td align="left">rw/ro</td>
<td align="left">是否以只读或者读写模式进行挂载。默认rw</td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">具有rw,suid,dev,exec,auto,nouser,async等默认参数的设定</td>
</tr>
</tbody></table>
<p>第五列：是否进行备份。参数的值为0或者1</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">代表不做备份</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">代表要每天进行备份操作</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">代表不定日期的进行备份操作</td>
</tr>
</tbody></table>
<p>第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">不要检验磁盘是否有坏道</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">检验</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">校验 (当1级别检验完成之后进行2级别检验)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/2c9a5c07.html</url>
    <content><![CDATA[<h3 id="优化风险"><a href="#优化风险" class="headerlink" title="优化风险"></a>优化风险</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优化不总是对一个单纯的环境进行！还很可能是一个复杂的已投产的系统。</span><br><span class="line">优化手段本来就有很大的风险，只不过你没能力意识到和预见到！</span><br><span class="line">任何的技术可以解决一个问题，但必然存在带来一个问题的风险！</span><br><span class="line">对于优化来说解决问题而带来的问题控制在可接受的范围内才是有成果。</span><br><span class="line">保持现状或出现更差的情况都是失败！</span><br><span class="line"></span><br><span class="line">稳定性和业务可持续性通常比性能更重要！</span><br><span class="line">优化不可避免涉及到变更，变更就有风险！</span><br><span class="line">优化使性能变好，维持和变差是等概率事件！</span><br><span class="line">优化不能只是数据库管理员担当风险，但会所有的人分享优化成果！</span><br><span class="line">所以优化工作是由业务需要驱使的！！！</span><br><span class="line"></span><br><span class="line">不应该一个人独自参与优化，风险要和参与人员一起承担</span><br></pre></td></tr></table></figure>

<h3 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安全优化（业务持续性）</span><br><span class="line">性能优化（业务高效性）</span><br></pre></td></tr></table></figure>

<h3 id="优化范围和思路"><a href="#优化范围和思路" class="headerlink" title="优化范围和思路"></a>优化范围和思路</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存储、主机和操作系统:</span><br><span class="line">    主机架构稳定性</span><br><span class="line">    I/O规划及配置</span><br><span class="line">    Swap</span><br><span class="line">    OS内核参数</span><br><span class="line">        网络问题</span><br><span class="line">        </span><br><span class="line">应用程序:（Index，lock，session）</span><br><span class="line">        应用程序稳定性和性能</span><br><span class="line">        SQL语句性能</span><br><span class="line">    串行访问资源</span><br><span class="line">    性能欠佳会话管理</span><br><span class="line">    </span><br><span class="line">数据库优化:（内存、数据库设计、参数）</span><br><span class="line">    内存</span><br><span class="line">    数据库结构(物理&amp;逻辑)</span><br><span class="line">    实例配置</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/KqOaeJ.jpg" alt="KqOaeJ"></p>
<h3 id="数据库优化工具"><a href="#数据库优化工具" class="headerlink" title="数据库优化工具"></a>数据库优化工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status  </span><br><span class="line">show variables </span><br><span class="line">show index  </span><br><span class="line">show processlist </span><br><span class="line">show slave status</span><br><span class="line">show engine innodb status </span><br><span class="line">desc/explain </span><br><span class="line">     slowlog</span><br><span class="line"></span><br><span class="line">扩展类深度优化:</span><br><span class="line">pt系列</span><br><span class="line">mysqlslap </span><br><span class="line">sysbench </span><br><span class="line">information_schema </span><br><span class="line">performance_schema</span><br><span class="line">sys</span><br></pre></td></tr></table></figure>

<h3 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h3><h4 id="参数优化前压力测试"><a href="#参数优化前压力测试" class="headerlink" title="参数优化前压力测试"></a>参数优化前压力测试</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 模拟数据库数据</span><br><span class="line">create database test charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">use test;</span><br><span class="line">create table t_100w (id int,num int,k1 char(2),k2 char(4),dt timestamp);</span><br><span class="line"></span><br><span class="line">delimiter //</span><br><span class="line">create  procedure rand_data(in num int)</span><br><span class="line">begin</span><br><span class="line">declare str char(62) default &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line">declare str2 char(2);</span><br><span class="line">declare str4 char(4);</span><br><span class="line">declare i int default 0;</span><br><span class="line">while i&lt;num do</span><br><span class="line">set str2=concat(substring(str,1+floor(rand()*61),1),substring(str,1+floor(rand()*61),1));</span><br><span class="line">set str4=concat(substring(str,1+floor(rand()*61),2),substring(str,1+floor(rand()*61),2));</span><br><span class="line">set i=i+1;</span><br><span class="line">insert into t_100w values (i,floor(rand()*num),str2,str4,now());</span><br><span class="line">end while;</span><br><span class="line">end;</span><br><span class="line">//</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"># 插入100w条数据</span><br><span class="line">call rand_data(10000000);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># 压力测试</span><br><span class="line">mysqlslap --defaults-file=/etc/my.cnf \</span><br><span class="line">--concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; \</span><br><span class="line">--query=&quot;select * from test.t_100w where k2=&#x27;FGCD&#x27;&quot; engine=innodb \</span><br><span class="line">--number-of-queries=200 -uroot -p123 -verbose</span><br></pre></td></tr></table></figure>

<h4 id="优化参数说明"><a href="#优化参数说明" class="headerlink" title="优化参数说明"></a>优化参数说明</h4><ul>
<li><p><code>Max_connections(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值</span><br><span class="line"></span><br><span class="line"># 判断依据</span><br><span class="line">show variables like &#x27;max_connections&#x27;;</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">    | Variable_name   | Value |</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">    | max_connections | 151   |</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">show status like &#x27;Max_used_connections&#x27;;</span><br><span class="line">    +----------------------+-------+</span><br><span class="line">    | Variable_name        | Value |</span><br><span class="line">    +----------------------+-------+</span><br><span class="line">    | Max_used_connections | 101   |</span><br><span class="line">    +----------------------+-------+</span><br><span class="line"></span><br><span class="line"># 修改方式</span><br><span class="line">vim /etc/my.cnf </span><br><span class="line">Max_connections=1024</span><br><span class="line"></span><br><span class="line"># 补充</span><br><span class="line">1.开启数据库时,我们可以临时设置一个比较大的测试值</span><br><span class="line">2.观察show status like &#x27;Max_used_connections&#x27;;变化</span><br><span class="line">3.如果max_used_connections跟max_connections相同</span><br><span class="line">    那么就是max_connections设置过低或者超过服务器的负载上限了</span><br><span class="line">    低于10%则设置过大</span><br></pre></td></tr></table></figure></li>
<li><p><code>back_log</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。</span><br><span class="line">back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它</span><br><span class="line"></span><br><span class="line"># 判断依据</span><br><span class="line">show full processlist</span><br><span class="line">发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值</span><br><span class="line"></span><br><span class="line"># 修改方式举例</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">back_log=1024</span><br></pre></td></tr></table></figure></li>
<li><p><code>wait_timeout和interactive_timeout</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">wait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数</span><br><span class="line">interactive_timeout：指的是mysql在关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200。</span><br><span class="line">wait_timeout:如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用</span><br><span class="line"></span><br><span class="line"># 设置建议</span><br><span class="line">如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</span><br><span class="line"></span><br><span class="line"># 修改方式举例</span><br><span class="line">wait_timeout=60</span><br><span class="line">interactive_timeout=1200</span><br><span class="line">长连接的应用，为了不去反复的回收和分配资源，降低额外的开销</span><br><span class="line">一般我们会将wait_timeout设定比较小，interactive_timeout要和应用开发人员沟通长链接的应用是否很多。如果他需要长链接，那么这个值可以不需要调整。</span><br><span class="line">另外还可以使用类外的参数弥补。</span><br></pre></td></tr></table></figure></li>
<li><p><code>key_buffer_size(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度</span><br><span class="line">1.此参数与myisam表的索引有关</span><br><span class="line">2.临时表的创建有关（多表链接、子查询中、union）</span><br><span class="line">     在有以上查询语句出现的时候，需要创建临时表，用完之后会被丢弃</span><br><span class="line">     临时表有两种创建方式：</span><br><span class="line">                        内存中-------&gt;key_buffer_size</span><br><span class="line">                        磁盘上-------&gt;ibdata1(5.6)</span><br><span class="line">                                      ibtmp1 (5.7）</span><br><span class="line"># 设置依据</span><br><span class="line">通过key_read_requests和key_reads可以直到key_baffer_size设置是否合理</span><br><span class="line">mysql&gt; show variables like &quot;key_buffer_size%&quot;;</span><br><span class="line">+-----------------+---------+</span><br><span class="line">| Variable_name   | Value   |</span><br><span class="line">+-----------------+---------+</span><br><span class="line">| key_buffer_size | 8388608 |</span><br><span class="line">+-----------------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show status like &quot;key_read%&quot;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Key_read_requests | 10    |</span><br><span class="line">| Key_reads         | 2     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">一共有10个索引读取请求，有2个请求在内存中没有找到直接从硬盘中读取索引</span><br><span class="line">控制在 5%以内</span><br><span class="line">注：key_buffer_size只对myisam表起作用，即使不使用myisam表，但是内部的临时磁盘表是myisam表，也要使用该值。</span><br><span class="line">可以使用检查状态值created_tmp_disk_tables得知：</span><br><span class="line"></span><br><span class="line">mysql&gt; show status like &quot;created_tmp%&quot;;</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Variable_name           | Value |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Created_tmp_disk_tables | 0     |</span><br><span class="line">| Created_tmp_files       | 6     |</span><br><span class="line">| Created_tmp_tables      | 1     |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">通常地，我们习惯以 Created_tmp_tables/(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line">Created_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line"></span><br><span class="line">或者已各自的一个时段内的差额计算，来判断基于内存的临时表利用率。所以，我们会比较关注 Created_tmp_disk_tables 是否过多，从而认定当前服务器运行状况的优劣。</span><br><span class="line">Created_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line">控制在5%-10%以内</span><br><span class="line">看以下例子：</span><br><span class="line">在调用mysqldump备份数据时，大概执行步骤如下：</span><br><span class="line">180322 17:39:33       7 Connect     root@localhost on</span><br><span class="line">7 Query       /*!40100 SET @@SQL_MODE=&#x27;&#x27; */</span><br><span class="line">7 Init DB     guo</span><br><span class="line">7 Query       SHOW TABLES LIKE &#x27;guo&#x27;</span><br><span class="line">7 Query       LOCK TABLES `guo` READ /*!32311 LOCAL */</span><br><span class="line">7 Query       SET OPTION SQL_QUOTE_SHOW_CREATE=1</span><br><span class="line">7 Query       show create table `guo`</span><br><span class="line">7 Query       show fields from `guo`</span><br><span class="line">7 Query       show table status like &#x27;guo&#x27;</span><br><span class="line">7 Query       SELECT /*!40001 SQL_NO_CACHE */ * FROM `guo`</span><br><span class="line">7 Query       UNLOCK TABLES</span><br><span class="line">7 Quit</span><br><span class="line"></span><br><span class="line">其中，有一步是：show fields from `guo`。从slow query记录的执行计划中，可以知道它也产生了 Tmp_table_on_disk。</span><br><span class="line">所以说，以上公式并不能真正反映到mysql里临时表的利用率，有些情况下产生的 Tmp_table_on_disk 我们完全不用担心，因此没必要过分关注 Created_tmp_disk_tables，但如果它的值大的离谱的话，那就好好查一下，你的服务器到底都在执行什么查询了</span><br><span class="line"># 配置方法</span><br><span class="line">key_buffer_size=64M</span><br></pre></td></tr></table></figure></li>
<li><p><code>query_cache_size</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简介</span></span><br><span class="line">查询缓存简称QC，使用查询缓冲，mysql将查询结果存放在缓冲区中，今后对于同样的select语句（区分大小写）,将直接从缓冲区中读取结果。</span><br><span class="line"></span><br><span class="line">SQL层：</span><br><span class="line">select * from t1 <span class="built_in">where</span> name=:NAME;</span><br><span class="line">select * from t1 <span class="built_in">where</span> name=:NAME;</span><br><span class="line"></span><br><span class="line">1、查询完结果之后，会对SQL语句进行<span class="built_in">hash</span>运算，得出<span class="built_in">hash</span>值,我们把他称之为SQL_ID</span><br><span class="line">2、会将存储引擎返回的结果+SQL_ID存储到缓存中。</span><br><span class="line"></span><br><span class="line">存储方式：</span><br><span class="line">例子：select * from t1  <span class="built_in">where</span> id=10;      100次</span><br><span class="line"></span><br><span class="line">1、将select * from t1  <span class="built_in">where</span> id=10; 进行<span class="built_in">hash</span>运算计算出一串<span class="built_in">hash</span>值，我们把它称之为<span class="string">&quot;SQL_ID&quot;</span></span><br><span class="line">2、将存储引擎返回上来的表的内容+SQLID存储到查询缓存中</span><br><span class="line"></span><br><span class="line">使用方式：</span><br><span class="line">1、一条SQL执行时，进行<span class="built_in">hash</span>运算，得出SQLID，去找query cache</span><br><span class="line">2、如果cache中有，则直接返回数据行，如果没有，就走原有的SQL执行流程</span><br><span class="line"></span><br><span class="line">一个sql查询如果以select开头，那么mysql服务器将尝试对其使用查询缓存。</span><br><span class="line">注：两个sql语句，只要想差哪怕是一个字符（列如大小写不一样；多一个空格等）,那么这两个sql将使用不同的一个cache。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断依据</span></span><br><span class="line">mysql&gt; show status like <span class="string">&quot;%Qcache%&quot;</span>;</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">| Variable_name           | Value   |</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">| Qcache_free_blocks      | 1       |</span><br><span class="line">| Qcache_free_memory      | 1031360 |</span><br><span class="line">| Qcache_hits             | 0       |</span><br><span class="line">| Qcache_inserts          | 0       |</span><br><span class="line">| Qcache_lowmem_prunes    | 0       |</span><br><span class="line">| Qcache_not_cached       | 2002    |</span><br><span class="line">| Qcache_queries_in_cache | 0       |</span><br><span class="line">| Qcache_total_blocks     | 1       |</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">---------------------状态说明--------------------</span><br><span class="line">Qcache_free_blocks：缓存中相邻内存块的个数。</span><br><span class="line">如果该值显示较大，则说明Query Cache 中的内存碎片较多了，FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。</span><br><span class="line">注：当一个表被更新之后，和它相关的cache </span><br><span class="line">blocks将被free。但是这个block依然可能存在队列中，除非是在队列的尾部。可以用FLUSH QUERY CACHE语句来清空free blocks</span><br><span class="line"></span><br><span class="line">Qcache_free_memory：Query Cache 中目前剩余的内存大小。通过这个参数我们可以较为准确的观察出当前系统中的Query Cache 内存大小是否足够，是需要增加还是过多了。</span><br><span class="line"></span><br><span class="line">Qcache_hits：表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</span><br><span class="line"></span><br><span class="line">Qcache_inserts：表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</span><br><span class="line"></span><br><span class="line">Qcache_lowmem_prunes：</span><br><span class="line">多少条Query因为内存不足而被清除出QueryCache。通过“Qcache_lowmem_prunes”和“Qcache_free_memory”相互结合，能够更清楚的了解到我们系统中Query Cache 的内存大小是否真的足够，是否非常频繁的出现因为内存不足而有Query 被换出。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的free_blocks和free_memory可以告诉您属于哪种情况）</span><br><span class="line"></span><br><span class="line">Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。</span><br><span class="line"></span><br><span class="line">Qcache_queries_in_cache：当前Query Cache 中cache 的Query 数量；</span><br><span class="line">Qcache_total_blocks：当前Query Cache 中的block 数量；。</span><br><span class="line">Qcache_hits / (Qcache_inserts+Qcache_not_cached+Qcache_hits) </span><br><span class="line">    90/         10000             0             90</span><br><span class="line"></span><br><span class="line">如果出现hits比例过低，其实就可以关闭查询缓存了。使用redis专门缓存数据库</span><br><span class="line"></span><br><span class="line">Qcache_free_blocks    来判断碎片</span><br><span class="line">Qcache_free_memory   +   Qcache_lowmem_prunes  来判断内存够不够</span><br><span class="line">Qcache_hits 多少次命中  Qcache_hits / (Qcache_inserts+Qcache_not_cached+Qcache_hits)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置示例</span></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;%query_cache%&#x27;</span> ;</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| have_query_cache             | YES     |</span><br><span class="line">| query_cache_limit            | 1048576 |</span><br><span class="line">| query_cache_min_res_unit     | 4096    |</span><br><span class="line">| query_cache_size             | 1048576 |</span><br><span class="line">| query_cache_type             | OFF     |</span><br><span class="line">| query_cache_wlock_invalidate | OFF     |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">-------------------配置说明-------------------------------</span><br><span class="line">以上信息可以看出query_cache_type为off表示不缓存任何查询</span><br><span class="line"></span><br><span class="line">各字段的解释：</span><br><span class="line">query_cache_limit：超过此大小的查询将不缓存</span><br><span class="line">query_cache_min_res_unit：缓存块的最小大小，query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。</span><br><span class="line">query_cache_size：查询缓存大小 (注：QC存储的最小单位是1024byte，所以如果你设定了一个不是1024的倍数的值，这个值会被四舍五入到最接近当前值的等于1024的倍数的值。)</span><br><span class="line"></span><br><span class="line">query_cache_type：缓存类型，决定缓存什么样的查询，注意这个值不能随便设置，必须设置为数字，可选项目以及说明如下：</span><br><span class="line">如果设置为0，那么可以说，你的缓存根本就没有用，相当于禁用了。</span><br><span class="line">如果设置为1，将会缓存所有的结果，除非你的select语句使用SQL_NO_CACHE禁用了查询缓存。</span><br><span class="line">如果设置为2，则只缓存在select语句中通过SQL_CACHE指定需要缓存的查询。</span><br><span class="line"></span><br><span class="line">修改/etc/my.cnf,配置完后的部分文件如下：</span><br><span class="line">query_cache_size=128M</span><br><span class="line">query_cache_type=1</span><br></pre></td></tr></table></figure></li>
<li><p><code>max_connect_errors</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">max_connect_errors是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息 max_connect_errors的值与性能并无太大关系</span><br><span class="line"></span><br><span class="line"># 修改方式</span><br><span class="line">/etc/my.cnf</span><br><span class="line">max_connect_errors=2000</span><br></pre></td></tr></table></figure></li>
<li><p><code>sort_buffer_size</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速</span><br><span class="line">ORDER BY </span><br><span class="line">GROUP BY</span><br><span class="line">distinct</span><br><span class="line">union </span><br><span class="line"></span><br><span class="line"># 配置依据</span><br><span class="line">Sort_Buffer_Size并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。</span><br><span class="line">列如：500个连接将会消耗500*sort_buffer_size（2M）=1G内存</span><br><span class="line"></span><br><span class="line"># 配置方法</span><br><span class="line">/etc/my.cnf</span><br><span class="line">sort_buffer_size=1M</span><br></pre></td></tr></table></figure></li>
<li><p><code>max_allowed_packet(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介：</span><br><span class="line">mysql根据配置文件会限制，server接受的数据包大小。</span><br><span class="line"></span><br><span class="line"># 配置依据：</span><br><span class="line">有时候大的插入和更新会受max_allowed_packet参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数</span><br><span class="line"></span><br><span class="line"># 配置方法：</span><br><span class="line">max_allowed_packet=32M</span><br></pre></td></tr></table></figure></li>
<li><p><code>join_buffer_size</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.name,b.name from a join b on a.id=b.id where xxxx</span><br><span class="line">用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</span><br><span class="line">尽量在SQL与方面进行优化，效果较为明显</span><br><span class="line">优化的方法：在on条件列加索引，至少应当是有MUL索引</span><br></pre></td></tr></table></figure></li>
<li><p><code>thread_cache_size(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时,那么客户端的线程将被放到缓存中以响应下一个客户而不是销毁(前提是缓存数未达上限),如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.</span><br><span class="line"></span><br><span class="line"># 配置依据</span><br><span class="line">通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。</span><br><span class="line">设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。</span><br><span class="line">服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)</span><br><span class="line"></span><br><span class="line">试图连接到MySQL(不管是否连接成功)的连接数</span><br><span class="line">mysql&gt;  show status like &#x27;threads_%&#x27;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 8     |</span><br><span class="line">| Threads_connected | 2     |</span><br><span class="line">| Threads_created   | 4783  |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Threads_cached :代表当前此时此刻线程缓存中有多少空闲线程。</span><br><span class="line">Threads_connected:代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。</span><br><span class="line">Threads_created:代表从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpu SYS资源，可以适当增加配置文件中thread_cache_size值。</span><br><span class="line">Threads_running :代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态。</span><br><span class="line"></span><br><span class="line"># 配置方法：</span><br><span class="line">thread_cache_size=32</span><br><span class="line"></span><br><span class="line">整理：</span><br><span class="line">Threads_created  ：一般在架构设计阶段，会设置一个测试值，做压力测试。</span><br><span class="line">结合zabbix监控，看一段时间内此状态的变化。</span><br><span class="line">如果在一段时间内，Threads_created趋于平稳，说明对应参数设定是OK。</span><br><span class="line">如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_buffer_pool_size(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">对于InnoDB表来说，innodb_buffer_pool_size的作用就相当于key_buffer_size对于MyISAM表的作用一样</span><br><span class="line"></span><br><span class="line"># 配置依据：</span><br><span class="line">InnoDB使用该参数指定大小的内存来缓冲数据和索引。</span><br><span class="line">对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%,一般我们建议不要超过物理内存的70%</span><br><span class="line"></span><br><span class="line"># 配置方法</span><br><span class="line">innodb_buffer_pool_size=2048M</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_flush_log_at_trx_commit(*)双一标准</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。</span><br><span class="line">0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；</span><br><span class="line">1，</span><br><span class="line">每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；</span><br><span class="line">2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</span><br><span class="line"></span><br><span class="line"># 配置依据</span><br><span class="line">实际测试发现，该值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。</span><br><span class="line">根据MySQL官方文档，在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。</span><br><span class="line"></span><br><span class="line"># 配置方法</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">双1标准中的一个1</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_thread_concurrency</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">此参数用来设置innodb线程的并发数量，默认值为0表示不限制。</span><br><span class="line"></span><br><span class="line"># 配置依据</span><br><span class="line">在官方doc上，对于innodb_thread_concurrency的使用，也给出了一些建议，如下：</span><br><span class="line">如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency=0；</span><br><span class="line">如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency=128，</span><br><span class="line">并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，</span><br><span class="line">例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，</span><br><span class="line">性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，</span><br><span class="line">建议设置innodb_thread_concurrency参数为80，以避免影响性能。</span><br><span class="line">如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），</span><br><span class="line">建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），</span><br><span class="line">如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。</span><br><span class="line">但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，</span><br><span class="line">你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。</span><br><span class="line">在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。</span><br><span class="line">定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整。</span><br><span class="line"></span><br><span class="line">128   -----&gt; top  cpu  </span><br><span class="line">设置标准：</span><br><span class="line">1、当前系统cpu使用情况，均不均匀</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">2、当前的连接数，有没有达到顶峰</span><br><span class="line">show status like &#x27;threads_%&#x27;;</span><br><span class="line">show processlist;</span><br><span class="line"></span><br><span class="line"># 配置方法：</span><br><span class="line">innodb_thread_concurrency=8</span><br><span class="line">方法:</span><br><span class="line">    1. 看top ,观察每个cpu的各自的负载情况</span><br><span class="line">    2. 发现不平均,先设置参数为cpu个数,然后不断增加(一倍)这个数值</span><br><span class="line">    3. 一直观察top状态,直到达到比较均匀时,说明已经到位了.</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_log_buffer_size</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。</span><br><span class="line">innodb_log_buffer_size=128M</span><br><span class="line"></span><br><span class="line">设定依据：</span><br><span class="line">1、大事务： 存储过程调用 CALL</span><br><span class="line">2、多事务</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_log_file_size = 100M(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置 ib_logfile0  ib_logfile1 </span><br><span class="line">此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能</span><br><span class="line"></span><br><span class="line">innodb_log_file_size = 100M</span><br></pre></td></tr></table></figure></li>
<li><p><code>innodb_log_files_in_group = 3(*)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br></pre></td></tr></table></figure></li>
<li><p><code>read_buffer_size = 1M</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySql读入缓冲区大小</span><br><span class="line">对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区</span><br><span class="line">如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能，和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</span><br></pre></td></tr></table></figure></li>
<li><p><code>read_rnd_buffer_size = 1M</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySql的随机读（查询操作）缓冲区大小</span><br><span class="line"></span><br><span class="line">当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><br><span class="line"></span><br><span class="line">注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</span><br></pre></td></tr></table></figure></li>
<li><p><code>bulk_insert_buffer_size = 8M</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">批量插入数据缓存大小，可以有效提高插入效率，默认为8M</span><br><span class="line">tokuDB    percona</span><br><span class="line">myrocks   </span><br><span class="line">RocksDB</span><br><span class="line">TiDB</span><br><span class="line">MongoDB</span><br></pre></td></tr></table></figure></li>
<li><p><code>binary log(*)双一标准</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binlog_cache_size = 2M  # 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是--1M，后者建议是：即 2--4M</span><br><span class="line"></span><br><span class="line">max_binlog_cache_size = 8M  # 表示的是binlog 能够使用的最大cache 内存大小</span><br><span class="line"></span><br><span class="line">max_binlog_size= 512M  # 指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</span><br><span class="line"></span><br><span class="line">expire_logs_days = 7  # 定义了mysql清除过期日志的时间 二进制日志自动删除的天数。默认值为0,表示“没有自动删除”。</span><br><span class="line"></span><br><span class="line">log-bin=/data/mysql-bin</span><br><span class="line">binlog_format=row </span><br><span class="line">sync_binlog=1</span><br><span class="line"></span><br><span class="line">双1标准(基于安全的控制)</span><br><span class="line">sync_binlog=1   # 时候刷新binlog到磁盘，每次事务commit</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">show status like &#x27;com_%&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>安全参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Innodb_flush_method=(O_DIRECT, fsync) </span><br><span class="line">1、fsync    ：</span><br><span class="line">（1）在数据页需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">但，如果innodb_flush_log_at_trx_commit=1的话，日志还是直接每次commit直接写入磁盘</span><br><span class="line">2、 Innodb_flush_method=O_DIRECT</span><br><span class="line">（1）在数据页需要持久化时，直接写入磁盘</span><br><span class="line">（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">但，如果innodb_flush_log_at_trx_commit=1的话，日志还是直接每次commit直接写入磁盘</span><br><span class="line"></span><br><span class="line">最安全模式：</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_flush_method=O_DIRECT</span><br><span class="line">最高性能模式：</span><br><span class="line">innodb_flush_log_at_trx_commit=0</span><br><span class="line">innodb_flush_method=fsync</span><br><span class="line">        </span><br><span class="line">一般情况下，我们更偏向于安全。 </span><br><span class="line">“双一标准”</span><br><span class="line">innodb_flush_log_at_trx_commit=1 </span><br><span class="line">sync_binlog=1              </span><br><span class="line">innodb_flush_method=O_DIRECT</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="参数优化结果"><a href="#参数优化结果" class="headerlink" title="参数优化结果"></a>参数优化结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">log-error=/var/log/mysql.log</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">skip-name-resolve</span><br><span class="line">server-id=7</span><br><span class="line">autocommit=0</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">relay_log_purge=0</span><br><span class="line">max_connections=1024</span><br><span class="line">back_log=128</span><br><span class="line">wait_timeout=60</span><br><span class="line">interactive_timeout=7200</span><br><span class="line">key_buffer_size=16M</span><br><span class="line">query_cache_size=64M</span><br><span class="line">query_cache_type=1</span><br><span class="line">query_cache_limit=50M</span><br><span class="line">max_connect_errors=20</span><br><span class="line">sort_buffer_size=2M</span><br><span class="line">max_allowed_packet=32M</span><br><span class="line">join_buffer_size=2M</span><br><span class="line">thread_cache_size=200</span><br><span class="line">innodb_buffer_pool_size=1024M</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_log_buffer_size=32M</span><br><span class="line">innodb_log_file_size=128M</span><br><span class="line">innodb_log_files_in_group=3</span><br><span class="line">binlog_cache_size=2M</span><br><span class="line">max_binlog_cache_size=8M</span><br><span class="line">max_binlog_size=512M</span><br><span class="line">expire_logs_days=7</span><br><span class="line">read_buffer_size=2M</span><br><span class="line">read_rnd_buffer_size=2M</span><br><span class="line">bulk_insert_buffer_size=8M</span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock  </span><br><span class="line">        </span><br><span class="line"># 再次压力测试</span><br><span class="line">mysqlslap --defaults-file=/etc/my.cnf --concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; --query=&quot;select * from test.t_100w where k2=&#x27;FGCD&#x27;&quot; engine=innodb --number-of-queries=200000 -uroot -p123 -verbose</span><br></pre></td></tr></table></figure>



<h3 id="锁的监控及处理"><a href="#锁的监控及处理" class="headerlink" title="锁的监控及处理"></a>锁的监控及处理</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/8SEDRO.jpg" alt="8SEDRO"></p>
<h4 id="查看锁状态"><a href="#查看锁状态" class="headerlink" title="查看锁状态"></a>查看锁状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看有没有锁等待</span><br><span class="line">show status like &#x27;innodb_row_lock%&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看哪个事务在等待(被阻塞了)</span><br><span class="line">use information_schema</span><br><span class="line">select * from information_schema.INNODB_TRX where trx_state=&#x27;LOCK WAIT&#x27;;</span><br><span class="line">trx_id : 事务ID号</span><br><span class="line">trx_state : 当前事务的状态</span><br><span class="line">trx_mysql_thread_id:连接层的,连接线程ID(show processlist; ===&gt;Id或trx_id )</span><br><span class="line">trx_query : 当前被阻塞的操作(一般是要丢给开发的)</span><br></pre></td></tr></table></figure>

<h4 id="查看锁源"><a href="#查看锁源" class="headerlink" title="查看锁源"></a>查看锁源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from sys.innodb_lock_waits;  # 被锁的和锁定它的之间关系</span><br><span class="line"></span><br><span class="line">locked_table    : 哪张表出现的等待 </span><br><span class="line">waiting_trx_id  : 等待的事务(与上个视图trx_id 对应)</span><br><span class="line">waiting_pid     : 等待的线程号(与上个视图trx_mysql_thread_id)</span><br><span class="line">blocking_trx_id : 锁源的事务ID </span><br><span class="line">blocking_pid    : 锁源的线程号</span><br></pre></td></tr></table></figure>

<h4 id="找到锁源thread-id"><a href="#找到锁源thread-id" class="headerlink" title="找到锁源thread_id"></a>找到锁源<code>thread_id</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from performance_schema.threads where processlist_id=15;</span><br></pre></td></tr></table></figure>

<h4 id="找到锁源的SQL语句"><a href="#找到锁源的SQL语句" class="headerlink" title="找到锁源的SQL语句"></a>找到锁源的SQL语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 当前在执行的语句</span><br><span class="line">SELECT * FROM performance_schema.`events_statements_current` WHERE thread_id=41;</span><br><span class="line">-- 执行语句的历史</span><br><span class="line">SELECT * FROM performance_schema.`events_statements_history` WHERE thread_id=41;</span><br><span class="line"></span><br><span class="line">得出结果,丢给开发</span><br><span class="line">表信息 </span><br><span class="line">被阻塞的</span><br><span class="line">锁源SQL</span><br></pre></td></tr></table></figure>

<h4 id="死锁监控"><a href="#死锁监控" class="headerlink" title="死锁监控"></a>死锁监控</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engine innodb status\G</span><br><span class="line">show variables like &#x27;%deadlock%&#x27;;</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf </span><br><span class="line">innodb_print_all_deadlocks = 1  </span><br></pre></td></tr></table></figure>

<h3 id="主从优化"><a href="#主从优化" class="headerlink" title="主从优化"></a>主从优化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 5.7 从库多线程MTS</span><br><span class="line">基本要求:</span><br><span class="line">5.7以上的版本(忘记小版本)</span><br><span class="line">必须开启GTID </span><br><span class="line">binlog必须是row模式  </span><br><span class="line"></span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">slave-parallel-type=LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers=16</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">relay_log_recovery=ON</span><br><span class="line"></span><br><span class="line">5.7 :</span><br><span class="line">slave-parallel-type=LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers=8</span><br><span class="line">cpu核心数作为标准</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST=&#x27;10.0.0.128&#x27;,</span><br><span class="line">  MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">  MASTER_PASSWORD=&#x27;123&#x27;,</span><br><span class="line">  MASTER_PORT=3307,</span><br><span class="line">  MASTER_AUTO_POSITION=1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制</title>
    <url>/c813917a.html</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简介</span><br><span class="line">1.基于二进制日志复制的</span><br><span class="line">2.主库的修改操作会记录二进制日志</span><br><span class="line">3.从库会请求新的二进制日志并回放,最终达到主从数据同步</span><br><span class="line">4.主从复制核心功能:</span><br><span class="line">  辅助备份,处理物理损坏                   </span><br><span class="line">  扩展新型的架构:高可用,高性能,分布式架构等</span><br><span class="line">  </span><br><span class="line"># 前提</span><br><span class="line">1.两台以上mysql实例 ,server_id,server_uuid不同</span><br><span class="line">2.主库开启二进制日志</span><br><span class="line">3.专用的复制用户</span><br><span class="line">4.保证主从开启之前的某个时间点,从库数据是和主库一致</span><br><span class="line">5.告知从库,复制user,passwd,IP port,以及复制起点(change master to)</span><br><span class="line">6.线程(三个):Dump thread  IO thread  SQL thread 开启(start slave)</span><br></pre></td></tr></table></figure>

<h3 id="搭建主从复制"><a href="#搭建主从复制" class="headerlink" title="搭建主从复制"></a>搭建主从复制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境准备</span></span><br><span class="line">cat /etc/hosts</span><br><span class="line">192.168.0.12  db2</span><br><span class="line">192.168.0.13  db3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机角色分配</span></span><br><span class="line">db2做主库</span><br><span class="line">db3做从库</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建数据库，两台机器参考最开始的二进制搭建，注意目录的权限</span></span><br><span class="line"><span class="comment"># 配置文件 server_id 不能相同 db2 是7 db3是8</span></span><br><span class="line">cat /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=7</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">innodb_flush_method=O_DIRECT</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">log_error=/data/mysql/data/mysql.log</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=<span class="literal">true</span></span><br><span class="line">slow_query_log=1</span><br><span class="line">slow_query_log_file=/data/mysql/data/slow.log</span><br><span class="line">long_query_time=0.1</span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两台都启动数据库</span></span><br><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两台检查server_id</span></span><br><span class="line">select @@server_id;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两台检查二进制日志开启情况</span></span><br><span class="line">show variables like <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库db2创建复制用户</span></span><br><span class="line">grant replication slave on *.* to repl@<span class="string">&#x27;192.168.0.%&#x27;</span> identified by <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">select user, host from mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库db2模拟一点数据</span></span><br><span class="line">create database <span class="built_in">test</span> charset utf8mb4;</span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values (11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line">select * from t1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># db2主库进行全备</span></span><br><span class="line">mysqldump -A -R -E --master-data=2 --triggers --single-transaction &gt; /tmp/full.sql</span><br><span class="line">scp -rp /tmp/full.sql  db3:/tmp  <span class="comment"># 推送到db3从库的 /tmp 目录中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db3恢复主库的全备数据</span></span><br><span class="line"><span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"><span class="built_in">source</span> /tmp/full.sql;</span><br><span class="line"></span><br><span class="line"><span class="comment"># db2需要告诉从库的复制信息</span></span><br><span class="line"><span class="comment"># db2主库上查看帮助命令</span></span><br><span class="line">mysql&gt; <span class="built_in">help</span> change master to</span><br><span class="line"><span class="comment"># 得到相应模板，修改即可</span></span><br><span class="line"><span class="comment"># 需要的信息在 mysqldump 备份文件中能查看到</span></span><br><span class="line">vim /tmp/full.sql</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>, MASTER_LOG_POS=1048;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在db3从库中执行</span></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST=<span class="string">&#x27;192.168.0.12&#x27;</span>,</span><br><span class="line">  MASTER_USER=<span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD=<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  MASTER_PORT=3306,</span><br><span class="line">  MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS=1048,</span><br><span class="line">  MASTER_CONNECT_RETRY=10;</span><br><span class="line"></span><br><span class="line"><span class="comment"># db3从库启动主从线程</span></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上面信息错误而且执行了使用以下办法</span></span><br><span class="line">stop slve;</span><br><span class="line">reset slave all;</span><br><span class="line">change master to...</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查主从情况 db3从库执行</span></span><br><span class="line">show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.0.12</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 1048</span><br><span class="line">               Relay_Log_File: db3-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes  <span class="comment"># 基本状态</span></span><br><span class="line">            Slave_SQL_Running: Yes  <span class="comment"># 基本状态</span></span><br><span class="line">                         ......</span><br></pre></td></tr></table></figure>

<h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><h5 id="涉及到的文件及线程"><a href="#涉及到的文件及线程" class="headerlink" title="涉及到的文件及线程"></a>涉及到的文件及线程</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件</span><br><span class="line">主库: binlog</span><br><span class="line">从库:</span><br><span class="line">  relay-log          # 中继日志</span><br><span class="line">  master.info        # 主库信息记录日志</span><br><span class="line">  relay-log.info     # 记录中继应用情况信息</span><br><span class="line"></span><br><span class="line"># 线程</span><br><span class="line">主库:</span><br><span class="line">  binlog_dump_thread  # 二进制日志投递线程</span><br><span class="line">  show processlist;  # 可以查看到 Binlog Dump</span><br><span class="line">从库:</span><br><span class="line">  IO_Thread  # 从库IO线程，请求和接收binlog</span><br><span class="line">  SQL_Thread  # 从库SQL线程，回放日志</span><br></pre></td></tr></table></figure>

<h5 id="主从复制原理-1"><a href="#主从复制原理-1" class="headerlink" title="主从复制原理"></a>主从复制原理</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. change master to 时，ip pot user password binlog position写入到master.info进行记录</span><br><span class="line">2. start slave 时，从库会启动IO线程和SQL线程</span><br><span class="line">3. IO_T，读取master.info信息，获取主库信息连接主库</span><br><span class="line">4. 主库会生成一个准备binlog DUMP线程，来响应从库</span><br><span class="line">5. IO_T根据master.info记录的binlog文件名和position号，请求主库DUMP最新日志</span><br><span class="line">6. DUMP线程检查主库的binlog日志，如果有新的，TP(传送)给从从库的IO_T</span><br><span class="line">7. IO_T将收到的日志存储到了TCP/IP 缓存，立即返回ACK给主库 ，主库工作完成</span><br><span class="line">8. IO_T将缓存中的数据，存储到relay-log日志文件,更新master.info文件binlog 文件名和postion，IO_T工作完成</span><br><span class="line">9. SQL_T读取relay-log.info文件，获取到上次执行到的relay-log的位置，作为起点，回放relay-log</span><br><span class="line">10.SQL_T回放完成之后，会更新relay-log.info文件。</span><br><span class="line">11.relay-log会有自动清理的功能。</span><br><span class="line"></span><br><span class="line">细节：</span><br><span class="line">1.主库一旦有新的日志生成，会发送“信号”给binlog dump ，IO线程再请求</span><br></pre></td></tr></table></figure>
<p>  <img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ApDem6.jpg" alt="ApDem6"></p>
<h3 id="主从复制监控信息"><a href="#主从复制监控信息" class="headerlink" title="主从复制监控信息"></a>主从复制监控信息</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主从监控</span><br><span class="line">    # 主库</span><br><span class="line">    # 查看连接情况，每个从库都会有一行dump相关的信息</span><br><span class="line">    show processlist;</span><br><span class="line"></span><br><span class="line">		# 从库</span><br><span class="line">		show slave status \G</span><br><span class="line">	  </span><br><span class="line">	  # 详细信息说明: </span><br><span class="line">        # 主库的信息(master.info)</span><br><span class="line">        Master_Host: 192.168.0.12          # 主库的IP</span><br><span class="line">        Master_User: repl                  # 复制用户名</span><br><span class="line">        Master_Port: 3306                  # 主库的端口</span><br><span class="line">        Connect_Retry: 10                  # 断连之后的重试次数</span><br><span class="line">        Master_Log_File: mysql-bin.000001  # 已经获取到的binlog的文件名</span><br><span class="line">        Read_Master_Log_Pos: 1301          # 已经获取到的binlog的位置号</span><br><span class="line">        </span><br><span class="line">        # 从库 relay-log.info 信息</span><br><span class="line">        Relay_Log_File: db3-relay-bin.000002  # 从库已经运行过的relaylog的文件名</span><br><span class="line">        Relay_Log_Pos: 573                    # 从库已经运行过的relaylog的位置点</span><br><span class="line">        </span><br><span class="line">        # 从库复制线程工作状态</span><br><span class="line">        Slave_IO_Running: Yes</span><br><span class="line">        Slave_SQL_Running: Yes</span><br><span class="line">        </span><br><span class="line">        # 过滤复制相关的状态</span><br><span class="line">        Replicate_Do_DB:</span><br><span class="line">        Replicate_Ignore_DB:</span><br><span class="line">        Replicate_Do_Table:</span><br><span class="line">        Replicate_Ignore_Table:</span><br><span class="line">        Replicate_Wild_Do_Table:</span><br><span class="line">        Replicate_Wild_Ignore_Table:</span><br><span class="line">        </span><br><span class="line">        # 从库延时主库的时间(非人为)</span><br><span class="line">        Seconds_Behind_Master: 0  # 从库延时主库的时间(单位为秒)</span><br><span class="line">        </span><br><span class="line">        # 延时从库有关状态</span><br><span class="line">        SQL_Delay: 0              # 延时从库设定的时间</span><br><span class="line">        SQL_Remaining_Delay: NULL # 延时操作剩余时间</span><br><span class="line">        </span><br><span class="line">        # 从库线程报错详细信息</span><br><span class="line">        Last_IO_Errno: 0         # IO报错的号码</span><br><span class="line">        Last_IO_Error:           # IO报错的具体信息</span><br><span class="line">        Last_SQL_Errno: 0        # SQL报错的号码</span><br><span class="line">        Last_SQL_Error:          # SQL报错具体信息</span><br><span class="line">        </span><br><span class="line">        # GTID复制信息</span><br><span class="line">        Retrieved_Gtid_Set:      # 接收的GTID的个数</span><br><span class="line">        Executed_Gtid_Set:       # 执行的GTID的个数</span><br><span class="line">        Auto_Position: 0</span><br></pre></td></tr></table></figure>





<h3 id="主从故障分析处理"><a href="#主从故障分析处理" class="headerlink" title="主从故障分析处理"></a>主从故障分析处理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接主库</span></span><br><span class="line">(1) 用户 密码  IP  port</span><br><span class="line">	Last_IO_Error: error reconnecting to master <span class="string">&#x27;repl@10.0.0.51:3307&#x27;</span> - retry-time: 10  retries: 7</span><br><span class="line">	ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;db01&#x27;</span> (using password: YES)</span><br><span class="line">  原因:密码错误、用户错误、地址错误、端口</span><br><span class="line">		  skip_name_resolve</span><br><span class="line">		  ERROR 2003 (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span>10.0.0.52<span class="string">&#x27; (113)</span></span><br><span class="line"><span class="string">	处理方法:</span></span><br><span class="line"><span class="string">		stop  slave  </span></span><br><span class="line"><span class="string">		reset slave all </span></span><br><span class="line"><span class="string">		change master to </span></span><br><span class="line"><span class="string">		start slave</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">(2) 主库连接数上线,或者是主库太繁忙</span></span><br><span class="line"><span class="string">	show slave  staus \G </span></span><br><span class="line"><span class="string">	Last_IO_Errno: 1040</span></span><br><span class="line"><span class="string">  Last_IO_Error: error reconnecting to master &#x27;</span>repl@10.0.0.51:3307<span class="string">&#x27; - retry-time: 10  retries: 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	处理思路:</span></span><br><span class="line"><span class="string">		拿复制用户,手工连接一下: mysql -urepl -p123 -h 10.0.0.51 -P 3307 </span></span><br><span class="line"><span class="string">		ERROR 1040 (HY000): Too many connections</span></span><br><span class="line"><span class="string">	处理方法:</span></span><br><span class="line"><span class="string">			set global max_connections=300;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3)防火墙,网络不通</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 请求二进制日志</span></span><br><span class="line"><span class="string">	主库缺失日志</span></span><br><span class="line"><span class="string">	从库方面,二进制日志位置点不对</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#x27;</span>could not find next <span class="built_in">log</span>; the first event <span class="string">&#x27;mysql-bin.000001&#x27;</span> at 154, the last event <span class="built_in">read</span> from <span class="string">&#x27;/data/3307/data/mysql-bin.000002&#x27;</span> at 154, the last byte <span class="built_in">read</span> from <span class="string">&#x27;/data/3307/data/mysql-bin.000002&#x27;</span> at 154.<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意: 在主从复制环境中,严令禁止主库中reset master; 可以选择expire 进行定期清理主库二进制日志</span></span><br><span class="line"><span class="string">解决方案: 重新构建主从</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># SQL 线程故障</span></span><br><span class="line"><span class="string">(1)读写relay-log.info </span></span><br><span class="line"><span class="string">(2)relay-log损坏,断节,找不到</span></span><br><span class="line"><span class="string">(3)接收到的SQL无法执行</span></span><br><span class="line"><span class="string">	0. SQL_MODE影响</span></span><br><span class="line"><span class="string">	1.要创建的数据库对象,已经存在</span></span><br><span class="line"><span class="string">	2.要删除或修改的对象不存在	</span></span><br><span class="line"><span class="string">	3.DML语句不符合表定义及约束时.</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">归根揭底的原因都是由于从库发生了写入操作</span></span><br><span class="line"><span class="string">Last_SQL_Error: Error &#x27;</span>Can<span class="string">&#x27;t create database &#x27;</span>db<span class="string">&#x27;; database exists&#x27;</span> on query. Default database: <span class="string">&#x27;db&#x27;</span>. Query: <span class="string">&#x27;create database db&#x27;</span></span><br><span class="line"></span><br><span class="line">以下是有风险的操作:处理方法(以从库为核心的处理方案)：</span><br><span class="line">stop slave; </span><br><span class="line"><span class="built_in">set</span> global sql_slave_skip_counter = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将同步指针向下移动一个，如果多次不同步，可以重复操作</span></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">/etc/my.cnf</span><br><span class="line">slave-skip-errors = 1032,1062,1007</span><br><span class="line"></span><br><span class="line">1007:对象已存在</span><br><span class="line">1032:无法执行DML</span><br><span class="line">1062:主键冲突,或约束冲突</span><br><span class="line"></span><br><span class="line">但是，以上操作有时是有风险的，最安全的做法就是重新构建主从，把握一个原则,一切以主库为主</span><br><span class="line">一劳永逸的方法:可以设置从库只读</span><br><span class="line">show variables like <span class="string">&#x27;%read_only%&#x27;</span>;</span><br></pre></td></tr></table></figure>




<h3 id="主从延时原因分析"><a href="#主从延时原因分析" class="headerlink" title="主从延时原因分析"></a>主从延时原因分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从库延时主库的时间</span><br><span class="line">Seconds_Behind_Master: 0   # 从库延时主库的时间（秒为单位）</span><br><span class="line"></span><br><span class="line"># 主库方面：</span><br><span class="line">  1.日志写入不及时，解决参数(双一标准): sync_binlog=1;</span><br><span class="line">  2.主库并发业务较高，使用分布式架构</span><br><span class="line">  4.从库太多，使用级联主从</span><br><span class="line">  </span><br><span class="line">对于Classic Replication: 主库是有能力并发运行事务的，但是在Dump_T在传输日志的时候，是以事件为单元传输日志的，所以导致事务的传输工作是串行方式的，这时在主库TPS很高时，会产生比较大的主从延时</span><br><span class="line">解决办法: group commit</span><br><span class="line">从5.6开始加入了GTID，在复制时，可以将原来串行的传输模式变成并行的，除了GTID支持，还需要双一保证</span><br><span class="line"></span><br><span class="line"># 从库方面	</span><br><span class="line">Classic Replication</span><br><span class="line">SQL 线程只有一个，所以说只能串行执行relay的事务</span><br><span class="line">可以多加几个SQL线程</span><br><span class="line"></span><br><span class="line">在5.6中出现了database级别的多线程SQL </span><br><span class="line">只能针对不同库下的事务，才能并发</span><br><span class="line">到5.7版本加入了MTS ，真正实现了事务级别的并发SQL</span><br></pre></td></tr></table></figure>

<h3 id="延时从库"><a href="#延时从库" class="headerlink" title="延时从库"></a>延时从库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数据损坏 </span><br><span class="line">  物理损坏</span><br><span class="line">  逻辑损坏</span><br><span class="line">  对于传统的主从复制，比较擅长处理物理损坏</span><br><span class="line">  </span><br><span class="line"># 设计理念</span><br><span class="line">  对SQL线程进行延时设置 </span><br><span class="line"></span><br><span class="line"># 延时多久合适</span><br><span class="line">  一般企业，延时3-6小时</span><br><span class="line"></span><br><span class="line"># 如何设置</span><br><span class="line">stop slave;</span><br><span class="line">CHANGE MASTER TO MASTER_DELAY = 300;</span><br><span class="line">start slave;</span><br><span class="line">show slave status \G</span><br><span class="line">  ......</span><br><span class="line">  SQL_Delay: 300</span><br><span class="line">  SQL_Remaining_Delay: NULL</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"># 如何使用延时从库</span><br><span class="line">  # 模拟故障</span><br><span class="line">    create database  delay charset utf8mb4;</span><br><span class="line">    use delay;</span><br><span class="line">    create table t1(id int);</span><br><span class="line">    insert into t1 values(1),(2),(3);</span><br><span class="line">    commit; </span><br><span class="line">    drop database delay;</span><br><span class="line"></span><br><span class="line">  # 问题</span><br><span class="line">  1. 停止SQL线程，停止主库业务</span><br><span class="line">  2. 模拟SQL手工恢复relaylog到drop之前的位置点</span><br><span class="line">  3. 截取relaylog日志，找到起点（relay-log.info）和终点(drop 操作)</span><br><span class="line">  4. 恢复截取的日志，验证数据可用性</span><br><span class="line"></span><br><span class="line">  # 开始处理</span><br><span class="line">  1. 停从库的SQL线程 </span><br><span class="line">  		stop slave sql_thread;</span><br><span class="line"></span><br><span class="line">  2. 找relaylog的起点和终点</span><br><span class="line">      # 起点</span><br><span class="line">      Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">      Relay_Log_Pos: 476</span><br><span class="line"></span><br><span class="line">      # 终点</span><br><span class="line">      show relaylog events in &#x27;db01-relay-bin.000002&#x27;</span><br><span class="line">      | db01-relay-bin.000002 | 1149 | Query          |         7 |        2036 | drop database delay  </span><br><span class="line"></span><br><span class="line">  3. 截取日志 </span><br><span class="line">  mysqlbinlog --start-position=476 --stop-position=1149 /data/3308/data/db01-relay-bin.000002 &gt;/tmp/relay.sql</span><br><span class="line"></span><br><span class="line">  4. 恢复 </span><br><span class="line">  set sql_log_bin=0;</span><br><span class="line">  source /tmp/relay.sql</span><br></pre></td></tr></table></figure>





<h3 id="过滤复制"><a href="#过滤复制" class="headerlink" title="过滤复制"></a>过滤复制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主库(有弊端)</span><br><span class="line">show master status;</span><br><span class="line">binlog_do_db</span><br><span class="line">binlog_ignore_db </span><br><span class="line"></span><br><span class="line"># 从库</span><br><span class="line">show slave status\G</span><br><span class="line">  # 库级别</span><br><span class="line">  Replicate_Do_DB:</span><br><span class="line">  Replicate_Ignore_DB:</span><br><span class="line"></span><br><span class="line">  # 表级别</span><br><span class="line">  Replicate_Do_Table:</span><br><span class="line">  Replicate_Ignore_Table:</span><br><span class="line"></span><br><span class="line">  # 模糊匹配</span><br><span class="line">  Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">  </span><br><span class="line"># 实现: 只需要复制xyz库的数据到从库</span><br><span class="line">  vim /etc/my.cnf</span><br><span class="line">  [mysqld]</span><br><span class="line">  ...</span><br><span class="line">  replicate_do_db=xyz</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  #  检查</span><br><span class="line">  show slave status\G</span><br><span class="line">  Replicate_Do_DB: xyz</span><br></pre></td></tr></table></figure>

<h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决主从数据一致性问题</span><br><span class="line"></span><br><span class="line"># 原理</span><br><span class="line">1. 主库执行新的事务,commit时,更新 show master  status\G ,触发一个信号给</span><br><span class="line">2. binlog dump 接收到主库的 show master status\G信息,通知从库日志更新了</span><br><span class="line">3. 从库IO线程请求新的二进制日志事件</span><br><span class="line">4. 主库会通过dump线程传送新的日志事件,给从库IO线程</span><br><span class="line">5. 从库IO线程接收到binlog日志,当日志写入到磁盘上的relaylog文件时,给主库ACK_receiver线程</span><br><span class="line">6. ACK_receiver线程触发一个事件,告诉主库commit可以成功了</span><br><span class="line">7. 如果ACK达到了我们预设值的超时时间,半同步复制会切换为原始的异步复制</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line"># 加载插件</span><br><span class="line">  主:</span><br><span class="line">  INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span><br><span class="line">  从:</span><br><span class="line">  INSTALL PLUGIN rpl_semi_sync_slave SONAME &#x27;semisync_slave.so&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看是否加载成功</span><br><span class="line">  show plugins;</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">  主:</span><br><span class="line">  SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br><span class="line">  从:</span><br><span class="line">  SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br><span class="line"></span><br><span class="line"># 重启从库上的IO线程</span><br><span class="line">  STOP SLAVE IO_THREAD;</span><br><span class="line">  START SLAVE IO_THREAD;</span><br><span class="line"></span><br><span class="line"># 查看是否在运行</span><br><span class="line">  主:</span><br><span class="line">  show status like &#x27;Rpl_semi_sync_master_status&#x27;;</span><br><span class="line">  从:</span><br><span class="line">  show status like &#x27;Rpl_semi_sync_slave_status&#x27;;</span><br></pre></td></tr></table></figure>




<h3 id="GTID复制"><a href="#GTID复制" class="headerlink" title="GTID复制"></a><code>GTID</code>复制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GTID介绍</span><br><span class="line">GTID(Global Transaction ID)是对于一个已提交事务的唯一编号，并且是一个全局(主从复制)唯一的编号</span><br><span class="line">它的官方定义如下：</span><br><span class="line">GTID = source_id ：transaction_id</span><br><span class="line">7E11FA47-31CA-19E1-9E56-C43AA21293967:29</span><br><span class="line">核心特性: 全局唯一,具备幂等性</span><br><span class="line"></span><br><span class="line"># 核心参数</span><br><span class="line">gtid-mode=on                        # 启用gtid类型，否则就是普通的复制架构</span><br><span class="line">enforce-gtid-consistency=true       # 强制GTID的一致性</span><br><span class="line">log-slave-updates=1                 # slave更新是否记入日志</span><br><span class="line"></span><br><span class="line"># 配置GTID复制过程</span><br><span class="line"># 主库db01配置文件</span><br><span class="line">cat &gt; /etc/my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql/</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=51</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db01 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 从库db02配置文件</span><br><span class="line">cat &gt; /etc/my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=52</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db02 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 从库db03配置文件</span><br><span class="line">cat &gt; /etc/my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=53</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db03 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 初始化数据(所有节点)</span><br><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/application/mysql  --datadir=/data/mysql/data </span><br><span class="line"></span><br><span class="line"># 启动数据库</span><br><span class="line">/etc/init.d/mysqld start	</span><br><span class="line">		</span><br><span class="line"># 主库创建用户</span><br><span class="line">grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line"># 两个从库开启主从</span><br><span class="line">mysql -e &quot;change master to master_host=&#x27;10.0.0.51&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;123&#x27;,MASTER_AUTO_POSITION=1;start slave;&quot;</span><br><span class="line">mysql -e &quot;show slave status \G&quot;|grep Y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL备份恢复与迁移</title>
    <url>/2c2a11ca.html</url>
    <content><![CDATA[<h3 id="数据库备份恢复职责"><a href="#数据库备份恢复职责" class="headerlink" title="数据库备份恢复职责"></a>数据库备份恢复职责</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份策略</span><br><span class="line">全备、增量、时间、自动</span><br><span class="line"></span><br><span class="line"># 日常备份检查</span><br><span class="line">备份存在性</span><br><span class="line">备份空间够用否</span><br><span class="line"></span><br><span class="line"># 定期恢复演练(测试库)</span><br><span class="line">一季度 或者 半年</span><br><span class="line"></span><br><span class="line"># 故障恢复</span><br><span class="line">通过现有备份,能够将数据库恢复到故障之前的时间点</span><br><span class="line"></span><br><span class="line"># 迁移</span><br><span class="line">1. 停机时间</span><br><span class="line">2. 回退方案</span><br></pre></td></tr></table></figure>

<h3 id="备份类型"><a href="#备份类型" class="headerlink" title="备份类型"></a>备份类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 热备</span><br><span class="line">在数据库正常业务时,备份数据,并且能够一致性恢复（只能是innodb）</span><br><span class="line">对业务影响非常小</span><br><span class="line"></span><br><span class="line"># 温备</span><br><span class="line">锁表备份,只能查询不能修改（myisam）</span><br><span class="line">影响到写入操作</span><br><span class="line"></span><br><span class="line"># 冷备</span><br><span class="line">关闭数据库业务,数据库没有任何变更的情况下,进行备份数据.</span><br><span class="line">业务停止</span><br></pre></td></tr></table></figure>

<h3 id="备份方式及工具"><a href="#备份方式及工具" class="headerlink" title="备份方式及工具"></a>备份方式及工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 逻辑备份</span><br><span class="line">基于SQL语句进行备份</span><br><span class="line">mysqldump</span><br><span class="line">mysqlbinlog</span><br><span class="line"></span><br><span class="line"># 物理备份</span><br><span class="line">基于磁盘数据文件备份</span><br><span class="line">xtrabackup(XBK) ：percona 第三方</span><br><span class="line">MySQL Enterprise Backup（MEB）</span><br><span class="line"></span><br><span class="line"># 逻辑备份与物理备份比较</span><br><span class="line">    # mysqldump</span><br><span class="line">    优点：</span><br><span class="line">    1.不需要下载安装</span><br><span class="line">    2.备份出来的是SQL，文本格式，可读性高,便于备份处理</span><br><span class="line">    3.压缩比较高，节省备份的磁盘空间</span><br><span class="line"></span><br><span class="line">    缺点：</span><br><span class="line">    4.依赖于数据库引擎，需要从磁盘把数据读出</span><br><span class="line">    然后转换成SQL进行转储，比较耗费资源，数据量大的话效率较低</span><br><span class="line">    建议：</span><br><span class="line">    100G以内的数据量级，可以使用mysqldump</span><br><span class="line">    超过TB以上，我们也可能选择的是mysqldump，配合分布式的系统</span><br><span class="line">    1EB  =1024 PB =1000000 TB</span><br><span class="line"></span><br><span class="line">    # xtrabackup</span><br><span class="line">    优点：</span><br><span class="line">    1.类似于直接cp数据文件，不需要管逻辑结构，相对来说性能较高</span><br><span class="line">    缺点：</span><br><span class="line">    2.可读性差</span><br><span class="line">    3.压缩比低，需要更多磁盘空间</span><br><span class="line">    建议：</span><br><span class="line">    &gt;100G&lt;TB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份方式</span><br><span class="line">全备:全库备份，备份所有数据</span><br><span class="line">增量:备份变化的数据</span><br><span class="line">逻辑备份=mysqldump+mysqlbinlog</span><br><span class="line">物理备份=xtrabackup_full+xtrabackup_incr+binlog或者xtrabackup_full+binlog</span><br><span class="line"></span><br><span class="line"># 备份周期</span><br><span class="line">根据数据量设计备份周期</span><br><span class="line">比如：周日全备，周1-周6增量</span><br><span class="line"></span><br><span class="line"># 其他: 主从复制备份</span><br></pre></td></tr></table></figure>

<h3 id="mysqldump使用"><a href="#mysqldump使用" class="headerlink" title="mysqldump使用"></a><code>mysqldump</code>使用</h3><h4 id="客户端通用命令"><a href="#客户端通用命令" class="headerlink" title="客户端通用命令"></a>客户端通用命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 和mysql通用命令</span><br><span class="line">-u  -p   -S   -h  -P    </span><br><span class="line"></span><br><span class="line"># 本地备份</span><br><span class="line">mysqldump -uroot -p  -S /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"># 远程备份</span><br><span class="line">mysqldump -uroot -p  -h 10.0.0.51 -P3306</span><br></pre></td></tr></table></figure>

<h4 id="基本备份参数"><a href="#基本备份参数" class="headerlink" title="基本备份参数"></a>基本备份参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全库备份 -A</span><br><span class="line">    mkdir -p /data/backup</span><br><span class="line">    mysqldump -uroot -p1 -A -S /tmp/mysql.sock &gt; /data/backup/full.sql</span><br><span class="line"></span><br><span class="line"># 备份多个单库 -B</span><br><span class="line">    # 备份worldhe testdb库</span><br><span class="line">    mysqldump -uroot -p1 -B -S /tmp/mysql.sock  world testdb &gt;/data/backup/db.sql</span><br><span class="line"></span><br><span class="line"># 备份单个或多个表</span><br><span class="line">    # 备份world下的city表和country表</span><br><span class="line">    mysqldump -uroot -p1 world city country  -S /tmp/mysql.sock &gt;/backup/bak.sql</span><br><span class="line">    # 此方法只会备份建表语句和插入语句，所以恢复前需要把库建好然后 use 到库中</span><br></pre></td></tr></table></figure>

<h4 id="高级参数使用"><a href="#高级参数使用" class="headerlink" title="高级参数使用"></a>高级参数使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必加参数</span><br><span class="line">-R                    # 在备份时，同时备份存储过程和函数，如果没有会自动忽略</span><br><span class="line">-E                    # 在备份时，同时备份EVENT，如果没有会自动忽略</span><br><span class="line">--triggers            # 在备份时，同时备份触发器，如果没有会自动忽略</span><br><span class="line"></span><br><span class="line">--master-data=2       # 记录备份开始时记录position号，可以作为将来做日志截取的起点</span><br><span class="line">    功能:</span><br><span class="line">    (1)在备份时，会自动记录，二进制日志文件名和位置号</span><br><span class="line">        参数有:</span><br><span class="line">            0 默认值</span><br><span class="line">            1  以change master to命令形式，可以用作主从复制</span><br><span class="line">            2  以注释的形式记录，备份时刻的文件名+postion号</span><br><span class="line">    (2)自动锁表</span><br><span class="line">    (3)如果配合 --single-transaction ，只对非InnoDB表进行锁表备份，InnoDB表进行“热“”备，实际上是实现快照备份</span><br><span class="line"></span><br><span class="line">--single-transaction  # 存储引擎开启热备(快照备份)功能</span><br><span class="line">		功能:</span><br><span class="line">		使用 master-data 参数时</span><br><span class="line">    (1)在不加 --single-transaction ,启动所有表的温备份,所有表都锁定</span><br><span class="line">    (2)加上 --single-transaction ,对innodb进行快照备份,对非innodb表可以实现自动锁表功能</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"># 其他参数 了解功能即可</span><br><span class="line">-F  # 在备份开始时,刷新一个新binlog日志，刷新的个数较多，一个库一个</span><br><span class="line"></span><br><span class="line">--set-gtid-purged=auto</span><br><span class="line"># 参数:</span><br><span class="line">    auto  # 默认参数</span><br><span class="line">    on</span><br><span class="line">    off</span><br><span class="line"># 使用场景</span><br><span class="line">1. --set-gtid-purged=OFF,可以使用在日常备份参数中</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data=2 --single-transaction --set-gtid-purged=OFF &gt;/data/backup/full.sql</span><br><span class="line">2. auto , on:在构建主从复制环境时需要的参数配置</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data=2 --single-transaction --set-gtid-purged=ON &gt;/data/backup/full.sql</span><br><span class="line"></span><br><span class="line">--max-allowed-packet=#  # 表特别大时设置参数避免超出大小</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data=2 --single-transaction --set-gtid-purged=OFF --max-allowed-packet=256M &gt;/data/backup/full.sql</span><br></pre></td></tr></table></figure>

<h4 id="备份及恢复"><a href="#备份及恢复" class="headerlink" title="备份及恢复"></a>备份及恢复</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份语句</span><br><span class="line">mysqldump -uroot -p1 -A -R -E --triggers --master-data=2 --single-transaction --set-gtid-purged=OFF &gt;/data/backup/full.sql</span><br><span class="line"></span><br><span class="line"># 恢复</span><br><span class="line">mysqldump备份的恢复方式（在生产中恢复要谨慎，恢复会删除重复的表）</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">source /backup/full_2018-06-28.sql</span><br><span class="line"></span><br><span class="line"># 压缩版</span><br><span class="line">mysqldump -uroot -p1 -A -R -E --triggers --max-allowed-packet=128M --master-data=2 --single-transaction|gzip &gt; /data/backup/full_$(date +%F-%T).sql.gz</span><br><span class="line"></span><br><span class="line">gunzip full_2021-12-27-14:19:32.sql.gz</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1、mysqldump在备份和恢复时都需要mysql实例启动为前提</span><br><span class="line">2、一般数据量级100G以内，大约15-45分钟可以恢复，数据量级很大很大的时候（PB、EB）</span><br><span class="line">3、mysqldump是覆盖形式恢复的方法</span><br><span class="line"></span><br><span class="line">一般我们认为，在同数据量级，物理备份要比逻辑备份速度快</span><br><span class="line">逻辑备份的优势:</span><br><span class="line">1、可读性强</span><br><span class="line">2、压缩比很高</span><br></pre></td></tr></table></figure>

<h4 id="故障案例恢复"><a href="#故障案例恢复" class="headerlink" title="故障案例恢复"></a>故障案例恢复</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 背景</span></span><br><span class="line">正在运行的网站系统，mysql-5.7.20 数据库，数据量50G，日业务增量1-5M。</span><br><span class="line">每天23:00点，计划任务调用mysqldump执行全备脚本</span><br><span class="line">年底故障演练:模拟周三上午10点误删除数据库，并进行恢复.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复思路</span></span><br><span class="line">1、停业务，避免数据的二次伤害</span><br><span class="line">2、找一个临时库，恢复周三23：00全备</span><br><span class="line">3、截取周二23：00  --- 周三10点误删除之间的binlog，恢复到临时库</span><br><span class="line">4、测试可用性和完整性</span><br><span class="line">5、 </span><br><span class="line">    5.1 方法一：直接使用临时库顶替原生产库，前端应用割接到新库</span><br><span class="line">    5.2 方法二：将误删除的表导出，导入到原生产库</span><br><span class="line">6、开启业务</span><br><span class="line">处理结果：经过20分钟的处理，最终业务恢复正常</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟全备之前的数据</span></span><br><span class="line">create database mbp charset utf8mb4;</span><br><span class="line">use mbp;</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values(1),(2),(3);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做全备</span></span><br><span class="line">mysqldump -uroot -p1 -A -R --triggers --set-gtid-purged=OFF --master-data=2 --single-transaction&gt; /data/backup/full_$(date +%F).sql</span><br><span class="line">ls /data/backup/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟增量的数据</span></span><br><span class="line">use mbp;</span><br><span class="line">insert into t1 values(11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line">create table t2 (id int);</span><br><span class="line">insert into t2 values(11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟数据库损害</span></span><br><span class="line">rm -rf /data/mysql/data/*</span><br><span class="line">pkill mysql</span><br><span class="line">rm -rf /data/mysql/data/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复数据</span></span><br><span class="line"><span class="comment"># 重新初始化数据库</span></span><br><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动数据库</span></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全备恢复，此时没有增量的数据</span></span><br><span class="line"><span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"><span class="built_in">source</span> /data/backup/full_2021-12-27.sql;</span><br><span class="line"><span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line">flush privileges;  <span class="comment"># 刷新权限，恢复账号权限等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复增量的数据---&gt; 全备到故障时刻的数据</span></span><br><span class="line"><span class="comment"># 找日志起点和终点</span></span><br><span class="line">vim /data/backup/full_2021-12-27.sql</span><br><span class="line">CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000005&#x27;</span>, MASTER_LOG_POS=949;  <span class="comment"># 找打全备时的 binlog 日志文件，--master-data=2 参数实现的</span></span><br><span class="line"></span><br><span class="line">show binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.000005&#x27;</span>;</span><br><span class="line"><span class="comment"># 下图可以看到 GTID 号应该是11-13 就是后面增量的数据信息</span></span><br><span class="line"><span class="comment"># 截取日志</span></span><br><span class="line">mysqlbinlog --skip-gtids --include-gtids=<span class="string">&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:11-13&#x27;</span> /data/binlog/mysql-bin.000005 &gt; /data/backup/bin.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复增量数据</span></span><br><span class="line"><span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"><span class="built_in">source</span> /data/backup/bin.sql;</span><br><span class="line"><span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否恢复</span></span><br><span class="line">select * from mbp.t2;</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211227124136331.png" alt="image-20211227124136331"></p>
<h4 id="单表的恢复"><a href="#单表的恢复" class="headerlink" title="单表的恢复"></a>单表的恢复</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从全备中导出单表备份</span><br><span class="line"># 获取表结构</span><br><span class="line">sed -e &#x27;/./&#123;H;$!d;&#125;&#x27; -e &#x27;x;/CREATE TABLE `city`/!d;q&#x27; full.sql &gt; createtable.sql</span><br><span class="line"></span><br><span class="line"># 获取INSERT INTO语句，用于数据的恢复</span><br><span class="line">grep -i &#x27;INSERT INTO `city`&#x27; full.sql &gt; data.sql</span><br><span class="line"></span><br><span class="line"># 获取单库的备份，可以直接创建库就行</span><br><span class="line">sed -n &#x27;/^-- Current Database: `world`/,/^-- Current Database: `/p&#x27; full.sql &gt; world.sql</span><br></pre></td></tr></table></figure>

<h3 id="xtrabackup使用"><a href="#xtrabackup使用" class="headerlink" title="xtrabackup使用"></a><code>xtrabackup</code>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个版本只支持8.0数据库以下的，最新版本支持8.0</span></span><br><span class="line"><span class="comment"># wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span></span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本</span></span><br><span class="line">innobackupex --version</span><br></pre></td></tr></table></figure>

<h4 id="备份方式"><a href="#备份方式" class="headerlink" title="备份方式"></a>备份方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.对于非Innodb表（比如 myisam）是，锁表cp数据文件，属于一种温备份。</span><br><span class="line">2.对于Innodb的表（支持事务的），不锁表，拷贝数据页，最终以数据文件的方式保存下来，把一部分redo和undo一并备走，属于热备方式</span><br></pre></td></tr></table></figure>

<h4 id="InnoDB表备份恢复流程"><a href="#InnoDB表备份恢复流程" class="headerlink" title="InnoDB表备份恢复流程"></a>InnoDB表备份恢复流程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.xbk备份执行的瞬间,立即触发ckpt,已提交的数据脏页,从内存刷写到磁盘,并记录此时的LSN号</span><br><span class="line">2.备份时，拷贝磁盘数据页，并且记录备份过程中产生的redo和undo一起拷贝走,也就是checkpoint LSN之后的日志</span><br><span class="line">3.在恢复之前，模拟Innodb“自动故障恢复”的过程，将redo（前滚）与undo（回滚）进行应用</span><br><span class="line">4.恢复过程是cp 备份到原来数据目录下</span><br></pre></td></tr></table></figure>

<h4 id="innobackupex使用"><a href="#innobackupex使用" class="headerlink" title="innobackupex使用"></a><code>innobackupex</code>使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 会自动读取/etc/my.cnf 或者手动指定</span><br><span class="line">    # 配置文件修改</span><br><span class="line">    vim /etc/my.cnf</span><br><span class="line">    ...</span><br><span class="line">    [client]</span><br><span class="line">    socket=/tmp/mysql.sock</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    service mysqld restart </span><br><span class="line"></span><br><span class="line">    # 指定配置文件</span><br><span class="line">    innobackupex --defaults-file=/etc/my.cnf --user=root --password=1 /data/bak</span><br><span class="line"></span><br><span class="line"># 默认是全备</span><br><span class="line">mkdir -p /data/bak</span><br><span class="line">innobackupex --user=root --password=1 /data/bak</span><br><span class="line"></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=1 --no-timestamp /data/bak/full_$(date +%F)</span><br><span class="line">--no-timestap  # 自定义备份目录名</span><br><span class="line"></span><br><span class="line"># 检查</span><br><span class="line">ls /data/bak  # 会自动以当前时间戳创建目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 备份文件说明 </span><br><span class="line">    cat xtrabackup_binlog_info</span><br><span class="line">    mysql-bin.000010	274	5bee84cd-66ce-11ec-b1fd-525400aaf73e:1,</span><br><span class="line">    934ba059-66ca-11ec-8dce-525400aaf73e:1,</span><br><span class="line">    b25a4cc7-609b-11ec-afea-525400aaf73e:1-13</span><br><span class="line">    # 备份时刻的binlog位置</span><br><span class="line">    # 记录的是备份时刻，binlog的文件名字和当时的结束的position，可以用来作为截取binlog时的起点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cat xtrabackup_checkpoints</span><br><span class="line">    backup_type = full-backuped</span><br><span class="line">    from_lsn = 0          # 上次所到达的LSN号(对于全备就是从0开始,对于增量有别的显示方法)</span><br><span class="line">    to_lsn = 155266303    #  备份开始时间(ckpt)点数据页的LSN    </span><br><span class="line">    last_lsn = 155266312  # 备份结束后，redo日志最终的LSN</span><br><span class="line">    compact = 0</span><br><span class="line">    recover_binlog_info = 0</span><br><span class="line">    # 备份时刻，立即将已经commit过的，内存中的数据页刷新到磁盘(CKPT).开始备份数据，数据文件的LSN会停留在to_lsn位置</span><br><span class="line">    # 备份时刻有可能会有其他的数据写入，已备走的数据文件就不会再发生变化了</span><br><span class="line">    # 在备份过程中，备份软件会一直监控着redo的undo，如果一旦有变化会将日志也一并备走，并记录LSN到last_lsn</span><br><span class="line">    # 从to_lsn ----&gt; last_lsn 就是，备份过程中产生的数据变化.</span><br><span class="line"></span><br><span class="line">    xtrabackup_info  # 整体统计</span><br><span class="line">    xtrabackup_logfile  # 部分redo日志</span><br></pre></td></tr></table></figure>

<h4 id="全备恢复"><a href="#全备恢复" class="headerlink" title="全备恢复"></a>全备恢复</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全备</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=1 /data/bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟删除(不代表生成操作)</span></span><br><span class="line">pkill mysql</span><br><span class="line">rm -rf /data/mysql/data/* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复步骤</span></span><br><span class="line"><span class="comment"># 准备备份(Prepared)，将redo进行重做，已提交的写到数据文件，未提交的使用undo回滚掉，模拟了CSR的过程</span></span><br><span class="line">innobackupex --apply-log  /data/bak/2021-12-27_14-51-12/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复启动</span></span><br><span class="line">cp -a /data/bak/2021-12-27_14-51-12/* /data/mysql/data/</span><br><span class="line">chown -R mysql:mysql /data/</span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>

<h4 id="增量备份和恢复"><a href="#增量备份和恢复" class="headerlink" title="增量备份和恢复"></a>增量备份和恢复</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 说明</span></span><br><span class="line">(1)增量备份的方式，是基于上一次备份进行增量</span><br><span class="line">(2)增量备份无法单独恢复。必须基于全备进行恢复</span><br><span class="line">(3)所有增量必须要按顺序合并到全备中</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始模拟</span></span><br><span class="line"><span class="comment"># 全备一次</span></span><br><span class="line">innobackupex --user=root --password=1 --no-timestamp /data/bak/full_$(date +%F)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次数据变化</span></span><br><span class="line">create database xbk charset utf8mb4;</span><br><span class="line">use xbk;</span><br><span class="line">create table t1(id int);</span><br><span class="line">insert into t1 values (1),(2),(3);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次数据变化的增量备份，基于全备而备份</span></span><br><span class="line">innobackupex --user=root --password=1 --no-timestamp --incremental --incremental-basedir=/data/bak/full_2021-12-27 /data/bak/inc1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次数据变化</span></span><br><span class="line">use xbk;</span><br><span class="line">create table t2(id int);</span><br><span class="line">insert into t2 values (11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次数据变化的增量备份，基于第一次增量备份进行备份</span></span><br><span class="line">innobackupex --user=root --password=1 --no-timestamp --incremental --incremental-basedir=/data/bak/inc1 /data/bak/inc2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否备份成功，可以查看每个xtrabackup_checkpoints信息是否接上</span></span><br><span class="line"><span class="built_in">cd</span> /data/bak/</span><br><span class="line">cat full_2021-12-27/xtrabackup_checkpoints</span><br><span class="line">cat inc1/xtrabackup_checkpoints</span><br><span class="line">cat inc2/xtrabackup_checkpoints</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增量恢复</span></span><br><span class="line">合并所有的增备到全备</span><br><span class="line">每个XBK备份都需要恢复准备(prepare)</span><br><span class="line">参数:</span><br><span class="line">--apply-log </span><br><span class="line">--redo-noly</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录说明</span></span><br><span class="line">/data/bak/full_2021-12-27  <span class="comment"># 全备目录</span></span><br><span class="line">/data/bak/inc1  <span class="comment"># 第一次增备目录</span></span><br><span class="line">/data/bak/inc2  <span class="comment"># 第二次增备目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理全备</span></span><br><span class="line">innobackupex --apply-log --redo-only /data/bak/full_2021-12-27 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理并合并第一次数据变化的增量到全备</span></span><br><span class="line">innobackupex --apply-log --redo-only --incremental-dir=/data/bak/inc1 /data/bak/full_2021-12-27</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理并合并第二次数据变化的增量到全备中</span></span><br><span class="line">innobackupex --apply-log --incremental-dir=/data/bak/inc2 /data/bak/full_2021-12-27</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次整理全备</span></span><br><span class="line">innobackupex --apply-log /data/bak/full_2021-12-27</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟故障</span></span><br><span class="line">pkill mysql</span><br><span class="line">rm -rf /data/mysql/data*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">cp -a /data/bak/full_2021-12-27/* /data/mysql/data/</span><br><span class="line">chown -R /data/</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>检查是否增量备份成功：<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/40j93z.png" alt="40j93z"></p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xtrabackup的全备目录内有表空间结构等信息</span></span><br><span class="line">ll /data/bak/full_2021-12-27/xbk/</span><br><span class="line">总用量 220</span><br><span class="line">-rw-r----- 1 mysql mysql    67 12月 27 17:10 db.opt</span><br><span class="line">-rw-r----- 1 mysql mysql  8556 12月 27 17:10 t1.frm</span><br><span class="line">-rw-r----- 1 mysql mysql 98304 12月 27 17:07 t1.ibd</span><br><span class="line">-rw-r----- 1 mysql mysql  8556 12月 27 17:10 t2.frm</span><br><span class="line">-rw-r----- 1 mysql mysql 98304 12月 27 17:10 t2.ibd</span><br><span class="line"><span class="comment"># 所以可以考虑使用迁移表空间恢复，参考 8、存储引擎 ---&gt; 迁移表空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产中的备份命令</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=1 --no-timestamp --stream=tar --use-memory=256M --parallel=2 /data/bak/full | gzip | ssh root@192.168.0.12 <span class="string">&quot;cat - &gt; /data/bak/full.tgz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--stream=tar       <span class="comment"># 压缩</span></span><br><span class="line">--use-memory=256M  <span class="comment"># 开辟内存空间</span></span><br><span class="line">--parallel=8       <span class="comment"># 并发，依据CPU核心调整</span></span><br><span class="line">ssh root@192.168.0.12 <span class="string">&quot;cat - &gt; /data/bak/full.tgz&quot;</span>  <span class="comment"># 推送到 192.168.0.12 服务器上</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL数据迁移"><a href="#MySQL数据迁移" class="headerlink" title="MySQL数据迁移"></a>MySQL数据迁移</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 换主机</span><br><span class="line">    在线使用mysqldump和xtrabackup备份，传输到目标主机</span><br><span class="line">    追加所有备份后的日志</span><br><span class="line">    申请停机</span><br><span class="line">    剩余部分使用binlog继续恢复(使用主从的方式替代)</span><br><span class="line">    校验数据进行业务割接</span><br><span class="line"></span><br><span class="line">2. 换版本升级</span><br><span class="line">    5.6 ---&gt; 5.7</span><br><span class="line">    5.7 mysqld_safe mysql_upgrade</span><br><span class="line">    </span><br><span class="line">		建议使用mysqldump 逻辑备份方式，按业务库进行分别备份，排除掉information_schema,performance_schema.sys</span><br><span class="line">		恢复完成后，升级数据字典</span><br><span class="line"></span><br><span class="line">3. 异构迁移 ---&gt; 系统不一样</span><br><span class="line">4. 异构迁移 ---&gt; 数据库产品不同</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志管理</title>
    <url>/2386d3bc.html</url>
    <content><![CDATA[<h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><span id="more"></span>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/f262Yf.jpg" alt="f262Yf"></p>
<h3 id="错误日志-log-err"><a href="#错误日志-log-err" class="headerlink" title="错误日志(log_err)"></a>错误日志(<code>log_err</code>)</h3><ul>
<li><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录启动、关闭、日常运行过程中的状态信、警告、错误 </span><br></pre></td></tr></table></figure></li>
<li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认开启的，默认位置在 /数据路径下/hostname.err</span><br><span class="line"></span><br><span class="line"># 自定义配置</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">log_error=/data/mysql/data/mysql.log</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 重启生效</span><br><span class="line"></span><br><span class="line"># 数据库内查看错误日志文件位置</span><br><span class="line">select @@log_error;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主要关注[ERROR],看上下文</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="binlog-binary-logs-二进制日志"><a href="#binlog-binary-logs-二进制日志" class="headerlink" title="binlog(binary logs):二进制日志"></a><code>binlog(binary logs):</code>二进制日志</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.备份恢复必须依赖二进制日志</span><br><span class="line">2.主从环境必须依赖二进制日志</span><br></pre></td></tr></table></figure>

<h4 id="基础参数查看"><a href="#基础参数查看" class="headerlink" title="基础参数查看"></a>基础参数查看</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@log_bin;  # 开关</span><br><span class="line">select @@log_bin_basename;  # 日志路径及名字</span><br><span class="line">select @@server_id;  # 服务ID号</span><br><span class="line">select @@binlog_format;  # 二进制日志格式</span><br><span class="line">select @@sync_binlog;  # 双一标准之二</span><br><span class="line">show variables like &#x27;%log_bin%&#x27;; # mysql内查看二进制日志情况</span><br></pre></td></tr></table></figure>

<h4 id="配置开启二进制日志"><a href="#配置开启二进制日志" class="headerlink" title="配置开启二进制日志"></a>配置开启二进制日志</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL默认是没有开启二进制日志的</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line">log_bin:    开关以及设置存放位置</span><br><span class="line">server_id:  5.6中不需要，5.7中必须加</span><br><span class="line"></span><br><span class="line">mkdir /data/binlog</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">...</span><br><span class="line">server_id=6</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">chown -R mysql.mysql /data/</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">ls /data/binlog/</span><br><span class="line">-rw-r----- 1 mysql mysql 154 12月 24 15:10 mysql-bin.000001</span><br><span class="line">-rw-r----- 1 mysql mysql  30 12月 24 15:10 mysql-bin.index</span><br><span class="line"></span><br><span class="line"># 注意: 日志和数据分开存放(物理磁盘)</span><br></pre></td></tr></table></figure>

<h4 id="记录情况"><a href="#记录情况" class="headerlink" title="记录情况"></a>记录情况</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binlog是SQL层的功能。记录的是变更SQL语句，不记录查询语句</span><br><span class="line"></span><br><span class="line">DDL ：原封不动的记录当前DDL(statement)。</span><br><span class="line">DCL ：原封不动的记录当前DCL(statement)。</span><br><span class="line">DML ：只记录已经提交的事务DML</span><br><span class="line">三种记录方式：受binlog_format（binlog的记录格式）参数影响</span><br><span class="line"></span><br><span class="line">1. STATEMENT (5.6默认)   SBR  ：语句模式原封不动的记录当前DML            ---&gt; 行记录模式，记录行的变化</span><br><span class="line">2. ROW       (5.7默认值)	RBR  ：记录数据行的变化(用户看不懂，需要工具分析)  ---&gt; 语句记录模式，记录操作语句本身</span><br><span class="line">3. MIXED     (混合)模式  MBR  ：以上两种模式的混合                      ---&gt; 混合记录模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SBR与RBR模式的对比</span><br><span class="line">STATEMENT(SBR)：只记录语句本身，可读性较高，日志量少，但是不够严谨，对于函数类的操作，将来恢复时会造成错误</span><br><span class="line">ROW(RBR)      ：逐行记录日志，可读性很低，日志量大，足够严谨，不会出现记录错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.7默认是RBR模式，企业建议模式</span><br><span class="line"></span><br><span class="line"># 查看模式</span><br><span class="line">mysql&gt;select @@binlog_format;</span><br><span class="line"></span><br><span class="line"># 配置文件中可更改</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">binlog_format=row</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="事件-event"><a href="#事件-event" class="headerlink" title="事件(event)"></a>事件(<code>event</code>)</h4><ul>
<li><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二进制日志的最小记录单元</span><br><span class="line">对于DDL,DCL,一个语句就是一个event</span><br><span class="line">对于DML语句来讲:只记录已提交的事务</span><br><span class="line">例如以下列子,就被分为了4个event</span><br><span class="line"></span><br><span class="line">            position号码(字节偏移量，截取日志用)</span><br><span class="line">begin;      120  - 340</span><br><span class="line">DML1        340  - 460</span><br><span class="line">DML2        460  - 550</span><br><span class="line">commit;     550  - 760</span><br></pre></td></tr></table></figure></li>
<li><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三部分构成:</span><br><span class="line">(1) 事件的开始标识</span><br><span class="line">(2) 事件内容</span><br><span class="line">(3) 事件的结束标识</span><br><span class="line"></span><br><span class="line">Position:</span><br><span class="line">开始标识: at 194</span><br><span class="line">结束标识: end_log_pos 254</span><br><span class="line"></span><br><span class="line">194? 254?</span><br><span class="line">某个事件在binlog中的相对位置号</span><br><span class="line">位置号的作用是为了方便我们截取事件</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="日志文件的查看"><a href="#日志文件的查看" class="headerlink" title="日志文件的查看"></a>日志文件的查看</h4><ul>
<li><h5 id="简单查看"><a href="#简单查看" class="headerlink" title="简单查看"></a>简单查看</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看二进制日志位置</span><br><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br><span class="line"></span><br><span class="line">ll /data/binlog/</span><br><span class="line">-rw-r----- 1 mysql mysql 154 12月 24 15:10 mysql-bin.000001</span><br><span class="line">-rw-r----- 1 mysql mysql  30 12月 24 15:10 mysql-bin.index</span><br><span class="line"></span><br><span class="line"># 查看正在使用的二进制</span><br><span class="line">show binary logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Log_name: 目前MySQL存在的二进制日志名字</span><br><span class="line">File_size: 目前MySQL用到哪个Position号，使用的是最后一个文件</span><br><span class="line">Position：最后一个事件的结束位置号</span><br><span class="line"></span><br><span class="line"># 二进制文件会增加一个</span><br><span class="line">flush logs;</span><br><span class="line"></span><br><span class="line"># 查看正在使用的二进制文件</span><br><span class="line">show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  | 269f1ac3-8d95-11e9-8dc4-000c297969b7:1-7 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><h4 id="内容查看binlog文件内容"><a href="#内容查看binlog文件内容" class="headerlink" title="内容查看binlog文件内容"></a>内容查看<code>binlog</code>文件内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看二进制日志文件</span><br><span class="line"># 先查看正在使用的二进制文件</span><br><span class="line">show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  | 269f1ac3-8d95-11e9-8dc4-000c297969b7:1-7 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 根据当前使用的二进制日志再查看当前的event</span><br><span class="line">show binlog events in &#x27;mysql-bin.000003&#x27;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.31-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                       |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查看最开始的日志文件及说明</span><br><span class="line">show binlog events in &#x27;mysql-bin.000001&#x27;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| mysql-bin.000001 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.31-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000001 | 123 | Previous_gtids |         6 |         154 |                                       |</span><br><span class="line">| mysql-bin.000001 | 154 | Rotate         |         6 |         201 | mysql-bin.000002;pos=4                |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Pos 4 是保留字段</span><br><span class="line">Pos 154 是日志文件头格式信息(5.7版本是154个字节，5.6版本是前120个字节)  </span><br><span class="line">每一行都是一个事件</span><br><span class="line"></span><br><span class="line"># 说明</span><br><span class="line">Log_name    : 日志名    </span><br><span class="line">Pos         : 事件开始的Position</span><br><span class="line">Event_type  : 事件类型</span><br><span class="line">Server_id   : 发生在哪台机器的事件</span><br><span class="line">End_log_pos : 事件结束的位置</span><br><span class="line">Info        : 事件内容</span><br><span class="line"></span><br><span class="line"># 录入信息查看事件信息</span><br><span class="line"># 没录入信息之前</span><br><span class="line">show binlog events in &#x27;mysql-bin.000003&#x27;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.31-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                       |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 创建数据以及插入数据提交</span><br><span class="line">create database testdb;</span><br><span class="line">use testdb;</span><br><span class="line">create table t1(id int);</span><br><span class="line">insert into t1 values(1);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># 查看录入数据之后的情况</span><br><span class="line">show binlog events in &#x27;mysql-bin.000003&#x27;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.31-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                       |</span><br><span class="line">| mysql-bin.000003 | 154 | Anonymous_Gtid |         6 |         219 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 219 | Query          |         6 |         319 | create database testdb                |</span><br><span class="line">| mysql-bin.000003 | 319 | Anonymous_Gtid |         6 |         384 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 384 | Query          |         6 |         485 | use `testdb`; create table t1(id int) |</span><br><span class="line">| mysql-bin.000003 | 485 | Anonymous_Gtid |         6 |         550 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 550 | Query          |         6 |         624 | BEGIN                                 |</span><br><span class="line">| mysql-bin.000003 | 624 | Table_map      |         6 |         671 | table_id: 108 (testdb.t1)             |</span><br><span class="line">| mysql-bin.000003 | 671 | Write_rows     |         6 |         711 | table_id: 108 flags: STMT_END_F       |</span><br><span class="line">| mysql-bin.000003 | 711 | Xid            |         6 |         742 | COMMIT /* xid=38 */                   |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br><span class="line"># 这些可读性不强</span><br></pre></td></tr></table></figure></li>
<li><h5 id="binlog文件详细查看"><a href="#binlog文件详细查看" class="headerlink" title="binlog文件详细查看"></a><code>binlog</code>文件详细查看</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行上执行</span></span><br><span class="line">cd /data/binlog/</span><br><span class="line">mysqlbinlog mysql-bin.000003</span><br><span class="line"></span><br><span class="line">mysqlbinlog mysql-bin.000003  |grep -v &#x27;SET&#x27;  # 这条命令得到也看不懂 有注释时间等</span><br><span class="line"></span><br><span class="line">mysqlbinlog --base64-output=decode-rows  -vvvv mysql-bin.000003</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/wzf7nb.png" alt="wzf7nb"></p>
</li>
</ul>
<h4 id="基于二进制日志数据恢复"><a href="#基于二进制日志数据恢复" class="headerlink" title="基于二进制日志数据恢复"></a>基于二进制日志数据恢复</h4><ul>
<li><h5 id="按需截取日志"><a href="#按需截取日志" class="headerlink" title="按需截取日志"></a>按需截取日志</h5><blockquote>
<p>截取二进制日志的核心在于找起点和终点</p>
</blockquote>
<ul>
<li><p>基于<code>position</code>号截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysqlbinlog 命令参数截取</span><br><span class="line">--start-position=</span><br><span class="line">--stop-position=</span><br><span class="line"></span><br><span class="line"># sql语句查到建库的position号</span><br><span class="line"> show binlog events in &#x27;mysql-bin.000003&#x27;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.31-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                       |</span><br><span class="line">| mysql-bin.000003 | 154 | Anonymous_Gtid |         6 |         219 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 219 | Query          |         6 |         319 | create database testdb                |</span><br><span class="line">| mysql-bin.000003 | 319 | Anonymous_Gtid |         6 |         384 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 384 | Query          |         6 |         485 | use `testdb`; create table t1(id int) |</span><br><span class="line">| mysql-bin.000003 | 485 | Anonymous_Gtid |         6 |         550 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;  |</span><br><span class="line">| mysql-bin.000003 | 550 | Query          |         6 |         624 | BEGIN                                 |</span><br><span class="line">| mysql-bin.000003 | 624 | Table_map      |         6 |         671 | table_id: 108 (testdb.t1)             |</span><br><span class="line">| mysql-bin.000003 | 671 | Write_rows     |         6 |         711 | table_id: 108 flags: STMT_END_F       |</span><br><span class="line">| mysql-bin.000003 | 711 | Xid            |         6 |         742 | COMMIT /* xid=38 */                   |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 截取事件导出sql语句(命令行)</span><br><span class="line">mysqlbinlog --start-position=219 --stop-position=319 /data/binlog/mysql-bin.000003 &gt; /tmp/bin.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 恢复(sql语句)</span><br><span class="line"># 模拟删除(不代表生产)</span><br><span class="line">show databases;</span><br><span class="line">drop database testdb;</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 临时关闭当前查看二进制日志记录开关</span><br><span class="line"># 因为已经有了二进制日志做恢复，再次恢复的时候会再次记录恢复的二进制日志，所以要先短暂关闭二进制记录，避免IO损耗</span><br><span class="line">set sql_log_bin=0;  </span><br><span class="line"></span><br><span class="line"># 恢复命令</span><br><span class="line">source /tmp/bin.sql;</span><br><span class="line"></span><br><span class="line"># 检查</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">set sql_log_bin=1;</span><br><span class="line"># 恢复完成后需要退出当前窗口，当前窗口binlog二进制没有记录</span><br></pre></td></tr></table></figure>



<p>下图是根据<code>position</code>号截取的日志信息</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/LBFNQB.png" alt="LBFNQB"></p>
</li>
<li><p>基于时间截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--start-datetime</span><br><span class="line">--stop-datetime</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>案例恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用binlog日志进行恢复</span><br><span class="line">#模拟删库</span><br><span class="line">create database binlog charset utf8mb4;</span><br><span class="line"></span><br><span class="line">use binlog;</span><br><span class="line">create table t1(id int);</span><br><span class="line">insert into t1 values(1);</span><br><span class="line">commit;</span><br><span class="line">insert into t1 values(2);</span><br><span class="line">commit;</span><br><span class="line">insert into t1 values(3);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">drop database binlog;</span><br><span class="line"></span><br><span class="line"># 恢复 </span><br><span class="line"># 查看当前的二进制日志文件是哪一个</span><br><span class="line">show master status;</span><br><span class="line"></span><br><span class="line"># 查看事件找到起点和终点</span><br><span class="line">show binlog events in &#x27;mysql-bin.000003&#x27;;</span><br><span class="line">......</span><br><span class="line">| mysql-bin.000003 |  905 | Anonymous_Gtid |         6 |         970 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 |  970 | Query          |         6 |        1086 | create database binlog charset utf8mb4 |</span><br><span class="line">| mysql-bin.000003 | 1086 | Anonymous_Gtid |         6 |        1151 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 | 1151 | Query          |         6 |        1252 | use `binlog`; create table t1(id int)  |</span><br><span class="line">| mysql-bin.000003 | 1252 | Anonymous_Gtid |         6 |        1317 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 | 1317 | Query          |         6 |        1391 | BEGIN                                  |</span><br><span class="line">| mysql-bin.000003 | 1391 | Table_map      |         6 |        1438 | table_id: 110 (binlog.t1)              |</span><br><span class="line">| mysql-bin.000003 | 1438 | Write_rows     |         6 |        1478 | table_id: 110 flags: STMT_END_F        |</span><br><span class="line">| mysql-bin.000003 | 1478 | Xid            |         6 |        1509 | COMMIT /* xid=87 */                    |</span><br><span class="line">| mysql-bin.000003 | 1509 | Anonymous_Gtid |         6 |        1574 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 | 1574 | Query          |         6 |        1648 | BEGIN                                  |</span><br><span class="line">| mysql-bin.000003 | 1648 | Table_map      |         6 |        1695 | table_id: 110 (binlog.t1)              |</span><br><span class="line">| mysql-bin.000003 | 1695 | Write_rows     |         6 |        1735 | table_id: 110 flags: STMT_END_F        |</span><br><span class="line">| mysql-bin.000003 | 1735 | Xid            |         6 |        1766 | COMMIT /* xid=89 */                    |</span><br><span class="line">| mysql-bin.000003 | 1766 | Anonymous_Gtid |         6 |        1831 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 | 1831 | Query          |         6 |        1905 | BEGIN                                  |</span><br><span class="line">| mysql-bin.000003 | 1905 | Table_map      |         6 |        1952 | table_id: 110 (binlog.t1)              |</span><br><span class="line">| mysql-bin.000003 | 1952 | Write_rows     |         6 |        1992 | table_id: 110 flags: STMT_END_F        |</span><br><span class="line">| mysql-bin.000003 | 1992 | Xid            |         6 |        2023 | COMMIT /* xid=91 */                    |</span><br><span class="line">| mysql-bin.000003 | 2023 | Anonymous_Gtid |         6 |        2088 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql-bin.000003 | 2088 | Query          |         6 |        2186 | drop database binlog                   |</span><br><span class="line">+------------------+------+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line"></span><br><span class="line">起点: 970</span><br><span class="line">终点: 2088(2186是删库语句，否则无意义)</span><br><span class="line"></span><br><span class="line"># 根据起点和终点截取需要的二进制日志(命令行操作)</span><br><span class="line">mysqlbinlog --start-position=970 --stop-position=2088 /data/binlog/mysql-bin.000003 &gt; /tmp/databse-binlog.sql</span><br><span class="line"></span><br><span class="line"># 恢复</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">source /tmp/databse-binlog.sql;</span><br><span class="line"></span><br><span class="line"># 验证结果</span><br><span class="line">show databases;</span><br><span class="line">select * from t1;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="GTID功能的二进制日志"><a href="#GTID功能的二进制日志" class="headerlink" title="GTID功能的二进制日志"></a><code>GTID</code>功能的二进制日志</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database binlog charset utf8mb4;</span><br><span class="line">use binlog;</span><br><span class="line">create table t1(id int);</span><br><span class="line">insert into t1 values(1);</span><br><span class="line">commit;</span><br><span class="line">insert into t1 values(2);</span><br><span class="line">commit;</span><br><span class="line">truncate table t1;  # 这条是误操作,不能恢复这条语句</span><br><span class="line">insert into t1 values(3);</span><br><span class="line">commit;</span><br><span class="line">drop database binlog;</span><br><span class="line"># 截取position号就比较麻烦 ，需要多次截取恢复，不方便</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>GTID</code>介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GTID(全局事务编号)</span><br><span class="line">是对于一个已提交事务的编号，并且是一个全局唯一的编号。</span><br><span class="line">它的官方定义如下：</span><br><span class="line">GTID = source_id ：transaction_id</span><br><span class="line">7E11FA47-31CA-19E1-9E56-C43AA21293967:29</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">DDL DCL，一条语句(事件)就是一个事务，占一个GTID号</span><br><span class="line">DML，一个完整的事务(begin ---&gt; commit)，是一个事务，占一个GTID号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.6 版本新加的特性,5.7中做了加强</span><br><span class="line">5.6 中不开启,没有这个功能.</span><br><span class="line">5.7 中的GTID,即使不开也会有自动生成</span><br><span class="line">SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><code>GTID</code>配置及截取使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改GTID相关的配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 重启数据库</span><br><span class="line">systemctl restart mysql</span><br><span class="line"></span><br><span class="line"># GTID的前段</span><br><span class="line">cat /data/mysql/data/auto.cnf</span><br><span class="line">[auto]</span><br><span class="line">server-uuid=b25a4cc7-609b-11ec-afea-525400aaf73e</span><br><span class="line"></span><br><span class="line"># 查看GTID</span><br><span class="line"> show master status;  # Executed_Gtid_Set信息</span><br><span class="line"> </span><br><span class="line"># 创建数据查看GTID情况</span><br><span class="line"> create database testdb2 charset utf8mb4;</span><br><span class="line"> use testdb2;</span><br><span class="line"> create table t1 (id int);</span><br><span class="line"> insert into t1 values(1);</span><br><span class="line"> commit;</span><br><span class="line"> insert into t1 values(2);</span><br><span class="line"> commit;</span><br><span class="line"> insert into t1 values(3);</span><br><span class="line"> commit;</span><br><span class="line"> </span><br><span class="line"> show master status;</span><br><span class="line"> show binlog events in &#x27;mysql-bin.000004&#x27;;</span><br><span class="line"> </span><br><span class="line"> # 看到下图多了右边的编号，此时模拟执行数据库丢失</span><br><span class="line"> drop database testdb2;</span><br><span class="line"> </span><br><span class="line">show binlog events in &#x27;mysql-bin.000004&#x27;;  # 此时多了一条删库的编号</span><br><span class="line"></span><br><span class="line"># 基于GTID截取日志</span><br><span class="line"># 参数</span><br><span class="line">--include-gtids</span><br><span class="line">--exclude-gtids</span><br><span class="line">--skip-gtids</span><br><span class="line"></span><br><span class="line"># 错误的截取命令(命令行)</span><br><span class="line">mysqlbinlog --include-gtids=&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:1-5&#x27; /data/binlog/mysql-bin.000004 &gt; /tmp/testdb2.sql</span><br><span class="line"># 以上截取出来的日志不能直接恢复使用</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/GzZJIW.png" alt="GzZJIW"></p>
</li>
<li><p><code>GTID</code>幂等性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启GTID后,MySQL恢复Binlog时,重复GTID的事务不会再执行了</span><br><span class="line">show master status;  # 因为这条命令中出现的 Executed_Gtid_set信息 已经有了，表示不会再做了，检查幂等性</span><br><span class="line"></span><br><span class="line"># 恢复</span><br><span class="line"># 正确的截取日志命令(命令行)</span><br><span class="line">mysqlbinlog --skip-gtids --include-gtids=&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:1-5&#x27; /data/binlog/mysql-bin.000004 &gt; /tmp/testdb2.sql</span><br><span class="line"></span><br><span class="line"># sql语句恢复</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">source /tmp/testdb2.sql</span><br><span class="line">set sql_log_bin=1;</span><br><span class="line"></span><br><span class="line"># 检查</span><br><span class="line">show databases;</span><br><span class="line">select * from testdb2.t1;</span><br><span class="line"></span><br><span class="line"># 跳过某些GTID不截取</span><br><span class="line">mysqlbinlog --skip-gtids --include-gtids=&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:1-5&#x27; \</span><br><span class="line">--exclude-gtids=&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:6&#x27; \</span><br><span class="line">/data/binlog/mysql-bin.000004 &gt; /tmp/testdb2.sql</span><br><span class="line"></span><br><span class="line">单个: &#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:6&#x27;</span><br><span class="line">连续个: &#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:1-6&#x27;</span><br><span class="line">多个不连续: &#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:2&#x27;,&#x27;b25a4cc7-609b-11ec-afea-525400aaf73e:3&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="二进制日志其他操作"><a href="#二进制日志其他操作" class="headerlink" title="二进制日志其他操作"></a>二进制日志其他操作</h4><ul>
<li><h5 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 临时关闭二进制日志，退出mysql窗口就可以恢复，做数据恢复之前使用</span><br><span class="line">set sql_log_bin=0;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="自动清理"><a href="#自动清理" class="headerlink" title="自动清理"></a>自动清理</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 窗口自动清理周期</span><br><span class="line">select @@expire_logs_days;</span><br><span class="line">show variables like &#x27;%expire%&#x27;;</span><br><span class="line"></span><br><span class="line"># 自动清理时间,是要按照全备周期+1</span><br><span class="line"># 企业建议,至少保留两个全备周期+1的binlog</span><br><span class="line">set global expire_logs_days=8;</span><br><span class="line"></span><br><span class="line"># 永久生效</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">expire_logs_days=15;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><h5 id="手工清理"><a href="#手工清理" class="headerlink" title="手工清理"></a>手工清理</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 三天之前到现在的</span><br><span class="line">PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</span><br><span class="line">PURGE BINARY LOGS TO &#x27;mysql-bin.000010&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看binlog日志信息</span><br><span class="line">show binary logs;</span><br><span class="line"></span><br><span class="line"># 删除到哪个二进制日志为止</span><br><span class="line">PURGE BINARY LOGS TO &#x27;mysql-bin.000004&#x27;;</span><br><span class="line"></span><br><span class="line"># 注意:不要手工 rm binlog文件，如果 rm 删除了如下恢复</span><br><span class="line">1. my.cnf binlog关闭掉,启动数据库</span><br><span class="line">2.把数据库关闭,开启binlog,启动数据库</span><br><span class="line">删除所有binlog,并从000001开始重新记录日志</span><br><span class="line"></span><br><span class="line"># 重新计数二进制日志，主从关系中，主库执行此操作，主从环境必崩</span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="日志滚动"><a href="#日志滚动" class="headerlink" title="日志滚动"></a>日志滚动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启mysql也会自动滚动一个新的</span><br><span class="line"># 产生一个新的日志sql命令</span><br><span class="line">flush logs;</span><br><span class="line"></span><br><span class="line"># 默认日志文件大小1G，达到这个大小也回生成全新的，一般会设置小一点，避免分析的时候打不开</span><br><span class="line">show variables like &#x27;%max_binlog_size%&#x27;;</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| Variable_name   | Value      |</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| max_binlog_size | 1073741824 |</span><br><span class="line">+-----------------+------------+</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="slow-log慢日志"><a href="#slow-log慢日志" class="headerlink" title="slow_log慢日志"></a><code>slow_log</code>慢日志</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录慢SQL语句的日志,定位低效SQL语句的工具日志</span><br></pre></td></tr></table></figure>

<h4 id="开启慢日志"><a href="#开启慢日志" class="headerlink" title="开启慢日志"></a>开启慢日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看是否开启</span><br><span class="line">select @@slow_query_log;</span><br><span class="line"></span><br><span class="line"># 查看慢日志位置</span><br><span class="line">select @@slow_query_log_file;</span><br><span class="line"></span><br><span class="line"># 查看慢查询时间</span><br><span class="line">select @@long_query_time;</span><br><span class="line">select @@log_queries_not_using_indexes ;</span><br><span class="line"></span><br><span class="line"># 设置慢日志配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">slow_query_log=1                               # 开关</span><br><span class="line">slow_query_log_file=/data/mysql/data/slow.log  # 文件位置及名字 </span><br><span class="line">long_query_time=0.1                            # 设定慢查询时间</span><br><span class="line">log_queries_not_using_indexes                  # 没走索引的语句也记录</span><br><span class="line"></span><br><span class="line"># 重启mysql</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<h4 id="慢日志分析"><a href="#慢日志分析" class="headerlink" title="慢日志分析"></a>慢日志分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 模拟慢日志，多执行几次</span><br><span class="line">select * from t100w where k1=&quot;aa&quot; limit 1000,2000;</span><br><span class="line"></span><br><span class="line"># mysqldumpslow 分析慢日志</span><br><span class="line">mysqldumpslow -s c -t 10 /data/mysql/data/slow.log</span><br><span class="line"></span><br><span class="line"># 命令擦参数说明</span><br><span class="line">-s  # 以...排序</span><br><span class="line">c   # 执行次数</span><br><span class="line">-t  # top 10</span><br><span class="line"></span><br><span class="line"># 第三方工具</span><br><span class="line"># 下载地址 https://www.percona.com/downloads/percona-toolkit/LATEST/</span><br><span class="line"># wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/percona-toolkit-3.2.1-1.el7.x86_64.rpm</span><br><span class="line">wget https://downloads.percona.com/downloads/percona-toolkit/3.3.1/binary/redhat/7/x86_64/percona-toolkit-3.3.1-1.el7.x86_64.rpm</span><br><span class="line">yum -y install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest-MD5</span><br><span class="line">yum -y localinstall percona-toolkit-3.3.1-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"># toolkit工具包中的命令</span><br><span class="line">pt-query-diagest  /data/mysql/data/slow.log</span><br><span class="line"></span><br><span class="line"># 图形化的第三方工具</span><br><span class="line">Anemometer基于pt-query-digest将MySQL慢查询可视化</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储引擎(InnoDB)</title>
    <url>/ff3d77ac.html</url>
    <content><![CDATA[<h3 id="存储引擎介绍"><a href="#存储引擎介绍" class="headerlink" title="存储引擎介绍"></a>存储引擎介绍</h3><blockquote>
<p>类似于Linux系统中的文件系统</p>
</blockquote>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据读写</span><br><span class="line">数据安全和一致性</span><br><span class="line">提高性能</span><br><span class="line">热备份</span><br><span class="line">自动故障恢复</span><br><span class="line">高可用方面支持</span><br></pre></td></tr></table></figure>

<h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB</span><br><span class="line">MyISAM</span><br><span class="line">MEMORY</span><br><span class="line">ARCHIVE</span><br><span class="line">FEDERATED</span><br><span class="line">EXAMPLE</span><br><span class="line">BLACKHOLE</span><br><span class="line">MERGE</span><br><span class="line">NDBCLUSTER</span><br><span class="line">CSV</span><br><span class="line"></span><br><span class="line"># 引擎种类查看</span><br><span class="line">show engines;</span><br><span class="line"></span><br><span class="line">存储引擎是作用在表上的，也就意味着，不同的表可以有不同的存储引擎类型。</span><br><span class="line">PerconaDB:默认是XtraDB</span><br><span class="line">MariaDB:默认是InnoDB</span><br><span class="line">其他的存储引擎支持:</span><br><span class="line">TokuDB</span><br><span class="line">RocksDB</span><br><span class="line">MyRocks</span><br><span class="line">以上三种存储引擎的共同点:压缩比较高,数据插入性能极高</span><br><span class="line">现在很多的NewSQL,使用比较多的功能特性.</span><br></pre></td></tr></table></figure>

<h3 id="InnoDB存储引擎介绍"><a href="#InnoDB存储引擎介绍" class="headerlink" title="InnoDB存储引擎介绍"></a>InnoDB存储引擎介绍</h3><blockquote>
<p>在MySQL5.5版本之后，默认的存储引擎，提供高可用性和高性能</p>
</blockquote>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/KssDvX.jpg" alt="KssDvX"></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、事务（Transaction）</span><br><span class="line"><span class="number">2</span>、MVCC（Multi-Version Concurrency Control多版本并发控制）</span><br><span class="line"><span class="number">3</span>、行级锁(Row-level Lock)</span><br><span class="line"><span class="number">4</span>、ACSR（Auto Crash Safey Recovery）自动的故障安全恢复</span><br><span class="line"><span class="number">5</span>、支持热备份(Hot Backup)</span><br><span class="line"><span class="number">6</span>、Replication: Group Commit , GTID (<span class="keyword">Global</span> Transaction ID) ,多线程(Multi-Threads-SQL ) </span><br></pre></td></tr></table></figure>

<h4 id="存储引擎查看"><a href="#存储引擎查看" class="headerlink" title="存储引擎查看"></a>存储引擎查看</h4><ul>
<li><h5 id="使用select确认会话存储引擎"><a href="#使用select确认会话存储引擎" class="headerlink" title="使用select确认会话存储引擎"></a>使用select确认会话存储引擎</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@default_storage_engine;</span><br><span class="line">show variables like &#x27;%engine%&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="默认存储引擎设置"><a href="#默认存储引擎设置" class="headerlink" title="默认存储引擎设置"></a>默认存储引擎设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 不会在生产中操作</span><br><span class="line">会话级别</span><br><span class="line">set default_storage_engine=myisam;</span><br><span class="line"></span><br><span class="line">全局级别(仅影响新会话)</span><br><span class="line">set global default_storage_engine=myisam;</span><br><span class="line">重启之后，所有参数均失效</span><br><span class="line"></span><br><span class="line"># 放入配置文件永久生效</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_storage_engine=myisam</span><br><span class="line"></span><br><span class="line">存储引擎是表级别的，每个表创建时可以指定不同的存储引擎，但是建议统一为Innodb</span><br></pre></td></tr></table></figure></li>
<li><h5 id="查看表的存储引擎"><a href="#查看表的存储引擎" class="headerlink" title="查看表的存储引擎"></a>查看表的存储引擎</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看单表的存储引擎</span><br><span class="line">show create table world.city\G</span><br><span class="line"></span><br><span class="line">use world;</span><br><span class="line">show table status like &#x27;countrylanguage&#x27;\G</span><br><span class="line"></span><br><span class="line"># 查看每个表的存储引擎</span><br><span class="line">select table_schema,table_name ,engine from information_schema.tables where table_schema not in (&#x27;sys&#x27;,&#x27;mysql&#x27;,&#x27;information_schema&#x27;,&#x27;performance_schema&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><h5 id="修改一个表的存储引擎-碎片整理"><a href="#修改一个表的存储引擎-碎片整理" class="headerlink" title="修改一个表的存储引擎(碎片整理)"></a>修改一个表的存储引擎(碎片整理)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table world.city engine innodb;</span><br><span class="line"># 这条命令还可以进行innodb表的碎片化整理</span><br><span class="line"></span><br><span class="line"># 将test数据库下的所有1000表，存储引擎从MyISAM替换为innodb </span><br><span class="line">select concat(&quot;alter table &quot;,table_name,&quot; engine innodb;&quot;)</span><br><span class="line">from information_schema.tables </span><br><span class="line">where table_schema=&#x27;test&#x27;</span><br><span class="line">into outfile &#x27;/tmp/alter.sql&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="InnoDB物理存储结构"><a href="#InnoDB物理存储结构" class="headerlink" title="InnoDB物理存储结构"></a>InnoDB物理存储结构</h3><h4 id="最直观的存储方式"><a href="#最直观的存储方式" class="headerlink" title="最直观的存储方式"></a>最直观的存储方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数据目录 /data/mysql/data</span><br><span class="line">ibdata1：系统数据字典信息(统计信息)，UNDO（回滚）表空间等数据</span><br><span class="line">ib_logfile0 ~ ib_logfile1: REDO（重做日志）日志文件，事务日志文件</span><br><span class="line">ib_buffer_pool: 缓冲池(5.7) 上次关机之前的热数据会保存在这，下次启动后会加载这些数据</span><br><span class="line">ibtmp1： 临时表空间磁盘位置，存储临时表</span><br><span class="line">frm：存储表的列信息</span><br><span class="line">ibd：表的数据行和索引</span><br></pre></td></tr></table></figure>

<h4 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要将所有数据存储到同一个表空间中 ，管理比较混乱</span><br><span class="line">5.5版本出现的管理模式，也是默认的管理模式。（数据字典，undo，临时表，索引，表数据）</span><br><span class="line">5.6版本，共享表空间保留，只用来存储:数据字典信息,undo,临时表。</span><br><span class="line">5.7版本,临时表被独立出来了</span><br><span class="line">8.0版本,undo也被独立出去了</span><br><span class="line"></span><br><span class="line">具体变化参考官方文档:</span><br><span class="line">https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html</span><br><span class="line">https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</span><br><span class="line">https://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html</span><br></pre></td></tr></table></figure>

<h5 id="共享表空间"><a href="#共享表空间" class="headerlink" title="共享表空间"></a>共享表空间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 共享表空间 ibdata1</span><br><span class="line">select @@innodb_file_per_table;  # 默认是 1 ，代表当前独立表空间模式，代表每个表一个idb文件</span><br><span class="line">    # 当前 innodb_file_per_table 参数为 1 时创建表查看数据目录情况</span><br><span class="line">    mysql&gt;use world;</span><br><span class="line">    mysql&gt;create table tab(id int);</span><br><span class="line">    </span><br><span class="line">		# 此时在 /data/mysql/data/world 数据目录下会存在下面两个文件，记录表数据和索引</span><br><span class="line">    [root@db1 world]# ll</span><br><span class="line">    -rw-r----- 1 mysql mysql   8556 12月 23 09:52 tab.frm</span><br><span class="line">    -rw-r----- 1 mysql mysql  98304 12月 23 09:52 tab.ibd</span><br><span class="line"></span><br><span class="line">    # 临时设置 innodb_file_per_table 参数为 0 时创建表查看数据目录情况</span><br><span class="line">    set global innodb_file_per_table=0;</span><br><span class="line">    select @@innodb_file_per_table;</span><br><span class="line">    create table bb(id int);</span><br><span class="line">    </span><br><span class="line">    [root@db1 world]# ll</span><br><span class="line">    ...  # 此时没有bb.frm和bb.ibd 两个文件了，此时bb表数据和索引存放在了/data/mysql/ibdata1 文件里了</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"># 共享表空间设置(在搭建MySQL时，初始化数据之前设置到参数文件中)</span><br><span class="line">select @@innodb_data_file_path;  # 查看ibdata1的信息</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@innodb_data_file_path |</span><br><span class="line">+-------------------------+</span><br><span class="line">| ibdata1:12M:autoextend  |</span><br><span class="line">+-------------------------+</span><br><span class="line"># 默认设置为12M ，autoextend自增长，不够之后每次自增长64兆</span><br><span class="line"></span><br><span class="line">show variables like &#x27;%extend%&#x27;;  # 查看自增长大小，可设置</span><br><span class="line"></span><br><span class="line"># 初始化数据之前设置到参数文件中</span><br><span class="line">innodb_data_file_path=ibdata1:512M:ibdata2:512M:autoextend</span><br><span class="line">innodb_autoextend_increment=64</span><br></pre></td></tr></table></figure>

<h5 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从5.6，默认表空间不再使用共享表空间，替换为独立表空间。</span><br><span class="line">主要存储的是用户数据</span><br><span class="line">存储特点为：一个表一个ibd文件，存储数据行和索引信息</span><br><span class="line"></span><br><span class="line">基本表结构元数据存储：</span><br><span class="line">xxx.frm</span><br><span class="line">最终结论：</span><br><span class="line">      元数据            数据行+索引</span><br><span class="line">mysql表数据    =（ibdataX+frm）+ibd(段、区、页)</span><br><span class="line">        DDL             DML+DQL</span><br><span class="line"></span><br><span class="line">MySQL的存储引擎日志：</span><br><span class="line">Redo Log: ib_logfile0  ib_logfile1，重做日志</span><br><span class="line">Undo Log: ibdata1 ibdata2(存储在共享表空间中)，回滚日志</span><br><span class="line">临时表:ibtmp1，在做join union操作产生临时数据，用完就自动</span><br><span class="line"></span><br><span class="line"># 独立表空间设置(在上面例子中)</span><br></pre></td></tr></table></figure>

<h5 id="迁移表空间"><a href="#迁移表空间" class="headerlink" title="迁移表空间"></a>迁移表空间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 迁移表空间功能，导入和导出表空间</span><br><span class="line">alter table city discard tablespace;  # 删除city表空间  </span><br><span class="line">alter table city import tablespace;  # 导入city表空间</span><br><span class="line"></span><br><span class="line"># 小测试</span><br><span class="line"># 先备份ibd文件</span><br><span class="line">cd /data/mysql/data/school/</span><br><span class="line">cp teacher.ibd /opt/</span><br><span class="line"></span><br><span class="line"># 删除表空间</span><br><span class="line">use school;</span><br><span class="line">alter table teacher discard tablespace;</span><br><span class="line"></span><br><span class="line">ll /data/mysql/data/school/  # 该目录下teacher.ibd文件就mysql删除了</span><br><span class="line"></span><br><span class="line"># 表还在但是无法正常读取,ibdata不识别,统计信息等不存在</span><br><span class="line">show tables;</span><br><span class="line">select * from teacher;  # ERROR 1814 (HY000): Tablespace has been discarded for table &#x27;teacher&#x27;</span><br><span class="line"></span><br><span class="line"># 将备份的ibd文件恢复回位置</span><br><span class="line">cp /opt/teacher.ibd /data/mysql/data/school/</span><br><span class="line">chown -R mysql.mysql /data/mysql/data/school/</span><br><span class="line"></span><br><span class="line">select * from teacher;  # 拷贝回ibd文件之后还是不能查询,ibdata不识别,统计信息等不存在</span><br><span class="line">alter table teacher import tablespace;</span><br><span class="line">select * from teacher;  # 导入表空间之后正常了</span><br><span class="line"></span><br><span class="line"># 批量导入表空间</span><br><span class="line">select concat(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; import tablespace;&quot;) from information_schema.tables where table_schema=&#x27;world&#x27; into outfile &#x27;/tmp/import.sql&#x27;;</span><br><span class="line"></span><br><span class="line"># 批量删除表空间</span><br><span class="line">select concat(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; discard tablespace;&quot;) from information_schema.tables where table_schema=&#x27;world&#x27; into outfile &#x27;/tmp/discad.sql&#x27;;</span><br><span class="line"></span><br><span class="line"># 导入表空间时可能会报错,可以跳过外键检查</span><br><span class="line">set foreign_key_checks=0</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="事务ACID特性"><a href="#事务ACID特性" class="headerlink" title="事务ACID特性"></a>事务<code>ACID</code>特性</h4><blockquote>
<p>影响DML语句(<code>insert</code>、<code>update</code>、<code>delete</code>和一部分<code>select</code>)</p>
</blockquote>
<p><code>Atomic</code>原子性</p>
<blockquote>
<p>所有语句作为一个单元全部成功执行或全部取消，不能出现中间状态</p>
</blockquote>
<p><code>Consistent</code>一致性</p>
<blockquote>
<p>如果数据库在事务开始时处于一致状态，则在执行该事务期间将保留一致状态</p>
</blockquote>
<p><code>Isolated</code>隔离性</p>
<blockquote>
<p>事务之间不相互影响</p>
</blockquote>
<p><code>Durable</code>持久性</p>
<blockquote>
<p>事务成功完成后，所做的所有更改都会准确地记录在数据库中，所做的更改不会丢失。</p>
</blockquote>
<h4 id="事务的生命周期"><a href="#事务的生命周期" class="headerlink" title="事务的生命周期"></a>事务的生命周期</h4><ul>
<li><p>事务的开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin;</span><br><span class="line">start transaction;</span><br><span class="line"># 在5.5 以上的版本，不需要手工begin，只要你执行的是一个DML，会自动在前面加一个begin命令。</span><br></pre></td></tr></table></figure></li>
<li><p>事务的结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit;</span><br><span class="line">完成一个事务，一旦事务提交成功，，就说明具备ACID特性了</span><br><span class="line"></span><br><span class="line">rollback; </span><br><span class="line">回滚事务</span><br><span class="line">将内存中已执行过的操作回滚回去</span><br></pre></td></tr></table></figure></li>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql 窗口一</span><br><span class="line">user world;</span><br><span class="line">begin;</span><br><span class="line">delete from city where id &gt; 3000;</span><br><span class="line">delete from city where id &gt; 2000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mysql 窗口二</span><br><span class="line">use world;</span><br><span class="line">select * from city;  # 此时查询的数据还是4079条数据，并没有被删除</span><br><span class="line">begin;</span><br><span class="line">delete from city where id &gt; 1800;  </span><br><span class="line"># 此时会卡主，因为在等上一个事务，隔离性</span><br><span class="line"># 操作相同的语句会等上一个事务结束之后才会继续</span><br><span class="line"># 过了超时时间就会报 ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="line"></span><br><span class="line"># mysql 窗口一</span><br><span class="line">commit;  # 此时提交</span><br><span class="line"></span><br><span class="line"># mysql 窗口二</span><br><span class="line">delete from city where id &gt; 1800;  # 这个窗口就可以执行操作了</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># 回滚事务</span><br><span class="line">begin;</span><br><span class="line">delete from city where id=100;</span><br><span class="line">select * from city where id=100;</span><br><span class="line">rollback;  # 对上面的sql操作语句进行回滚，如果commit了，就不能回滚</span><br><span class="line">select * from city where id=100;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure></li>
<li><p>自动提交策略(<code>autocommit</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认执行DML语句的时候会自动的在语句前加 begin 和 commit，针对需要使用事务功能的语句 begin 或者直接全部使用事务功能</span><br><span class="line"></span><br><span class="line">select @@autocommit;  # 默认开启的 1 为开启</span><br><span class="line"></span><br><span class="line">set autocommit=0;  # 关闭自动提交策略</span><br><span class="line">set global autocommit=0;  # 全局关闭自动提交策略</span><br><span class="line"></span><br><span class="line"># 永久关闭自动提交策略</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">autocommit=0</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自动提交是否打开，一般在有事务需求的MySQL中，将其关闭</span><br><span class="line">不管有没有事务需求，我们一般也都建议设置为0，可以很大程度上提高数据库性能</span><br></pre></td></tr></table></figure></li>
<li><p>事务的隐式控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 隐式回滚</span><br><span class="line">  1. 关闭窗口的时候会自动回滚</span><br><span class="line">    # 已经永久关闭了自动提交策略</span><br><span class="line"></span><br><span class="line">  2. 删除会话ID</span><br><span class="line">    show processlist;</span><br><span class="line">    kill 3;</span><br><span class="line">  </span><br><span class="line"># 隐式提交</span><br><span class="line">  begin;</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">  begin;  # 此时上面的事务自动提交了</span><br><span class="line"></span><br><span class="line">  begin;</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">  set autocommit=1;  # 此时上面的事务也自动提交了</span><br><span class="line">  </span><br><span class="line"># 导致提交的非事务语句</span><br><span class="line">DDL语句: (ALTER、CREATE 和 DROP)</span><br><span class="line">DCL语句: (GRANT、REVOKE 和 SET PASSWORD)</span><br><span class="line">锁定语句: (LOCK TABLES 和 UNLOCK TABLES)</span><br><span class="line">导致隐式提交的语句示例：</span><br><span class="line">TRUNCATE TABLE</span><br><span class="line">LOAD DATA INFILE</span><br><span class="line">SELECT FOR UPDATE</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="InnoDB事务的ACID是如何保证的"><a href="#InnoDB事务的ACID是如何保证的" class="headerlink" title="InnoDB事务的ACID是如何保证的"></a>InnoDB事务的ACID是如何保证的</h4><ul>
<li><h5 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redo log          ---&gt; 重做日志 ib_logfile0~1  50M ,轮询使用</span><br><span class="line">redo log buffer   ---&gt; redo内存区域</span><br><span class="line">t1.ibd            ---&gt; 存储 数据行和索引 </span><br><span class="line">buffer pool       ---&gt; 数据缓冲区池,数据和索引的缓冲</span><br><span class="line"></span><br><span class="line">LSN : 日志序列号 </span><br><span class="line">磁盘数据页,redo文件,buffer pool,redo buffer</span><br><span class="line">MySQL 每次数据库启动,都会比较磁盘数据页和redolog的LSN,必须要求两者LSN一致数据库才能正常启动</span><br><span class="line"></span><br><span class="line">WAL : write ahead log 日志优先写的方式实现持久化</span><br><span class="line">脏页:  内存脏页,内存中发生了修改,没写入到磁盘之前,我们把内存页称之为脏页</span><br><span class="line">CKPT: Checkpoint,检查点,就是将脏页刷写到磁盘的动作</span><br><span class="line">TXID: 事务号,InnoDB会为每一个事务生成一个事务号,伴随着整个事务</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/jYSnqG.jpg" alt="jYSnqG"></p>
</li>
<li><h5 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a><code>redo log</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Redo是什么</span><br><span class="line">redo,顾名思义“重做日志”，是事务日志的一种。</span><br><span class="line"></span><br><span class="line"># 作用是什么</span><br><span class="line">在事务ACID过程中，实现的是“D”持久化的作用。对于AC也有相应的作用</span><br><span class="line"></span><br><span class="line"># redo日志位置</span><br><span class="line">redo的日志文件：iblogfile0 iblogfile1</span><br><span class="line"></span><br><span class="line"># redo buffer</span><br><span class="line">redo的buffer:数据页的变化信息+数据页当时的LSN号</span><br><span class="line">LSN：日志序列号  磁盘数据页、内存数据页、redo buffer、redolog</span><br><span class="line"></span><br><span class="line"># redo的刷新策略</span><br><span class="line">commit;</span><br><span class="line">刷新当前事务的redo buffer到磁盘</span><br><span class="line">还会顺便将一部分redo buffer中没有提交的事务日志也刷新到磁盘</span><br></pre></td></tr></table></figure></li>
<li><h5 id="CSR前滚"><a href="#CSR前滚" class="headerlink" title="CSR前滚"></a>CSR前滚</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL : 在启动时,必须保证redo日志文件和数据文件LSN必须一致, 如果不一致就会触发CSR,最终保证一致</span><br><span class="line">情况一:</span><br><span class="line">我们做了一个事务,begin;update;commit.</span><br><span class="line">1.在begin ,会立即分配一个TXID=tx_01.</span><br><span class="line">2.update时,会将需要修改的数据页(dp_01,LSN=101),加载到data buffer中</span><br><span class="line">3.DBWR线程,会进行dp_01数据页修改更新,并更新LSN=102</span><br><span class="line">4.LOGBWR日志写线程,会将dp_01数据页的变化+LSN+TXID存储到redobuffer</span><br><span class="line">5. 执行commit时,LGWR日志写线程会将redobuffer信息写入redolog日志文件中,基于WAL原则,</span><br><span class="line">在日志完全写入磁盘后,commit命令才执行成功,(会将此日志打上commit标记)</span><br><span class="line">6.假如此时宕机,内存脏页没有来得及写入磁盘,内存数据全部丢失</span><br><span class="line">7.MySQL再次重启时,必须要redolog和磁盘数据页的LSN是一致的.但是,此时dp_01,TXID=tx_01磁盘是LSN=101,dp_01,TXID=tx_01,redolog中LSN=102</span><br><span class="line">MySQL此时无法正常启动,MySQL触发CSR.在内存追平LSN号,触发ckpt,将内存数据页更新到磁盘,从而保证磁盘数据页和redolog LSN一值.这时MySQL正长启动</span><br><span class="line">以上的工作过程,我们把它称之为基于REDO的&quot;前滚操作&quot;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="undo回滚日志"><a href="#undo回滚日志" class="headerlink" title="undo回滚日志"></a><code>undo</code>回滚日志</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># undo是什么</span><br><span class="line">undo,顾名思义“回滚日志”</span><br><span class="line"></span><br><span class="line"># 作用是什么</span><br><span class="line">在事务ACID过程中，实现的是“A” 原子性的作用</span><br><span class="line">另外CI也依赖于Undo</span><br><span class="line">在rolback时,将数据恢复到修改之前的状态</span><br><span class="line">在CSR实现的是,将redo当中记录的未提交的时候进行回滚.</span><br><span class="line">undo提供快照技术,保存事务修改之前的数据状态.保证了MVCC,隔离性,mysqldump的热备</span><br><span class="line"></span><br><span class="line"># 概念性的东西</span><br><span class="line">redo怎么应用的</span><br><span class="line">undo怎么应用的</span><br><span class="line">CSR(自动故障恢复)过程</span><br><span class="line">LSN :日志序列号</span><br><span class="line">TXID:事务ID</span><br><span class="line">CKPT(Checkpoint)</span><br></pre></td></tr></table></figure></li>
<li><h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 锁介绍</span><br><span class="line">锁顾名思义就是锁定的意思，提供的是隔离的方面的功能，需要配合 undo+隔离级别一起来实现</span><br><span class="line"></span><br><span class="line"># InnoDB锁级别</span><br><span class="line">行级锁，修改这一行就会持有这行的锁，默认情况是排他锁(悲观锁)</span><br><span class="line">悲观锁:行级锁定(行锁)</span><br><span class="line">谁先操作某个数据行,就会持有&lt;这行&gt;的(X)锁.</span><br><span class="line">乐观锁: 没有锁</span><br><span class="line"></span><br><span class="line"># 死锁</span><br><span class="line">  # mysql窗口一</span><br><span class="line">  begin;</span><br><span class="line">  update city set countrycode=&#x27;CHN&#x27; where id=1;</span><br><span class="line">  update city set countrycode=&#x27;CHN&#x27; where id=2;</span><br><span class="line">  # mysql窗口二</span><br><span class="line">  begin;</span><br><span class="line">  update city set countrycode=&#x27;USA&#x27; where id=2;</span><br><span class="line">  update city set countrycode=&#x27;USA&#x27; where id=1;</span><br><span class="line">	</span><br><span class="line">	# 业务逻辑有问题，开发中不能出现</span><br><span class="line">	# ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</span><br><span class="line"></span><br><span class="line"># 锁的作用</span><br><span class="line">在事务ACID过程中，“锁”和“隔离级别”一起来实现“I”隔离性和&quot;C&quot; 一致性 (redo也有参与)</span><br></pre></td></tr></table></figure></li>
<li><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 影响到数据的读取</span><br><span class="line">默认的级别是 RR模式</span><br><span class="line">transaction_isolation   隔离级别(参数)</span><br><span class="line">  # 查看隔离级别</span><br><span class="line">  select @@tx_isolation;</span><br><span class="line">  show variables like &#x27;%iso%&#x27;;</span><br><span class="line">  </span><br><span class="line">  # RR模式</span><br><span class="line">    # 创建表环境</span><br><span class="line">    use world;</span><br><span class="line">    begin;</span><br><span class="line">    create table t1 (id int not null , ticker int null);</span><br><span class="line">    desc t1;</span><br><span class="line">    insert into t1 values (1,1);</span><br><span class="line">    commit;</span><br><span class="line">    select * from t1;</span><br><span class="line"></span><br><span class="line">    # mysql窗口一</span><br><span class="line">    use world;</span><br><span class="line">    begin;</span><br><span class="line">    select * from t1;  # 这一步窗口二也开始查询</span><br><span class="line">    update t1 set ticker=0 where id=1;</span><br><span class="line">    select * from t1;</span><br><span class="line">    commit;</span><br><span class="line"></span><br><span class="line">    # mysql窗口二</span><br><span class="line">    use world;</span><br><span class="line">    select * from t1;  # 和窗口一的第一次查询时间同步</span><br><span class="line">    select * from t1;  # 当窗口一已经提交了事务之后再查询发现并没有改变</span><br><span class="line">    # 这个现象就是可重复读现象，如果想在窗口二看到改变后的情况，先commit一下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改隔离级别</span><br><span class="line">    set global transaction_isolation=&#x27;read-committed&#x27;;  # 此时是RC模式  需要退出窗口后重新进入生效</span><br><span class="line">    # 测试，设置之后重新打开mysql窗口</span><br><span class="line"></span><br><span class="line">    # mysql窗口一</span><br><span class="line">    select @@tx_isolation;  # 查看隔离级别</span><br><span class="line">    use world;</span><br><span class="line">    begin;</span><br><span class="line">    select * from t1;  # # 这一步窗口二也开始查询</span><br><span class="line">    update t1 set ticker=1 where id=1;</span><br><span class="line">    select * from t1;</span><br><span class="line">    commit;</span><br><span class="line">    select * from t1;</span><br><span class="line"></span><br><span class="line">    # mysql窗口二</span><br><span class="line">    selet @@tx_isolation;  # 查看隔离级别</span><br><span class="line">    use world;</span><br><span class="line">    select * from t1;  # 和窗口一的第一次查询时间同步</span><br><span class="line">    select * from t1;  # 当窗口一提交了事务之后再查询发现此时已经改变了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">隔离级别负责的是,MVCC,读一致性问题</span><br><span class="line">RU  : 读未提交,可脏读,一般部议叙出现</span><br><span class="line">RC  : 读已提交,可能出现幻读,可以防止脏读.</span><br><span class="line">RR  : 解决了不可重复读,功能是防止&quot;幻读&quot;现象 ,利用的是undo的快照技术+GAP(间隙锁)+NextLock(下键锁)</span><br><span class="line">SR  : 可串行化,可以防止死锁,但是并发事务性能较差</span><br><span class="line"></span><br><span class="line">幻读现象是由MVCC+GAP+Next-Lock解决</span><br><span class="line"></span><br><span class="line">补充: 在RC级别下,可以减轻GAP+NextLock锁的问题,但是会出现幻读现象,一般在为了读一致性会在正常select后添加for update语句.但是,请记住执行完一定要commit 否则容易出现所等待比较严重.</span><br><span class="line">例如:</span><br><span class="line">[world]&gt;select * from city where id=999 for update;</span><br><span class="line">[world]&gt;commit;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境准备</span><br><span class="line">select @@tx_isolation;  # RC模式</span><br><span class="line">select @@autocommit;  # 0</span><br><span class="line"></span><br><span class="line"># 建库建表</span><br><span class="line">create database test charset utf8mb4;</span><br><span class="line">use test;</span><br><span class="line">create table t1(id int not null primary key auto_increment, num int not null);</span><br><span class="line">insert into t1(num) values (1),(3),(5);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># mysql 窗口一</span><br><span class="line">begin;</span><br><span class="line">update t1 set num=10 where num&gt;=3;</span><br><span class="line">commit;</span><br><span class="line"># 上面的更新语句和窗口二的插入语句两个事务同时进行</span><br><span class="line"></span><br><span class="line">select * from t1;  # 此时发现会多一条 num 为 7 的列，这种现象就是幻读</span><br><span class="line"></span><br><span class="line"># mysql 窗口二</span><br><span class="line">begin;</span><br><span class="line">insert into t1(num) values(7);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RR 模式下</span><br><span class="line">    # 环境准备</span><br><span class="line">    set global transaction_isolation=&#x27;repeatable-read&#x27;;  # 需要退出窗口后重新进入</span><br><span class="line">    select @@tx_isolation;  # RR级别</span><br><span class="line">    select @@autocommit;  # 0</span><br><span class="line"></span><br><span class="line">    # 创建表</span><br><span class="line">    use test;</span><br><span class="line">    create table t2(id int not null primary key auto_increment, num int not null);</span><br><span class="line">    insert into t2(num) values (1),(3),(5);</span><br><span class="line">    alter table t2 add index idx(num); </span><br><span class="line">    commit;</span><br><span class="line"></span><br><span class="line">		# mysql 窗口一</span><br><span class="line">    begin;</span><br><span class="line">    update t2 set num=10 where num&gt;=3;  # 更新表之后开始窗口二</span><br><span class="line"></span><br><span class="line">    # mysql 窗口二</span><br><span class="line">    begin;</span><br><span class="line">    insert into t1(num) values(7);  </span><br><span class="line">    # 当窗口一更新之后此时再插入发现夯住 </span><br><span class="line">    # ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="line">    # 防止幻读</span><br><span class="line">    # 辅助索引+Next-Lock</span><br></pre></td></tr></table></figure>
<p>幻读<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/yMjqBO.png" alt="yMjqBO"></p>
<p>不可幻读<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/GhQN3e.png" alt="GhQN3e"></p>
</li>
</ul>
<h4 id="InnoDB核心参数"><a href="#InnoDB核心参数" class="headerlink" title="InnoDB核心参数"></a>InnoDB核心参数</h4><h5 id="双一标准之一-innodb-flush-log-at-trx-commit"><a href="#双一标准之一-innodb-flush-log-at-trx-commit" class="headerlink" title="双一标准之一(innodb_flush_log_at_trx_commit)"></a>双一标准之一(<code>innodb_flush_log_at_trx_commit</code>)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 参数</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line"></span><br><span class="line"># 作用</span><br><span class="line">控制了redo buffer 刷写策略，是一个安全参数，是一个5.6版本的以上默认的参数</span><br><span class="line">redo buffer ---&gt; ib_logfileo~N</span><br><span class="line"></span><br><span class="line"># 查看参数</span><br><span class="line">select @@innodb_flush_log_at_trx_commit;</span><br><span class="line"></span><br><span class="line"># 参数说明</span><br><span class="line">1: 每次事务提交，都会立即刷下redo到磁盘(redo buffer --每事务--&gt;os buffer --每事务--&gt; 磁盘)</span><br><span class="line">0: 表示当事务提交时，不立即做日志写入操作(redo buffer --每秒--&gt;os buffer --每秒--&gt; 磁盘)</span><br><span class="line">2: 每次事务提交时写入文件缓存(redo buffer --每事务--&gt;os buffer --每秒--&gt; 磁盘)</span><br></pre></td></tr></table></figure>

<h5 id="Innodb-flush-method"><a href="#Innodb-flush-method" class="headerlink" title="Innodb_flush_method"></a><code>Innodb_flush_method</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 作用 </span><br><span class="line">	控制了redo buffer 和 data buffer 刷写磁盘的时候是否经过文件系统缓存</span><br><span class="line"> </span><br><span class="line"># 查看</span><br><span class="line">  show variables like &#x27;%innodb_flush%&#x27;;</span><br><span class="line"> </span><br><span class="line"># 参数值说明</span><br><span class="line">  O_DIRECT  :数据缓冲区写磁盘,不走OS buffer </span><br><span class="line">  fsync     :日志和数据缓冲区写磁盘,都走OS buffer </span><br><span class="line">  O_DSYNC   :日志缓冲区写磁盘,不走 OS buffer</span><br><span class="line"> </span><br><span class="line"># 使用建议 </span><br><span class="line">  最高安全模式</span><br><span class="line">  innodb_flush_log_at_trx_commit=1</span><br><span class="line">  innodb_flush_method=O_DIRECT</span><br><span class="line">  最高性能:</span><br><span class="line">  innodb_flush_log_at_trx_commit=0</span><br><span class="line">  innodb_flush_method=fsync</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/TsmCEP.jpg" alt="TsmCEP"></p>
<h5 id="redo日志参数设置"><a href="#redo日志参数设置" class="headerlink" title="redo日志参数设置"></a><code>redo</code>日志参数设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">innodb_log_buffer_size=16777216  # 调大并发的数量会越多，128M起，结合业务调整，这边单位是字节</span><br><span class="line">innodb_log_file_size=50331648  # 一般是log_buffer 1-2倍</span><br><span class="line">innodb_log_files_in_group = 3  # 3-4组</span><br></pre></td></tr></table></figure>

<h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a><code>innodb_buffer_pool_size</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一般调整为物理内存的50%-80%(系统中只有一个mysql实例)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引管理</title>
    <url>/5c917bb6.html</url>
    <content><![CDATA[<h3 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提供了类似书中目录的作用，目的是为了优化查询</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B树索引  # 默认使用的索引类型</span><br><span class="line">Hash索引</span><br><span class="line">R树索引</span><br><span class="line">Full text</span><br><span class="line">GIS</span><br></pre></td></tr></table></figure>

<h3 id="B树算法"><a href="#B树算法" class="headerlink" title="B树算法"></a>B树算法</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/yMfE8O.jpg" alt="yMfE8O"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/b+tree.JPG" alt="b+tree"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B-tree</span><br><span class="line">B+Tree  # 在范围查询方面提供了更好的性能(&gt; &lt; &gt;= &lt;= like)  页子节点有双向指针</span><br><span class="line">B*Tree  # 枝节点有双向指针</span><br></pre></td></tr></table></figure>

<h3 id="辅助索引和聚集索引"><a href="#辅助索引和聚集索引" class="headerlink" title="辅助索引和聚集索引"></a>辅助索引和聚集索引</h3><h5 id="辅助索引-S-怎么构建B树结构"><a href="#辅助索引-S-怎么构建B树结构" class="headerlink" title="辅助索引(S)怎么构建B树结构"></a>辅助索引(S)怎么构建B树结构</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 辅助索引是基于表的列进行生成的</span><br><span class="line">2. 取出索引列的所有值(取出所有键值)</span><br><span class="line">3. 进行所有键值的排序</span><br><span class="line">4. 将所有的键值按顺序落到BTree索引的叶子节点上(16K)</span><br><span class="line">5. 然后生成此索引键值所对应得后端数据页的指针</span><br><span class="line">6. 进而生成枝节点和根节点</span><br><span class="line">7. 叶子节点除了存储键值之外，还存储了相邻叶子节点的指针，另外还会保存原表数据的指针</span><br><span class="line"></span><br><span class="line">id  name  age  gender</span><br><span class="line">select  *  from  t1 where id=10;</span><br><span class="line">问题: 基于索引键做where查询,对于id列是顺序IO,但是对于其他列的查询,可能是随机IO.</span><br></pre></td></tr></table></figure>
<h5 id="聚集索引-C-怎么构建B树结构"><a href="#聚集索引-C-怎么构建B树结构" class="headerlink" title="聚集索引(C)怎么构建B树结构"></a>聚集索引(C)怎么构建B树结构</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 建表时有主键列</span><br><span class="line">2. 表中进行数据存储时，会按照ID列的顺序，有序的存储一行一行的数据到数据页上(聚集索引组织表)</span><br><span class="line">3. 表中的数据页被作为聚集索引的叶子节点</span><br><span class="line">4. 把叶子节点的主键值生成上层枝节点和根节点</span><br></pre></td></tr></table></figure>
<h5 id="聚集索引和辅助索引构成区别总结"><a href="#聚集索引和辅助索引构成区别总结" class="headerlink" title="聚集索引和辅助索引构成区别总结"></a>聚集索引和辅助索引构成区别总结</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 聚集索引只能有一个，非空唯一，一般是主键</span><br><span class="line">2. 辅助索引可以有多个，是配合聚集索引使用</span><br><span class="line">3. 聚集索引叶子节点，就是磁盘的数据行存储的数据页</span><br><span class="line">4. MySQL是根据聚集索引，组织存储数据，数据存储时就是安装聚集索引的顺序进行存储数据</span><br><span class="line">5. 辅助索引只会提取索引键值，进行自动排序生成B树结构</span><br></pre></td></tr></table></figure>
<h5 id="辅助索引细分"><a href="#辅助索引细分" class="headerlink" title="辅助索引细分"></a>辅助索引细分</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单列的辅助索引</span><br><span class="line">联合多列辅助索引(覆盖索引)</span><br><span class="line">唯一索引</span><br></pre></td></tr></table></figure>
<h5 id="影响索引树高度"><a href="#影响索引树高度" class="headerlink" title="影响索引树高度"></a>影响索引树高度</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据行多  # 使用分表</span><br><span class="line">索引列字符长度  # 前缀索引</span><br><span class="line">数据类型 char varchar  # 优化表设计</span><br><span class="line">enum 优化索引高度  # 尽量使用</span><br></pre></td></tr></table></figure>

<h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><h5 id="产生数据"><a href="#产生数据" class="headerlink" title="产生数据"></a>产生数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一 使用sql语句产生数据</span><br><span class="line">    create database d100w charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">    use d100w;</span><br><span class="line">    create table t100w (id int,num int,</span><br><span class="line">    k1 char(2),</span><br><span class="line">    k2 char(4),</span><br><span class="line">    dt timestamp) charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">    delimiter //</span><br><span class="line">    create  procedure rand_data(in num int)</span><br><span class="line">    begin</span><br><span class="line">    declare str char(62) default &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line">    declare str2 char(2);</span><br><span class="line">    declare str4 char(4);</span><br><span class="line">    declare i int default 0;</span><br><span class="line">    while i&lt;num do</span><br><span class="line">    set str2=concat(substring(str,1+floor(rand()*61),1),substring(str,1+floor(rand()*61),1));</span><br><span class="line">    set str4=concat(substring(str,1+floor(rand()*61),2),substring(str,1+floor(rand()*61),2));</span><br><span class="line">    set i=i+1;</span><br><span class="line">    insert into t100w values (i,floor(rand()*num),str2,str4,now());</span><br><span class="line">    end while;</span><br><span class="line">    end;</span><br><span class="line">    //</span><br><span class="line">    delimiter ;</span><br><span class="line"></span><br><span class="line">    # 插入100w条数据：</span><br><span class="line">    call rand_data(1000000);</span><br><span class="line">    commit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 方式二 直接导入测试表(可以会出现链接失效的情况)</span><br><span class="line">    cd /tmp</span><br><span class="line">    wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/100w.sql.zip </span><br><span class="line">    unzip 100w.sql.zip</span><br><span class="line">    mysql -uroot -p</span><br><span class="line"></span><br><span class="line">    create database test charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">    use test;</span><br><span class="line">    source /tmp/100w.sql</span><br></pre></td></tr></table></figure>
<h5 id="压力测试语句"><a href="#压力测试语句" class="headerlink" title="压力测试语句"></a>压力测试语句</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 没有创建索引之前</span><br><span class="line">    mysqlslap --defaults-file=/etc/my.cnf \</span><br><span class="line">    --concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; \</span><br><span class="line">    --query=&quot;select * from test.t100w where k2=&#x27;BC56&#x27;&quot; engine=innodb \</span><br><span class="line">    --number-of-queries=2000 -uroot -p1 -verbose</span><br><span class="line">    # 4c8g 运行了400多秒</span><br><span class="line"></span><br><span class="line"># 创建索引之后</span><br><span class="line">    # sql语句</span><br><span class="line">    alter table t100w add index idx_k2(k2);</span><br><span class="line">    </span><br><span class="line">    # 命令行</span><br><span class="line">    mysqlslap --defaults-file=/etc/my.cnf \</span><br><span class="line">    --concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; \</span><br><span class="line">    --query=&quot;select * from test.t100w where k2=&#x27;BC56&#x27;&quot; engine=innodb \</span><br><span class="line">    --number-of-queries=2000 -uroot -p1 -verbose</span><br><span class="line">    # 4c8g 此时只需要1秒不到</span><br></pre></td></tr></table></figure>

<h3 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h3><h5 id="表结构说明"><a href="#表结构说明" class="headerlink" title="表结构说明"></a>表结构说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc world.city;</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">Field :列名字</span><br><span class="line">key  :有没有索引,索引类型</span><br><span class="line">PRI: 主键索引</span><br><span class="line">UNI: 唯一索引</span><br><span class="line">MUL: 辅助索引(单列,联和,前缀)</span><br></pre></td></tr></table></figure>

<h5 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h5><h6 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引的时候会短暂的锁表，业务不忙的时候操作</span><br><span class="line">alter table t100w add index idx_k2(k2);</span><br><span class="line"></span><br><span class="line"># 查看索引情况</span><br><span class="line">    use test;</span><br><span class="line">    desc t100w;</span><br><span class="line">    # 此时 k2 这一行中的 Key 值为 MUL, 为辅助索引 </span><br><span class="line"></span><br><span class="line">    show index from t100w\G</span><br></pre></td></tr></table></figure>

<h6 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立唯一索的列不能有重复值</span><br><span class="line"></span><br><span class="line"># 查看k1列不重复情况,如果有重复值就不能创建唯一索引</span><br><span class="line">select count(distinct k1) from t100w;</span><br><span class="line">select k1,count(k1) from t100w group by k1 having count(k1)  &gt;1;</span><br><span class="line"></span><br><span class="line"># 当有重复值的时候创建唯一索引时会报错</span><br><span class="line">alter table t100w add unique index idx_k1(k1);</span><br></pre></td></tr></table></figure>

<h6 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 只能用于字符串类型的列上</span><br><span class="line">desc world.city;</span><br><span class="line"></span><br><span class="line">alter table world.city add index indx_name(name(5));  # 用name列的前5个字符</span><br><span class="line"></span><br><span class="line">desc world.city;</span><br></pre></td></tr></table></figure>

<h6 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table world.city add index idx_co_po(countrycode,population);</span><br></pre></td></tr></table></figure>

<h6 id="查看删除索引"><a href="#查看删除索引" class="headerlink" title="查看删除索引"></a>查看删除索引</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看索引</span><br><span class="line">show index from world.city;</span><br><span class="line"></span><br><span class="line"># 删除索引</span><br><span class="line">alter table world.city drop index idx_co_po;</span><br></pre></td></tr></table></figure>


<h3 id="索引应用规范"><a href="#索引应用规范" class="headerlink" title="索引应用规范"></a>索引应用规范</h3><h5 id="建立索引的原则-DBA运维规范"><a href="#建立索引的原则-DBA运维规范" class="headerlink" title="建立索引的原则(DBA运维规范)"></a>建立索引的原则(DBA运维规范)</h5><blockquote>
<p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。那么索引设计原则又是怎样的<br>建表时一定要有主键，一般是个无关列</p>
</blockquote>
<ul>
<li><p>选择唯一索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。</span><br><span class="line">例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。</span><br><span class="line">如果使用姓名的话，可能存在同名现象，从而降低查询速度。</span><br><span class="line"></span><br><span class="line">优化方案:</span><br><span class="line">(1) 如果非得使用重复值较多的列作为查询条件(例如:男女),可以将表逻辑拆分</span><br><span class="line">(2) 可以将此列和其他的查询类,做联和索引</span><br><span class="line">select count(*) from world.city;</span><br><span class="line">select count(distinct countrycode) from world.city;</span><br><span class="line">select count(distinct countrycode,population ) from world.city;</span><br></pre></td></tr></table></figure></li>
<li><p>经常作为where条件列，<code>order by</code>、<code>group by</code>、<code>join on</code>、<code>distinct</code>的条件</p>
</li>
<li><p>列值长度较长的索引，建议使用前缀索引</p>
</li>
<li><p>降低索引条目，一方面不要创建没用索引，不常使用的索引清理，<code>percon-toolkit</code>有工具可以分析索引是否有用</p>
</li>
<li><p>大表建索引时，要在业务不繁忙期间操作</p>
</li>
<li><p>尽量少在经常更新值的列上建索引</p>
</li>
</ul>
<h5 id="不走索引的情况-开发规范"><a href="#不走索引的情况-开发规范" class="headerlink" title="不走索引的情况(开发规范)"></a>不走索引的情况(开发规范)</h5><ul>
<li>没有查询条件，或者查询条件没有建立索引</li>
<li>查询结果集是原表中的大部分数据，应该是25％以上</li>
<li>索引本身失效，统计数据不真实</li>
<li>查询条件使用函数在索引列上，或者对索引列进行运算，运算包括<code>(+，-，*，/，! </code>)</li>
<li>隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误</li>
<li><code>&lt;&gt;</code> ，<code>not in</code> 不走索引（辅助索引）</li>
<li><code>like &quot;%_&quot;</code> 百分号在最前面不走</li>
</ul>
<h3 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h3><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 上线新的查询语句之前，进行提前预估语句的性能</span><br><span class="line">2. 在出现性能问题时，找到合理的解决思路</span><br></pre></td></tr></table></figure>

<h6 id="执行计划获取"><a href="#执行计划获取" class="headerlink" title="执行计划获取"></a>执行计划获取</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一般是针对 select 语句获取执行计划</span><br><span class="line"></span><br><span class="line"># 查看语句的执行计划</span><br><span class="line">desc select * from test.t100w where k2=&#x27;BC56&#x27;;</span><br><span class="line">explain select * from test.t100w where k2=&#x27;BC56&#x27;\G</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: t100w</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: idx_k2</span><br><span class="line">          key: idx_k2</span><br><span class="line">      key_len: 17</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 406</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 参数说明</span><br><span class="line">table: t100w  # 表名,多表查询的时候关注</span><br><span class="line">type: ref  # 索引的应用级别     </span><br><span class="line">possible_keys: idx_k2  # 可能会使用到的索引</span><br><span class="line">key: idx_k2  # 实际上使用的索引</span><br><span class="line">key_len: 17  # 联合索引覆盖长度</span><br><span class="line">rows: 406  # 查询的行数(越少越好)</span><br><span class="line">Extra: NULL  # 额外的信息</span><br></pre></td></tr></table></figure>

<h6 id="应用级别type详解"><a href="#应用级别type详解" class="headerlink" title="应用级别type详解"></a>应用级别<code>type</code>详解</h6>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># type的级别如下,从上到下性能越好,至少优化到range以上</span><br><span class="line">1. ALL: 全表扫描,不走索引</span><br><span class="line">    desc select * from t100w;  # 没有条件能走索引的</span><br><span class="line">     </span><br><span class="line">    没建立索引  </span><br><span class="line">    建立索引不走</span><br><span class="line">    desc select * from t100w where k1=&#x27;aa&#x27;;  # 上面例子中创建的索引时针对k2列的,k1列并没有创建索引</span><br><span class="line">    desc select * from t100w where k2!=&#x27;aaaa&#x27;;  # 不等于的条件也是不走索引的</span><br><span class="line">    desc select * from t100w where k2 like &#x27;%xt%&#x27;;  # 模糊查询时当%在前面时不走索引  或者not in也不走索引</span><br><span class="line"></span><br><span class="line">2. index: 全索引扫描,将整个索引树全部扫描一遍才能达到效果</span><br><span class="line">    desc select k2 from t100w;</span><br><span class="line"></span><br><span class="line">3. range: 索引范围扫描,扫描索引树的一部分</span><br><span class="line">    辅助索引 &gt; &lt; &gt;= &lt;= like in or  # 这些语句会走范围扫描,尽量避免 in or</span><br><span class="line">    主键 !=</span><br><span class="line">    desc select * from world.city where id &gt; 1000;</span><br><span class="line">    desc select * from world.city where id != 1000;</span><br><span class="line">    desc select * from world.city where countrycode like &#x27;C%&#x27;;</span><br><span class="line">		</span><br><span class="line">    desc select * from world.city where countrycode in (&#x27;CHN&#x27;,&#x27;USA&#x27;);  # 可以改写为下面的语句</span><br><span class="line">		</span><br><span class="line">    desc </span><br><span class="line">    select * from world.city where countrycode=&#x27;CHN&#x27; </span><br><span class="line">    union all </span><br><span class="line">    select * from world.city where countrycode=&#x27;USA&#x27;;</span><br><span class="line">    # 此时可以看到type级别为ref</span><br><span class="line">	</span><br><span class="line">4. ref: 辅助索引等值查询</span><br><span class="line">    desc select * from world.city where countrycode=&#x27;CHN&#x27;;</span><br><span class="line"></span><br><span class="line">5. eq_ref: 在多表连接查询时 on 的条件列时唯一索引或主键</span><br><span class="line">    desc </span><br><span class="line">    select a.name,b.name,b.surfacearea </span><br><span class="line">    from world.city as a </span><br><span class="line">    join world.country as b </span><br><span class="line">    on a.countrycode=b.code </span><br><span class="line">    where a.population &lt; 100;</span><br><span class="line"></span><br><span class="line">6. const,system: 主键或唯一键等值查询</span><br><span class="line">    desc select * from world.city where id=10;</span><br><span class="line">    </span><br><span class="line">7. null: 查不到数据的时候</span><br></pre></td></tr></table></figure>

<h6 id="Extra额外的信息"><a href="#Extra额外的信息" class="headerlink" title="Extra额外的信息"></a><code>Extra</code>额外的信息</h6><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当出现 using filesort 时说明索引设计不合理, 使用了文件排序</span><br><span class="line">desc select * from world.city where countrycode=&#x27;CHN&#x27; order by population;</span><br><span class="line"></span><br><span class="line"># 没见索引之前</span><br><span class="line">desc select * from world.city where countrycode=&#x27;CHN&#x27; order by population limit 10;</span><br><span class="line"></span><br><span class="line"># 建立联合索引</span><br><span class="line">alter table world.city add index idx_co_po(countrycode,population);</span><br><span class="line">desc select * from world.city where countrycode=&#x27;CHN&#x27; order by population limit 10;</span><br><span class="line"></span><br><span class="line">结论: </span><br><span class="line">1.当我们看到执行计划extra位置出现filesort,说明由文件排序出现</span><br><span class="line">2.观察需要排序(ORDER BY,GROUP BY ,DISTINCT )的条件,有没有索引</span><br><span class="line">3. 根据子句的执行顺序,去创建联合索引</span><br></pre></td></tr></table></figure>
</code></pre>
<h6 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h6><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain(desc)使用场景</span><br><span class="line">题目意思:  我们公司业务慢,请你从数据库的角度分析原因</span><br><span class="line">1.mysql出现性能问题,我总结有两种情况:</span><br><span class="line">（1）应急性的慢：突然夯住</span><br><span class="line">      应急情况:数据库hang(卡了,资源耗尽)</span><br><span class="line">      处理过程:</span><br><span class="line">      1.show processlist;  获取到导致数据库hang的语句</span><br><span class="line">      2. explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">      3. 建索引,改语句</span><br><span class="line">（2）一段时间慢(持续性的):</span><br><span class="line">      (1)记录慢日志slowlog,分析slowlog</span><br><span class="line">      (2)explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">      (3)建索引,改语句</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础应用</title>
    <url>/8da0cafb.html</url>
    <content><![CDATA[<h3 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结构化查询语言</span><br><span class="line">5.7 以后符合SQL92严格模式</span><br><span class="line">通过sql_mode参数来控制</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="常用SQL分类"><a href="#常用SQL分类" class="headerlink" title="常用SQL分类"></a>常用SQL分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DDL：数据定义语言</span><br><span class="line">DCL：数据控制语言</span><br><span class="line">DML：数据操作语言</span><br><span class="line">DQL：数据的查询语言</span><br></pre></td></tr></table></figure>

<h3 id="数据类型、表属性、字符集"><a href="#数据类型、表属性、字符集" class="headerlink" title="数据类型、表属性、字符集"></a>数据类型、表属性、字符集</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li><p>作用</p>
<p>保证数据的准确性和标准性</p>
</li>
<li><p>种类</p>
<ul>
<li>数值类型<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/nhK9zp.jpg" alt="nhK9zp"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tinyint  ： -128~127</span><br><span class="line">int       ：-2^31~2^31-1</span><br><span class="line">说明：手机号是无法存储到int的。一般是使用char类型来存储手机号</span><br></pre></td></tr></table></figure></li>
<li>字符类型<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/1hM1f0.jpg" alt="1hM1f0"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char(11) ：</span><br><span class="line">定长 的字符串类型,在存储字符串时，最大字符长度11个，立即分配11个字符长度的存储空间，如果存不满，空格填充。</span><br><span class="line">varchar(11):</span><br><span class="line">变长的字符串类型看，最大字符长度11个。在存储字符串时，自动判断字符长度，按需分配存储空间。</span><br><span class="line">enum(&#x27;bj&#x27;,&#x27;tj&#x27;,&#x27;sh&#x27;)：</span><br><span class="line">枚举类型，比较适合于将来此列的值是固定范围内的特点，可以使用enum,可以很大程度的优化我们的索引结构。</span><br></pre></td></tr></table></figure></li>
<li>时间类型<br> <img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/U36oxW.jpg" alt="U36oxW"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">datatime</span><br><span class="line">范围为从 1000-01-01 00:00:00.000000 至 9999-12-31 23:59:59.999999</span><br><span class="line">timestamp</span><br><span class="line">范围为从 1970-01-01 00:00:00.000000 至 2038-01-19 03:14:07.999999</span><br></pre></td></tr></table></figure>
<ul>
<li>二进制类型<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/va4HxB.jpg" alt="va4HxB"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">约束(一般建表时添加):</span><br><span class="line">primary key: 主键约束</span><br><span class="line">设置为主键的列，此列的值必须非空且唯一，主键在一个表中只能有一个</span><br><span class="line"></span><br><span class="line">not null: 非空约束</span><br><span class="line">列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空，可以设置默认值0</span><br><span class="line"></span><br><span class="line">unique key: 唯一键</span><br><span class="line">列值不能重复</span><br><span class="line"></span><br><span class="line">unsigned: 无符号</span><br><span class="line">针对数字列，非负数</span><br><span class="line"></span><br><span class="line"># 其他属性:</span><br><span class="line">key: 索引</span><br><span class="line">可以在某列上建立索引，来优化索引，一般是根据需要后添加</span><br><span class="line"></span><br><span class="line">default: 默认值</span><br><span class="line">列中，没有录入值时，会自动使用default的值填充</span><br><span class="line"></span><br><span class="line">auto_increment: 自增长</span><br><span class="line">针对数字列，顺序的自动填充数据(默认是从1开始，将来可以设置起始点和偏移量)</span><br><span class="line"></span><br><span class="line">comment: 注释</span><br></pre></td></tr></table></figure>

<h4 id="表属性"><a href="#表属性" class="headerlink" title="表属性"></a>表属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存储引擎:</span><br><span class="line">InnoDB（默认的）</span><br><span class="line"></span><br><span class="line">字符集和排序规则:</span><br><span class="line">utf8       </span><br><span class="line">utf8mb4</span><br></pre></td></tr></table></figure>

<h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show charset;  # 查看 mysql 支持的所有字符集</span><br><span class="line">utf8: 3 个字节</span><br><span class="line">utf8mb4: 4 个字节，支持 emoji</span><br></pre></td></tr></table></figure>

<h3 id="DDL的应用"><a href="#DDL的应用" class="headerlink" title="DDL的应用"></a>DDL的应用</h3><h4 id="库定义"><a href="#库定义" class="headerlink" title="库定义"></a>库定义</h4><ul>
<li><p>创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建库规范：</span><br><span class="line">    1.库名不能有大写字母   </span><br><span class="line">    2.建库要加字符集         </span><br><span class="line">    3.库名不能有数字开头</span><br><span class="line">    4. 库名要和业务相关</span><br><span class="line">    </span><br><span class="line">建库标准语句</span><br><span class="line">create database test charset utf8mb4 collate utf8mb4_bin;</span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生产中禁止</span><br><span class="line">drop database school;</span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个没有设置字符集的库</span><br><span class="line">create database school;</span><br><span class="line"></span><br><span class="line"># 如果是已经创建好的库的查看建库语句</span><br><span class="line">show create database school;</span><br><span class="line"></span><br><span class="line"># 修改字符集</span><br><span class="line">alter database school charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line"># 注意：修改字符集，修改后的字符集一定是原字符集的严格超集(从小往大，不能从大往小)</span><br></pre></td></tr></table></figure></li>
<li><p>查询(属于DQL)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看所有库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 查看库的建库语句</span><br><span class="line">show create database test;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="表定义"><a href="#表定义" class="headerlink" title="表定义"></a>表定义</h4><ul>
<li><p>创建表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建表规范:</span><br><span class="line">    1. 表名小写</span><br><span class="line">    2. 不能是数字开头</span><br><span class="line">    3. 注意字符集和存储引擎</span><br><span class="line">    4. 表名和业务有关</span><br><span class="line">    5. 选择合适的数据类型</span><br><span class="line">    6. 每个列都要有注释</span><br><span class="line">    7. 每个列设置为非空，无法保证非空，用0来填充</span><br><span class="line">    </span><br><span class="line">格式:</span><br><span class="line">    create table stu(</span><br><span class="line">    列1  属性（数据类型、约束、其他属性） ，</span><br><span class="line">    列2  属性，</span><br><span class="line">    列3  属性</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">创建一个学生表：</span><br><span class="line">use school;</span><br><span class="line">create table stu(</span><br><span class="line">id        int not null primary key auto_increment comment &#x27;学号&#x27;,</span><br><span class="line">sname     varchar(255) not null comment &#x27;姓名&#x27;,</span><br><span class="line">sage      tinyint unsigned not null default 0 comment &#x27;年龄&#x27;,</span><br><span class="line">sgender   enum(&#x27;m&#x27;,&#x27;f&#x27;,&#x27;n&#x27;) not null default &#x27;n&#x27; comment &#x27;性别&#x27;,</span><br><span class="line">sfz       char(18) not null unique comment &#x27;身份证&#x27;,</span><br><span class="line">intime    timestamp not null default now() comment &#x27;入学时间&#x27;</span><br><span class="line">) engine=innodb charset= utf8mb4 comment &#x27;学生表&#x27;;</span><br><span class="line"></span><br><span class="line">show tables;  # 查看是否创建成功</span><br><span class="line">desc stu;  # 查看表结构信息</span><br><span class="line">show create table stu;  # 查看建表语句</span><br></pre></td></tr></table></figure></li>
<li><p>修改表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在stu表中添加qq列</span><br><span class="line">alter table stu add qq varchar(20) not null unique comment &#x27;qq号&#x27;;</span><br><span class="line"></span><br><span class="line"># 在sname后加微信列</span><br><span class="line">alter table stu add wechat varchar(20) not null unique comment &#x27;微信号&#x27; after sname;</span><br><span class="line"></span><br><span class="line"># 在id列前面加一个新列的num</span><br><span class="line">alter table stu add num int not null comment &#x27;数字&#x27; first;</span><br><span class="line"></span><br><span class="line"># 修改sname数据类型</span><br><span class="line">alter table stu modify sname varchar(128) not null;</span><br><span class="line"></span><br><span class="line"># 将sgender该为sex 数据类型改为char类型</span><br><span class="line">alter table stu change sgender sex char(1) not null default &#x27;n&#x27;;</span><br><span class="line"></span><br><span class="line"># 删除刚才添加的列</span><br><span class="line">alter table stu drop num;</span><br><span class="line">alter table stu drop qq;</span><br><span class="line">alter table stu drop wechat;</span><br></pre></td></tr></table></figure></li>
<li><p>查询表属性(DQL)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use school;</span><br><span class="line">show tables;</span><br><span class="line">desc stu;</span><br><span class="line">show create table stu;</span><br><span class="line">create table test like stu;  # 创建一个和stu表结构一样的test表</span><br></pre></td></tr></table></figure></li>
<li><p>删除表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table stu;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="DCL的应用"><a href="#DCL的应用" class="headerlink" title="DCL的应用"></a>DCL的应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户的授权和权限的回收</span><br><span class="line">grant</span><br><span class="line">revoke</span><br></pre></td></tr></table></figure>

<h3 id="DML的应用"><a href="#DML的应用" class="headerlink" title="DML的应用"></a>DML的应用</h3><blockquote>
<p>对表中数据的增删改</p>
</blockquote>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标准插入语句</span><br><span class="line">insert into stu(id,sname,sage,sex,sfz,intime)</span><br><span class="line">values</span><br><span class="line">(1,&#x27;zhangsan&#x27;,18,&#x27;m&#x27;,&#x27;110101199003070353&#x27;,now());</span><br><span class="line"></span><br><span class="line">select * from stu;  # 查看stu表内数据</span><br><span class="line"></span><br><span class="line"># 省事写法</span><br><span class="line">insert into stu</span><br><span class="line">values</span><br><span class="line">(2,&#x27;lisi&#x27;,19,&#x27;m&#x27;,&#x27;220101145664070363&#x27;,now());</span><br><span class="line"></span><br><span class="line"># 针对性录入数据</span><br><span class="line">insert into stu(sname,sfz)</span><br><span class="line">values(&#x27;wangwu&#x27;,&#x27;33452982337621&#x27;);</span><br><span class="line"></span><br><span class="line"># 同时录入多行数据</span><br><span class="line">insert into stu(sname,sfz)</span><br><span class="line">values</span><br><span class="line">(&#x27;tiansha&#x27;,&#x27;4324654324312&#x27;),</span><br><span class="line">(&#x27;aaa&#x27;,&#x27;321435212354154&#x27;),</span><br><span class="line">(&#x27;lxx&#x27;,&#x27;556652353265326&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="update"><a href="#update" class="headerlink" title="update"></a><code>update</code></h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from stu;</span><br><span class="line">update stu set sname=&#x27;lxx2&#x27; where id=9;</span><br><span class="line">select * from stu;</span><br><span class="line"></span><br><span class="line"># update语句必须要加where</span><br></pre></td></tr></table></figure>

<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from stu where id=9;</span><br><span class="line"></span><br><span class="line"># 全表删除</span><br><span class="line">DELETE FROM stu</span><br><span class="line">truncate table stu;</span><br><span class="line"></span><br><span class="line">区别:</span><br><span class="line">delete: DML操作, 是逻辑性质删除,逐行进行删除,速度慢</span><br><span class="line">truncate: DDL操作,对与表段中的数据页进行清空,速度快</span><br><span class="line"></span><br><span class="line"># 伪删除</span><br><span class="line">  1.添加状态列</span><br><span class="line">  ALTER TABLE stu ADD state TINYINT NOT NULL DEFAULT 1 ;</span><br><span class="line">  SELECT * FROM stu;</span><br><span class="line">  2. UPDATE 替代 DELETE</span><br><span class="line">  UPDATE stu SET state=0 WHERE id=8;</span><br><span class="line">  3. 业务语句查询</span><br><span class="line">  SELECT * FROM stu WHERE state=1;</span><br></pre></td></tr></table></figure>

<h3 id="DQL的应用-select"><a href="#DQL的应用-select" class="headerlink" title="DQL的应用(select)"></a>DQL的应用(<code>select</code>)</h3><blockquote>
<p>作用: 获取MySQL中的数据行</p>
</blockquote>
<h4 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- select @@xxx 查看系统参数</span><br><span class="line"></span><br><span class="line">SELECT @@port;  # 查看数据库软件的端口</span><br><span class="line">SELECT @@basedir;  # 查看数据库软件目录</span><br><span class="line">SELECT @@datadir;  # 查看数据库数据目录 </span><br><span class="line">SELECT @@socket;  # 查看数据库socket文件位置</span><br><span class="line">SELECT @@server_id;  # 查看server_id号</span><br><span class="line"></span><br><span class="line">show variables like &#x27;%innodb%&#x27;;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- select 函数();</span><br><span class="line"></span><br><span class="line">SELECT NOW();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT CONCAT(&quot;hello world&quot;);</span><br><span class="line">SELECT CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br><span class="line">SELECT GROUP_CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br></pre></td></tr></table></figure>

<h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><p>SQL92标准的使用语法</p>
<h4 id="select语法执行顺序"><a href="#select语法执行顺序" class="headerlink" title="select语法执行顺序"></a>select语法执行顺序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select开始 ----&gt; from子句 ----&gt; where子句 ----&gt; group by子句 ----&gt; select后执行条件 ----&gt; having子句 ----&gt; order by子句 ----&gt; limit</span><br></pre></td></tr></table></figure>

<h4 id="单表环境准备"><a href="#单表环境准备" class="headerlink" title="单表环境准备"></a>单表环境准备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果下面的失效了在该网站下载, https://dev.mysql.com/doc/index-other.html</span></span><br><span class="line">wget https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/sql/world.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql -uroot -p1 &lt; world.sql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p1 -e <span class="string">&#x27;show databases;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表</span></span><br><span class="line">show tables from world;</span><br><span class="line">city            </span><br><span class="line">country         </span><br><span class="line">countrylanguage </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表结构</span></span><br><span class="line">desc city;</span><br></pre></td></tr></table></figure>

<h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a><code>FROM</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use world;</span><br><span class="line">select * from city;  # 适合表数据行较少的，生产中较少使用，会造成数据库压力过大</span><br><span class="line"></span><br><span class="line"># 查询name 和 population的所有值</span><br><span class="line">select name,population from world.city;</span><br></pre></td></tr></table></figure>

<h5 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a><code>WHERE</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># where 配合 等值查询(=)</span><br><span class="line">  # 查询 city 表中,中国城市信息</span><br><span class="line">  select * from world.city where countrycode=&#x27;CHN&#x27;;</span><br><span class="line"></span><br><span class="line"># where 配合 不等值查询(&gt; &gt;= &lt; &lt;= &lt;&gt;)</span><br><span class="line">  # 查询世界人口小于100人的城市</span><br><span class="line">  select * from world.city where population&lt;100;</span><br><span class="line">  </span><br><span class="line">  # 查询世界人口大于10000000的城市</span><br><span class="line">	select * from world.city where population &gt; 10000000;</span><br><span class="line">	</span><br><span class="line"># where 配合 模糊查询(like)</span><br><span class="line">  # 查询国家代号是 C 开头的城市</span><br><span class="line">  select * from world.city where CountryCode like &#x27;C%&#x27;;  # 不要出现 % 在前面的情况, 效率低,不走索引</span><br><span class="line">  # 匹配符号</span><br><span class="line">  # %:匹配任意个数任意字符</span><br><span class="line">	# _:匹配单个个数任意字符</span><br><span class="line">  </span><br><span class="line"># where 配合 逻辑连接符查询(and or)</span><br><span class="line">  # 查询城市人口在10000到20000之间的城市</span><br><span class="line">  select * from world.city where population &gt;= 10000 and population &lt;= 20000;</span><br><span class="line">  select * from world.city where population between 10000 and 20000;</span><br><span class="line">  </span><br><span class="line">  # 查询中国或美国的城市信息</span><br><span class="line">  select * from world.city where CountryCode=&#x27;CHN&#x27; or CountryCode=&#x27;USA&#x27;;</span><br><span class="line">  select * from world.city where CountryCode in (&#x27;CHN&#x27;, &#x27;USA&#x27;);</span><br><span class="line">  </span><br><span class="line">  # distinct: 去重复</span><br><span class="line">  select countrycode from city;</span><br><span class="line">  select distinct(countrycode) from city;</span><br><span class="line">  </span><br><span class="line">  # 聚合</span><br><span class="line">  union  # 如果结果有重复项会自动去重复</span><br><span class="line">  union all  # 如果有重复项不会去重复</span><br><span class="line">  </span><br><span class="line">  # 这条语句性能比上面两条语句高</span><br><span class="line">  select * from world.city where CountryCode=&#x27;CHN&#x27;</span><br><span class="line">  union all</span><br><span class="line">  select * from world.city where CountryCode=&#x27;USA&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="group-by配合聚合函数应用"><a href="#group-by配合聚合函数应用" class="headerlink" title="group by配合聚合函数应用"></a><code>group by</code>配合聚合函数应用</h5><blockquote>
<p>根据 by后面的条件进行分组，方便统计，by后面跟一个列或多个列</p>
</blockquote>
<ul>
<li><p>常用聚合函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max()  # 最大值</span><br><span class="line">min()  # 最小值</span><br><span class="line">avg()  # 平均值</span><br><span class="line">sum()  # 总和</span><br><span class="line">count()  # 个数</span><br><span class="line">group_concat()  # 列转行</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计每个国家的总人口</span><br><span class="line">select CountryCode,sum(population) from world.city group by CountryCode;</span><br><span class="line"></span><br><span class="line"># 统计每个国家 的城市个数</span><br><span class="line">select CountryCode,count(Name) from world.city group by CountryCode;</span><br><span class="line"></span><br><span class="line"># 统计并显示每个国家的省名字列表</span><br><span class="line">select  CountryCode,group_concat(district)  from world.city group by CountryCode;</span><br><span class="line"></span><br><span class="line"># 统计中国每个省的城市列表</span><br><span class="line">select district, group_concat(Name) from world.city where CountryCode=&#x27;CHN&#x27; group by district;</span><br><span class="line"></span><br><span class="line"># 统计中国每个省的总人口数</span><br><span class="line">select district,sum(population) from world.city where CountryCode=&#x27;CHN&#x27; group by district;</span><br></pre></td></tr></table></figure>

<h5 id="having"><a href="#having" class="headerlink" title="having"></a><code>having</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计中国每个省的总人口数，只打印总人口数小于1000000的省</span><br><span class="line">select district,sum(population) from world.city where CountryCode=&#x27;CHN&#x27; group by district having sum(population) &lt; 1000000;</span><br><span class="line"></span><br><span class="line"># having 后的条件是不走索引的，可以进行一些优化手段处理</span><br></pre></td></tr></table></figure>

<h5 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a><code>order by</code></h5><blockquote>
<p>实现先排序, by后添加条件列</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计中国每个省的总人口数并从小到大排序</span><br><span class="line">select district,sum(population) from world.city where CountryCode=&#x27;CHN&#x27; group by district order by sum(population);</span><br><span class="line"></span><br><span class="line"># 统计中国每个省的总人口数并从大到小排序</span><br><span class="line">select district,sum(population) from world.city where CountryCode=&#x27;CHN&#x27; group by district order by sum(population) desc;</span><br><span class="line"></span><br><span class="line"># 查询中国所有的城市，并以人口数降序排序</span><br><span class="line">select  Name, population from world.city where CountryCode=&#x27;CHN&#x27; order by population desc;</span><br></pre></td></tr></table></figure>

<h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计中国每个省的总人口数并从大到小排序只显示前5个</span><br><span class="line">select district,sum(population) from world.city where CountryCode=&#x27;CHN&#x27; group by district order by sum(population) desc limit 5; </span><br><span class="line"></span><br><span class="line"># 统计中国每个省的总人口数并从大到小排序,显示第6-第10个</span><br><span class="line"># 第一种</span><br><span class="line">select district,sum(population) </span><br><span class="line">from world.city </span><br><span class="line">where CountryCode=&#x27;CHN&#x27; </span><br><span class="line">group by district </span><br><span class="line">order by sum(population) desc </span><br><span class="line">limit 5, 5;  </span><br><span class="line"># 第一个5代表跳过前五行, 第二个5表示再显示5行</span><br><span class="line"></span><br><span class="line"># 第二种</span><br><span class="line">select district,sum(population) </span><br><span class="line">from world.city </span><br><span class="line">where CountryCode=&#x27;CHN&#x27; </span><br><span class="line">group by district </span><br><span class="line">order by sum(population) desc </span><br><span class="line">limit 5 offset 5;  </span><br><span class="line"># 第一个5代表显示5行, offset代表偏移五行,跳过前五行</span><br></pre></td></tr></table></figure>

<h4 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h4><blockquote>
<p>将来要查询的数据,是来自于多张表时,可以用多表连接</p>
</blockquote>
<h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表结构:</span><br><span class="line">use school</span><br><span class="line">student ：学生表</span><br><span class="line">sno：    学号</span><br><span class="line">sname：学生姓名</span><br><span class="line">sage： 学生年龄</span><br><span class="line">ssex： 学生性别</span><br><span class="line"></span><br><span class="line">teacher ：教师表</span><br><span class="line">tno：     教师编号</span><br><span class="line">tname：教师名字</span><br><span class="line"></span><br><span class="line">course ：课程表</span><br><span class="line">cno：  课程编号</span><br><span class="line">cname：课程名字</span><br><span class="line">tno：  教师编号</span><br><span class="line"></span><br><span class="line">score  ：成绩表</span><br><span class="line">sno：  学号</span><br><span class="line">cno：  课程编号</span><br><span class="line">score：成绩</span><br><span class="line"></span><br><span class="line"># 构建表</span><br><span class="line">create database school charset utf8mb4;</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">sno int not null primary key auto_increment comment &#x27;学号&#x27;,</span><br><span class="line">sname varchar(20) not null comment &#x27;姓名&#x27;,</span><br><span class="line">sage tinyint unsigned not null comment &#x27;年龄&#x27;,</span><br><span class="line">ssex enum(&#x27;f&#x27;,&#x27;m&#x27;) not null default &#x27;m&#x27; comment &#x27;性别&#x27;</span><br><span class="line">) engine=innodb charset=utf8;</span><br><span class="line"></span><br><span class="line">create table teacher(</span><br><span class="line">tno int not null primary key comment &#x27;教师编号&#x27;,</span><br><span class="line">tname varchar(20) not null comment &#x27;教师姓名&#x27;</span><br><span class="line">) engine=innodb charset=utf8;</span><br><span class="line"></span><br><span class="line">create table course(</span><br><span class="line">cno int not null comment &#x27;课程编号&#x27;,</span><br><span class="line">cname varchar(20) not null comment &#x27;课程名字&#x27;,</span><br><span class="line">tno int not null comment &#x27;教师编号&#x27;</span><br><span class="line">) engine=innodb charset=utf8;</span><br><span class="line"></span><br><span class="line">create table sc(</span><br><span class="line">sno int not null comment &#x27;学号&#x27;,</span><br><span class="line">cno int not null comment &#x27;课程编号&#x27;,</span><br><span class="line">score int not null comment &#x27;成绩&#x27;</span><br><span class="line">) engine=innodb charset=utf8;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES (1,&#x27;zhang3&#x27;,18,&#x27;m&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(2,&#x27;zhang4&#x27;,18,&#x27;m&#x27;),</span><br><span class="line">(3,&#x27;li4&#x27;,18,&#x27;m&#x27;),</span><br><span class="line">(4,&#x27;wang5&#x27;,19,&#x27;f&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student</span><br><span class="line">VALUES</span><br><span class="line">(5,&#x27;zh4&#x27;,18,&#x27;m&#x27;),</span><br><span class="line">(6,&#x27;zhao4&#x27;,18,&#x27;m&#x27;),</span><br><span class="line">(7,&#x27;ma6&#x27;,19,&#x27;f&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(&#x27;oldboy&#x27;,20,&#x27;m&#x27;),</span><br><span class="line">(&#x27;oldgirl&#x27;,20,&#x27;f&#x27;),</span><br><span class="line">(&#x27;oldp&#x27;,25,&#x27;m&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO teacher(tno,tname) VALUES</span><br><span class="line">(101,&#x27;oldboy&#x27;),</span><br><span class="line">(102,&#x27;hesw&#x27;),</span><br><span class="line">(103,&#x27;oldguo&#x27;);</span><br><span class="line"></span><br><span class="line">DESC course;</span><br><span class="line">INSERT INTO course(cno,cname,tno)</span><br><span class="line">VALUES</span><br><span class="line">(1001,&#x27;linux&#x27;,101),</span><br><span class="line">(1002,&#x27;python&#x27;,102),</span><br><span class="line">(1003,&#x27;mysql&#x27;,103);</span><br><span class="line"></span><br><span class="line">DESC sc;</span><br><span class="line">INSERT INTO sc(sno,cno,score)</span><br><span class="line">VALUES</span><br><span class="line">(1,1001,80),</span><br><span class="line">(1,1002,59),</span><br><span class="line">(2,1002,90),</span><br><span class="line">(2,1003,100),</span><br><span class="line">(3,1001,99),</span><br><span class="line">(3,1003,40),</span><br><span class="line">(4,1001,79),</span><br><span class="line">(4,1002,61),</span><br><span class="line">(4,1003,99),</span><br><span class="line">(5,1003,40),</span><br><span class="line">(6,1001,89),</span><br><span class="line">(6,1003,77),</span><br><span class="line">(7,1001,67),</span><br><span class="line">(7,1003,82),</span><br><span class="line">(8,1001,70),</span><br><span class="line">(9,1003,80),</span><br><span class="line">(10,1003,96);</span><br><span class="line"></span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM sc;</span><br></pre></td></tr></table></figure>

<ul>
<li>表之间的关系<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/sfiZ6Y.png" alt="sfiZ6Y"></li>
</ul>
<h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询人口数量小于100人的国家名,城市名,国土面积</span><br><span class="line">select country.name,city.name,country.surfacearea</span><br><span class="line">from</span><br><span class="line">city join country</span><br><span class="line">on city.countrycode=country.code</span><br><span class="line">where city.population &lt; 100;</span><br><span class="line"></span><br><span class="line"># 查询oldguo老师和他教的课程名称</span><br><span class="line">select teacher.tname,course.cname</span><br><span class="line">from</span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">where teacher.tname=&#x27;oldguo&#x27;;</span><br><span class="line"></span><br><span class="line"># 统计一下每门课程的总成绩</span><br><span class="line">select course.cname,sum(sc.score)</span><br><span class="line">from</span><br><span class="line">course join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">group by course.cname,course.cno;</span><br><span class="line"></span><br><span class="line"># only_full_group_by错误</span><br><span class="line">1.在select后面出现的列，不是分组条件，并且没有函数中出现</span><br><span class="line">2.如果group by 后是主键列或者是唯一条件列</span><br><span class="line"></span><br><span class="line">select course.cno,course.cname,sum(sc.score)</span><br><span class="line">from</span><br><span class="line">course join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">group by course.cname;</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/cuanQc.png" alt="cuanQc"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询oldguo老师教的学生姓名列表</span><br><span class="line">select teacher.tname,group_concat(student.sname)</span><br><span class="line">from</span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">join student</span><br><span class="line">on sc.sno=student.sno</span><br><span class="line">where teacher.tname=&#x27;oldguo&#x27;;</span><br><span class="line"></span><br><span class="line"># 查询每个老师教的学生姓名列表</span><br><span class="line">select teacher.tname,group_concat(student.sname)</span><br><span class="line">from </span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">join student</span><br><span class="line">on sc.sno=student.sno</span><br><span class="line">group by teacher.tname;</span><br><span class="line"></span><br><span class="line"># 查询oldguo老师教的不及格的学生姓名</span><br><span class="line">select student.sname</span><br><span class="line">from</span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">join student</span><br><span class="line">on sc.sno=student.sno</span><br><span class="line">where teacher.tname=&#x27;oldguo&#x27; and sc.score &lt; 60;</span><br><span class="line"></span><br><span class="line"># 统计zhang3 学习了几门课</span><br><span class="line">select student.sname,count(sc.cno)</span><br><span class="line">from student</span><br><span class="line">join sc</span><br><span class="line">on student.sno=sc.sno</span><br><span class="line">where student.sname=&#x27;zhang3&#x27;;</span><br><span class="line"></span><br><span class="line"># 查询zhang3 学习的课程名称有哪些</span><br><span class="line">select student.sname , group_concat(course.cname)</span><br><span class="line">from student</span><br><span class="line">join sc</span><br><span class="line">on student.sno=sc.sno</span><br><span class="line">join course</span><br><span class="line">on sc.cno=course.cno</span><br><span class="line">where student.sname=&#x27;zhang3&#x27;;</span><br><span class="line">    </span><br><span class="line"># 查询oldguo 所教课程的平均分数</span><br><span class="line">select teacher.tname,avg(sc.score)</span><br><span class="line">from teacher</span><br><span class="line">JOIN course</span><br><span class="line">ON teacher.tno=course.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON course.cno=sc.cno</span><br><span class="line">WHERE teacher.tname=&#x27;oldguo&#x27;;</span><br><span class="line"></span><br><span class="line"># 每位老师所教课程的平均分 并按平均分排序</span><br><span class="line">select teacher.tname,course.cname, avg(sc.score)</span><br><span class="line">from</span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">join student</span><br><span class="line">on sc.sno=student.sno</span><br><span class="line">group by teacher.tname,course.cname</span><br><span class="line">order by avg(sc.score) desc;</span><br><span class="line"></span><br><span class="line"># 查询所有老师所教学生不及格的信息</span><br><span class="line">select student.sname,course.cname,sc.score</span><br><span class="line">from</span><br><span class="line">teacher join course</span><br><span class="line">on teacher.tno=course.tno</span><br><span class="line">join sc</span><br><span class="line">on course.cno=sc.cno</span><br><span class="line">join student</span><br><span class="line">on sc.sno=student.sno</span><br><span class="line">where sc.score &lt; 60;</span><br></pre></td></tr></table></figure>

<h5 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 表别名设置</span><br><span class="line"># 查询所有老师所教学生不及格的信息</span><br><span class="line">select d.sname,b.cname,c.score</span><br><span class="line">from</span><br><span class="line">teacher as a</span><br><span class="line">join course as b</span><br><span class="line">on a.tno=b.tno</span><br><span class="line">join sc as c</span><br><span class="line">on b.cno=c.cno</span><br><span class="line">join student as d</span><br><span class="line">on c.sno=d.sno</span><br><span class="line">where c.score &lt; 60;</span><br><span class="line"></span><br><span class="line"># 列别名</span><br><span class="line">select count(distinct(name)) from world.city;</span><br><span class="line">select count(distinct(name)) as a from world.city;</span><br></pre></td></tr></table></figure>

<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><blockquote>
<p>左外连接和右外连接</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 内连接</span><br><span class="line">select a.name,b.name, b.surfacearea</span><br><span class="line">from world.city as a</span><br><span class="line">join world.country as b</span><br><span class="line">on a.countrycode=b.code</span><br><span class="line">where a.population &lt; 100;</span><br><span class="line"></span><br><span class="line"># 左外连接</span><br><span class="line">select a.name,b.name, b.surfacearea</span><br><span class="line">from world.city as a</span><br><span class="line">left join world.country as b</span><br><span class="line">on a.countrycode=b.code</span><br><span class="line">and a.population &lt; 100;</span><br><span class="line"># a.name的值全部出来了, b.name和b.surfacearea不满足的会用NULL填充</span><br><span class="line"></span><br><span class="line">select a.name,b.name, b.surfacearea</span><br><span class="line">from world.city as a</span><br><span class="line">left join world.country as b</span><br><span class="line">on a.countrycode=b.code</span><br><span class="line">where a.population &lt; 100;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 右外连接</span><br><span class="line">select a.name,b.name, b.surfacearea</span><br><span class="line">from world.city as a</span><br><span class="line">right join world.country as b</span><br><span class="line">on a.countrycode=b.code</span><br><span class="line">and a.population &lt; 100;</span><br></pre></td></tr></table></figure>

<h3 id="information-schema-tables视图"><a href="#information-schema-tables视图" class="headerlink" title="information_schema.tables视图"></a><code>information_schema.tables</code>视图</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.虚拟库</span><br><span class="line">2.开启数据库时产生的</span><br><span class="line">3.不能被删除和修改</span><br><span class="line">4.库中存储的是视图</span><br><span class="line">5.此库中的视图也是不能被删除和修改的,只能select查询</span><br></pre></td></tr></table></figure>

<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此库中的视图是用来,间接的查询数据库的&quot;元数据&quot;(&quot;基表&quot;数据)</span><br><span class="line">基表:数据是通过自动统计收集而来的.</span><br><span class="line">基表:是不允许人为直接增\删\改\查的</span><br><span class="line">必须通过:专用的DDL,DCL实现增\删\改,show语句和information_schema可以做查询</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 记录了:整个MySQL数据库中,所有的表的详细属性信息</span><br><span class="line">desc information_schema.tables;</span><br><span class="line">TABLE_SCHEMA    ----&gt;库名</span><br><span class="line">TABLE_NAME      ----&gt;表名</span><br><span class="line">ENGINE          ----&gt;引擎</span><br><span class="line">TABLE_ROWS      ----&gt;表的行数</span><br><span class="line">AVG_ROW_LENGTH  ----&gt;表中行的平均行（字节）</span><br><span class="line">INDEX_LENGTH    ----&gt;索引的占用空间大小（字节）</span><br></pre></td></tr></table></figure>

<h4 id="CONCAT-函数使用"><a href="#CONCAT-函数使用" class="headerlink" title="CONCAT()函数使用"></a><code>CONCAT()</code>函数使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简单使用</span><br><span class="line">select user, host from mysql.user;</span><br><span class="line"></span><br><span class="line">select concat(user,&quot;@&quot;,host) from mysql.user;</span><br><span class="line"></span><br><span class="line"># 生产需求，下例子批量备份语句</span><br></pre></td></tr></table></figure>

<h4 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h4><ul>
<li><p>查询整个数据库中所有库和所对应的表信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_schema,group_concat(table_name)</span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema;</span><br></pre></td></tr></table></figure></li>
<li><p>统计所有库下 的表个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_schema,count(table_name)</span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema;</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有innodb引擎的表及所在的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_schema,table_name,engine</span><br><span class="line">from information_schema.tables</span><br><span class="line">where engine=&#x27;innodb&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>统计world的数据库下每个表的行数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_name,table_rows</span><br><span class="line">from information_schema.tables</span><br><span class="line">where table_schema=&#x27;world&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>统计world数据库下每张表的磁盘空间占用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_name,concat((TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)/1024,&quot; KB&quot;) as size_KB</span><br><span class="line">from information_schema.tables </span><br><span class="line">where table_schema=&#x27;world&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>统计所有数据库的总磁盘空间占用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_schema,concat(sum(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)/1024,&quot; KB&quot;) as Total_KB</span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema;</span><br><span class="line"></span><br><span class="line">mysql -uroot -p1 -e &#x27;select table_schema,concat(sum(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)/1024,&quot; KB&quot;) as Total_KB from information_schema.tables group by table_schema;&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>生成整个数据库下的所有表的单独备份语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">secure-file-priv=/tmp  # 在mysqld 标签下添加</span><br><span class="line">systemctl restart mysqld.service  # 重启数据库</span><br><span class="line"></span><br><span class="line">模板语句：</span><br><span class="line">mysqldump -uroot -p123 world city &gt;/tmp/world_city.sql</span><br><span class="line"></span><br><span class="line">批量生成整个数据库的所有表的备份语句:</span><br><span class="line">select concat(&quot;mysqldump -uroot -p1 &quot;,table_schema,&quot; &quot;,table_name,&quot;  &gt; /bak/&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot;) from information_schema.tables;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="常用show语句"><a href="#常用show语句" class="headerlink" title="常用show语句"></a>常用show语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;                      # 查看所有数据库</span><br><span class="line">show tables;                         # 查看当前库下的表</span><br><span class="line">show tables from xxx;                # 查看指定库下的表</span><br><span class="line">show create database xxx;            # 查看建库语句</span><br><span class="line">show create table;                   # 查看建表语句</span><br><span class="line">show grants for root@&#x27;localhost&#x27;;    # 查看用户权限信息</span><br><span class="line">show charset;                        # 查看所有字符集</span><br><span class="line">show collation;                      # 校对规则</span><br><span class="line">show engines;                        # 查看存储引擎支持情况</span><br><span class="line">show status;                         # 看数据库的整体状态</span><br><span class="line">show status like &#x27;%lock%&#x27;            # 模糊查找数据库的状态</span><br><span class="line">show variables;                      # 查看数据库所有变量情况</span><br><span class="line">show variables like &#x27;%log%&#x27;;         # 模糊查找相关数据库的变量情况</span><br><span class="line">show full processlist;               # 看数据库连接线程状态</span><br><span class="line">show engine innodb status \G         # 看innodb存储引擎总状态</span><br><span class="line">show master status;                  # 主从复制中库信息</span><br><span class="line">show slave status \G                 # 主从复制从库状态</span><br><span class="line">show binary logs;                    # 可用的binlog文件名</span><br><span class="line">show binlog events in &#x27;&#x27;;            # binlog日志的事件信息</span><br><span class="line">show relaylog events in &#x27;&#x27;;          # 查看relaylog日志情况</span><br><span class="line"></span><br><span class="line">select @@log_error;                  # 查看某个参数的定义信息</span><br><span class="line">select now();                        # 查看当前时间</span><br><span class="line">select database();                   # 查看当前use到的库</span><br><span class="line">select user();                       # 当前登录的用户</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL初始化配置</title>
    <url>/37f9f562.html</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">控制MySQL的启动</span><br><span class="line">影响到客户端的连接</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="初始化配置的方法"><a href="#初始化配置的方法" class="headerlink" title="初始化配置的方法"></a>初始化配置的方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化配置文件(例如/etc/my.cnf)</span><br><span class="line">启动命令行上进行设置(例如:mysqld_safe mysqld)</span><br><span class="line">预编译时设置(仅限于编译安装时设置)</span><br></pre></td></tr></table></figure>

<h3 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h3><p>初始化配置文件的默认读取路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认配置文件读取顺序</span><br><span class="line">mysqld --help --verbose |grep my.cnf</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf</span><br><span class="line"></span><br><span class="line">默认情况下，MySQL启动时，会依次读取以上配置文件，如果有重复选项，会以最后一个文件设置的为准</span><br><span class="line">如果启动时加入了--defaults-file=xxxx时，以上的所有文件都不会读取</span><br></pre></td></tr></table></figure>

<p>配置文件的书写方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    [标签]</span><br><span class="line">    配置项=xxxx</span><br><span class="line"></span><br><span class="line">    标签类型：服务端、客户端</span><br><span class="line">    服务器端标签：</span><br><span class="line">    [mysqld]</span><br><span class="line">    [mysqld_safe]</span><br><span class="line">    [server]</span><br><span class="line"></span><br><span class="line">    客户端标签：</span><br><span class="line">    [mysql]</span><br><span class="line">    [mysqldump]</span><br><span class="line">    [client]</span><br><span class="line"></span><br><span class="line">配置文件的示例：</span><br><span class="line">    cat /etc/my.cnf</span><br><span class="line">    [mysqld]</span><br><span class="line">    user=mysql  # 用户                 </span><br><span class="line">    basedir=/usr/local/mysql  # 软件目录</span><br><span class="line">    datadir=/data/mysql/data  # 数据目录</span><br><span class="line">    socket=/tmp/mysql.sock  # socket位置</span><br><span class="line">    server_id=6  # 服务器ID号</span><br><span class="line">    port=3306  # 端口</span><br><span class="line">    log_error=/data/mysql/mysql.log  # 日志位置</span><br><span class="line">    [mysql]</span><br><span class="line">    socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>

<h3 id="多实例配置"><a href="#多实例配置" class="headerlink" title="多实例配置"></a>多实例配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据目录准备</span></span><br><span class="line">mkdir /data/330&#123;7,8,9&#125;/data -p</span><br><span class="line">chown -R mysql.mysql /data/*</span><br><span class="line">tree -L 2 /data/</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cat &gt; /data/3307/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/usr/local/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3307/data</span></span><br><span class="line"><span class="string">socket=/data/3307/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3307/mysql.log</span></span><br><span class="line"><span class="string">port=3307</span></span><br><span class="line"><span class="string">server_id=7</span></span><br><span class="line"><span class="string">log_bin=/data/3307/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt; /data/3308/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/usr/local/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3308/data</span></span><br><span class="line"><span class="string">socket=/data/3308/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3308/mysql.log</span></span><br><span class="line"><span class="string">port=3308</span></span><br><span class="line"><span class="string">server_id=8</span></span><br><span class="line"><span class="string">log_bin=/data/3308/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt; /data/3309/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/usr/local/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3309/data</span></span><br><span class="line"><span class="string">socket=/data/3309/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3309/mysql.log</span></span><br><span class="line"><span class="string">port=3309</span></span><br><span class="line"><span class="string">server_id=9</span></span><br><span class="line"><span class="string">log_bin=/data/3309/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移动原来的配置文件</span></span><br><span class="line">mv /etc/my.cnf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化三套数据库</span></span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动文件配置</span></span><br><span class="line">cp /etc/systemd/system/mysqld.service  /etc/systemd/system/mysqld3307.service</span><br><span class="line">cp /etc/systemd/system/mysqld.service  /etc/systemd/system/mysqld3308.service</span><br><span class="line">cp /etc/systemd/system/mysqld.service  /etc/systemd/system/mysqld3309.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改相关启动文件</span></span><br><span class="line">vim /etc/systemd/system/mysqld3307.service</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3307/my.cnf</span><br><span class="line"></span><br><span class="line">vim /etc/systemd/system/mysqld3308.service</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3308/my.cnf</span><br><span class="line"></span><br><span class="line">vim /etc/systemd/system/mysqld3309.service</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3309/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mysqld3307.service</span><br><span class="line">systemctl start mysqld3308.service</span><br><span class="line">systemctl start mysqld3309.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查验证多实例</span></span><br><span class="line">ps -ef |grep mysql</span><br><span class="line">netstat -lntup|grep 330</span><br><span class="line"></span><br><span class="line">mysql -S /data/3307/mysql.sock  -e <span class="string">&#x27;select @@server_id&#x27;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock  -e <span class="string">&#x27;select @@server_id&#x27;</span></span><br><span class="line">mysql -S /data/3309/mysql.sock  -e <span class="string">&#x27;select @@server_id&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL基础管理</title>
    <url>/d7227a45.html</url>
    <content><![CDATA[<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>作用: 登录、管理数据逻辑对象</p>
<span id="more"></span>
<p>定义:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">用户名@&#x27;白名单&#x27;</span><br><span class="line"></span><br><span class="line">白名单支持的方式:</span><br><span class="line">wordpress@&#x27;10.0.0.%&#x27;     # 10.0.0.0 段</span><br><span class="line">wordpress@&#x27;%&#x27;            # 所有</span><br><span class="line">wordpress@&#x27;10.0.0.200&#x27;   # 指定IP</span><br><span class="line">wordpress@&#x27;localhost&#x27;    # 本地localhost</span><br><span class="line">wordpress@&#x27;db02&#x27;         # 指定主机名,能解析该主机名</span><br><span class="line">wordpress@&#x27;10.0.0.5%&#x27;    # 10.0.0.5x 段</span><br><span class="line">wordpress@&#x27;10.0.0.0/255.255.254.0&#x27;  # 子网掩码方式</span><br></pre></td></tr></table></figure>

<p>管理操作:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">create user wordpress@&#x27;192.168.0.%&#x27; identified by &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line"># 查询用户</span><br><span class="line">select user, host from mysql.user;</span><br><span class="line"></span><br><span class="line"># 修改用户密码</span><br><span class="line"> alter user wordpress@&#x27;192.168.0.%&#x27; identified by &#x27;456&#x27;;</span><br><span class="line"> </span><br><span class="line"># 删除用户</span><br><span class="line">drop user wordpress@&#x27;192.168.0.%&#x27;;</span><br><span class="line"></span><br><span class="line"># 创建用户密码以及授权操作</span><br><span class="line"># 5.7版本 创建用户以及授权一步完成</span><br><span class="line">grant all on *.* to wordpress@&#x27;192.168.0.%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line"># 8.0版本 必须先创建用户之后才能授权</span><br><span class="line">create user wordpress@&#x27;192.168.0.%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">grant all on *.* to wordpress@&#x27;192.168.0.%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><h4 id="常用权限"><a href="#常用权限" class="headerlink" title="常用权限"></a>常用权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALL:</span><br><span class="line">SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br><span class="line">ALL : 以上所有权限，一般是普通管理员拥有的</span><br></pre></td></tr></table></figure>

<h4 id="授权命令"><a href="#授权命令" class="headerlink" title="授权命令"></a>授权命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant 权限 on 作用目标 to 用户 identified 密码 with grant option</span><br><span class="line"></span><br><span class="line">作用目标：</span><br><span class="line">*.*：代表授权所有库所有表权限</span><br><span class="line">wordpress.*：代表授权 wordpress 库下的所有表权限</span><br><span class="line">worpress.t1：代表授权 wordpress </span><br><span class="line"></span><br><span class="line">with grant option：超级管理员才具备的，给别的用户授权的功能</span><br></pre></td></tr></table></figure>

<h4 id="授权相关"><a href="#授权相关" class="headerlink" title="授权相关"></a>授权相关</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个管理员用户root,可以通过192.168.0网段登录,管理所有数据库</span><br><span class="line">grant all  on *.* to root@&#x27;192.168.0.%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line"># 创建一个应用用户app用户,可以远程登录mysql,并能操作app库</span><br><span class="line">grant select,update,insert,delete on app.* to app@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="查看授权"><a href="#查看授权" class="headerlink" title="查看授权"></a>查看授权</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants for root@&#x27;%&#x27;;</span><br><span class="line">show grants for app@&#x27;%&#x27;&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限"></a>回收权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 回收app用户对app库下所有表的删除的权限</span><br><span class="line">revoke delete on app.* from app@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 回收app用户对app库下所有表查询 更新 插入权限</span><br><span class="line">revoke select,update,insert  on app.* from app@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><ul>
<li>常用参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u                   用户</span><br><span class="line">-p                   密码</span><br><span class="line">-h                   IP</span><br><span class="line">-P                   端口</span><br><span class="line">-S                   socket文件</span><br><span class="line">-e                   免交互执行命令</span><br><span class="line">&lt;                    导入SQL脚本</span><br><span class="line"></span><br><span class="line"># 远程连接</span><br><span class="line">mysql -uroot -p -h 192.168.0.11 -P3306</span><br><span class="line"></span><br><span class="line"># 免交互执行sql语句</span><br><span class="line">mysql -uroot -p1 -e &quot;select user,host from mysql.user;&quot;</span><br><span class="line"></span><br><span class="line"># 导入sql脚本</span><br><span class="line">mysql -uroot -p1 &lt;world.sql</span><br><span class="line"></span><br><span class="line"># 查看socket</span><br><span class="line">mysql&gt; select @@socket;</span><br><span class="line"></span><br><span class="line"># 查看连接情况</span><br><span class="line">mysql&gt; show processlist;</span><br><span class="line"></span><br><span class="line"># 内置命令</span><br><span class="line">help     打印 mysql 帮助</span><br><span class="line">\c       ctrl+c 结束上个命令运行</span><br><span class="line">\q       quit; exit; ctrl+d 退出 mysql</span><br><span class="line">\G       将数据竖起来显示</span><br><span class="line">source   恢复备份文件</span><br></pre></td></tr></table></figure>

<h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/AN1ZCg.jpg" alt="AN1ZCg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上多种方式，都可以单独启动MySQL服务</span><br><span class="line">mysqld_safe和mysqld一般是在临时维护时使用。</span><br><span class="line">另外，从Centos 7系统开始，支持systemd直接调用mysqld的方式进行启动数据库</span><br><span class="line"></span><br><span class="line">维护性的启动方式</span><br><span class="line">我们一般会将我们需要的参数临时加到命令行。也会读取/etc/my.cnf 的内容,但是如果冲突,命令行优先级最高</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysqld_safe  --skip-grant-tables --skip-networking &amp;</span><br><span class="line">/usr/local/mysql/bin/mysqld &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL体系结构</title>
    <url>/3c4a0863.html</url>
    <content><![CDATA[<h3 id="C-S模型介绍"><a href="#C-S模型介绍" class="headerlink" title="C/S模型介绍"></a>C/S模型介绍</h3><span id="more"></span>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/AuYdO0.jpg" alt="AuYdO0"></p>
<ul>
<li><p>连接方式</p>
<ul>
<li><p>TCP/IP方式(远程、本地)</p>
<p><code>mysql -uroot -p1 -h 192.168.0.11 -P3306</code></p>
</li>
<li><p>Socket方式(仅本地)</p>
<p><code>mysql -uroot -p1 -S /tmp/mysql.sock</code></p>
</li>
</ul>
</li>
<li><p>实例介绍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">实例=mysqld后台守护进程+Master Thread +干活的Thread+预分配的内存</span><br><span class="line">公司=老板+经理+员工+办公室</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="MySQL程序运行原理"><a href="#MySQL程序运行原理" class="headerlink" title="MySQL程序运行原理"></a>MySQL程序运行原理</h3><ul>
<li><p>MySQL程序结构</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/kfNBL7.jpg" alt="kfNBL7"></p>
<p>​    </p>
</li>
<li><p>一条SQL语句的执行过程</p>
<ul>
<li><p>连接层</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（1）提供连接协议：TCP/IP 、SOCKET</span><br><span class="line">（2）提供验证：用户、密码，IP，SOCKET</span><br><span class="line">（3）提供专用连接线程：接收用户SQL，返回结果</span><br><span class="line">通过以下语句可以查看到连接线程基本情况</span><br><span class="line">show processlist;</span><br></pre></td></tr></table></figure></li>
<li><p>SQL层</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（1）接收上层传送的SQL语句</span><br><span class="line">（2）语法验证模块：验证语句语法,是否满足SQL_MODE</span><br><span class="line">（3）语义检查：判断SQL语句的类型</span><br><span class="line">    DDL ：数据定义语言</span><br><span class="line">    DCL ：数据控制语言</span><br><span class="line">    DML ：数据操作语言</span><br><span class="line">    DQL： 数据查询语言</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">（4）权限检查：用户对库表有没有权限</span><br><span class="line">（5）解析器：对语句执行前,进行预处理，生成解析树(执行计划),说白了就是生成多种执行方案.</span><br><span class="line">（6）优化器：根据解析器得出的多种执行计划，进行判断，选择最优的执行计划</span><br><span class="line">        代价模型：资源（CPU IO MEM）的耗损评估性能好坏</span><br><span class="line">（7）执行器：根据最优执行计划，执行SQL语句，产生执行结果</span><br><span class="line">执行结果：在磁盘的xxxx位置上</span><br><span class="line">（8）提供查询缓存（默认是没开启的），会使用redis tair替代查询缓存功能</span><br><span class="line">（9）提供日志记录（日志管理章节）：binlog，默认是没开启的。</span><br></pre></td></tr></table></figure></li>
<li><p>存储引擎层(类似LInux的文件系统)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">负责根据SQL层执行的结果，从磁盘上拿数据。</span><br><span class="line">将16进制的磁盘数据，交由SQL结构化化成表，</span><br><span class="line">连接层的专用线程返回给用户</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ZQGxzu.jpg" alt="ZQGxzu"></p>
<h3 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/aZsnpd.jpg" alt="aZsnpd"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">表的物理存储结构</span><br><span class="line">MyISAM 引擎（相当于 Linux 的 ext2 文件系统）</span><br><span class="line">user.frm：存储的表结构（列，列属性）</span><br><span class="line">user.MYD：存储的数据记录</span><br><span class="line">user.MYI：存储索引</span><br><span class="line"><span class="comment"># ps: mysql 8.0 版本之后不再支持 MyISAM 引擎</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InnoDB 引擎（相当于 Linux 的 XFS 文件系统）</span><br><span class="line">time_zone.frm：存储的表结构（列，列属性）</span><br><span class="line">time_zone.ibd：存储的数据记录和索引</span><br></pre></td></tr></table></figure>

<h3 id="InnoDB段、区、页"><a href="#InnoDB段、区、页" class="headerlink" title="InnoDB段、区、页"></a>InnoDB段、区、页</h3><p>InnoDB 存储引擎的逻辑存储结构中所有数据都被逻辑地存放在一个空间 中 ，我们称之为表空间（tablespace），空间又由段（segment）、区（extent）、 页(page）组成 。 </p>
<p>页： InnoDB 管理存储空间的基本单位，数据页大小默认为 16KB，我们表中记录 都是存放在页中的，官方称这种存放记录的页为索引（INDEX）页。因为这种类 型的页是用来存放表数据的，也可以称为数据页。 </p>
<p>区： 区是由连续的页组成的空间，无论页的大小怎么变，区的大小默认总是为 1MB。如连续的 64 个 16K 的页就是一个区，连续的 32 个 32K 的页也是一个区。 为了保证区中的页的连续性，InnoDB 存储引擎一次从磁盘申请 4-5 个区，在创 建一个段时就会创建一个默认的区。</p>
<p> 段： MySQL 的表根据存储需求会分配多个区，多个区构成的表称为段，理论上一 个表就是一个段（非分区表）。 总结： 一般情况下（非分区表） 一个表就是一个段 一个段由多个区构成 一个区在（16k），64 个连续的页，1M 大小</p>
<p>总结：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">页：最小的存储单元，默认16k</span><br><span class="line">区：64个连续的页，共1M</span><br><span class="line">段：一个表就是一个段，包含一个或多个区</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL登录及密码管理</title>
    <url>/318aa70a.html</url>
    <content><![CDATA[<h3 id="已知密码情况下"><a href="#已知密码情况下" class="headerlink" title="已知密码情况下"></a>已知密码情况下</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p password 123456</span><br><span class="line"><span class="comment"># Enter password: #因为我们现在没有密码，直接回车即可！</span></span><br><span class="line"><span class="comment"># 修改密码和上面一样，只是在要求输入密码时输入正确的密码即可</span></span><br></pre></td></tr></table></figure>

<h3 id="忘记密码修改"><a href="#忘记密码修改" class="headerlink" title="忘记密码修改"></a>忘记密码修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭数据库</span></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动数据库到维护模式</span></span><br><span class="line">mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解释 </span></span><br><span class="line">--skip-grant-tables  <span class="comment"># 跳过授权表</span></span><br><span class="line">--skip-networking    <span class="comment"># 跳过远程登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接进入mysql</span></span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql语句,重新修改密码</span></span><br><span class="line">flush privileges;</span><br><span class="line">alter user root@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启数据库</span></span><br><span class="line">pkill mysqld</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时用密码 1 即可进入数据库</span></span><br><span class="line"> mysql -uroot -p1</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/eOzO9V.png" alt="eOzO9V"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL二进制安装</title>
    <url>/f88e38d3.html</url>
    <content><![CDATA[<h2 id="Centos7下二进制安装"><a href="#Centos7下二进制安装" class="headerlink" title="Centos7下二进制安装"></a>Centos7下二进制安装</h2><span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙及selinux</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i  s#enforcing#disabled#g /etc/selinux/config</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载mariadb相关软件包</span></span><br><span class="line">yum remove mariadb* -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载依赖包</span></span><br><span class="line">yum install  libaio-devel -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载tar包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/mysql-5.7.34-el7-x86_64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar xf mysql-5.7.31-el7-x86_64.tar.gz </span><br><span class="line">mv mysql-5.7.31-el7-x86_64 /usr/local/mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建mysql用户</span></span><br><span class="line">useradd -s /sbin/nologin mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加环境变量</span></span><br><span class="line">echo &#x27;export PATH=/usr/local/mysql/bin:$PATH&#x27; &gt;&gt;/etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql软件目录授权mysql用户</span></span><br><span class="line">chown -R mysql:mysql /usr/local/mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">mysql -V</span><br></pre></td></tr></table></figure>

<p>数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据库数据目录应该单独用一块盘挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkfs.xfs /dev/sdb</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/fstab</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount -a</span> </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这边测试就直接创建目录了</span></span><br><span class="line">mkdir /data/mysql/data -p</span><br><span class="line">chown -R mysql:mysql /data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line">/usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--initialize-insecure  # 使用空密码,后续手动添加密码即可</span><br><span class="line">--initialize           # 会产生一个临时密码</span><br><span class="line">--user                 # 指定用户</span><br><span class="line">--basedir              # 指定软件路径</span><br><span class="line">--datadir              # 指定数据路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最简配置文件</span></span><br><span class="line">cat &gt;/etc/my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=6</span><br><span class="line">port=3306</span><br><span class="line">[mysql]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法一: mysql的脚本启动文件</span></span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">service mysqld start  # 该方法启动命令</span><br><span class="line">service mysqld stop  # 该方法停止命令</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二: systemd启动配置</span></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用systemd启动和检查</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line">systemctl status mysqld.service</span><br><span class="line">netstat -lntup |grep 3306</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库启动错误分析</span></span><br><span class="line"> without updating PID 类似错误 </span><br><span class="line">查看日志：</span><br><span class="line">	/data/mysql/data/主机名.err </span><br><span class="line">	[ERROR] 上下文</span><br><span class="line">可能情况：</span><br><span class="line">	/etc/my.cnf 路径不对等</span><br><span class="line">	/tmp/mysql.sock文件修改过 或 删除过 </span><br><span class="line">	数据目录权限不是mysql</span><br><span class="line">	参数改错了</span><br><span class="line"><span class="meta">	</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调试命令</span></span><br><span class="line">mysqld --default-file=/etc/my.cnf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux目录结构</title>
    <url>/5e2eb880.html</url>
    <content><![CDATA[<h1 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h1><h3 id="1、拍摄快照"><a href="#1、拍摄快照" class="headerlink" title="1、拍摄快照"></a>1、拍摄快照</h3><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211209204224924.png" alt="image-20211209204224924"></p>
<span id="more"></span>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211209204345586.png" alt="image-20211209204345586"></p>
<h3 id="2、恢复快照"><a href="#2、恢复快照" class="headerlink" title="2、恢复快照"></a>2、恢复快照</h3><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211209204613798.png" alt="image-20211209204613798"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>、克隆主机</span><br><span class="line">		 管理 ---&gt; 克隆</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、改ip</span><br><span class="line"></span><br><span class="line">	最后一位<span class="number">3</span> - <span class="number">254</span></span><br><span class="line">    <span class="comment"># 查看网卡名称，或者查看本机IP</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># ip a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改网卡</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># </span></span><br><span class="line">    </span><br><span class="line">    [root@localhost ~]<span class="comment"># sed -i &#x27;s#.100#.101#g&#x27; /etc/sysconfig/network-scripts/ifcfg-eth[01]-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重启系统网络</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure>

<h1 id="bash概述"><a href="#bash概述" class="headerlink" title="bash概述"></a>bash概述</h1><p>bash（壳）是一个命令解释器，负责跟系统的内核进行交互，在操作系统的最外层</p>
<p> bash可以干什么？针对于操作系统做了一些操作</p>
<ul>
<li><p>文件管理</p>
</li>
<li><p>目录管理</p>
</li>
<li><p>权限管理</p>
</li>
<li><p>用户管理</p>
</li>
<li><p>应用管理</p>
</li>
<li><p>软件管理</p>
</li>
<li><p>磁盘管理</p>
</li>
<li><p>等等</p>
<p>执行方式 操作简单 针对简单的管理操作</p>
<p>脚本script 操作复杂 操作一些复杂性较大的操作</p>
</li>
</ul>
<h1 id="系统命令行介绍"><a href="#系统命令行介绍" class="headerlink" title="系统命令行介绍"></a>系统命令行介绍</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、ping</span><br><span class="line">	格式：</span><br><span class="line">    	ping [网址]</span><br><span class="line"></span><br><span class="line">2、主机登录用户信息</span><br><span class="line">	[root@localhost ~]<span class="comment">#   :  #表示超级用户管理员命令提示符，注释	</span></span><br><span class="line">	[<span class="built_in">test</span>@localhost ~]		:  $普通用户命令提示符</span><br><span class="line">	</span><br><span class="line">    root  		:  登录当前系统的用户名</span><br><span class="line">    @     		:  表示分隔符，没有特殊含义</span><br><span class="line">    localhost :  表示当前系统的主机名</span><br><span class="line">    ~     		:  表示当前所在的目录（~ 代表的是当前的家目录， /root）</span><br><span class="line">    []	 	    :  表示括号，没有其他的作用</span><br><span class="line">    <span class="comment">#			    :  没有实际含义</span></span><br><span class="line">    </span><br><span class="line">3、自定义系统登录用户信息</span><br><span class="line">	PS1 环境变量</span><br><span class="line">	</span><br><span class="line">	[root@localhost ~]<span class="comment"># echo $PS1</span></span><br><span class="line">  [\u@\h \W]\$</span><br><span class="line">  [root@localhost ~]<span class="comment"># PS1=&#x27;[\u@\h --- \W]\$&#x27;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">知识储备：</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="系统命令语法格式"><a href="#系统命令语法格式" class="headerlink" title="系统命令语法格式"></a>系统命令语法格式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">通常系统命令语法格式：</span><br><span class="line">一条完整命令</span><br><span class="line">	命令      [参数] 				[选项] 			[路径]</span><br><span class="line">	</span><br><span class="line"><span class="built_in">command</span>		[arguments]  [options]	</span><br><span class="line"></span><br><span class="line">1、中括号内的内容是可有可无的，选项和参数不是必须的</span><br><span class="line">2、命令是指令的主体，是必须存在的</span><br><span class="line">3、选项是用于调节命令的某个功能</span><br><span class="line">		引导短格式（单个字符）	以短横杠表示‘-’	例如	-l</span><br><span class="line">		引导长格式（多个字符）	多个字符表示一定的含义	以‘--’表示		--all</span><br><span class="line">		多个短格式（多个字符）	每个字符都有一定的功能，‘-’	-al</span><br><span class="line">4、参数是命令操作的对象，文件或者目录</span><br><span class="line">5、指令、选项、参数两两之间必须要有一个空格</span><br><span class="line">6、完整的命令、选项、参数之间不能有空格</span><br><span class="line">7、命令的位置是在最前面的，是不能改变位置的</span><br><span class="line">8、选项和参数的位置是可以发生改变的</span><br></pre></td></tr></table></figure>

<h1 id="系统运行命令"><a href="#系统运行命令" class="headerlink" title="系统运行命令"></a>系统运行命令</h1><h2 id="1、关机"><a href="#1、关机" class="headerlink" title="1、关机"></a>1、关机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">同步时间：</span><br><span class="line">yun install -y ntpdate</span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shutdown	：关机或重启</span><br><span class="line">			参数：-h : 指定关机的延时时间</span><br><span class="line">			   	 -c : 取消关机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  关机/取消：			   </span><br><span class="line">    shutdown -h 10	<span class="comment"># 10是以分钟为节点的	</span></span><br><span class="line">    shutdown -h 11:00	<span class="comment"># 定时关机</span></span><br><span class="line">    shutdown -c	<span class="comment"># 取消你的关机操作			   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  立即关机:</span><br><span class="line">    shutdown -h now  <span class="comment"># 立刻关机</span></span><br><span class="line">    shutdown -h 0  <span class="comment"># 立刻关机</span></span><br><span class="line">		</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">halt		:  禁用CPU资源</span><br><span class="line">halt -p <span class="comment"># 立刻关机，不加-p只关闭系统</span></span><br><span class="line">	</span><br><span class="line">poweroff	： 立即关闭电源</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init	：设置系统启动模式</span><br><span class="line">	参数： 0 ： 立刻关机</span><br><span class="line">        1 ： 单用户模式</span><br><span class="line">        2 ： 多用户无网络模式</span><br><span class="line">        3 ： 多用户模式</span><br><span class="line">        4 ： 待定</span><br><span class="line">        5 ： 桌面模式</span><br><span class="line">        6 ： 重启</span><br></pre></td></tr></table></figure>

<h2 id="2、重启"><a href="#2、重启" class="headerlink" title="2、重启"></a>2、重启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line">		参数：</span><br><span class="line">			-r : 指定重启的延时时间</span><br><span class="line">			</span><br><span class="line">    shutdown -r 10 <span class="comment"># 10分钟后立刻重启</span></span><br><span class="line">    shutdown -r 0	 <span class="comment"># 立即重启</span></span><br><span class="line">    shutdown -r now	<span class="comment"># 立即重启</span></span><br><span class="line">    shutdown -r 11:00	<span class="comment"># 11:00重启			</span></span><br><span class="line">		</span><br><span class="line">reboot</span><br><span class="line">		reboot	<span class="comment"># 系统推荐的重启操作</span></span><br></pre></td></tr></table></figure>

<h2 id="3、注销"><a href="#3、注销" class="headerlink" title="3、注销"></a>3、注销</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">logout</span>	: 退出当前登录的用户	只能退出登录式shell，不能退出非登陆式shell</span><br><span class="line"></span><br><span class="line">ctrl+d	: 快捷键	退出当前登录的用户</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>	  :  退出当前登录的用户	能退出登录式shell，也能退出非登陆式shell，主要用于脚本退出</span><br></pre></td></tr></table></figure>



<h1 id="查看系统命令帮助"><a href="#查看系统命令帮助" class="headerlink" title="查看系统命令帮助"></a>查看系统命令帮助</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">	man [需要查看帮助的命令]    ：详细的显示一个命令的使用方法</span><br><span class="line">	</span><br><span class="line">		命令解释说明信息：NAME</span><br><span class="line">		命令语法说明信息：SYNOPSIS</span><br><span class="line">		命令描述详细说明：DESCRIPTION</span><br><span class="line">		命令参数详细说明：OPTIONS</span><br><span class="line"></span><br><span class="line">	q : 退出</span><br><span class="line">	/[搜索内容] ： 搜索内容</span><br><span class="line">	</span><br><span class="line">	推荐网址：https://www.linuxcool.com/</span><br></pre></td></tr></table></figure>



<h1 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># alias alias net_test = &#x27;ping baidu.com&#x27;   #设置别名</span></span><br><span class="line">	</span><br><span class="line">[root@localhost ~]<span class="comment"># alias  #查看系统别名是否设置成功</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># net_test  #测试别名</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># unalias net_test  #取消别名</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># alias rm=&#x27;xxx&#x27;   #设置系统别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用别名，就在命令之前增加\，\代表转义</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># \rm 1.txt</span></span><br></pre></td></tr></table></figure>



<h1 id="系统路径的类型"><a href="#系统路径的类型" class="headerlink" title="系统路径的类型"></a>系统路径的类型</h1><ul>
<li>绝对路径：参照物是根（/）路径，凡是以/开始的路径就是绝对路径    或者以~为开头的路径也是绝对路径</li>
<li>相对路径：参照物是当前路径，不是以/开头的路径就是相对路径    针对当前路径而言的</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包含整个文件名称及文件的位置	这样的定位称之为路径</span></span><br><span class="line"><span class="comment"># 路径就是对于文件的定位的一种方式</span></span><br><span class="line"><span class="comment"># 每个目录下都有一个.和..</span></span><br><span class="line"></span><br><span class="line">.	    <span class="comment"># 表示的是当前所在的目录</span></span><br><span class="line">..	  <span class="comment"># 当前目录的上一级目录</span></span><br><span class="line">./	  <span class="comment"># 用于表示当前目录</span></span><br><span class="line">../	  <span class="comment"># 从当前目录的上一级目录开始</span></span><br><span class="line">~     <span class="comment"># 家目录</span></span><br></pre></td></tr></table></figure>



<h1 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h1><p><strong>在Linux中，所有的文件或者目录的起点或者顶点都是以(/)开始。</strong></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211213184825727.png"></p>
<p><strong>Linux的目录结构拥有层次，就像是一个倒挂的树形结构</strong></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/xitongmulu.jpg" alt="xitongmulu"></p>
<p>Linux<strong>系统中的目录需要挂载使用</strong></p>
<h4 id="目录挂载初识"><a href="#目录挂载初识" class="headerlink" title="目录挂载初识"></a>目录挂载初识</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">挂载的命令：mount</span><br><span class="line">   mount [磁盘路径] [挂载的路径]</span><br><span class="line">	</span><br><span class="line">查看本机挂载的命令</span><br><span class="line">   [root@localhost dev]<span class="comment"># df -h</span></span><br><span class="line">	</span><br><span class="line">卸载挂载的磁盘</span><br><span class="line">   [root@localhost dev]<span class="comment"># umount /mnt/</span></span><br></pre></td></tr></table></figure>

<p><strong>必知必会的目录及文件</strong></p>
<ul>
<li><p><strong>/bin</strong><br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>/sbin：</strong>存放系统命令的目录 需要管理员权限才可以执行的命令</p>
</li>
<li><p><strong>/boot</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
<ul>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/cdrom	#光盘镜像</span><br><span class="line">/dev/null	#黑洞设备	将一些不用的数据导入到黑洞设备</span><br><span class="line">/dev/zero	#字符设备	会源源不断的产生数据，字符</span><br><span class="line">/dev/random	#产生随机数的设备</span><br><span class="line"></span><br><span class="line">#磁盘设备及分区</span><br><span class="line">/dev/sda</span><br><span class="line">/dev/sda1</span><br><span class="line">/dev/sda2</span><br><span class="line">/dev/sda3</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>/etc</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
<ul>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-*	#查看网卡配置文件</span><br><span class="line">/etc/hosts#	本地域名解析文件	#记录ip地址与主机名的对应映射关系</span><br><span class="line">/etc/resolv.conf	#本地DNS配置文件</span><br><span class="line">/etc/fstab	#挂载设备目录配置文件	开机自启动挂载列表</span><br><span class="line">/etc/hostname	#主机名字配置文件</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>/home</strong><br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>/lib</strong><br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
<ul>
<li>/lib #库文件目录 32位库文件<br>/lib64 #库文件目录 64位库文件</li>
</ul>
</li>
<li><p><strong>/lost+found</strong><br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong><br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong><br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>/opt</strong><br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>/proc</strong></p>
<p>虚拟可变的目录 记录了系统的实时状态–&gt;类似于汽车的仪表盘</p>
</li>
<li><p><strong>/root</strong><br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>/sbin</strong><br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>/selinux</strong><br>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关闭selinux</span><br><span class="line">   临时关闭</span><br><span class="line">    [root@localhost ~]<span class="comment"># setenforce 0</span></span><br><span class="line">   永久关闭</span><br><span class="line">    [root@localhost ~]<span class="comment"># vim /etc/selinux/config</span></span><br><span class="line">    SELINUX=disabled  <span class="comment">#编辑改成永久关闭</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>/srv</strong><br>物理设备所产生的一些文件</p>
</li>
<li><p><strong>/sys</strong></p>
<p>物理设备的驱动信息文件</p>
<p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p>
<p>该文件系统是内核设备树的一个直观反映。</p>
<p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>/tmp</strong><br>公共临时目录 公共场所 只能针对自己的文件进行操作 系统会定时的删除这个目录下长时间没有访问的文件</p>
</li>
<li><p><strong>/usr</strong></p>
<p>/usr #系统目录 系统文件目录 跟windows目录一样<br>/userlocal #系统软件安装目录 跟windows的一样</p>
</li>
<li><p>**/usr/bin<br>系统用户使用的应用程序。</p>
</li>
<li><p>**/usr/sbin<br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p>**/usr/src<br>内核源代码默认的放置目录。</p>
</li>
<li><p><strong>/var</strong></p>
<p>这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log	#系统日志存放目录</span><br><span class="line">/var/log/messages	#系统级别日志</span><br><span class="line">/var/log/secure	#用户登录日志</span><br><span class="line">/var/tmp	#程序运行时所产生的一些进程文件</span><br></pre></td></tr></table></figure></li>
<li><p><strong>/run</strong><br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
</ul>
<p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>
<p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>
<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p>
<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p>
<ul>
<li><strong>stderr -&gt; /proc/self/fd/2 #错误输出2&gt;</strong><br><strong>stdin -&gt; /proc/self/fd/0 #标准输入&lt;**<br>**stdout -&gt; /proc/self/fd/1 #标准输出&gt;</strong></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装、远程连接</title>
    <url>/20cf8e98.html</url>
    <content><![CDATA[<h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><p>主要介绍企业中常用的服务器操作系统</p>
<ul>
<li><p>什么是Linux？</p>
<p>类似于windows，是一个服务器上使用的操作系统，Linux支持多用户，多进程，多CPU，多任务等功能，而且Linux是开源的，支持嵌入式等。</p>
<span id="more"></span>
<h2 id="Linux发展史"><a href="#Linux发展史" class="headerlink" title="Linux发展史"></a>Linux发展史</h2></li>
</ul>
<p>1969年，美国贝尔实验室开发，Unix</p>
<ul>
<li>优点：性能好</li>
<li>缺点：消耗资源大</li>
</ul>
<p>1987年，谭宁邦开发微内核unix，主要用来教学</p>
<p>1991年，芬兰 林纳斯-托瓦丝 在大学期间基于unix微内核开发了第一款Linux内核，并且开源，并且很快加入FSF基金会，</p>
<h2 id="Linux核心概念"><a href="#Linux核心概念" class="headerlink" title="Linux核心概念"></a>Linux核心概念</h2><p>FSF基金会，GPL通用公共协议：开源的公共协议</p>
<p>GNU</p>
<p>Linux的组成：Linux内核—&gt;系统软件—&gt;个人软件 GNU Linux</p>
<h1 id="虚拟机介绍"><a href="#虚拟机介绍" class="headerlink" title="虚拟机介绍"></a>虚拟机介绍</h1><ul>
<li><p>网络类型</p>
<ul>
<li><p>仅主机</p>
<p>只能跟宿主主机进行连接</p>
</li>
<li><p>桥接</p>
<p>共享宿主主机网卡，跟宿主主机处于同一个局域网</p>
</li>
<li><p>NAT</p>
<p>使用自己的虚拟网卡，有自己的一套网络</p>
</li>
</ul>
</li>
</ul>
<h2 id="Linux发现版本"><a href="#Linux发现版本" class="headerlink" title="Linux发现版本"></a>Linux发现版本</h2><ul>
<li>RedHat/CentOS</li>
<li>Ubuntu</li>
<li>Debian</li>
</ul>
<h2 id="虚拟机软件"><a href="#虚拟机软件" class="headerlink" title="虚拟机软件"></a>虚拟机软件</h2><p>一般用来虚拟化一台主机的</p>
<ul>
<li>虚拟机软件分类<ul>
<li>vmware workstation（个人使用，或者开发者使用）</li>
<li>KVM一般用在云服务平台上</li>
<li>ESXI部署在物理主机上</li>
</ul>
</li>
</ul>
<p>`<img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208102719.png" alt="微信截图_20211208102719"></p>
<h1 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h1><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103459.png" alt="微信截图_20211208103459" style="zoom: 50%;" />

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103520.png" alt="微信截图_20211208103520"></p>
<img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103635-8967853.png" style="zoom:50%;" />

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103657.png" alt="微信截图_20211208103657"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103734.png" alt="微信截图_20211208103734"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103839.png" alt="微信截图_20211208103839"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208103909.png" alt="微信截图_20211208103909"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104113.png" alt="微信截图_20211208104113"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104202.png" alt="微信截图_20211208104202"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104214.png" alt="微信截图_20211208104214"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104400.png" alt="微信截图_20211208104400"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104445.png" alt="微信截图_20211208104445"></p>
<h1 id="安装Linux系统"><a href="#安装Linux系统" class="headerlink" title="安装Linux系统"></a>安装Linux系统</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104743.png" alt="微信截图_20211208104743"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104909.png" alt="微信截图_20211208104909"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208104924.png" alt="微信截图_20211208104924"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208105046.png" alt="微信截图_20211208105046"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208105219.png" alt="微信截图_20211208105219"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208105400.png" alt="微信截图_20211208105400"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/43C18B4F-1B0A-42E9-BB78-D3E5682D4106.png" alt="43C18B4F-1B0A-42E9-BB78-D3E5682D4106"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/AE1A21DF-E10A-4841-9DBB-A85212501759.png" alt="AE1A21DF-E10A-4841-9DBB-A85212501759"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208105638.png" alt="微信截图_20211208105638"></p>
<img src="https://gitee.com/gengff/blogimage/raw/master/images/WX20211208-170046@2x.png" alt="WX20211208-170046@2x" style="zoom: 50%;" />



<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110204.png" alt="微信截图_20211208110204"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110217.png" alt="微信截图_20211208110217"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110341.png" alt="微信截图_20211208110341"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/20211208110532.png" alt="20211208110532"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110550.png" alt="微信截图_20211208110550"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110602.png" alt="微信截图_20211208110602"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110629.png" alt="微信截图_20211208110629"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208110745.png" alt="微信截图_20211208110745"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/WeChatb1cc04bfcdf1fe355a7179e717e66de9.png" alt="WeChatb1cc04bfcdf1fe355a7179e717e66de9"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208111408.png" alt="微信截图_20211208111408"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208113903.png" alt="微信截图_20211208113903"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/7590A4DC-6E12-4888-A23A-287833B9853D.png" alt="7590A4DC-6E12-4888-A23A-287833B9853D"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114033.png" alt="微信截图_20211208114033"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114119.png" alt="微信截图_20211208114119"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114253.png" alt="微信截图_20211208114253"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114459.png" alt="微信截图_20211208114459"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/4AE29186-308D-46BE-B840-0246191C2BF6.png" alt="4AE29186-308D-46BE-B840-0246191C2BF6"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/70388F5F-6915-4105-B8E7-61000F4D8607.png" alt="70388F5F-6915-4105-B8E7-61000F4D8607"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/C9FB0F45-D71B-4207-8631-C60196830281.png" alt="C9FB0F45-D71B-4207-8631-C60196830281"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114651.png" alt="微信截图_20211208114651"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114833.png" alt="微信截图_20211208114833"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114846.png" alt="微信截图_20211208114846"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208114953.png" alt="微信截图_20211208114953"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115212.png" alt="微信截图_20211208115212"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115358.png" alt="微信截图_20211208115358"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115413.png" alt="微信截图_20211208115413"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115438.png" alt="微信截图_20211208115438"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115855.png" alt="微信截图_20211208115855"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208115921.png" alt="微信截图_20211208115921"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120050.png" alt="微信截图_20211208120050"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120113.png"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120130.png" alt="微信截图_20211208120130"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120201.png" alt="微信截图_20211208120201"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120239.png" alt="微信截图_20211208120239"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120311.png" alt="微信截图_20211208120311"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120427.png" alt="微信截图_20211208120427"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208120907.png" alt="微信截图_20211208120907"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/WX20211208-204050@2x.png" alt="WX20211208-204050@2x"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208121606.png" alt="微信截图_20211208121606"></p>
<h1 id="连接-X-shell"><a href="#连接-X-shell" class="headerlink" title="连接 X-shell"></a>连接 X-shell</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122027.png" alt="微信截图_20211208122027"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122101.png" alt="微信截图_20211208122101"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122135.png" alt="微信截图_20211208122135"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122151.png" alt="微信截图_20211208122151"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122205.png" alt="微信截图_20211208122205"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211208122218.png" alt="微信截图_20211208122218"></p>
<h1 id="mac网卡配置"><a href="#mac网卡配置" class="headerlink" title="mac网卡配置"></a>mac网卡配置</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka1.png" alt="wangka1"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka2.png" alt="wangka2"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka3.png"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka44.png" alt="wangka44"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka5.png" alt="wangka5"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka6.png" alt="wangka6"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka7.png" alt="wangka7"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka8.png" alt="wangka8"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka9.png" alt="wangka9"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka10.png" alt="wangka10"></p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/wangka11.png" alt="wangka11"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux三剑客</title>
    <url>/bfa86649.html</url>
    <content><![CDATA[<p>Linux中最重要的三个命令在业界被称为“<strong>三剑客</strong>”，它们是grep，sed，awk。</p>
<p>我们知道Linux下一切皆文件，对Linux的操作就是对文件的处理，那么怎么能更好的处理文件呢？这就要用到我们的三剑客命令。</p>
<span id="more"></span>
<ul>
<li>grep ：过滤文本</li>
<li>sed  :  修改文本</li>
<li>awk  :  处理文本</li>
</ul>
<p>使用这三个工具可以提升运维效率，熟练掌握好正则表达式是使用<code>Linux三剑客</code>的前提，在说三剑客前我们要插入一个小插曲就是“正则表达式”。在掌握好正则表达式后，将具体讲解三剑客的用法。</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式：REGular EXPression, REGEXP。我们通过特定的字符串匹配模板，来获取到所需的内容。</p>
<p>Linux 三剑客以正则表达式作为基础，而在Linux系统中，支持两种正则表达式：</p>
<ul>
<li>标准正则表达式</li>
<li>扩展正则表达式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">标准正则表达式：</span><br><span class="line">	</span><br><span class="line"> ^    <span class="comment">#以某字符开头</span></span><br><span class="line"> $    <span class="comment">#以某字符结尾</span></span><br><span class="line"> .    <span class="comment">#匹配除换行符之外的任意单个字符</span></span><br><span class="line"> *    <span class="comment">#匹配前导字符的任意个数</span></span><br><span class="line"> []   <span class="comment">#某组字符串的任意一个字符</span></span><br><span class="line"> [^]  <span class="comment">#取反</span></span><br><span class="line"> [a-z]    <span class="comment">#匹配小写字母</span></span><br><span class="line"> [A-Z]    <span class="comment">#匹配大写字母</span></span><br><span class="line"> [a-zA-Z] <span class="comment">#匹配字母</span></span><br><span class="line"> [0-9]    <span class="comment">#匹配数字</span></span><br><span class="line"> \      <span class="comment">#取消转义</span></span><br><span class="line"> ()     <span class="comment">#分组</span></span><br><span class="line"> \n     <span class="comment">#代表第n个分组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩展正则表达式：</span><br><span class="line"> &#123;&#125;     <span class="comment">#匹配的次数</span></span><br><span class="line"> &#123;n&#125;    <span class="comment">#匹配n次</span></span><br><span class="line"> &#123;n,&#125;   <span class="comment">#至少匹配n次</span></span><br><span class="line"> &#123;n,m&#125;  <span class="comment">#匹配 n 到 m 次</span></span><br><span class="line"> &#123;,m&#125;   <span class="comment">#最多匹配m次</span></span><br><span class="line">  +     <span class="comment">#匹配至少有一个前导字符</span></span><br><span class="line">  ?     <span class="comment">#匹配一个或零个前导字符</span></span><br><span class="line">  |     <span class="comment">#或</span></span><br></pre></td></tr></table></figure>



<h1 id="linux三剑客之grep"><a href="#linux三剑客之grep" class="headerlink" title="linux三剑客之grep"></a>linux三剑客之grep</h1><ul>
<li>文本过滤器（根据文本内容过滤文件）</li>
<li>grep命令家族由grep, egrep, fgrep 三个子命令组成，适用于不同的场景。具体如下：<ul>
<li>命令描述<ul>
<li>grep 原生的grep命令，使用“标准正则表达式”作为匹配标准。</li>
<li>egrep 扩展的grep命令，相当于<code>$(grep -E)</code>，使用“扩展正则表达式”作为匹配标准。</li>
<li>fgrep 简化版的grep命令，不支持正则表达式，但搜索速度快，系统资源使用率低。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">  grep [参数] [匹配规则] [操作对象]</span><br><span class="line"></span><br><span class="line"> 参数：</span><br><span class="line">   -n  <span class="comment">#过滤文本时，将过滤出来的内容在文件内的行号显示出来</span></span><br><span class="line">   -A  <span class="comment">#匹配成功之后，将匹配行的后n行显示出来</span></span><br><span class="line">   -B  <span class="comment">#匹配成功之后，将匹配行的前n行显示出来</span></span><br><span class="line">   -C  <span class="comment">#匹配成功之后，将匹配行的前后各n行显示出来</span></span><br><span class="line">   -c  <span class="comment">#只显示匹配成功的行数</span></span><br><span class="line">   -o  <span class="comment">#只显示匹配成功的内容</span></span><br><span class="line">   -v  <span class="comment">#显示不包含匹配文本的所有行（反向过滤）</span></span><br><span class="line">   -q  <span class="comment">#静默输出(禁止输出任何结果，已退出状态表示搜索是否成功)</span></span><br><span class="line">   -i  <span class="comment">#搜索时，忽略大小写</span></span><br><span class="line">   -l  <span class="comment">#匹配成功之后，将文本的名称打印出来</span></span><br><span class="line">   -h	 <span class="comment">#查询多文件时不显示文件名</span></span><br><span class="line">   -b  <span class="comment">#打印匹配行距文件头部的偏移量，以字节为单位</span></span><br><span class="line">   -s	 <span class="comment">#不显示不存在、没有匹配文本的错误信息</span></span><br><span class="line">   -w  <span class="comment">#匹配整词</span></span><br><span class="line">   -x  <span class="comment">#匹配整行</span></span><br><span class="line">   -R|-r <span class="comment">#递归匹配 </span></span><br><span class="line">   -E    <span class="comment">#使用扩展正则,等价于 egrep</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">  $?  <span class="comment">#上一行命令执行的结果，0代表执行成功，其他数字代表执行失败。</span></span><br><span class="line">  wc  <span class="comment">#匹配行数</span></span><br><span class="line">   参数：</span><br><span class="line">		-l  <span class="comment">#打印匹配行数</span></span><br><span class="line">		-c  <span class="comment">#打印匹配的字节数	</span></span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line"> <span class="comment"># 在/etc目录下，有多少个文件包含root。</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep -rl &#x27;root&#x27; /etc/ | wc -l</span></span><br><span class="line">   130</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 在/etc/passwd文件中，匹配以ftp开头的行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep &#x27;^root&#x27; /etc/passwd</span></span><br><span class="line">   root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 在/etc/passwd文件中，匹配以bash结尾的行,-n显示行号</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep -n &#x27;bash$&#x27; /etc/passwd</span></span><br><span class="line">   1:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">   21:<span class="built_in">test</span>:x:1001:1001::/home/<span class="built_in">test</span>/:/bin/bash</span><br><span class="line">   22:gf:x:1002:1002::/home/gf:/bin/bash</span><br><span class="line">   28:tony:x:1004:1004::/home/tony:/bin/bash</span><br><span class="line">   29:user:x:1006:1001::/home/user:/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 匹配本机中有哪些ip</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># ip a | grep -oE &#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27;</span></span><br><span class="line">   127.0.0.1</span><br><span class="line">   192.168.15.100</span><br><span class="line">   192.168.15.255</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 要求将/etc/fstab中的去掉包含 # 开头的行，且要求 # 后至少有一个空格</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep -vE &#x27;^#\ +&#x27; /etc/fstab</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">   /dev/mapper/centos-root /      xfs     defaults    0 0</span><br><span class="line">   UUID=9f8a98b0-805c-4adf-b9ef-517a2b527f89 /boot   xfs   defaults    0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 找出文件中至少有一个空格的行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep -E &#x27;\ +&#x27; 1.txt </span></span><br><span class="line">   11 11</span><br><span class="line">   22 22</span><br><span class="line">   5 5 5 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 将 nginx.conf 文件中以#开头的行和空行，全部删除 </span></span><br><span class="line">  [root@localhost ~]<span class="comment"># grep -vE &#x27;^\ *#|^$&#x27; /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure>



<h1 id="linux三剑客之sed"><a href="#linux三剑客之sed" class="headerlink" title="linux三剑客之sed"></a>linux三剑客之sed</h1><ul>
<li><p>sed是一个流式编辑器，在处理行内容时功能十分强大。</p>
<ul>
<li><p>定位到某一行，将某一行的某一部分给替换掉</p>
</li>
<li><p>定位到某一行，然后删除</p>
</li>
<li><p>定位到某一行，在该行后添加新的配置</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line">  sed [参数] <span class="string">&#x27;处理规则&#x27;</span> [操作对象]</span><br><span class="line"></span><br><span class="line"> 参数</span><br><span class="line">   -n  <span class="comment">#取消默认输出</span></span><br><span class="line">   -e  <span class="comment">#允许多项编辑</span></span><br><span class="line">   -i  <span class="comment">#直接编辑源文件（把流向屏幕的内容写到文件中）</span></span><br><span class="line">   -r  <span class="comment">#支持扩展正则</span></span><br><span class="line">   -f  <span class="comment">#指定sed匹配规则脚本文件</span></span><br><span class="line"></span><br><span class="line"> 定位</span><br><span class="line"><span class="comment"># 1、行号定位法，指定行号定位</span></span><br><span class="line">  <span class="comment"># 不写代表定位所有行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;&#x27; 1.txt </span></span><br><span class="line">   1111</span><br><span class="line">   2222</span><br><span class="line">   3333</span><br><span class="line">   4444</span><br><span class="line">   5555</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 3定位到第三行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;3d&#x27; 1.txt   </span></span><br><span class="line">   1111</span><br><span class="line">   2222</span><br><span class="line">   4444</span><br><span class="line">   5555</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 2，3从第二行到第三行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;2,3d&#x27; 1.txt </span></span><br><span class="line">   1111</span><br><span class="line">   4444</span><br><span class="line">   5555</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2、正则定位法，指定正则定位。</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;&#x27; 2.txt</span></span><br><span class="line">   gen111</span><br><span class="line">   222gen</span><br><span class="line">   333gen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555gen555gen</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 删除包含gen的行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;/gen/d&#x27; 2.txt </span></span><br><span class="line">   444xxx444</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 删除以gen开头的行</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;/^gen/d&#x27; 2.txt </span></span><br><span class="line">   222gen</span><br><span class="line">   333gen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555gen555gen</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 删除以gen结尾的行</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># sed &#x27;/gen$/d&#x27; 2.txt </span></span><br><span class="line">   gen111</span><br><span class="line">   333gen333</span><br><span class="line">   444xxx444</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、数字+正则定位法</span></span><br><span class="line">  <span class="comment"># 把1-3行的gen换成GEN</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;1,3s/gen/GEN/&#x27; 2.txt </span></span><br><span class="line">   GEN111</span><br><span class="line">   222GEN</span><br><span class="line">   333GEN333</span><br><span class="line">   444xxx444</span><br><span class="line">   555gen555gen</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 把所有的gen换成GEN</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;s/gen/GEN/g&#x27; 2.txt </span></span><br><span class="line">   GEN111</span><br><span class="line">   222GEN</span><br><span class="line">   333GEN333</span><br><span class="line">   444xxx444</span><br><span class="line">   555GEN555GEN</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 把所有的gen换成fen执行到文件中</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed -i &#x27;s/gen/fen/g&#x27; 2.txt </span></span><br><span class="line">  [root@localhost ~]<span class="comment"># cat 2.txt </span></span><br><span class="line">   fen111</span><br><span class="line">   222fen</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sed的编辑模式：</span><br><span class="line">  d ：删除 </span><br><span class="line">  p ：打印</span><br><span class="line">  a : 在当前行后添加一行</span><br><span class="line">  c ：用新文本修改（替换）当前行</span><br><span class="line">  i : 在当前行之前，插入文本（单独使用时）</span><br><span class="line">  r : 在文件中读内容</span><br><span class="line">  w : 将指定行写入文件</span><br><span class="line">  y : 将字符转换成另一个字符</span><br><span class="line">  s : 将字符串转换成另一个字符串（每一行只替换一次）</span><br><span class="line">  g : 全部执行</span><br><span class="line">  i : 忽略大小写（跟 s 模式一起使用时）	</span><br><span class="line">  &amp; ：代表前面匹配到的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">	<span class="comment"># a模式：在第二行后面添加一行xxx</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;2axxx&#x27; 2.txt </span></span><br><span class="line">   fen111</span><br><span class="line">   222fen</span><br><span class="line">   xxx</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br><span class="line">  <span class="comment"># c模式：将第一行的内容替换为xxx</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;1cxxx&#x27; 2.txt </span></span><br><span class="line">   xxx</span><br><span class="line">   222fen</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br><span class="line">  <span class="comment"># i模式：在第五行之前插入xxx</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;5ixxx&#x27; 2.txt</span></span><br><span class="line">   fen111</span><br><span class="line">   222fen</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   xxx</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># r模式：将3.txt内容读到2.txt中第二行后显示</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;2r w.txt&#x27; 2.txt </span></span><br><span class="line">   fen111</span><br><span class="line">   222fen</span><br><span class="line">   hahaha</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># w模式：将第二行的内容写入w.txt 文件，文件不存在自动创建</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;2w w.txt&#x27; 2.txt </span></span><br><span class="line">  [root@localhost ~]<span class="comment"># cat w.txt </span></span><br><span class="line">   222fen</span><br><span class="line"></span><br><span class="line">  <span class="comment"># y模式：将第二行内容替换</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># sed &#x27;2y/fe/FE/&#x27; 2.txt </span></span><br><span class="line">   fen111</span><br><span class="line">   222FEn</span><br><span class="line">   333fen333</span><br><span class="line">   444xxx444</span><br><span class="line">   555fen555fen</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、将nginx.conf中的注释行全部去掉</span><br><span class="line">   [root@localhost ~]<span class="comment"># sed &#x27;/^ *#/d&#x27; /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">2、将nginx.conf中每一行之前增加注释</span><br><span class="line">   [root@localhost ~]<span class="comment"># sed &#x27;s/.*/# &amp;/g&#x27; /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">3、要求一键修改本机的ip，</span><br><span class="line">   192.168.15.100 ---&gt; 192.168.15.101</span><br><span class="line">   172.16.1.100   ---&gt; 172.16.1.101</span><br><span class="line">   sed -i <span class="string">&#x27;s#.100#.101#g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-eth[01]</span><br><span class="line">	</span><br><span class="line">4、将/etc/passwd中的root修改成ROOT</span><br><span class="line">   sed -i <span class="string">&#x27;s#root#ROOT#g&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<h1 id="linux三剑客之awk"><a href="#linux三剑客之awk" class="headerlink" title="linux三剑客之awk"></a>linux三剑客之awk</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/awk.jpg" alt="awk"></p>
<ul>
<li><p>awk是一个强大的Linux命令，有强大的文本格式化的能力。相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">  awk [选项]  <span class="string">&#x27;模式&#123;动作&#125;&#x27;</span> [文件信息]</span><br><span class="line">	awk [参数]  [处理规则] [操作对象]</span><br><span class="line"></span><br><span class="line">  参数</span><br><span class="line">   -F  <span class="comment">#指定文本分隔符（默认是以空格作为分隔符）</span></span><br><span class="line"></span><br><span class="line">案例：   </span><br><span class="line"> <span class="comment"># 准备文本文件  </span></span><br><span class="line"> [root@localhost ~]<span class="comment"># cat 3.txt </span></span><br><span class="line">  test1d test2f test3y</span><br><span class="line">  test4d test5f test6y</span><br><span class="line">  test7d test7f test9y</span><br><span class="line"> <span class="comment"># 以字符d为分割符</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># awk -F&#x27;d&#x27; &#x27;&#123;print $NF&#125;&#x27; 3.txt </span></span><br><span class="line">  test2f test3y</span><br><span class="line">  test5f test6y</span><br><span class="line">  test7f test9y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例：打印系统所有用户的解析器</span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print $NF&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk中的内置变量</span></span><br><span class="line">	<span class="variable">$0</span> : 代表当前行</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print $0, &quot;---&quot;&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">	<span class="variable">$n</span> : 代表第n列</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print $1&#125;&#x27; /etc/passwd	</span></span><br><span class="line">		</span><br><span class="line">	NF : 记录当前行的字段数</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print NF&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">	<span class="variable">$NF</span> : 代表最后一列</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print $NF&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">	NR : 用来记录行号</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;print NR&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">	FS : 指定文本内容分隔符（默认是空格）<span class="comment"># FS 的优先级要高于 -F</span></span><br><span class="line">		[root@localhost ~]<span class="comment"># awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;&#123;print $NF, $1&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">	OFS : 指定打印分隔符（默认空格）</span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;BEGIN&#123;OFS=&quot; &gt;&gt;&gt; &quot;&#125;&#123;print $NF, $1&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="awk的生命周期和处理规则的执行流程"><a href="#awk的生命周期和处理规则的执行流程" class="headerlink" title="awk的生命周期和处理规则的执行流程"></a>awk的生命周期和处理规则的执行流程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk的生命周期和</span></span><br><span class="line">  grep、sed 和 awk 都是读一行处理一行，直至处理完成。</span><br><span class="line">	</span><br><span class="line">  ① 接收一行作为输入</span><br><span class="line">  ② 把刚刚读入进来得到文本进行分解</span><br><span class="line">  ③ 使用处理规则处理文本</span><br><span class="line">  ④ 输入一行，赋值给<span class="variable">$0</span>，直至处理完成</span><br><span class="line">  ⑤ 把处理完成之后的所有的数据交给END&#123;&#125;来再次处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk处理规则的执行流程</span></span><br><span class="line"> awk [参数][分隔符] <span class="string">&#x27;&#123;BEGIN&#123;开始初需要的处理&#125;/定位/&#123;循环&#125;END&#123;结束前需要的处理&#125;&#125;&#x27;</span> [操作对象]</span><br><span class="line">   BEGIN&#123;&#125; <span class="comment">#开始语句：定义变量在BEGIN块里面		 </span></span><br><span class="line">    //     <span class="comment">#定位：正则匹配</span></span><br><span class="line">    &#123;&#125;     <span class="comment">#循环语句：循环处理文本</span></span><br><span class="line">   END&#123;&#125;   <span class="comment">#结束语句：打印之前统一处理</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/21-1.png" alt="21-1"></p>
<h2 id="awk中的函数"><a href="#awk中的函数" class="headerlink" title="awk中的函数"></a>awk中的函数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能用于循环语句和结束语句</span></span><br><span class="line">  <span class="built_in">print</span> : 打印</span><br><span class="line">  <span class="built_in">printf</span> : 格式化打印</span><br><span class="line">   参数：</span><br><span class="line">      %s  <span class="comment">#字符串</span></span><br><span class="line">      %d  <span class="comment">#数字</span></span><br><span class="line">       -  <span class="comment">#左对齐</span></span><br><span class="line">       +  <span class="comment">#右对齐</span></span><br><span class="line">      15  <span class="comment">#至少占用15字符</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># awk -F: &#x27;BEGIN&#123;OFS=&quot; | &quot;&#125;&#123;printf &quot;|%+15s|%-15s|\n&quot;, $NF,$1&#125;&#x27; /etc/passwd</span></span><br><span class="line">  |      /bin/bash|root           |</span><br><span class="line">  |  /sbin/nologin|bin            |</span><br><span class="line">  |  /sbin/nologin|daemon         |</span><br><span class="line">  |  /sbin/nologin|adm            |</span><br><span class="line">  |  /sbin/nologin|lp             |</span><br><span class="line">  |      /bin/sync|sync           |</span><br><span class="line">  | /sbin/shutdown|shutdown       |</span><br><span class="line">  |     /sbin/halt|halt           |</span><br><span class="line">  |  /sbin/nologin|mail           |</span><br><span class="line">  |  /sbin/nologin|operator       |</span><br><span class="line">  |  /sbin/nologin|games          |</span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="awk中的定位和流程控制"><a href="#awk中的定位和流程控制" class="headerlink" title="awk中的定位和流程控制"></a>awk中的定位和流程控制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk中的定位</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 1、正则表达式</span></span><br><span class="line">   <span class="comment"># 打印含root所在行的所有内容</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;/root/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 打印以root开头所在行的所有内容</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;/^root/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 2、比较表达式</span></span><br><span class="line">    &gt;   <span class="comment">#大于</span></span><br><span class="line">    &lt;   <span class="comment">#小于</span></span><br><span class="line">    &gt;=  <span class="comment">#大于等于</span></span><br><span class="line">    &lt;=  <span class="comment">#小于等于</span></span><br><span class="line">    ~	  <span class="comment">#表示匹配后面的正则表达式</span></span><br><span class="line">    !~  <span class="comment">#表示匹配后面的正则表达式</span></span><br><span class="line">		</span><br><span class="line">  案例：要求打印属组ID大于属主ID的行</span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;$4 &gt; $3&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">  案例：结尾包含bash</span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;$NF ~ /bash/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">  案例：结尾不包含bash</span><br><span class="line">   [root@localhost ~]<span class="comment"># awk -F: &#x27;$NF !~ /bash/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">  <span class="comment"># 3、逻辑表达式</span></span><br><span class="line">   &amp;&amp;	<span class="comment">#与</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;$3 + $4 &gt; 2000 &amp;&amp; $3 * $4 &gt; 2000&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">   </span><br><span class="line">   || <span class="comment">#或</span></span><br><span class="line">   </span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;$3 + $4 &gt; 2000 || $3 * $4 &gt; 2000&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">   !  <span class="comment">#非</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;!($3 + $4 &gt; 2000)&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">  <span class="comment"># 4、算术表达式</span></span><br><span class="line">    +  <span class="comment">#加</span></span><br><span class="line">    -  <span class="comment">#减</span></span><br><span class="line">    *  <span class="comment">#乘</span></span><br><span class="line">    /  <span class="comment">#除</span></span><br><span class="line">    %  <span class="comment">#取余</span></span><br><span class="line"></span><br><span class="line">   案例：要求属组 + 属主的ID 大于 2000</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;$3 + $4 &gt; 2000&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">    </span><br><span class="line">   案例：要求属组 * 属主的ID 大于 2000</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;$3 * $4 &gt; 2000&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">    </span><br><span class="line">   案例：要求打印偶数行</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;NR % 2 == 0&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">    </span><br><span class="line">   案例：要求打印奇数行</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;NR % 2 == 1&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">			</span><br><span class="line">  <span class="comment"># 5、条件表达式</span></span><br><span class="line">    ==  <span class="comment">#等于</span></span><br><span class="line">    &gt;   <span class="comment">#大于</span></span><br><span class="line">    &lt;   <span class="comment">#小于</span></span><br><span class="line">    &gt;=  <span class="comment">#大于等于</span></span><br><span class="line">    &lt;=  <span class="comment">#小于等于</span></span><br><span class="line">    </span><br><span class="line">   案例：要求打印第三行</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;NR == 3&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">  <span class="comment"># 6、范围表达式：一个选定条件到另一个选定条件之间的数据</span></span><br><span class="line">		案例： </span><br><span class="line">		[root@localhost ~]<span class="comment"># awk -F: &#x27;/^root/,/^ftp/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 流程控制</span></span><br><span class="line">  只存在循环之中。</span><br><span class="line">  <span class="keyword">if</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;if($3&gt;$4)&#123;print &quot;大于&quot;&#125;else&#123;print &quot;小于或等于&quot;&#125;&#125;&#x27; /etc/passwd</span></span><br><span class="line">			</span><br><span class="line">      <span class="function"><span class="title">if</span></span>()&#123;&#125;</span><br><span class="line">      <span class="function"><span class="title">if</span></span>()&#123;&#125;<span class="keyword">else</span>&#123;&#125;</span><br><span class="line">      <span class="function"><span class="title">if</span></span>()&#123;&#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span></span>()&#123;&#125;<span class="keyword">else</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span></span><br><span class="line">		</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;for(i=10;i&gt;0;i--)&#123;print $0&#125;&#125;&#x27; /etc/passwd</span></span><br><span class="line">		</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="string">&quot;初始值&quot;</span>;条件判断;游标)&#123;&#125;</span><br><span class="line">		</span><br><span class="line">  <span class="keyword">while</span></span><br><span class="line">	</span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;i=1; while(i&lt;10)&#123;print $0, i++&#125;&#125;&#x27; /etc/passwd</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">while</span>(条件判断)&#123;&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    每隔5行，打印一行横线</span><br><span class="line">    -------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    [root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;if(NR%5==0)&#123;print &quot;----------------&quot;&#125;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本处理和find命令</title>
    <url>/47edf33b.html</url>
    <content><![CDATA[<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><ul>
<li><p>根据文件的名称或者属性查找文件。</p>
</li>
<li><p>为什么要有文件查找，因为很多时候我们可能会忘了某个文件所在的位置，此时就需要通过find来查找。<br>find命令可以根据不同的条件来进行查找文件，例如：文件名称、文件大小、文件修改时间、属主属组、权限、等等方式。同时find命令是Linux下必须掌握的</p>
<span id="more"></span>
<h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find [查找范围(路径)]  [参数]  [参数相关匹配值]  [指令（-<span class="built_in">print</span>）]</span><br></pre></td></tr></table></figure>

<h2 id="参数及示例"><a href="#参数及示例" class="headerlink" title="参数及示例"></a>参数及示例</h2><h3 id="1、find名称查找"><a href="#1、find名称查找" class="headerlink" title="1、find名称查找"></a>1、find名称查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-name : 按照文件的名字查找文件</span><br><span class="line">   *   <span class="comment">#通配符</span></span><br><span class="line">-iname : 按照文件的名字查找文件(-i忽略大小写)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 1.创建文件</span></span><br><span class="line">touch /etc/sysconfig/network-scripts/&#123;ifcfg-eth1,IFCFG-ETH1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查找/etc目录下包含ifcfg-eth0名称的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -name &quot;ifcfg-eth1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.-i 忽略大小写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -iname &quot;ifcfg-eth1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查找/etc目录下包含ifcfg-eth名称所有文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc/ -name &quot;ifcfg-eth*&quot;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -iname &quot;ifcfg-eth*&quot;    </span></span><br></pre></td></tr></table></figure>

<h3 id="2、find大小查找"><a href="#2、find大小查找" class="headerlink" title="2、find大小查找"></a>2、find大小查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-size n(单位) : 按照文件的大小查询文件</span><br><span class="line">      +n   <span class="comment">#大于n个单位</span></span><br><span class="line">      -n   <span class="comment">#小于n个单位</span></span><br><span class="line">       n   <span class="comment">#等于n个单位</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：find查找同时打印出隐藏文件</span></span><br><span class="line"><span class="comment"># 注：n 必须是整数，不能是小数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1.查找大于5M的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -size +5M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查找等于5M的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -size 5M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查找小于5M的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -size -5M     </span></span><br></pre></td></tr></table></figure>

<h3 id="3、find时间查找"><a href="#3、find时间查找" class="headerlink" title="3、find时间查找"></a>3、find时间查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-atime : 访问时间（cat）</span><br><span class="line">-ctime : 文件变更时间（修改了位置（mv）、所属组、所属用户）</span><br><span class="line"></span><br><span class="line">-mtime : 按照修改时间去查询(包含创建时间)</span><br><span class="line">     +n  <span class="comment">#n 天以前</span></span><br><span class="line">     -n  <span class="comment">#n 天以内  </span></span><br><span class="line">      n  <span class="comment">#</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 1.创建测试文件(后期shell会讲)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># for i in &#123;01..28&#125;;do date -s  201904$i &amp;&amp; touch file-$i;done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查找3天以前的文件(不会打印当天的文件)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find ./ -iname &quot;file-*&quot; -mtime +7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查找3天以内的文件，不建议使用(会打印当天的文件)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find ./ -iname &quot;file-*&quot; -mtime -7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查找3天以前（一天之内）的文件(不会打印当天的文件)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find ./ -iname &quot;file-*&quot; -mtime 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.本地文件保留最近7天的备份文件, 备份服务器保留3个月的备份文件(实际使用方案)</span></span><br><span class="line">find /backup/ -iname <span class="string">&quot;*.bak&quot;</span> -mtime +7 -delete</span><br><span class="line">find /backup/ -iname <span class="string">&quot;*.bak&quot;</span> -mtime +90 -delete</span><br></pre></td></tr></table></figure>

<h3 id="4、find用户查找"><a href="#4、find用户查找" class="headerlink" title="4、find用户查找"></a>4、find用户查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  -user : 按照用户的属主查询</span><br><span class="line">  -group : 按照用户的属组查询</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查找属主是tony</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -user tony</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找属组是admin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -group admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找属主是tony, 属组是admin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -user tony -group admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找属主是tony, 并且属组是admin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -user tony -a -group admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找属主是tony, 或者属组是admin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -user tony -o -group admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找没有属主</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -nouser</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找没有属组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -nogroup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找没有属主或属组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -nouser -o -nogroup</span></span><br></pre></td></tr></table></figure>

<h3 id="5、find类型查找"><a href="#5、find类型查找" class="headerlink" title="5、find类型查找"></a>5、find类型查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">type</span> : 按照文件的类型查询</span><br><span class="line">   f(-) <span class="comment">#普通文件</span></span><br><span class="line">      d <span class="comment">#目录</span></span><br><span class="line">      l <span class="comment">#链接文件</span></span><br><span class="line">      s <span class="comment">#套接字文件</span></span><br><span class="line">      p <span class="comment">#管道文件</span></span><br><span class="line">      c <span class="comment">#字符文件</span></span><br><span class="line">      b <span class="comment">#磁盘文件</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># f 普通文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type f</span></span><br><span class="line"><span class="comment"># d 目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type d</span></span><br><span class="line"><span class="comment"># l 链接文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type l</span></span><br><span class="line"><span class="comment"># s 套接字文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type s</span></span><br><span class="line"><span class="comment"># p 管道文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type p      </span></span><br><span class="line"><span class="comment"># c 字符文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type c</span></span><br><span class="line"><span class="comment"># b 磁盘文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /dev -type b</span></span><br></pre></td></tr></table></figure>

<h3 id="6、find权限查找"><a href="#6、find权限查找" class="headerlink" title="6、find权限查找"></a>6、find权限查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-perm ：按照文件的权限查询</span><br><span class="line"></span><br><span class="line"><span class="comment">#精切匹配644权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -perm 644 -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含444权限即可</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -perm -444  -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找全局可写(每位权限必须包含w)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -perm -222 -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含set uid</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find  /usr/sbin -perm -4000 -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含set gid</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find  /usr/sbin -perm -2000 -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含sticky</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find  /usr/sbin -perm -1000 -ls</span></span><br></pre></td></tr></table></figure>

<h3 id="7、find逻辑运算符"><a href="#7、find逻辑运算符" class="headerlink" title="7、find逻辑运算符"></a>7、find逻辑运算符</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a : 与（可以省略，默认时并且）</span><br><span class="line">-o : 或</span><br><span class="line">-not|! : 非</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 1.查找当前目录下，属主不是hdfs的所有文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -not -user hdfs </span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . ! -user hdfs</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2.查找当前目录下，属主属于hdfs，且大小大于300字节的文件(c代表字节)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -type f -a -user hdfs -a -size +300c</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 3.查找当前目录下的属主为hdfs或者以xml结尾的普通文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -type f -a \( -user hdfs -o -name &#x27;*.xml&#x27; \)</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">-inum : 根据index node号码查询</span><br><span class="line">-maxdepth : 查询的目录深度（必须放置与第一个参数位） </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line"> dd : 生成文件</span><br><span class="line">    <span class="keyword">if</span>   <span class="comment">#从什么地方读</span></span><br><span class="line">    of   <span class="comment">#写入到什么文件</span></span><br><span class="line">    bs   <span class="comment">#每次写入多少内容</span></span><br><span class="line">    count <span class="comment">#写入多少次</span></span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">  案例1：查询/etc目录下hosts文件</span><br><span class="line">    [root@localhost ~]<span class="comment"># find /etc/ -name &#x27;hosts&#x27;</span></span><br><span class="line">       /etc/hosts</span><br><span class="line">  案例2：查询/etc目录下名称中包含hosts文件</span><br><span class="line">    [root@localhost ~]<span class="comment"># find /etc/ -name &#x27;*hosts*&#x27;</span></span><br><span class="line"></span><br><span class="line">  案例3：要求把/etc目录下，所有的普通文件打包压缩到/tmp目录</span><br><span class="line">    [root@localhost /tmp]<span class="comment"># tar -czPf /tmp/etcv2.tar.gz `find /etc/ -type f | xargs`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">知识储备</span><br><span class="line">   |    <span class="comment">#前面一个命令的结果交给后面一个命令处理</span></span><br><span class="line"> xargs  <span class="comment">#把处理的文本变成以空格分割的一行</span></span><br><span class="line">   ``   <span class="comment">#提前执行命令，然后将结果交给其他命令来处理</span></span><br><span class="line">	</span><br><span class="line"> <span class="comment">#xargs将前者命令查找到的文件作为一个整体传递后者命令的输入</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># touch file.txt</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># find . -name &quot;file.txt&quot; |xargs rm -f</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># find . -name &quot;file.txt&quot; |xargs -I &#123;&#125; cp -rvf &#123;&#125; /var/tmp	</span></span><br></pre></td></tr></table></figure>

<h3 id="8、find指令"><a href="#8、find指令" class="headerlink" title="8、find指令"></a>8、find指令</h3><ul>
<li>-print ：打印结果集</li>
<li>-ls ： 打印结果集详情</li>
<li>-delete : 删除结果集</li>
<li>-exec : 将find处理好的结果集进行下一步处理</li>
<li>-ok : 将find处理好对结果集进行下一步处理（交互）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印结果集</span></span><br><span class="line">[root@localhost dev]<span class="comment"># find / -type s -ctime -3 -print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果集详情</span></span><br><span class="line">[root@localhost dev]<span class="comment"># find / -type s -ctime -3 -ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除结果集</span></span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line"> Abc  abc1  Abc1  abc10  abc2  abc23  abc3  abc4  abc5</span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc?&quot; -delete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果集进行下一步处理</span></span><br><span class="line"><span class="comment"># 格式</span></span><br><span class="line">	find 路径 参数  参数表达式  -<span class="built_in">exec</span>  命令 &#123;&#125; \;</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc&quot;</span></span><br><span class="line">  ./Abc</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc&quot; -exec ls -l &#123;&#125; \;</span></span><br><span class="line">  -rw-r--r-- 1 root root 0 Mar 10 09:44 ./Abc</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># </span></span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc&quot;</span></span><br><span class="line">  ./Abc</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc&quot; -exec rm -rf &#123;&#125; \;</span></span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">  abc10  abc23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果集进行下一步处理（交互）</span></span><br><span class="line"> <span class="comment"># 格式</span></span><br><span class="line">  find 路径 参数  参数表达式  -ok   命令 &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc10&quot; </span></span><br><span class="line">  ./abc10</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc10&quot; -ok rm &#123;&#125; \;</span></span><br><span class="line">  &lt; rm ... ./abc10 &gt; ? n</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">  abc10  abc23</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># find ./ -iname &quot;abc10&quot; -ok rm &#123;&#125; \;</span></span><br><span class="line">  &lt; rm ... ./abc10 &gt; ? y</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">  abc23</span><br></pre></td></tr></table></figure>

<p><strong>find相关练习题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.查找/tmp目录下，属主不是root，且文件名不以f开头的文件</span><br><span class="line">2.查找/var目录下属主为root，且属组为mail的所有文件</span><br><span class="line">3.查找/var目录下不属于root、lp、gdm的所有文件</span><br><span class="line">4.查找/var目录下最近一周内其内容修改过，同时属主不为root，也不是postfix的文件</span><br><span class="line">5.查找/etc目录下大于1M且类型为普通文件的所有文件</span><br><span class="line">6.将/etc/中的所有目录(仅目录)复制到/tmp下，目录结构不变</span><br><span class="line">7.将/etc目录复制到/var/tmp/,/var/tmp/etc的所有目录权限777/var/tmp/etc目录中所有文件权限666</span><br><span class="line">8.保留/var/<span class="built_in">log</span>/下最近7天的日志文件,其他全部删除</span><br><span class="line">9.创建touch file&#123;1..10&#125;10个文件, 保留file9,其他一次全部删除</span><br><span class="line">10.解释如下每条命令含义</span><br><span class="line">mkdir /root/dir1</span><br><span class="line">touch /root/dir1/file&#123;1..10&#125;</span><br><span class="line">find /root/dir1 -<span class="built_in">type</span> f -name <span class="string">&quot;file5&quot;</span></span><br><span class="line">find /root/dir1 ! -name <span class="string">&quot;file5&quot;</span></span><br><span class="line">find /root/dir1 -name <span class="string">&quot;file5&quot;</span> -o -name <span class="string">&quot;file9&quot;</span></span><br><span class="line">find /root/dir1 -name <span class="string">&quot;file5&quot;</span> -o -name <span class="string">&quot;file9&quot;</span> -ls</span><br><span class="line">find /root/dir1 \( -name <span class="string">&quot;file5&quot;</span> -o -name <span class="string">&quot;file9&quot;</span> \) -ls</span><br><span class="line">find /root/dir1 \( -name <span class="string">&quot;file5&quot;</span> -o -name <span class="string">&quot;file9&quot;</span> \) -<span class="built_in">exec</span> rm -rvf &#123;&#125; \;</span><br><span class="line">find /root/dir1  ! \( -name <span class="string">&quot;file4&quot;</span> -o -name <span class="string">&quot;file8&quot;</span> \) -<span class="built_in">exec</span> rm -vf &#123;&#125;  \; </span><br></pre></td></tr></table></figure>

<h1 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h1><h2 id="1、sort命令"><a href="#1、sort命令" class="headerlink" title="1、sort命令"></a>1、sort命令</h2><ul>
<li>用于将文本文件内容加以排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort [参数] 需要排序的对象</span><br><span class="line"> 参数：</span><br><span class="line">  -n <span class="comment"># 依照数值的大小排序</span></span><br><span class="line">  -r <span class="comment"># 以相反的顺序来排序</span></span><br><span class="line">  -k <span class="comment"># 以某列进行排序</span></span><br><span class="line">  -t <span class="comment"># 指定分割符，默认是以空格为分隔符</span></span><br><span class="line"></span><br><span class="line">	cat 3.txt | sort -n -r -k3 -t <span class="string">&#x27;|&#x27;</span></span><br><span class="line"><span class="comment"># 1.首先创建一个文件，写入一写无序的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &gt;&gt; file.txt &lt;&lt;EOF</span></span><br><span class="line"> b:3</span><br><span class="line"> c:2</span><br><span class="line"> a:4</span><br><span class="line"> e:5</span><br><span class="line"> d:1</span><br><span class="line"> f:11</span><br><span class="line"> EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用sort下面对输出的内容进行排序</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort file.txt</span></span><br><span class="line"> a:4</span><br><span class="line"> b:3</span><br><span class="line"> c:2</span><br><span class="line"> d:1</span><br><span class="line"> e:5</span><br><span class="line"> f:11</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果并不是按照数字排序，而是按字母排序。</span></span><br><span class="line"><span class="comment">#可以使用-t指定分隔符, 使用-k指定需要排序的列。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t &quot;:&quot; -k2 sort.txt</span></span><br><span class="line"> d:1</span><br><span class="line"> f:11 <span class="comment">#第二行为什么是11？不应该按照顺序排列？</span></span><br><span class="line"> c:2</span><br><span class="line"> b:3</span><br><span class="line"> a:4</span><br><span class="line"> e:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照排序的方式, 只会看到第一个字符,11的第一个字符是1, 按照字符来排序确实比2小。 </span></span><br><span class="line"><span class="comment">#如果想要按照数字的方式进行排序, 需要使用 -n参数。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t &quot;:&quot; -n -k2 p.txt</span></span><br><span class="line"> d:1</span><br><span class="line"> c:2</span><br><span class="line"> b:3</span><br><span class="line"> a:4</span><br><span class="line"> e:5</span><br><span class="line"> f:11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试案例，下载文件http://fj.xuliangwei.com/public/ip.txt，对该文件进行排序</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t. -k3.1,3.1nr -k4.1,4.3nr ip.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、uniq-命令"><a href="#2、uniq-命令" class="headerlink" title="2、uniq 命令"></a>2、uniq 命令</h2><ul>
<li>用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uniq [参数] 需要去重的对象</span><br><span class="line"> 参数：</span><br><span class="line">  -c <span class="comment"># 在每列旁边显示该行重复出现的次数</span></span><br><span class="line">  -d <span class="comment"># 仅显示重复出现的行列</span></span><br><span class="line">  -u <span class="comment"># 仅显示出一次的行列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建一个file.txt文件:</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file.txt</span></span><br><span class="line"> abc</span><br><span class="line"> 123</span><br><span class="line"> abc</span><br><span class="line"> 123</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.uniq需要和sort一起使用, 先使用sort排序, 让重复内容连续在一起</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file.txt | sort</span></span><br><span class="line"> 123</span><br><span class="line"> 123</span><br><span class="line"> abc</span><br><span class="line"> abc</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.使用uniq去除相邻重复的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file.txt |sort|uniq</span></span><br><span class="line"> 123</span><br><span class="line"> abc</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 4.-c参数能统计出文件中每行内容重复的次数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file.txt |sort|uniq -c</span></span><br><span class="line">  2 123</span><br><span class="line">  2 abc</span><br></pre></td></tr></table></figure>

<h2 id="3、cut-命令"><a href="#3、cut-命令" class="headerlink" title="3、cut 命令"></a>3、cut 命令</h2><ul>
<li>cut命令用来显示行中的指定部分，删除文件中指定字段</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cut [参数] [操作对象]</span><br><span class="line"> 参数：</span><br><span class="line">  -d <span class="comment"># 指定分隔符</span></span><br><span class="line">  -f <span class="comment"># 指定显示的列；几列的内容，取第几列，-f3,6三列和六列</span></span><br><span class="line">  -c <span class="comment"># 按字符取（空格也算）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo &quot;Im xlw, is QQ 552408925&quot; &gt;file.txt   #过滤出文件里 xlw以及552408925</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现上述题目几种思路</span></span><br><span class="line"><span class="comment"># cut -d &quot; &quot; -f2,5 file.txt</span></span><br><span class="line"><span class="comment"># cut -d &quot; &quot; -f2,5 file.txt |sed &#x27;s#,##g&#x27;</span></span><br><span class="line"><span class="comment"># sed &#x27;s#,# #g&#x27; file.txt | awk -F &quot; &quot; &#x27;&#123;print $2 &quot; &quot; $5&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk  &#x27;&#123;print $2,$5&#125;&#x27; file.txt |awk -F &#x27;,&#x27; &#x27;&#123;print $1,$2&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk -F  &quot;[, ]&quot; &#x27;&#123;print $2,$6&#125;&#x27; file.txt</span></span><br><span class="line"><span class="comment"># awk -F &#x27;[, ]+&#x27; &#x27;&#123;print $2,$5&#125;&#x27; file.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="4、tr命令"><a href="#4、tr命令" class="headerlink" title="4、tr命令"></a>4、tr命令</h2><ul>
<li>tr可以用来删除一段信息当中的文字，或是进行文字信息的替换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tr  [参数]  [操作对象]</span><br><span class="line">参数：</span><br><span class="line">  -d <span class="comment"># 删除字符</span></span><br><span class="line">  -s <span class="comment"># 替换重复的字符</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd | tr &quot;root&quot; &quot;ROOT&quot;</span></span><br><span class="line"> ROOT:x:0:0:ROOT:/ROOT:/bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="5、wc命令"><a href="#5、wc命令" class="headerlink" title="5、wc命令"></a>5、wc命令</h2><ul>
<li>统计，计算数字</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wc  [参数]  [操作对象]</span><br><span class="line"> 参数：</span><br><span class="line">  -c <span class="comment"># 统计文件的Bytes数</span></span><br><span class="line">  -l <span class="comment"># 统计文件的行数</span></span><br><span class="line">  -w <span class="comment"># 统计文件中单词的个数，默认以空白字符做为分隔符</span></span><br><span class="line"></span><br><span class="line">注：在Linux系统中，一段连续的数字或字母组合为一个词。</span><br><span class="line"></span><br><span class="line"><span class="comment"># wc -l /etc/fstab      #统计/etc/fstab文件有多少行</span></span><br><span class="line"><span class="comment"># wc -l /etc/services   #统计/etc/services 文件行号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展方法</span></span><br><span class="line"><span class="comment"># grep -n &quot;.*&quot; /etc/services  | tail -1</span></span><br><span class="line"><span class="comment"># awk &#x27;&#123;print NR $0&#125;&#x27; /etc/services | tail -1</span></span><br><span class="line"><span class="comment"># cat -n /etc/services  | tail -1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令总结</title>
    <url>/51ea15a6.html</url>
    <content><![CDATA[<h2 id="帮助相关"><a href="#帮助相关" class="headerlink" title="帮助相关"></a>帮助相关</h2><span id="more"></span>
<ul>
<li>man  查看普通命令的帮助</li>
<li>help  查看内置命令的帮助</li>
<li>info  查看一个命令更多的信息</li>
</ul>
<h2 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h2><ul>
<li>shutdown  关机重启<ul>
<li>-r （reboot）重启</li>
<li>-h （halt）关机</li>
</ul>
</li>
<li>halt  关机cpu停止工作</li>
<li>poweroff  关机断电</li>
<li>init  切换运行级别<ul>
<li>init 0  关机</li>
<li>init 6  重启</li>
</ul>
</li>
<li>reboot  重启</li>
<li>systemctl<ul>
<li>reboot  重启</li>
<li>poweroff  关机</li>
</ul>
</li>
<li>sync  把数据从buffer写回磁盘</li>
</ul>
<h2 id="目录相关"><a href="#目录相关" class="headerlink" title="目录相关"></a>目录相关</h2><ul>
<li><p>pwd  打印工作目录</p>
</li>
<li><p>cd  切换工作目录</p>
<ul>
<li><p>-上一次所在目录</p>
</li>
<li><p>.  当前目录</p>
</li>
<li><p>..  上级目录d</p>
</li>
<li><p>~  用户家目录</p>
</li>
</ul>
</li>
<li><p>tree  以树形结构显示目录或文件</p>
<ul>
<li><p>-L （level）指定层数</p>
</li>
<li><p>-d  只显示目录</p>
</li>
</ul>
</li>
<li><p>mkdir  创建目录</p>
<ul>
<li>-p  递归创建目录</li>
</ul>
</li>
<li><p>ls   显示目录下的内容</p>
<ul>
<li><p>-l （long）长格式显示文件属性*</p>
</li>
<li><p>-a  显示所有文件，包含隐藏文件*</p>
</li>
<li><p>-d  只显示目录本身内容*</p>
</li>
<li><p>-i  显示inode节点*</p>
</li>
<li><p>-h （human）人类可读形式显示</p>
</li>
<li><p>-p  目录结尾加斜线，区分目录和文件</p>
</li>
<li><p>-F  不同文件结尾加不同标识，目录结尾加斜线</p>
</li>
<li><p>–color=auto  显示不同文件的颜色</p>
</li>
<li><p>–time-style  显示修改时间的格式</p>
<ul>
<li><p>long-iso  年月日时分</p>
</li>
<li><p>iso  月日时分</p>
</li>
</ul>
</li>
<li><p>-r （reverse）反转排序</p>
</li>
<li><p>-t  按修改时间排序</p>
</li>
</ul>
</li>
<li><p>cp  拷贝  -copy  files  and  directories</p>
<pre><code>            拷贝   文件   和     目录
</code></pre>
<ul>
<li>-r  复制目录</li>
<li>-p  保持文件或目录属性  (属主，属组，所属用户)</li>
<li>-a  相当于dpr</li>
<li>-i  是否覆盖确认</li>
<li>-d  保持文件中软连接的属性</li>
</ul>
</li>
<li><p>rm  删除文件或目录</p>
<ul>
<li>-f  强制删除</li>
<li>-r  递归删除</li>
</ul>
</li>
<li><p>mv  移动文件或目录或改名</p>
</li>
</ul>
<h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><ul>
<li>touch  创建文件或更新文件时间戳</li>
<li>vi/vim  文本编辑器</li>
<li>echo  显示输出文本内容<ul>
<li>-n  不换行输出</li>
<li>-e  支持转义字符输出</li>
</ul>
</li>
<li>printf  格式化打印字符串</li>
<li>cat  查看文件内容<ul>
<li>-n  显示行号</li>
</ul>
</li>
<li>tac  按行翻转文件内容</li>
<li>rev  左右按字符翻转行的内容</li>
<li>more  分页查看文件内容</li>
<li>less  分页查看文件内容<ul>
<li>-N  显示行号</li>
</ul>
</li>
<li>head  显示文件内容头部<ul>
<li>-n  前n行  n可省</li>
</ul>
</li>
<li>tail  显示文件内容尾部<ul>
<li>-n  后n行  n可省</li>
<li>-f  跟踪文件尾部的变化</li>
</ul>
</li>
<li>tr  替换或删除字符</li>
<li>cut     取列<ul>
<li>-d  指定分隔符</li>
<li>-f  指定哪列  连续多列可用-  多列可用，逗号</li>
<li>-c  按字符取内容</li>
</ul>
</li>
<li>diff  文本比较</li>
<li>vimdiff  文本图形化比较</li>
</ul>
<h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><ul>
<li>file  查看文件类型    </li>
<li>ln  创建<ul>
<li>-s （soft）创建软链接</li>
</ul>
</li>
<li>which  查命令所在的路径</li>
<li>whereis  查找命令，源码，帮助等路径<ul>
<li>-b  查二进制命令</li>
</ul>
</li>
<li>locate  查找文件及帮助相关，从updatedb对应的数据库里查</li>
<li>find  查找目录下的文件<ul>
<li>-name  按文件名查找</li>
<li>-type  按类型查找</li>
<li>-exec  对查找的结果在处理</li>
<li>-mtime  按修改时间查找</li>
<li>-perm  查权限</li>
<li>-size  </li>
</ul>
</li>
<li>xargs  从标准输入执行命令<ul>
<li>-n  数字，几个东西在一组</li>
<li>-d  指定分隔符，不指定默认是空格</li>
<li>-i  把{}当做前面查找的结果</li>
</ul>
</li>
<li>stat  查看文件属性<ul>
<li>-c  获取指定文件属性的一部分<ul>
<li>%A  显示字符权限</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li><p>id  查看用户身份</p>
</li>
<li><p>whoami  查看当前登录的用户</p>
</li>
<li><p>w  谁登陆了  干什么了</p>
</li>
<li><p>last  显示登录过的用户信息列表</p>
</li>
<li><p>lastlog  查看最近登录过的用户报告</p>
</li>
<li><p>useradd  添加普通用户</p>
<ul>
<li>-u  指定UID</li>
<li>-s  指定登录的SHELL解释器</li>
<li>-M  不创建家目录</li>
<li>-g  指定所属的组</li>
<li>-c  添加用户说明</li>
<li>-d  指定家目录</li>
<li>-e  设定登录截止日期</li>
</ul>
</li>
<li><p>userdel  删除用户</p>
<ul>
<li><p>-r  递归删除用户目录及下面内容</p>
<p>​    备份或确认家目录下无有用内容</p>
</li>
</ul>
</li>
<li><p>usermod修改用户属性</p>
<ul>
<li>-u  指定UID</li>
<li>-s  指定登录的SHELL解释器</li>
<li>-M  不创建家目录</li>
<li>-g  指定所属的组</li>
<li>-c  添加用户说明</li>
<li>-d  指定家目录</li>
<li>-e  设定登录截止日期</li>
</ul>
</li>
<li><p>passwd 修改密码</p>
<ul>
<li>–stdin  从标准输入接收密码并设置</li>
</ul>
</li>
<li><p>chpasswd  从标准输入批量更改用户密码</p>
</li>
<li><p>groupadd 添加用户组</p>
<ul>
<li>-g  指定组id</li>
</ul>
</li>
<li><p>groupdel  删除用户组</p>
</li>
<li><p>chage  查看和修改密码属性</p>
<ul>
<li>-l  list列表显示用户的密码信息</li>
<li>-E  修改账户过期时间</li>
</ul>
</li>
<li><p>su  用户身份切换</p>
<ul>
<li> -携带环境变量登录</li>
<li> -c  以指定用户身份执行命令</li>
</ul>
</li>
<li><p>sudo  允许指定用户执行某命令期间拥有root角色权限</p>
<ul>
<li>-l  查看获得的权限</li>
</ul>
</li>
<li><p>visudo  编辑sudo配置文件的命令</p>
<ul>
<li>-c  检查配置文件语法</li>
</ul>
</li>
</ul>
<h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><ul>
<li>date  显示系统时间和日期<ul>
<li>-s  修改时间</li>
<li>-d  指定过去或未来格式</li>
</ul>
</li>
<li>alias  查看或设置别名</li>
<li>unalias  取消别名</li>
<li>runlevel  查看运行级别</li>
<li>init  切换运行级别</li>
<li>getenforce  查看selinux状态</li>
<li>setenforce  设置selinux状态</li>
<li>md5sum  给文件设置指纹（计算和检查MD5数字信息）</li>
<li>du  文件或目录大小<ul>
<li>-s  显示总大小</li>
<li>-h  人类可读</li>
</ul>
</li>
</ul>
<h2 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h2><ul>
<li>tar  打包压缩<ul>
<li>-z  压缩</li>
<li>-c  创建</li>
<li>-v  输出打包过程</li>
<li>-f  文件</li>
<li>-t  查看文件</li>
<li>-C  指定解压的路径</li>
<li>-x  解压</li>
<li>-h  跟随软链接</li>
<li>–exclude  排除不打包的文件</li>
<li>-X  从文件中排除不打包的文件</li>
</ul>
</li>
</ul>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul>
<li>df  查看文件系统<ul>
<li>-i （inode）信息</li>
<li>-h  以人类可读形式查看block信息</li>
<li>-T  查看文件系统</li>
</ul>
</li>
<li>fdisk  MBR磁盘查看和分区工具（小于2T）<ul>
<li>-l  列表</li>
</ul>
</li>
<li>parted  GPT磁盘分区工具（常用于大于2T）</li>
<li>dd  创建一个虚拟文件系统</li>
<li>partprobe  将分区信息通知内核，真正生效</li>
<li>mkfs  格式化（本质创建文件系统）<ul>
<li>-t  指定类型 -t ext4（mkfs.ext4）</li>
<li>-b  指定block大小</li>
<li>-i  指定inode大小</li>
</ul>
</li>
<li>mount  挂载文件系统<ul>
<li>-t  type指定文件类型</li>
<li>-o  挂载的选项 mount -o rw，remount /</li>
<li>-a  all挂载所有磁盘</li>
</ul>
</li>
<li>umount  卸载文件系统<ul>
<li>-lf  强制卸载</li>
</ul>
</li>
<li>blkid  查看块设备属性（UUID,FSTYPE）</li>
<li>dumpe2fs  查看ext文件系统细节</li>
<li>fsck  检查和修复ext文件系统（好的磁盘不能操作），类似e2fsck<ul>
<li>-a  修复磁盘</li>
</ul>
</li>
<li>xfs_info (xfs_一堆) 查看xfs文件系统细节</li>
<li>xfs_repair  检查和修复xfs文件系统</li>
</ul>
<h2 id="三剑客"><a href="#三剑客" class="headerlink" title="三剑客"></a>三剑客</h2><ul>
<li>grep  过滤<ul>
<li>–color=auto  过滤的内容加色</li>
<li>-v （invert）取反</li>
<li>-i （ignore 忽略）不区分大小写</li>
<li>-n （number 数字）对输出的内容显示在源文件中的行号      显示行号</li>
<li>-w （word）按单词为单位过滤</li>
<li>-o  只输出匹配的内容</li>
<li>-E （extend）扩展的grep，即egrep</li>
<li>-A （after）显示过滤的字符串和它之后的多少行</li>
<li>-B （before）显示过滤的字符串和它之前的多少行</li>
<li>-C （context）显示过滤的字符串和它之前之后的多少行</li>
<li>-p  用于过滤Perl兼容正则表达式</li>
</ul>
</li>
<li>sed  流编辑器<ul>
<li>参数<ul>
<li>-n  取消命令的默认输出</li>
<li>-i  直接修改文件内容，而不是输出到终端</li>
<li>-r  支持扩展正则</li>
</ul>
</li>
<li>sed的内置命令字符说明<ul>
<li>s：替换</li>
<li>g：全局</li>
<li>p：打印</li>
<li>d：删除</li>
<li>a：追加</li>
<li>i：插入</li>
</ul>
</li>
</ul>
</li>
<li>awk  是命令操作也可以作为编程语言，处理字符串<ul>
<li>-F  指定分隔符</li>
<li>列表示：$1第一列 $2第二列  以此类推……</li>
<li>$0  整行</li>
<li>$NF  最后一列</li>
<li>$（NF-1）倒数第二列</li>
<li>NR  行号</li>
</ul>
</li>
</ul>
<h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><ul>
<li>chmod 修改文件权限<ul>
<li>-R 递归修改</li>
</ul>
</li>
<li>chown 改变文件用户和组<ul>
<li>-R 递归修改</li>
</ul>
</li>
<li>chgrp 修改用户组</li>
<li>chattr  设置文件属性<ul>
<li>+i  锁定文件</li>
<li>-i  解锁文件</li>
<li>+a  只能追加不能删除文件和内容</li>
<li>-a  解锁</li>
</ul>
</li>
<li>lsattr  查看文件属性</li>
</ul>
<h2 id="网络服务命令"><a href="#网络服务命令" class="headerlink" title="网络服务命令"></a>网络服务命令</h2><ul>
<li>定时任务<ul>
<li>crontab<ul>
<li>-l 列表</li>
<li>-e 编辑定时任务</li>
<li>-u 查看特定用户下的定时任务</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul>
<li>rpm  包管理器<br>安装，卸载，升级，查询和验证<ul>
<li>-i  安装install</li>
<li>-v  显示安装过程</li>
<li>-h  用“#”显示安装进度条</li>
<li>-U  升级软件包</li>
<li>-e  卸载软件包</li>
<li>–nodeps  忽略依赖</li>
<li>-q  查询</li>
<li>-a  所有</li>
<li>-l  显示软件包中的所有文件列表</li>
<li>-f  查询文件或命令属于哪个软件包</li>
</ul>
</li>
<li>yum  安装rpm包自动解决依赖工具<ul>
<li>install  安装软件包</li>
<li>list  获取软件包名</li>
<li>search 模糊查找软件包名</li>
<li>groupinstall  安装组包</li>
<li>grouplist  获取组包名称列表</li>
<li>list installed  查已安装软件</li>
<li>provides  根据命令配置查软件包</li>
<li>remove  移除软件包（禁止使用）</li>
<li>repolist  列出启用的yum源</li>
<li>repolist all  列出所有yum，包括禁用的yum源也列出</li>
</ul>
</li>
</ul>
<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><ul>
<li>ifconfig  查看设置IP</li>
<li>ip  查看和设置网络和IP</li>
<li>ping  检查网络是否通畅</li>
<li>traceroute  查看到达主机的网络路由信息<ul>
<li>-d  不做反向解析</li>
</ul>
</li>
<li>route  查看设置网关、路由</li>
<li>-host主机路由  -net网络路由  默认网关default gw<ul>
<li>add  添加</li>
<li>del  删除</li>
</ul>
</li>
<li>telnet  检测远程端口是否通畅</li>
<li>lsof<ul>
<li>-d  </li>
<li>-i  查看端口</li>
</ul>
</li>
</ul>
<h2 id="Bash内置命令"><a href="#Bash内置命令" class="headerlink" title="Bash内置命令"></a>Bash内置命令</h2><ul>
<li>history<ul>
<li>-c  清所有</li>
<li>-d  指定数字清</li>
</ul>
</li>
<li>ulimit<ul>
<li>-n  查文件描述符大小</li>
</ul>
</li>
</ul>
<h2 id="主机命令"><a href="#主机命令" class="headerlink" title="主机命令"></a>主机命令</h2><ul>
<li>hostname  查看设置主机名</li>
<li>hostnamectl  设置主机名（C7）</li>
<li>hostname  修改主机名</li>
<li>hostnamectl  CentOS7永久修改主机名</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统优化及定时任务</title>
    <url>/c3540fc.html</url>
    <content><![CDATA[<h1 id="系统安全优化"><a href="#系统安全优化" class="headerlink" title="系统安全优化"></a>系统安全优化</h1><h2 id="关闭-selinux-安全服务"><a href="#关闭-selinux-安全服务" class="headerlink" title="关闭 selinux 安全服务"></a>关闭 selinux 安全服务</h2><p> selinux（Security-Enhanced Linux）是美国国家安全局（NSA）对于强制访问控制的实现，这个功能让系统管理员又爱又恨，这里我们还是把它给关闭了吧，至于安全问题，后面通过其他手段来解决，这也是大多数生产环境的做法，如果非要开启也是可以的。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#临时关闭</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setenforce  0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#永久关闭,修改完配置后重启主机</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; /etc/selinux/config</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#检查结果</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep &quot;disabled&quot; /etc/selinux/config</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭-firewalld-防火墙"><a href="#关闭-firewalld-防火墙" class="headerlink" title="关闭 firewalld 防火墙"></a>关闭 firewalld 防火墙</h2><p>  关闭防火墙的目的是为了让初学者学习更方便，将来在学了firewalld技术后可再统一开启。 在企业环境中，<br>  一般只有配置外网IP的linux服务器才需要开启防火墙，但即使是有外网IP，对于高并发高流量的业务服务器<br>  仍是不能开的，因为会有较大性能损失，导致网站访问很慢，这种情况下只能在前端加更好的硬件防火墙了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">[root@egon ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置开机不启动</span></span><br><span class="line">[root@egon ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">系统优化脚本命令：</span><br><span class="line">yum install wget -y &amp;&amp; wget https://daima.baim0.xyz/init.sh &amp;&amp; chmod +x init.sh &amp;&amp; ./init.sh</span><br><span class="line"></span><br><span class="line">脚本优化内容：</span><br><span class="line"></span><br><span class="line">  删除初始源</span><br><span class="line">  阿里centos7源</span><br><span class="line">  阿里epel源</span><br><span class="line">  nginx官方stable源</span><br><span class="line">  清除缓存</span><br><span class="line">  建立新缓存</span><br><span class="line">  更新软件</span><br><span class="line">  安装常用软件</span><br><span class="line">  关闭selinux</span><br><span class="line">  关闭防火墙</span><br><span class="line">  系统参数优化</span><br><span class="line">  ssh优化</span><br><span class="line">  关闭不常用的东西</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211221164241000.png" alt="image-20211221164241000"></p>
<h1 id="防止系统乱码优化"><a href="#防止系统乱码优化" class="headerlink" title="防止系统乱码优化"></a>防止系统乱码优化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8		: 美式英文，utf-8</span><br><span class="line">zh_CN.UTF-8</span><br><span class="line">zh_HK.UTF-8</span><br><span class="line"><span class="comment"># 查看当前使用的系统语言</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># echo $LANG</span></span><br><span class="line">  zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装的语言包</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># locale</span></span><br><span class="line">  LANG=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时优化</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># export LANG=zh_CN.UTF-8  #设置编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久优化</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># vim /etc/locale.conf </span></span><br><span class="line">  LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span>  <span class="comment">#将原来的配置内容修改，注销或重启后，中文的语言环境。</span></span><br></pre></td></tr></table></figure>



<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="计划任务基本概述"><a href="#计划任务基本概述" class="headerlink" title="计划任务基本概述"></a>计划任务基本概述</h2><h4 id="1-什么是crond"><a href="#1-什么是crond" class="headerlink" title="1.什么是crond"></a>1.什么是crond</h4><ul>
<li>crond就是计划任务，类似于我们平时生活中的闹钟。定点执行。</li>
</ul>
<h4 id="2-为什么要使用crond"><a href="#2-为什么要使用crond" class="headerlink" title="2.为什么要使用crond"></a>2.为什么要使用crond</h4><ul>
<li>crond主要是做一些周期性的任务，比如: 凌晨3点定时备份数据。比如：11点开启网站抢购接口，12点关闭网站抢购接口。</li>
</ul>
<h4 id="3-计划任务主要分为以下两种使用情况"><a href="#3-计划任务主要分为以下两种使用情况" class="headerlink" title="3.计划任务主要分为以下两种使用情况:"></a>3.计划任务主要分为以下两种使用情况:</h4><ul>
<li>1.系统级别的定时任务： 临时文件清理、系统信息采集、日志文件切割</li>
<li>2.用户级别的定时任务： 定时向互联网同步时间、定时备份系统配置文件、定时备份数据库的数据</li>
</ul>
<h2 id="计划任务时间管理"><a href="#计划任务时间管理" class="headerlink" title="计划任务时间管理"></a>计划任务时间管理</h2><h4 id="1-Crontab配置文件记录了时间周期的含义"><a href="#1-Crontab配置文件记录了时间周期的含义" class="headerlink" title="1.Crontab配置文件记录了时间周期的含义"></a>1.Crontab配置文件记录了时间周期的含义</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/crontab</span></span><br><span class="line">SHELL=/bin/bash                     <span class="comment">#执行命令的解释器</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin  <span class="comment">#环境变量</span></span><br><span class="line">MAILTO=root                         <span class="comment">#邮件发给谁</span></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59) #分钟</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)   #小时</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)   #日期</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr #月份</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat  #星期</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  *   command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *  表示任意的(分、时、日、月、周)时间都执行</span></span><br><span class="line"><span class="comment"># -  表示一个时间范围段, 如5-7点</span></span><br><span class="line"><span class="comment"># ,  表示分隔时段, 如6,0,4表示周六、日、四</span></span><br><span class="line"><span class="comment"># /1 表示每隔n单位时间, 如*/10 每10分钟</span></span><br></pre></td></tr></table></figure>

<h4 id="2-了解crontab的时间编写规范"><a href="#2-了解crontab的时间编写规范" class="headerlink" title="2.了解crontab的时间编写规范"></a>2.了解crontab的时间编写规范</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00 02 * * * ls      <span class="comment">#每天的凌晨2点整执行</span></span><br><span class="line">00 02 1 * * ls      <span class="comment">#每月的1日的凌晨2点整执行</span></span><br><span class="line">00 02 14 2 * ls     <span class="comment">#每年的2月14日凌晨2点执行</span></span><br><span class="line">00 02 * * 7 ls      <span class="comment">#每周天的凌晨2点整执行</span></span><br><span class="line">00 02 * 6 5 ls      <span class="comment">#每年的6月周五凌晨2点执行</span></span><br><span class="line">00 02 14 * 7 ls     <span class="comment">#每月14日或每周日的凌晨2点都执行</span></span><br><span class="line">00 02 14 2 7 ls     <span class="comment">#每年的2月14日或每年2月的周天的凌晨2点执行   </span></span><br><span class="line">*/10  02 * * * ls   <span class="comment">#每天凌晨2点，每隔10分钟执行一次</span></span><br><span class="line">* * * * *  ls       <span class="comment">#每分钟都执行</span></span><br><span class="line">00 00 14 2 *  ls    <span class="comment">#每年2月14日的凌晨执行命令 </span></span><br><span class="line">*/5 * * * *  ls     <span class="comment">#每隔5分钟执行一次</span></span><br><span class="line">00 02 * 1,5,8 * ls  <span class="comment">#每年的1月5月8月凌晨2点执行</span></span><br><span class="line">00 02 1-8 * *  ls    <span class="comment">#每月1号到8号凌晨2点执行</span></span><br><span class="line">0 21 * * * ls       <span class="comment">#每天晚上21:00执行</span></span><br><span class="line">45 4 1,10,22 * * ls <span class="comment">#每月1、10、22日的4:45执行</span></span><br><span class="line">45 4 1-10 * * l     <span class="comment">#每月1到10日的4:45执行</span></span><br><span class="line">3,15 8-11 */2 * * ls <span class="comment">#每隔两天的上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">0 23-7/1 * * * ls   <span class="comment">#晚上11点到早上7点之间，每隔一小时执行</span></span><br><span class="line">15 21 * * 1-5 ls    <span class="comment">#周一到周五每天晚上21:15执行</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用crontab编写cron定时任务"><a href="#3-使用crontab编写cron定时任务" class="headerlink" title="3.使用crontab编写cron定时任务"></a>3.使用crontab编写cron定时任务</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e</td>
<td align="left">编辑定时任务</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">查看定时任务</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">删除定时任务</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">指定其他用户</td>
</tr>
</tbody></table>
<h2 id="计划任务编写实践"><a href="#计划任务编写实践" class="headerlink" title="计划任务编写实践"></a>计划任务编写实践</h2><h4 id="1-使用root用户每5分钟执行一次时间同步"><a href="#1-使用root用户每5分钟执行一次时间同步" class="headerlink" title="1.使用root用户每5分钟执行一次时间同步"></a>1.使用root用户每5分钟执行一次时间同步</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.如何同步时间</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ntpdate time.windows.com &amp;&gt;/dev/null</span></span><br><span class="line"><span class="comment">#2.配置定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e -u root</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  crontab -l -u root</span></span><br><span class="line">*/5 * * * * ntpdate time.windows.com &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h4 id="2-每天的下午3-5点，每隔半小时执行一次sync命令"><a href="#2-每天的下午3-5点，每隔半小时执行一次sync命令" class="headerlink" title="2.每天的下午3,5点，每隔半小时执行一次sync命令"></a>2.每天的下午3,5点，每隔半小时执行一次sync命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># crontab -l</span></span><br><span class="line">*/30 15,17 * * * sync &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h4 id="3-案例：每天凌晨3点做一次备份？备份-etc-目录到-backup下面"><a href="#3-案例：每天凌晨3点做一次备份？备份-etc-目录到-backup下面" class="headerlink" title="3.案例：每天凌晨3点做一次备份？备份/etc/目录到/backup下面"></a>3.案例：每天凌晨3点做一次备份？备份/etc/目录到/backup下面</h4><p>\1) 将备份命令写入一个脚本中</p>
<p>\2) 每天备份文件名要求格式: 2019-05-01_hostname_etc.tar.gz</p>
<p>\3) 在执行计划任务时，不要输出任务信息</p>
<p>\4) 存放备份内容的目录要求只保留三天的数据*</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.实现如上备份需求</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /backup</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf $(date +%F)_$(hostname)_etc.tar.gz /etc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /backup -name “*.tar.gz” -mtime +3 -exec rm -f &#123;&#125;\;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.将命令写入至一个文件中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /root/back.sh</span></span><br><span class="line">mkdir /backup</span><br><span class="line">tar zcf $(date +%F)_$(hostname)_etc.tar.gz /etc</span><br><span class="line">find /backup -name “*.tar.gz” -mtime +3 -<span class="built_in">exec</span> rm -f &#123;&#125;\;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.配置定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -l</span></span><br><span class="line">00 03 * * * bash /root/back.sh  &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.备份脚本</span></span><br></pre></td></tr></table></figure>

<h4 id="4-crond注意的事项"><a href="#4-crond注意的事项" class="headerlink" title="4.crond注意的事项"></a>4.crond注意的事项</h4><p>\1) 给定时任务注释</p>
<p>\2) 将需要定期执行的任务写入Shell脚本中，避免直接使用命令无法执行的情况tar date</p>
<p>\3) 定时任务的结尾一定要有&amp;&gt;/dev/null或者将结果追加重定向&gt;&gt;/tmp/date.log文件</p>
<p>\4) 注意有些命令是无法成功执行的 echo “123” &gt;&gt;/tmp/test.log &amp;&gt;/dev/null</p>
<p><strong>如果一定要是用命令，命令必须使用绝对路径</strong></p>
<h4 id="5-crond如何备份"><a href="#5-crond如何备份" class="headerlink" title="5.crond如何备份"></a>5.crond如何备份</h4><p>\1) 通过查找/var/log/cron中执行的记录，去推算任务执行的时间</p>
<p>\2) 定时的备份/var/spool/cron/{usernmae}*</p>
<h4 id="6-crond如何拒绝某个用户使用"><a href="#6-crond如何拒绝某个用户使用" class="headerlink" title="6.crond如何拒绝某个用户使用"></a>6.crond如何拒绝某个用户使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.使用root将需要拒绝的用户加入/etc/cron.deny</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo &quot;xuliangwei&quot; &gt;&gt; /etc/cron.deny</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.登陆该普通用户，测试是否能编写定时任务</span></span><br><span class="line">[<span class="built_in">test</span>@localhost ~]$ crontab -e</span><br><span class="line">You (<span class="built_in">test</span>) are not allowed to use this program (crontab)</span><br><span class="line">See crontab(1) <span class="keyword">for</span> more information</span><br></pre></td></tr></table></figure>

<h2 id="计划任务如何调试"><a href="#计划任务如何调试" class="headerlink" title="计划任务如何调试"></a>计划任务如何调试</h2><h4 id="1-crond调试"><a href="#1-crond调试" class="headerlink" title="1.crond调试"></a>1.crond调试</h4><p>\1) 调整任务每分钟执行的频率, 以便做后续的调试。</p>
<p>\2) 如果使用cron运行脚本，请将脚本执行的结果写入指定日志文件, 观察日志内容是否正常。</p>
<p>\3) 命令使用绝对路径, 防止无法找到命令导致定时任务执行产生故障。</p>
<p>\4) 通过查看/var/log/cron日志，以便检查我们执行的结果，方便进行调试。</p>
<h4 id="2-crond编写思路"><a href="#2-crond编写思路" class="headerlink" title="2.crond编写思路"></a>2.crond编写思路</h4><ul>
<li>1.手动执行命令，然后保留执行成功的结果。</li>
<li>2.编写脚本<ul>
<li>脚本需要统一路径/scripts</li>
<li>脚本内容复制执行成功的命令(减少每个环节出错几率)</li>
<li>脚本内容尽可能的优化, 使用一些变量或使用简单的判断语句</li>
<li>脚本执行的输出信息可以重定向至其他位置保留或写入/dev/null</li>
</ul>
</li>
<li>3.执行脚本<ul>
<li>使用bash命令执行, 防止脚本没有增加执行权限(/usr/bin/bash)</li>
<li>执行脚本成功后，复制该执行的命令，以便写入cron</li>
</ul>
</li>
<li>4.编写计划任务<ul>
<li>加上必要的注释信息, 人、时间、任务</li>
<li>设定计划任务执行的周期</li>
<li>粘贴执行脚本的命令(不要手敲)</li>
</ul>
</li>
<li>5.调试计划任务<ul>
<li>增加任务频率测试</li>
<li>检查环境变量问题</li>
<li>检查crond服务日志</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux包管理及压缩命令</title>
    <url>/891d6bd.html</url>
    <content><![CDATA[<h1 id="Linux中安装软件的三种方式"><a href="#Linux中安装软件的三种方式" class="headerlink" title="Linux中安装软件的三种方式"></a>Linux中安装软件的三种方式</h1><p>与windows类似，在Linux系统上也可以安装各种应用程序，或称之为软件包</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.rpm安装</span><br><span class="line">   rpm安装预先编译打包，安装简单，下载下来之后直接安装。</span><br><span class="line">   优点：已经制作好的安装程序</span><br><span class="line">	 缺点：不能自己解决依赖</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">2.yum安装</span><br><span class="line">   yum安装基于rpm安装</span><br><span class="line">   优点：增加了自动解决依赖的功能。</span><br><span class="line">	</span><br><span class="line">  </span><br><span class="line">3.源代码编译安装</span><br><span class="line">   源代码安装通过编译源代码，得到软件包。</span><br><span class="line">   优点：可以自定制软件包。</span><br><span class="line">   缺点：比较复杂   </span><br></pre></td></tr></table></figure>

<h2 id="镜像文件"><a href="#镜像文件" class="headerlink" title="镜像文件"></a>镜像文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载：</span></span><br><span class="line">  mount /dev/sr0 /opt/</span><br><span class="line">  或</span><br><span class="line">  mount /dev/cdrom /munt/</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 卸载：</span></span><br><span class="line">  umount /dev/sr0  <span class="comment">#挂载源</span></span><br><span class="line">  或</span><br><span class="line">  umount /opt  <span class="comment">#挂载点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制卸载：</span></span><br><span class="line">  umount -l  [挂载源或挂载点]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看挂载信息</span></span><br><span class="line">  df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看/操作设备内容需要先挂载</span></span><br><span class="line">[root@localhost dev]<span class="comment"># mount /dev/sr0 /opt/</span></span><br><span class="line"> mount: /dev/sr0 写保护，将以只读方式挂载</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看是否挂载成功</span></span><br><span class="line">[root@localhost ~]<span class="comment"># df</span></span><br><span class="line"> 文件系统     1K-块    已用     可用 已用% 挂载点</span><br><span class="line"> /dev/sr0   4480476  4480476   0  100% /opt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 浏览光盘内容</span></span><br><span class="line">[root@localhost dev]<span class="comment"># ls /opt/  </span></span><br><span class="line"> CentOS_BuildTag  EULA  images    LiveOS repodata     RPM-GPG-KEY-CentOS-Testing-7</span><br><span class="line"> EFI              GPL   isolinux  Packages  RPM-GPG-KEY-CentOS-7  TRANS.TBL</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看光盘上的安装包。格式都是以.rpm结尾的</span></span><br><span class="line">[root@localhost dev]<span class="comment"># ls /opt/Packages/</span></span><br><span class="line"> ......</span><br><span class="line"> zlib-1.2.7-18.el7.x86_64.rpm</span><br><span class="line"> zlib-devel-1.2.7-18.el7.x86_64.rpm</span><br><span class="line"> zsh-5.0.2-31.el7.x86_64.rpm</span><br><span class="line"> zziplib-0.13.62-9.el7.x86_64.rpm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看自己当前平台</span></span><br><span class="line">[root@localhost ~]<span class="comment"># uname -m</span></span><br><span class="line"> x86_64</span><br><span class="line"><span class="comment"># 查看系统内核信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># uname -r</span></span><br><span class="line"> 3.10.0-1160.49.1.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1、RPM安装"><a href="#1、RPM安装" class="headerlink" title="1、RPM安装"></a>1、RPM安装</h2><ul>
<li>rpm包来源 <ul>
<li>1、来源网络下载 </li>
<li>2、来源本地：自己的镜像自带的rpm包</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装：rpm -ivh [软件包名称]</span></span><br><span class="line">   -v  <span class="comment">#显示安装过程</span></span><br><span class="line">   -i  <span class="comment">#显示安装包的详细信息</span></span><br><span class="line">   -h  <span class="comment">#安装包哈希标记</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># 卸载：rpm -e [软件包名称]</span></span><br><span class="line"><span class="comment"># 升级：rpm -Uvh [软件包名称]</span></span><br><span class="line"></span><br><span class="line"> 1、下载安装包</span><br><span class="line">		</span><br><span class="line"> 2、安装</span><br><span class="line">  [root@localhost ~]<span class="comment"># rpm -qip /opt/Packages/zsh-5.0.2-34.el7_8.2.x86_64.rpm  #本地镜像</span></span><br><span class="line">  或</span><br><span class="line">  [root@localhost ~]<span class="comment"># rpm -ivh zsh-5.0.2-34.el7_8.2.x86_64.rpm </span></span><br><span class="line">  Preparing...                    <span class="comment">################################# [100%]</span></span><br><span class="line">  Updating / installing...</span><br><span class="line">  1:zsh-5.0.2-34.el7_8.2          <span class="comment">################################# [100%]</span></span><br><span class="line">	 </span><br><span class="line">	</span><br><span class="line"> 3、卸载</span><br><span class="line">	[root@localhost ~]<span class="comment"># rpm -e zsh</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> 4、更新</span><br><span class="line">  [root@localhost ~]<span class="comment"># rpm -Uvh zsh-5.0.2-34.el7_8.2.x86_64.rpm </span></span><br><span class="line">  Preparing...                   <span class="comment">################################# [100%]</span></span><br><span class="line">  Updating / installing...</span><br><span class="line">  1:zsh-5.0.2-34.el7_8.2         <span class="comment">################################# [100%]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 5、软件包名称</span><br><span class="line">  zsh-5.0.2-34.el7_8.2.x86_64.rpm </span><br><span class="line">   zsh    <span class="comment">#软件包名称</span></span><br><span class="line">   5.0.2  <span class="comment">#版本号</span></span><br><span class="line">   34     <span class="comment">#第多少次编译</span></span><br><span class="line">   el7_8（CentOS 7）<span class="comment">#适用的平台</span></span><br><span class="line">   x86_64 <span class="comment">#适用的系统位数</span></span><br><span class="line">   rpm    <span class="comment">#扩展名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 6、查看已安装软件包的使用配置文件</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -qc  zsh</span></span><br><span class="line">	</span><br><span class="line"> 7、查看已安装包的描述信息	</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -qi zsh</span></span><br><span class="line"></span><br><span class="line"> 8、查看是否安装某软件</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -q zsh</span></span><br><span class="line"></span><br><span class="line"> 9、查看当前系统安装了哪些rpm软件</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -qa</span></span><br><span class="line">		</span><br><span class="line"> 10、查看软件的安装路径，查看安装了哪些东西</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -ql zsh</span></span><br><span class="line"></span><br><span class="line"> 上传与下载：yum install lrzsz -y </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">扩展：</span><br><span class="line"> 1、查看未安装包的软件信息</span><br><span class="line">   [root@localhost ~]<span class="comment"># rpm -qip /opt/Packages/snappy-1.1.0-3.el7.x86_64.rpm </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、yum安装"><a href="#2、yum安装" class="headerlink" title="2、yum安装"></a>2、yum安装</h2><ul>
<li>yum是CentOS的软件包管理工具，自动为我们解决软件依赖问题。yum包管理工具必须使用yum源指定软件下载地址去下载需要安装的软件包。<ul>
<li>配置的路径是：/etc/yum.repos.d</li>
</ul>
</li>
<li>要成功的使用 YUM 工具安装更新软件或系统，就需要有一个包含各种 rpm 软件包的repository（软件仓库），这个软件仓库我们习惯称为 yum 源。(可以是本地源、网络源)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">基于rpm安装，自动解决依赖。</span><br><span class="line"><span class="comment"># yum源命令:</span></span><br><span class="line">   <span class="comment"># 查看yum配置文件</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># ls /etc/yum.repos.d</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 查看当前的有哪些仓库地址</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># yum repolist </span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># 查看包括启用或禁用的所有yum仓库</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># yum repolist all</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># 清空yum缓存</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># yum clean all </span></span><br><span class="line">      </span><br><span class="line">   <span class="comment"># 生成yum缓存</span></span><br><span class="line">	 [root@localhost ~]<span class="comment">#yum makecache</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># yum常用的基础命令： </span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 1、安装软件包的命令</span></span><br><span class="line">   yum install [软件包的名称] 	</span><br><span class="line">   参数：</span><br><span class="line">    -y : 免交互安装</span><br><span class="line">    --nogpgcheck : 忽略公钥认证</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 2、卸载软件（直接将软件的依赖包一起删除）</span></span><br><span class="line">   yum remove [软件包名称] </span><br><span class="line">   参数：</span><br><span class="line">    -y : 免交互移除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 3、更新软件</span></span><br><span class="line">   yum update [软件包名称]   </span><br><span class="line">   参数：</span><br><span class="line">    -y : 免交互更新</span><br><span class="line">	</span><br><span class="line"> ps：如果跟具体的软件包名称，就会更新指定软件包；如果没有指定，则更新系统所有的需要更新的软件包。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> <span class="comment"># 4、查看当前系统需要更新软件</span></span><br><span class="line">   yum check-update	</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> <span class="comment"># 5、重装软件</span></span><br><span class="line">   yum reinstall [软件包名称]	</span><br><span class="line">   </span><br><span class="line">	</span><br><span class="line"> <span class="comment"># 6、搜索软件包</span></span><br><span class="line">   yum search [软件包名称]	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">yum安装的生命周期：</span><br><span class="line"> 1、执行yum install zsh -y</span><br><span class="line"> 2、去 /etc/yum.repos.d/ 找以 .repo 结尾的文件</span><br><span class="line"> 3、通过 .repo 文件中的链接，找到对应的软件仓库</span><br><span class="line"> 4、在对应的软件仓库中下载指定的软件包</span><br><span class="line"> 5、缓存至 /var/cache/yum/</span><br><span class="line"> 6、根据缓存，安装软件包</span><br><span class="line"> 7、删除软件包（keepcache 是否保存缓存，0 代表不保存 ， 1 代表保存）</span><br></pre></td></tr></table></figure>

<p>知识储备：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget:下载文件</span></span><br><span class="line">如果系统中没有wget,执行如下命令：yum install wget -y</span><br><span class="line">  wget url</span><br><span class="line">   参数：</span><br><span class="line">    -O  <span class="comment">#指定下载文件的路径及名称</span></span><br><span class="line">		</span><br><span class="line">    </span><br><span class="line"><span class="comment"># curl:读取文件</span></span><br><span class="line">  curl ：读取文件</span><br><span class="line">   参数:</span><br><span class="line">    -o  <span class="comment">#指定下载文件的路径及名称</span></span><br><span class="line">    -k  <span class="comment">#免证书认证</span></span><br><span class="line">	</span><br><span class="line">curl命令是⼀个利⽤URL规则在命令⾏下⼯作的⽂件传输⼯具。它⽀持⽂件的上传和下载，所以是综合传输⼯具，</span><br><span class="line">但按传统，习惯称curl为下载⼯具。作为⼀款强⼒⼯具，curl⽀持包括HTTP、HTTPS、[ftp]等众多协议，还⽀</span><br><span class="line">持POST、cookies、认证、从指定偏移处下载部分⽂件、⽤户代理字符串、限速、⽂件⼤⼩、进度条等特征。做⽹</span><br><span class="line">⻚处理流程和数据检索⾃动化，curl可以祝⼀臂之⼒。</span><br><span class="line"></span><br><span class="line"> [root@localhost ~]<span class="comment"># curl -o 123.png https://www.xxx.com/img/hello.png</span></span><br><span class="line"> <span class="comment"># ps: 如果遇到下载提示⽆法简历SSL链接，使⽤-k选项或者--insecure</span></span><br><span class="line">  curl -k -o 123.png https://www.xxx.com/img/hello.png</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># sz下载文件与rz上传文件</span></span><br><span class="line"> ps:  yum install lrzsz -y</span><br><span class="line"></span><br><span class="line">sz : 下载文件（从linux系统下载文件到windows）</span><br><span class="line">系统默认没有该命令，需要下载:yum install lrzsz -y</span><br><span class="line">将服务器上选定的⽂件下载/发送到本机，</span><br><span class="line"></span><br><span class="line"><span class="comment"># rz : 上传文件(将windows文件上传至Linux)</span></span><br><span class="line"></span><br><span class="line">  rz [文件路径]</span><br><span class="line">	<span class="comment"># 系统默认没有该命令，需要下载：yum install lrzsz -y</span></span><br><span class="line">  <span class="comment"># 运⾏该命令会弹出⼀个⽂件选择窗⼝，从本地选择⽂件上传到服务器。</span></span><br><span class="line">  [root@localhost opt]<span class="comment"># rz # 如果⽂件已经存，则上传失败，可以⽤-E选项解决</span></span><br><span class="line">  [root@localhost opt]<span class="comment"># rz -E # -E如果⽬标⽂件名已经存在，则重命名传⼊⽂件。新⽂件名将添加⼀个点和⼀个数字(0..999）</span></span><br><span class="line">        </span><br><span class="line"> rz 回车即可选择上传文件</span><br><span class="line"> 也可以进入都某个路径下将文件直接拖入~ （人性化）  </span><br></pre></td></tr></table></figure>

<h3 id="本地-amp-远程仓库搭建"><a href="#本地-amp-远程仓库搭建" class="headerlink" title="本地&amp;远程仓库搭建"></a>本地&amp;远程仓库搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">本地仓库：</span><br><span class="line">  <span class="comment"># 1、下载安装必须的软件包yum-utils，createrepo</span></span><br><span class="line">    yum install yum-utils createrepo -y</span><br><span class="line">		</span><br><span class="line">  <span class="comment"># 2、创建软件包目录，存放软件包的</span></span><br><span class="line">    mkdir -p /opt/repos</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3、下载对应的软件</span></span><br><span class="line">    mkdir -p /opt/repos/Packages</span><br><span class="line">			</span><br><span class="line">    把对应的软件包复制到 Packages 目录中</span><br><span class="line">			</span><br><span class="line">  <span class="comment"># 4、初始化软件仓库</span></span><br><span class="line">		 createrepo /opt/repos</span><br><span class="line">	</span><br><span class="line">  <span class="comment"># 5、添加yum源，将软件包复制到yum仓库目录</span></span><br><span class="line">     <span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">     mkdir backup</span><br><span class="line">     mv *.repo backup/</span><br><span class="line">     [root@localhost ~]<span class="comment"># yum-config-manager --add-repo=file:///opt/repos</span></span><br><span class="line"></span><br><span class="line">     [root@localhost /etc/yum.repos.d]<span class="comment"># cat opt_repos.repo </span></span><br><span class="line"></span><br><span class="line">     [opt_repos]	<span class="comment">#源的名称</span></span><br><span class="line">      name=added from: file:///opt/repos	 <span class="comment">#源的简介</span></span><br><span class="line">      baseurl=file:///opt/repos	<span class="comment">#源的下载地址</span></span><br><span class="line">      enabled=1	<span class="comment">#是否启用：1启用 ，0不启用</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 6、清空yum缓存</span></span><br><span class="line">     yum clean all </span><br><span class="line">      </span><br><span class="line">  <span class="comment"># 7、生成yum缓存</span></span><br><span class="line">     yum makecache</span><br><span class="line">		</span><br><span class="line">  <span class="comment"># 8、测试</span></span><br><span class="line">     yum install zsh</span><br><span class="line">	</span><br><span class="line">	远程仓库</span><br><span class="line">		参考本地版前7步</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 1、安装远程访问软件（Nginx）</span></span><br><span class="line">      <span class="comment"># ① 配备CentOS-7 源</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repohttps://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span></span><br><span class="line">			<span class="comment"># ② 配备EPEL源</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># yum-config-manager --add-repo=https://repo.huaweicloud.com/epel/7/x86_64/</span></span><br><span class="line">			<span class="comment"># ③ 安装nginx</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># yum install nginx --nogpgcheck</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、修改nginx的配置文件</span></span><br><span class="line">      https://nginx.org/en/docs/http/ngx_http_autoindex_module.html</span><br><span class="line">			</span><br><span class="line">      [root@localhost ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">      root         /opt/repos;</span><br><span class="line">      autoindex on;</span><br><span class="line">			</span><br><span class="line">      <span class="comment"># 测试更改是否成功</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># nginx -t</span></span><br><span class="line">			</span><br><span class="line">      <span class="comment"># 启动nginx</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line">			</span><br><span class="line">      <span class="comment"># 关闭selinux和firewalld</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># setenforce 0</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 3、在测试机</span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># yum install yum-utils -y</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 备份源</span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># mkdir backup</span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># mv *.repo backup/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 添加源</span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># yum-config-manager --add-repo=http://192.168.15.101/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 刷新缓存</span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># yum clean all </span></span><br><span class="line">      [root@localhost yum.repos.d]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、测试</span></span><br><span class="line">      [root@localhost ~]<span class="comment"># yum install zsh -y</span></span><br></pre></td></tr></table></figure>

<h2 id="3、源码包安装（编译安装）"><a href="#3、源码包安装（编译安装）" class="headerlink" title="3、源码包安装（编译安装）"></a>3、源码包安装（编译安装）</h2><ul>
<li><p><strong>1.源码包是什么</strong></p>
<ul>
<li>源码包指的是开发编写好的程序源代码，但并没有将其编译为一个能正常使用的工具。-</li>
</ul>
</li>
<li><p><strong>2.为什么要学习源码包</strong></p>
<ul>
<li>1、部分软件官网仅提供源码包，需要自行编译并安装。</li>
<li>2、部分软件在新版本有一些特性还没来得及制作成rpm包时，可以自行编译软件使用其新特性。</li>
</ul>
</li>
<li><p><strong>3.源码包的优缺点</strong></p>
<ul>
<li>优点是：<ul>
<li>可以自行修改源代码</li>
<li>可以定制需要的相关功能</li>
<li>新版软件优先更新源码</li>
</ul>
</li>
<li>缺点是: <ul>
<li>相对yum安装软件会复杂很多。</li>
<li>标准化实施困难，自动化就无法落地。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>4.源码包如何获取</strong></p>
<ul>
<li>常见的软件包都可以在官网获取源码包，比如 apache、nginx、mysql等等</li>
</ul>
</li>
<li><p><strong>5.将源码包编译为二进制可执行文件步骤如下，简称安装三步曲</strong></p>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png" alt="编译安装过程"></p>
<p>注意: 此方法不是百分百通用于所有源码包，建议拿到源码包解压后，进入到目录找相关的README帮助文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">编译安装</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、基础环境准备</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># yum install -y gcc make wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、下载源码包</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># wget https://nginx.org/download/nginx-1.20.2.tar.gz</span></span><br><span class="line">		</span><br><span class="line"><span class="comment"># 2、解压源码包, 并进入相应目录</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># tar -xf nginx-1.20.2.tar.gz</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># cd nginx-1.20.2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3、配置相关的选项，并生成Makefile</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># ./configure </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、将Makefile文件编译可执行二进制程序</span></span><br><span class="line">	[root@localhost nginx-1.20.2]<span class="comment"># make</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、将二进制文件拷贝至对应的目录中</span></span><br><span class="line">	[root@localhost nginx-1.20.2]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、启动</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># /usr/local/nginx/sbin/nginx</span></span><br><span class="line">  <span class="comment"># 启动后浏览器访问ip地址即可查看是否安装成功</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 7、关闭</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># /usr/local/nginx/sbin/nginx -s stop</span></span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">	tar -xf [压缩包名称]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">知识拓展：</span><br><span class="line">  自定制安装，修改源代码包名以 nginx 为例</span><br><span class="line">  <span class="comment"># 1、关闭nginx服务后，删除源代码包，目录</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># rm -rf nginx-1.20.2</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># rm -rf /usr/local/nginx/</span></span><br><span class="line">  <span class="comment"># 2、重新解压源码包, 并进入相应目录</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># tar -xf nginx-1.20.2.tar.gz</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># cd nginx-1.20.2</span></span><br><span class="line">  <span class="comment"># 3、找到对应的版本，版本号</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># grep -R &#x27;nginx&#x27; ./</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># grep -R &#x27;1.20.2&#x27; ./</span></span><br><span class="line">    ./src/core/nginx.h:<span class="comment">#define NGINX_VERSION   &quot;1.20.2&quot;  #可以看到版本的路径</span></span><br><span class="line">  <span class="comment"># 修改文件，修改完后:wq退出</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># vim ./src/core/nginx.h</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   /*</span></span><br><span class="line"><span class="string">    * Copyright (C) Igor Sysoev</span></span><br><span class="line"><span class="string">    * Copyright (C) Nginx, Inc.</span></span><br><span class="line"><span class="string">    */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #ifndef _NGINX_H_INCLUDED_</span></span><br><span class="line"><span class="string">    #define _NGINX_H_INCLUDED_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #define nginx_version      1020002</span></span><br><span class="line"><span class="string">    #define NGINX_VERSION      &quot;1.0&quot; # 修改版本</span></span><br><span class="line"><span class="string">    #define NGINX_VER          &quot;GengFeng/&quot; NGINX_VERSION  #修改名称</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #ifdef NGX_BUILD</span></span><br><span class="line"><span class="string">     &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment"># 配置相关的选项，并生成Makefile</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># ./configure </span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将Makefile文件编译可执行二进制程序</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># make</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将二进制文件拷贝至对应的目录中</span></span><br><span class="line">  [root@localhost nginx-1.20.2]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 启动</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># /usr/local/nginx/sbin/nginx</span></span><br><span class="line">  <span class="comment"># 启动后浏览器访问ip地址即可查看是否安装成功</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 修改后看到的是已改过的名称和版本，以 http://192.168.15.100/sdasdas 为例</span></span><br><span class="line">     404 Not Found</span><br><span class="line">     GengFeng/1.0</span><br></pre></td></tr></table></figure>

<h1 id="压缩打包"><a href="#压缩打包" class="headerlink" title="压缩打包"></a>压缩打包</h1><h4 id="1、-什么是打包压缩"><a href="#1、-什么是打包压缩" class="headerlink" title="1、 什么是打包压缩"></a><strong>1、</strong> <strong>什么是打包压缩</strong></h4><p>打包指的是将多个⽂件和⽬录合并为⼀个特殊⽂件，然后将该特殊⽂件进⾏压缩，最终得到⼀个压缩包</p>
<h4 id="2、为什么使⽤压缩包"><a href="#2、为什么使⽤压缩包" class="headerlink" title="2、为什么使⽤压缩包"></a><strong>2、为什么使⽤压缩包</strong></h4><ul>
<li><p>1.减少占⽤的体积</p>
</li>
<li><p>2.加快⽹络的传输</p>
</li>
</ul>
<h4 id="3、Windows的压缩和Linux的有什么不同"><a href="#3、Windows的压缩和Linux的有什么不同" class="headerlink" title="3、Windows的压缩和Linux的有什么不同"></a>3、Windows的压缩和Linux的有什么不同</h4><ul>
<li><strong>windows: zip rar(linux不⽀持rar)</strong></li>
<li><strong>linux: zip tar.gz tar.bz2 .gz</strong></li>
</ul>
<p>如果希望windows的软件能被linux解压，或者linux的软件包被windows能识别，选择zip.</p>
<p>PS: 压缩包的后缀不重要，但⼀定要携带.</p>
<h4 id="4、Linux下常⻅的压缩包类型"><a href="#4、Linux下常⻅的压缩包类型" class="headerlink" title="4、Linux下常⻅的压缩包类型"></a>4、Linux下常⻅的压缩包类型</h4><table>
<thead>
<tr>
<th>格式</th>
<th>压缩工具</th>
</tr>
</thead>
<tbody><tr>
<td><code>.zip</code></td>
<td><strong>zip</strong> 压缩工具</td>
</tr>
<tr>
<td><code>.gz</code></td>
<td><strong>gzip</strong> 压缩工具，只能压缩文件，会删除源文件（通常配合<strong>tar</strong>使用）</td>
</tr>
<tr>
<td><code>.bz2</code></td>
<td><strong>bzip2</strong> 压缩工具，只能压缩文件，会删除源文件（通常配合<strong>tar</strong>使用）</td>
</tr>
<tr>
<td><code>.tar.gz</code></td>
<td>先使用<strong>tar</strong> 命令归档打包，然后使用 <strong>gzip</strong> 压缩</td>
</tr>
<tr>
<td><code>.tar.bz2</code></td>
<td>先使用<strong>tar</strong> 命令归档打包，然后使用 <strong>bzip</strong> 压缩</td>
</tr>
</tbody></table>
<p>Linux常见的压缩包有哪些？</p>
<ul>
<li>gzip</li>
<li>bzip2</li>
</ul>
<h2 id="gzip打包与压缩"><a href="#gzip打包与压缩" class="headerlink" title="gzip打包与压缩"></a>gzip打包与压缩</h2><ul>
<li>使用gzip方式进行压缩文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩命令：gzip [压缩文件]</span></span><br><span class="line"><span class="comment"># 解压命令：gzip -d [压缩包]</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip file       #对文件进行压缩</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zcat file.gz    #查看gz压缩后的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip -d file.gz #解压gzip的压缩包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用场景:当需要让某个文件不生效时</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip CentOS-Vault.repo --&gt; CentOS-Vault.repo.gz</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zcat CentOS-Vault.repo.gz --&gt; 查看不想解压的压缩包文件内容</span></span><br></pre></td></tr></table></figure>

<h2 id="bzip2打包与压缩"><a href="#bzip2打包与压缩" class="headerlink" title="bzip2打包与压缩"></a>bzip2打包与压缩</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩命令：bzip2 [压缩文件]</span></span><br><span class="line"><span class="comment"># 解压命令：bzip2 -d [压缩包]</span></span><br><span class="line"> </span><br><span class="line">[root@localhost ~]<span class="comment"># bzip2 file        #对文件进行压缩</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bzmore file.bz2   #查看bz2压缩后的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bzip2 -d file.bz2 #解压bzip2的压缩包 </span></span><br></pre></td></tr></table></figure>

<h2 id="tar打包与压缩"><a href="#tar打包与压缩" class="headerlink" title="tar打包与压缩"></a>tar打包与压缩</h2><ul>
<li>tar是linux下最常用的压缩与解压缩, 支持文件和目录的压缩归档</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar : 打包的命令</span><br><span class="line">  参数：</span><br><span class="line">    -f  <span class="comment">#指定包文件名称，多参数f写最后</span></span><br><span class="line">    -c  <span class="comment">#打包</span></span><br><span class="line">    -v  <span class="comment">#输出命令的打包或解包的过程</span></span><br><span class="line">    -x  <span class="comment">#解压（解压不需要指定压缩类型）</span></span><br><span class="line">    -t  <span class="comment">#查看压缩包内部的内容</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    -z  <span class="comment">#使用gzip压缩压缩包</span></span><br><span class="line">    -j  <span class="comment">#使用bzip2压缩压缩包</span></span><br><span class="line">    -J  <span class="comment">#使用xz压缩归档后的文件(tar.xz)</span></span><br><span class="line">    -C  <span class="comment">#指定解压目录位置</span></span><br><span class="line">    -P  <span class="comment">#忽略使用绝对路径时报出的错误</span></span><br><span class="line">    -X  <span class="comment">#排除多个文件(写入需要排除的文件名称)</span></span><br><span class="line">    -h  <span class="comment">#打包软链接		</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    --hard-dereference  <span class="comment">#打包硬链接</span></span><br><span class="line">    --exclude   <span class="comment">#在打包的时候写入需要排除文件或目录		</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用打包与压缩组合</span></span><br><span class="line">czf    <span class="comment">#打包tar.gz格式</span></span><br><span class="line">cjf    <span class="comment">#打包tar.bz格式</span></span><br><span class="line">cJf    <span class="comment">#打包tar.xz格式</span></span><br><span class="line"></span><br><span class="line">zxf    <span class="comment">#解压tar.gz格式</span></span><br><span class="line">jxf    <span class="comment">#解压tar.bz格式</span></span><br><span class="line">xf     <span class="comment">#自动选择解压模式</span></span><br><span class="line">tf     <span class="comment">#查看压缩包内容    </span></span><br><span class="line">		</span><br><span class="line">  注意：</span><br><span class="line">     1、压缩时是什么路径，解压缩时就是什么路径，所以为了安全不要使用绝对路径压缩。</span><br><span class="line">     2、-f参数后面永远跟压缩包名称</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment"># tar命令练习     </span></span><br><span class="line">  <span class="comment">#1.环境准备</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># yum install mariadb-server</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># mkdir /backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例1.mysql备份及恢复</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># tar cJf /backup/mysql.tar.xz /var/lib/mysql</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># tar xf /backup/mysql.tar.xz -C /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例2 mysql备份及恢复</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># cd /var/lib/mysql</span></span><br><span class="line">  [root@localhost mysql]<span class="comment"># tar cJf /backup/mysql.tar.xz *</span></span><br><span class="line">  [root@localhost mysql]<span class="comment"># tar tf /backup/mysql.tar.xz</span></span><br><span class="line">  [root@localhost mysql]<span class="comment"># tar xf /backup/mysql.tar.xz -C /var/lib/mysql     </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户管理</title>
    <url>/ef277b25.html</url>
    <content><![CDATA[<h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/1583571865_ab05a7218d58cc85bbfc02fbec2d730f.png" alt="1583571865_ab05a7218d58cc85bbfc02fbec2d730f"></p>
<span id="more"></span>
<ul>
<li><p>用户</p>
<ul>
<li>用户对硬件资源的操作都需要通过操作系统，比如用户要读取硬盘中的一份关键数据。出于安全考虑，操作系统的开发者们都专门开发了安全机制，要使用操作系统必须事先输入正确的用户名与密码，根据用户给相应权限，这便是用户的由来</li>
<li>用户是权限的化身，通常在公司是使用普通用户管理服务器，因为root权限过大，容易出问题</li>
<li>每启动一个进程都会与一个用户关联<ul>
<li>进程===》用户===》权限（作用在文件身上）</li>
</ul>
</li>
</ul>
</li>
<li><p>用户组</p>
<ul>
<li>主组：用户本身所在的组</li>
<li>附属组：为用户添加的组</li>
</ul>
<p>用户与组的关系</p>
<ul>
<li>一对一：一个用户可以属于一个组，用户默认就在自己的主组下</li>
<li>一对多：一个用户可以属于多个组，用户只有一个主组，但可以为用户添加多个附加组</li>
<li>多对多：多个用户可以属于多个组</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux系统中用户角色划分			</span></span><br><span class="line">  系统用户：uid在 0-999 之间的是系统用户</span><br><span class="line">		系统用户一般用在启动应用程序上，一般不需要登录系统。</span><br><span class="line">		</span><br><span class="line">  普通用户：uid在 1000及以上的是普通用户</span><br><span class="line">		一般用在登录上。</span><br></pre></td></tr></table></figure>

<h2 id="用户与组相关文件"><a href="#用户与组相关文件" class="headerlink" title="用户与组相关文件"></a>用户与组相关文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户详情的文件</span></span><br><span class="line"><span class="comment"># 文件信息：/etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"> tony:x:1004:1004::/home/tony:/bin/bash</span><br><span class="line">  tony    <span class="comment">#用户名 </span></span><br><span class="line">  x       <span class="comment">#密码占位符</span></span><br><span class="line">  1001    <span class="comment">#用户uid</span></span><br><span class="line">  1001		<span class="comment">#用户组gid</span></span><br><span class="line">  /home/tony <span class="comment">#家目录</span></span><br><span class="line">  /bin/bash	 <span class="comment">#默认的解析器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户密码的文件</span></span><br><span class="line"><span class="comment"># 文件信息：/etc/shadow</span></span><br><span class="line">[root@localhost /]<span class="comment"># cat /etc/shadow</span></span><br><span class="line"> tony:!!:18978:0:99999:7:::  <span class="comment">#用户密码</span></span><br><span class="line">  tony  <span class="comment">#用户名</span></span><br><span class="line">  !!    <span class="comment">#密码是一长串的字符串，!!表示没有密码</span></span><br><span class="line">  18978 <span class="comment">#最近一次变更密码，距离1970年到现在过了多少天</span></span><br><span class="line">  0     <span class="comment">#密码最少使用天数，0表示无限制</span></span><br><span class="line">  99999 <span class="comment">#密码最长使用天数，99999表示无限制</span></span><br><span class="line">  7     <span class="comment">#密码过期预警天数</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用户组配置文件</span></span><br><span class="line"><span class="comment"># 文件信息：/etc/group</span></span><br><span class="line">[root@localhost /]<span class="comment"># cat /etc/group</span></span><br><span class="line"> tony:x:1004:</span><br><span class="line">  tony  <span class="comment"># 用户组名</span></span><br><span class="line">  x     <span class="comment"># 用户组密码占位符</span></span><br><span class="line">  1004  <span class="comment"># 用户组id</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用户组密码文件</span></span><br><span class="line"><span class="comment"># 文件信息：/etc/gshadow</span></span><br><span class="line">[root@localhost /]<span class="comment"># cat /etc/gshadow</span></span><br><span class="line"> tony:!::</span><br><span class="line">  tony  <span class="comment">#用户组名</span></span><br><span class="line">  !     <span class="comment">#用户组密码，!或空表示没有密码</span></span><br><span class="line">  :     <span class="comment">#用户组管理者，可以为空，多个管理用，分割</span></span><br><span class="line">  :     <span class="comment">#显示用户组为哪个用户的附加组，多个用，分割 </span></span><br></pre></td></tr></table></figure>



<h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户：相当于账号</span><br><span class="line">  root  <span class="comment">#root用户拥有最高权限  </span></span><br><span class="line">  <span class="built_in">test</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># 创建用户的命令：</span></span><br><span class="line">	useradd [用户名]</span><br><span class="line">	</span><br><span class="line">  参数：</span><br><span class="line">	 -g  <span class="comment">#指定用户组（用户必须存在）</span></span><br><span class="line">	 -r  <span class="comment">#创建系统用户</span></span><br><span class="line">	 -M  <span class="comment">#不创建家目录</span></span><br><span class="line">	 -u  <span class="comment">#指定创建用户的ID的</span></span><br><span class="line">	 -s  <span class="comment">#指定解析器</span></span><br><span class="line">	 </span><br><span class="line">  [root@localhost /]<span class="comment"># useradd tony  #默认将用户写进了/etc/passwd 这个文件</span></span><br><span class="line">	ps：每创建一个用户都会创建一个该用户的主组，组名与用户名相同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换用户的命令：</span></span><br><span class="line">	su - [用户名]</span><br><span class="line">	su [用户名]</span><br><span class="line">	</span><br><span class="line">	   </span><br><span class="line"><span class="comment"># 查看用户相关信息</span></span><br><span class="line">  [root@localhost /]<span class="comment"># id  #查看当前用户</span></span><br><span class="line">   uid=0(root) gid=0(root) 组=0(root)</span><br><span class="line">   </span><br><span class="line">  [root@localhost /]<span class="comment"># id test  #id [用户名] 查看指定用户信息</span></span><br><span class="line">   uid=1001(<span class="built_in">test</span>) gid=1001(<span class="built_in">test</span>) 组=1001(<span class="built_in">test</span>)</span><br><span class="line"></span><br><span class="line">  [root@localhost /]<span class="comment"># whoami  # 查看当前用户是谁</span></span><br><span class="line">   root</span><br><span class="line">   </span><br><span class="line">  [root@localhost /]<span class="comment"># who  #查看所有登录的用户</span></span><br><span class="line">   root   pts/0    2021-12-17 19:37 (192.168.15.1)</span><br><span class="line">   root   pts/1    2021-12-17 19:37 (192.168.15.1)</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 修改用户的命令：</span></span><br><span class="line">  usermod [用户名]</span><br><span class="line">  </span><br><span class="line">  参数：</span><br><span class="line">   -u  <span class="comment">#修改用户的UID</span></span><br><span class="line">	 –g  <span class="comment">#指定⽤户所属的GID </span></span><br><span class="line">	 </span><br><span class="line"> <span class="comment"># 修改用户的UID</span></span><br><span class="line">	[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">   user:x:1005:1005::/home/user:/bin/bash</span><br><span class="line">  [root@localhost /]<span class="comment"># usermod -u 1006 user  #显示无法修改</span></span><br><span class="line">   usermod: user user is currently used by process 9001</span><br><span class="line">  [root@localhost /]<span class="comment"># kill -9 9001  #需要杀死正在使用用户的进程</span></span><br><span class="line">  [root@localhost /]<span class="comment"># 已杀死</span></span><br><span class="line">  <span class="comment">#这时候可以修改了</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># usermod -u 1006 user</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># tail -1 /etc/passwd  #修改成功</span></span><br><span class="line">   user:x:1006:1005::/home/user:/bin/bash</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 用户组必须是已经存在的，否则无法修改</span></span><br><span class="line">  [root@localhost /]<span class="comment"># usermod user -g 1001</span></span><br><span class="line">  [root@localhost /]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">    user:x:1006:1001::/home/user:/bin/bash</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除用户的命令：</span></span><br><span class="line"> userdel [用户名]</span><br><span class="line">   参数：-r</span><br><span class="line">  <span class="comment">#删除⽤户test1，但不删除⽤户家⽬录和mail</span></span><br><span class="line">  [root@localhost /]<span class="comment"># userdel test1    </span></span><br><span class="line">  </span><br><span class="line">  [root@localhost /]<span class="comment"># ll /home   #查看并没有删掉test1的家目录</span></span><br><span class="line">   drwx------ 3 1003 1003 92 12月 17 21:02 test1 </span><br><span class="line">  [root@localhost /]<span class="comment"># ll /var/spool/mail/  #查看并没有删掉test1的mail</span></span><br><span class="line">   -rw-rw---- 1 1003 mail 0 12月 17 21:02 test1</span><br><span class="line">  [root@localhost /]<span class="comment"># rm -rf /home/test1  #手动删除家目录</span></span><br><span class="line">  [root@localhost /]<span class="comment"># rm -rf /var/spool/mail/test1 #手动删除mail  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#要想删彻底，加-r选项，其实是做了上面所有的操作</span></span><br><span class="line">  [root@localhost /]<span class="comment"># userdel -r test1 </span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h3 id="手动创建用户"><a href="#手动创建用户" class="headerlink" title="手动创建用户"></a>手动创建用户</h3><ul>
<li>不使用 useradd 创建用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户家目录</span></span><br><span class="line">[root@localhost opt]<span class="comment"># mkdir -p /home/test  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户信息配置文件</span></span><br><span class="line">[root@localhost opt]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建test用户并写入用户信息配置文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo &#x27;test:x:1001:1001::/home/test/:/bin/bash&#x27; &gt;&gt; /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看用户信息配置文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"><span class="built_in">test</span>:x:1001:1001::/home/<span class="built_in">test</span>/:/bin/bash  <span class="comment">#可以发现新增的用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给用户添加属组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo &#x27;test:x:1001&#x27; &gt;&gt; /etc/group</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给用户添加密码</span></span><br><span class="line">[root@localhost /]<span class="comment"># vim /etc/shadow</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给用户家目录配置环境变量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/skel/.bashrc  /home/test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/skel/.bash_profile   /home/test</span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/skel/.bash*  /home/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户家目录权限</span></span><br><span class="line">[root@localhost home]<span class="comment"># chown test.test test/  # 用户.用户组 用户家路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - test</span></span><br><span class="line"></span><br><span class="line">上一次登录：二 12月 14 19:05:50 CST 2021pts/0 上</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功切换用户</span></span><br><span class="line">[<span class="built_in">test</span>@localhost ~]$   </span><br></pre></td></tr></table></figure>

<h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><ul>
<li>修改或添加Linux普通用户的密码。直接影响的文件是/etc/shado</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 参数</span><br><span class="line">  -d	<span class="comment">#删除密码</span></span><br><span class="line">  -l	<span class="comment">#锁定用户密码，无法被用户自行修改</span></span><br><span class="line">  -u	<span class="comment">#解开已锁定用户密码，允许用户自行修改</span></span><br><span class="line">  -e	<span class="comment">#密码立即过期，下次登陆强制修改密码</span></span><br><span class="line">  -k	<span class="comment">#保留即将过期的用户在期满后能仍能使用</span></span><br><span class="line">  -S	<span class="comment">#查询密码状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加或修改密码</span></span><br><span class="line">当用户密码不存在的时候即为增加密码，当用户密码存在时即为修改密码。</span><br><span class="line"></span><br><span class="line"> [root@localhost home]<span class="comment"># useradd user</span></span><br><span class="line"> [root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">   user:x:1005:1005::/home/user:/bin/bash</span><br><span class="line"> [root@localhost home]<span class="comment"># tail -1 /etc/shadow</span></span><br><span class="line">   user:!!:18701:0:99999:7:::</span><br><span class="line">   </span><br><span class="line"> [root@localhost home]<span class="comment"># passwd user</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># passwd user</span></span><br><span class="line">   更改用户 user 的密码 。</span><br><span class="line">   新的 密码：</span><br><span class="line">   重新输入新的 密码：</span><br><span class="line">   passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"> [root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">   user:x:1005:1005::/home/user:/bin/bash</span><br><span class="line"> [root@localhost home]<span class="comment"># tail -1 /etc/shadow</span></span><br><span class="line"> user:$6$RApJMwf1<span class="variable">$jytlisorvavpdDmuZ4RGyuFLZaHd5C0uMqXJU0dFt</span>/Vn7Oj8tSiN7/RswvXc3LIBh6JuDOq73u2K1Uf4up476/:18979:0:99999:7:::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 免交互修改密码</span></span><br><span class="line">[root@localhost /]<span class="comment"># echo &#x27;123&#x27; | passwd --stdin user</span></span><br><span class="line">Changing password <span class="keyword">for</span> user user.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/yhz.png" alt="yhz"></p>
<h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><p>每个用户都有一个用户组，这样系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户组：某些具有相同属性的账号的集合</span><br><span class="line">	root</span><br><span class="line"><span class="comment"># 创建用户组的命令：</span></span><br><span class="line">	groupadd </span><br><span class="line">	</span><br><span class="line">	参数：</span><br><span class="line">		-g  <span class="comment">#指定用户组的GID</span></span><br><span class="line">	  -r  <span class="comment">#创建系统工作组，系统工作组的组ID小于1000</span></span><br><span class="line">    -K  <span class="comment">#覆盖配置文件“/ect/login.defs”</span></span><br><span class="line">    -o  <span class="comment">#允许添加组ID号不唯一的工作组</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">#创建组  </span></span><br><span class="line">   [root@localhost /]<span class="comment"># groupadd group1</span></span><br><span class="line">   [root@localhost /]<span class="comment"># cat /etc/group   #查看组信息</span></span><br><span class="line">    group1:x:1005:</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#指定GID创建组</span></span><br><span class="line">   [root@localhost /]<span class="comment"># groupadd -g 2001 group2</span></span><br><span class="line">   [root@localhost /]<span class="comment"># tail -1 /etc/group  #查看文件最后一行的内容</span></span><br><span class="line">    group2:x:2001:</span><br><span class="line"></span><br><span class="line">  <span class="comment">#创建系统组</span></span><br><span class="line">   [root@localhost /]<span class="comment"># groupadd -r group4</span></span><br><span class="line">   [root@localhost /]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">    group4:x:996:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改组的命令：</span></span><br><span class="line">  groupmod</span><br><span class="line"></span><br><span class="line">  参数：</span><br><span class="line">   -g  <span class="comment">#设置欲使用的组GID</span></span><br><span class="line">   -n  <span class="comment">#设置欲使用的群组名称</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#修改组GID</span></span><br><span class="line">   [root@localhost /]<span class="comment"># groupmod -g 2222 group1  #将group1的组GID改为2222</span></span><br><span class="line">   [root@localhost /]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">    group1:x:2222:</span><br><span class="line"></span><br><span class="line">  <span class="comment">#修改组名</span></span><br><span class="line">   [root@localhost /]<span class="comment"># groupmod -n new_group group1 #将组group1改名为new_group</span></span><br><span class="line">   [root@localhost /]<span class="comment"># tail -1 /etc/group  </span></span><br><span class="line">    new_group:x:2222:</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除组的命令：</span></span><br><span class="line"> groupdel</span><br><span class="line"> </span><br><span class="line">  [root@localhost /]<span class="comment"># groupdel group2</span></span><br><span class="line">  [root@localhost /]<span class="comment"># tail -5 /etc/group #已经删除了</span></span><br><span class="line">   mysql:x:27:</span><br><span class="line">   tony:x:1004:</span><br><span class="line">   group3:x:2005:</span><br><span class="line">   group4:x:996:</span><br><span class="line">   new_group:x:2222:</span><br><span class="line">   </span><br><span class="line">ps：用户组在系统中删除，如果一个组被用户占用则不能删除。用户被删除，用户基本组也会被删除</span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">  tail  <span class="comment">#tail 命令可用于查看文件的内容</span></span><br><span class="line">	-f  <span class="comment">#循环读取</span></span><br><span class="line">  -q  <span class="comment">#不显示处理信息</span></span><br><span class="line">  -v  <span class="comment">#显示详细的处理信息</span></span><br><span class="line">  -c&lt;数目&gt;  <span class="comment">#显示的字节数</span></span><br><span class="line">  -n&lt;行数&gt;  <span class="comment">#显示文件的尾部 n 行内容</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/WechatIMG1411-20211218004252145.png" alt="WechatIMG1411"></p>
<h2 id="SUDO提权"><a href="#SUDO提权" class="headerlink" title="SUDO提权"></a>SUDO提权</h2><blockquote>
<p>用于普通用提升权限的。</p>
</blockquote>
<ul>
<li><p>相关的文件：<code>/etc/sudoers</code></p>
</li>
<li><p>检查<code>/etc/sudoers</code>是否修改正确：visudo -c</p>
</li>
<li><p>sudoers文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tom       ALL=           (ALL)          ALL</span><br><span class="line">用户名称   所有机器可登陆    所有IP或主机名   所有的指令</span><br></pre></td></tr></table></figure></li>
<li><p>指令编写格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必须写全路径：which查看命令全路径</span><br><span class="line"></span><br><span class="line"># 只支持vim命令提权</span><br><span class="line">xianchen ALL=(ALL)  /usr/bin/vim</span><br><span class="line"></span><br><span class="line"># 支持所有的命令提权</span><br><span class="line">tom ALL=(ALL)  ALL</span><br><span class="line"></span><br><span class="line"># 不支持某个命令提权</span><br><span class="line">tom ALL=(ALL) ALL, !/usr/bin/vim</span><br><span class="line"></span><br><span class="line"># 不支持某个命令的部分功能</span><br><span class="line">xiaochen ALL=(ALL)   ALL, !/usr/bin/vim /root/123.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/2251663/202103/2251663-20210316184607539-1301650386.png"><img src="https://gitee.com/gengff/blogimage/raw/master/images/2251663-20210316184607539-1301650386.png" alt="img"></a></p>
<p><a href="https://img2020.cnblogs.com/blog/2251663/202103/2251663-20210316184619104-256801431.png"><img src="https://img2020.cnblogs.com/blog/2251663/202103/2251663-20210316184619104-256801431.png" alt="img"></a></p>
<p>*<strong>4*</strong>|***0***<strong>su</strong></p>
<ul>
<li><p>su - xxx 和 su xxx之间区别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、su - xxx ：相当于切换一个窗口，su xxx 仅仅切换了用户</span><br><span class="line"></span><br><span class="line">2、su - xxx ： 切换用户执行的系统文件要多于 su xxx</span><br><span class="line"></span><br><span class="line">3、su - xxx 是登录</span><br><span class="line">   su  xxx  切换用户</span><br></pre></td></tr></table></figure></li>
<li><p>Linux中的shell可以分为两类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登陆shell，需要输⼊⽤户名和密码才能进⼊Shell，⽇常接触的最多的⼀种</span><br><span class="line">⾮登陆shell，不需要输⼊⽤户和密码就能进⼊Shell,⽐如运⾏bash会开启⼀个新的会话窗⼝</span><br></pre></td></tr></table></figure>

<p>*<strong>4*</strong>|***1***<strong>bash shell配置文件介绍</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全局配置⽂件：</span><br><span class="line"> /etc/profile</span><br><span class="line"> /etc/profile.d/*.sh</span><br><span class="line"> /etc/bashrc</span><br><span class="line">个⼈配置⽂件：</span><br><span class="line"> ~/.bash_profile</span><br><span class="line"> ~/.bashrc</span><br><span class="line">profile类⽂件, 设定环境变量, 登陆前运⾏的脚本和命令。</span><br><span class="line">bashrc类⽂件, 设定本地变量, 定义命令别名</span><br><span class="line">PS: 如果全局配置和个⼈配置产⽣冲突，以个⼈配置为准。</span><br></pre></td></tr></table></figure>

<p>*<strong>4*</strong>|***2***<strong>配置文件的执行顺序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果执⾏的是登录式shell，那么配置⽂件执⾏顺序是: </span><br><span class="line">/etc/profile -&gt; /etc/profile.d/*.sh -&gt; ~/.bash_profile -&gt; ~/.bashrc -&gt; /etc/bashrc</span><br><span class="line">如果执⾏的是⾮登录式shell，那么配置⽂件执⾏顺序是:</span><br><span class="line">~/.bashrc -&gt; /etc/bashrc -&gt; /etc/profile.d/*.sh</span><br><span class="line">PS: 验证使⽤echo在每⾏添加⼀个输出即可，注意，要把输出放在⽂件的第⼀⾏。如果说要写登录执行脚本，可以配置在/.bashrc当中。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件权限管理</title>
    <url>/ad5612ad.html</url>
    <content><![CDATA[<h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p><strong>把⼀个⽤户加⼊了⼀个组，该⽤户就拥有了该组的权限，当⼀个⽤户要操作某个⽂件时，系统会依次检索该⽤户是否是该⽂件的(属主)拥有者，其次是(数组)组成员，最后是其他⼈，如果扫描到是拥有者，则具备拥有者的权限，不必往后扫描，以此类推</strong></p>
<span id="more"></span>
<h2 id="权限类型"><a href="#权限类型" class="headerlink" title="权限类型"></a>权限类型</h2><p>每一个权限拥有一个数字编号</p>
<ul>
<li><p><strong>r：可读(read)—&gt; 4</strong></p>
</li>
<li><p><strong>w：可写(write)—&gt; 2</strong></p>
</li>
<li><p><strong>x：可执⾏(execute)—&gt; 1</strong></p>
</li>
<li><p><strong>-：没有对应权限</strong></p>
<p><strong>执行脚本 == 运行脚本</strong></p>
</li>
</ul>
<h4 id="权限的归属"><a href="#权限的归属" class="headerlink" title="权限的归属"></a>权限的归属</h4><ul>
<li><strong>属主：u</strong></li>
<li><strong>属组：g</strong></li>
<li><strong>其他人：o</strong></li>
</ul>
<h2 id="权限位"><a href="#权限位" class="headerlink" title="权限位"></a>权限位</h2><p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211218190929438.png" alt="image-20211218190929438"></p>
<p>权限位主要分为三个部分，分别是属主、属组以及其他人</p>
<h4 id="rwx-：-属主—-gt-可读可写可执行"><a href="#rwx-：-属主—-gt-可读可写可执行" class="headerlink" title="rwx ： 属主—&gt;可读可写可执行"></a>rwx ： 属主—&gt;可读可写可执行</h4><h4 id="r-x-：-属组—-gt-可读可执行"><a href="#r-x-：-属组—-gt-可读可执行" class="headerlink" title="r-x    ： 属组—&gt;可读可执行"></a>r-x    ： 属组—&gt;可读可执行</h4><h4 id="rw-：-其他人—-gt-可读可写"><a href="#rw-：-其他人—-gt-可读可写" class="headerlink" title="rw-    ： 其他人—&gt;可读可写"></a>rw-    ： 其他人—&gt;可读可写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用ll命令查看文件详情，在每个文件详情最前方，有10个字符来表示文件类型和权限</span><br><span class="line">  [root@localhost ~]<span class="comment"># ll</span></span><br><span class="line">  -rw-r--r-- 1 root root    0 12月 14 19:11 1</span><br><span class="line">  drwxr-xr-x 2 root root    6 12月 18 15:51 a</span><br><span class="line">  -rwxr-xr-x 1 root root 4609 11月 21 11:43 init.sh</span><br><span class="line"></span><br><span class="line">在Linux 系统中权限是区分用户的，即属主(用户)、属组(组用户)、其他用户，第一位表示文件的类型，-代表文件，d代表目录，其他每个用户占三个字符，这里-rwxr-xr-x对应如下关系</span><br><span class="line">-    <span class="comment">#文件</span></span><br><span class="line">rwx  <span class="comment">#属主：可读可写可执行</span></span><br><span class="line">r-x  <span class="comment">#属组：可读可执行</span></span><br><span class="line">r-x  <span class="comment">#其他：可读可执行</span></span><br><span class="line"></span><br><span class="line">含义解释</span><br><span class="line">第一位：-代表文件，d代表目录</span><br><span class="line">用户、组用户、其他用户都未rwx形式，其中r表示读、w表示写、x表示可执行，-表示没有权限，拿用户组举例，r只能出现在第一个位置、w只能出现在第二个位置、x只能出现在第三位。</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/1327924-20191106101057159-461417569.png" alt="1327924-20191106101057159-461417569"></p>
<p>如果我们将出现字符（可以是r、w、x）表示为1，出现-表示为0，那么对应二进制如下，r - - = 100、- w - = 010、- - x = 001、再转换成10进制，那么读=4、写=2、可执行=1，将转换为以下关系</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/1327924-20191106101454753-1175152316.png" alt="1327924-20191106101454753-1175152316"></p>
<p>也就是说这里的数字简写了用户权限，我们也可以用数字反推权限，比如数据6，我们转换为为二进制：110，转换为：rw-，具有可读、可写权限。</p>
<p>现在我们已经明白了：-rwxr-xr-x权限含义了，这里用数字简写就是-755，这里还需要改写成0755，这里的0可以简单理解成10进制</p>
<h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod </span><br><span class="line"> 	格式：</span><br><span class="line"> 		chmod [参数] [权限表达式] [操作对象] 	</span><br><span class="line"> 	参数：</span><br><span class="line"> 		-R  : 递归增加权限</span><br><span class="line"> 		</span><br><span class="line"> 		</span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt</span></span><br><span class="line">  -rw-r--r-- 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 1、加减法：+、- 在原来的权限基础上增减</span></span><br><span class="line"> <span class="comment">#给属主增加执行权限，属组增加执行权限，其他增加写权限</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># chmod u+x,g+x,o+w /root/1.txt</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt</span></span><br><span class="line">   -rwxr-xrw- 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line">   </span><br><span class="line"> <span class="comment">#取消属主写权限，权限属组读权限，取消其他读权限</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># chmod u-w,g-r,o-r /root/1.txt</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt</span></span><br><span class="line">  -r-x--x-w- 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2、赋值：= 不管原来是什么权限就直接覆盖了</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># chmod u=rwx,g=rw,o=rx /root/1.txt</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt </span></span><br><span class="line">  -rwxrw-r-x 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、数字：不能单独设置一个，必须全部设置</span></span><br><span class="line"> <span class="comment">#给属主设置读写执行权限，属组设置读执行权限，其他设置读写权限</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># chmod 756 /root/1.txt </span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt </span></span><br><span class="line">  -rwxr-xrw- 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line">  </span><br><span class="line"> <span class="comment">#全部设置读写执行权限</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># chmod 777 /root/1.txt </span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /root/1.txt </span></span><br><span class="line">  -rwxrwxrwx 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4、-R:递归设置权限</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mkdir -p /a/b/c</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># touch /a/b/c/d.txt</span></span><br><span class="line"> </span><br><span class="line"> [root@localhost ~]<span class="comment"># chomd -R 777 /a</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /a/b</span></span><br><span class="line">  drwxrwxrwx 2 root root 19 12月 18 17:13 c</span><br><span class="line"></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll /a/b/c/d.txt</span></span><br><span class="line">  -rwxrwxrwx 1 root root 0 12月 18 17:13 /a/b/c/d.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 置空权限：=-</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 000 /root/1.txt </span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># chmod u=-,g=-,o=- /root/1.txt </span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /root/1.txt </span></span><br><span class="line"> ---------- 1 root root 0 12月 18 16:42 /root/1.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="权限的作用"><a href="#权限的作用" class="headerlink" title="权限的作用"></a>权限的作用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、权限对于用户的意义</span><br><span class="line">  1、普通用户是严格遵守权限的</span><br><span class="line">  2、root用户是高于权限</span><br><span class="line">  3、权限需要重新登才生效（su和su - 都可以）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、权限对于文件的意义</span><br><span class="line">  1、r：读取文件内容</span><br><span class="line">  2、w：修改文件内容</span><br><span class="line">  3、x：可以把文件当成一个命令/程序运行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、权限对于目录的意义</span><br><span class="line">  1、r：可以浏览该目录下子目录名和子文件名（路径的最小权限是必须拥有可执行权限）</span><br><span class="line">  2、w：创建、删除、移动（同上）</span><br><span class="line">  3、x：可以进入该目录（同上）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、在目录下，只有可读权限，无法查看文件内容（因为你无法操作目录）</span></span><br><span class="line"><span class="comment"># 2、在目录下，只有可读可写权限，无法查看文件内容（理由同上）</span></span><br><span class="line"><span class="comment"># 3、要想查看文件夹下的文件，文件夹必须至少拥有可执行权限；同时文件必须拥有可读权限</span></span><br></pre></td></tr></table></figure>

<h2 id="权限之特殊权限"><a href="#权限之特殊权限" class="headerlink" title="权限之特殊权限"></a>权限之特殊权限</h2><h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h3><ul>
<li>作用对象必须是二进制文件（cat出来是乱码的文件）</li>
<li>该文件必须拥有可执行权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 4xxx [文件名]	</span><br><span class="line">or</span><br><span class="line">chmod	u+s	[文件名]</span><br><span class="line"></span><br><span class="line"> [root@localhost ~]<span class="comment"># ll `which passwd`</span></span><br><span class="line">  -rwsr-xr-x 1 root root 27856 4月   1 2020 /usr/bin/passwd</span><br><span class="line"></span><br><span class="line">查看passwd命令的权限，我们可以看到一个不曾见到过的权限 s  </span><br><span class="line"></span><br><span class="line">而 S 权限是一个特殊权限</span><br><span class="line">	SUID 权限仅对⼆进制可执⾏⽂件有效	</span><br><span class="line">    如果执⾏者对于该⼆进制可执⾏⽂件具有 s 的权限，执⾏者将具有该⽂件的所有者的权限   </span><br><span class="line">    本权限仅在执⾏该⼆进制可执⾏⽂件的过程中有效</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 示例：    </span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - user  # 切换到普通用户user10</span></span><br><span class="line"></span><br><span class="line">[user@localhost ~]$ cat /etc/shadow  <span class="comment"># 查看用户密码文件</span></span><br><span class="line">cat: /etc/shadow: 权限不够   <span class="comment"># 显示权限不够，没办法访问 </span></span><br><span class="line"></span><br><span class="line">[user@localhost ~]$ ll /etc/shadow  <span class="comment"># 查看/etc/shadow 可以看出只有root用户才可以查看</span></span><br><span class="line">----------. 1 root root 997 6月  20 18:02 /etc/shadow</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ll `which cat`  # 登录root用户，查看cat命令</span></span><br><span class="line">-rwxr-xr-x. 1 root root 54160 10⽉ 31 2018 /usr/bin/cat</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 4755 `which cat` # 或者 chmod u+s `which cat` 修改权限</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ll `which cat`  # 现在cat命令的权限已经改成了s</span></span><br><span class="line">-rwsr-xr-x. 1 root root 54160 10⽉ 31 2018 /usr/bin/cat</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># su - user		# 再次切换到user10用户</span></span><br><span class="line">[user@localhost ~]$ cat /etc/shadow <span class="comment"># 可以看到用户密码文件的内容了    </span></span><br></pre></td></tr></table></figure>

<h3 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h3><p>SBIT 是 the restricted deletion flag or sticky bit 的简称，有时也称为Sticky。</p>
<ul>
<li>只对目录有效，用来阻止非文件的所有者删除文件，比较常见的就是/tmp目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod o+t [文件名] </span><br><span class="line">or</span><br><span class="line">chmod 1xxx [文件名]</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -dl /tmp/ # -d 参数表示不查看目录下文件信息，就查看这个目录的信息</span></span><br><span class="line">  drwxrwxrwt. 13 root root 4096 8⽉ 11 17:09 /tmp/ </span><br><span class="line"></span><br><span class="line">权限信息中最后⼀位 t 表明该⽬录被设置了 SBIT 权限。</span><br><span class="line"></span><br><span class="line">SBIT 对⽬录的作⽤是：</span><br><span class="line">  当⽤户在该⽬录下创建新⽂件或⽬录时，仅有⾃⼰和 root 才有权⼒删除，主要作⽤于⼀个共享的⽂件夹。</span><br></pre></td></tr></table></figure>

<h3 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h3><ul>
<li>用户对某一目录具有写和执行权限，该用户就可以在该目录下建立文件，如果该目录被SGID修饰，则该用户在这个目录下建立的文件都是属于这个目录所属的组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod g+s [文件名] </span><br><span class="line">or</span><br><span class="line">chmod 2xxx [文件名]</span><br><span class="line"></span><br><span class="line">ps:当 SGID 作⽤于普通⽂件时，和 SUID 类似，在执⾏该⽂件时，⽤户将获得该⽂件所属组的权限。  </span><br></pre></td></tr></table></figure>

<h2 id="Umask"><a href="#Umask" class="headerlink" title="Umask"></a>Umask</h2><h4 id="新建的文件、目录的默认权限是由umask决定的"><a href="#新建的文件、目录的默认权限是由umask决定的" class="headerlink" title="新建的文件、目录的默认权限是由umask决定的"></a>新建的文件、目录的默认权限是由umask决定的</h4><ul>
<li><p>uid &gt; 199并且属主与数组相等的⽤户下比如test ，umask: 0002    </p>
<ul>
<li>文件权限：664</li>
<li>目录权限：775</li>
</ul>
</li>
<li><p>除1之外的其他⽤户下，⽐如root⽤户，umask: 0022</p>
<ul>
<li>文件权限：644</li>
<li>目录权限：755</li>
</ul>
<p><strong>在Linux中，常用的文件的权限是666，目录的权限是777</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、文件权限计算方法：</span><br><span class="line">    文件的权限是跟 <span class="built_in">umask</span> 值相减，遇到奇数加一；遇到偶数则不变。</span><br><span class="line">2、目录权限计算方法：</span><br><span class="line">    目录的权限只要跟 <span class="built_in">umask</span> 值相减即可。</span><br><span class="line">    </span><br><span class="line">总结：<span class="built_in">umask</span>设置的越小，权限就越大，慎用	</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 默认权限</span></span><br><span class="line">  默认文件权限：644</span><br><span class="line">	默认的目录权限：755</span><br><span class="line">   </span><br><span class="line">   [root@localhost ~]<span class="comment"># touch a.txt  #创建文件</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># ll a.txt</span></span><br><span class="line">    -rw-r--r-- 1 root root 0 12月 18 20:55 a.txt  <span class="comment">#默认权限644</span></span><br><span class="line">    </span><br><span class="line">	 [root@localhost ~]<span class="comment"># mkdir b  #创建目录</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># ll -d b</span></span><br><span class="line">    drwxr-xr-x 2 root root 6 12月 18 20:57 b  <span class="comment">#默认权限755</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># umask </span></span><br><span class="line">    0022</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"><span class="comment"># 临时设置umask</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umask 000   #设置umask权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久设置umask</span></span><br><span class="line"><span class="comment">#更改配置文件</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># vim /etc/profile # 或者/etc/bashrc内容⼀样</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">&quot;`id -gn`&quot;</span> = <span class="string">&quot;`id -un`&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">umask</span> 002 <span class="comment">#表示uid⼤于等于199的默认umask值，表示普通⽤户</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">umask</span> 022 <span class="comment">#表示uid⼩于199的默认umask值，表示root</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需求：</span><br><span class="line">		要求把1个月之前修改过的日志文件删除。</span><br><span class="line"></span><br><span class="line">案例:</span><br><span class="line">	案例1：将index文件添加属主 : 可读可写可执行、属组 ：可读可写、其他人：没有任何权限</span><br><span class="line">		chmod 760 index</span><br><span class="line"></span><br><span class="line"> 	案例2：将baidu下的所有文件设置rwxr--r--</span><br><span class="line"> 		chmod -R  744  baidu/</span><br><span class="line"></span><br><span class="line"> 	案例3：将index这个文件的属组增加一个可执行权限。</span><br><span class="line"> 		chmod g+x index</span><br><span class="line"> 		chmod g+x,o-r index</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件管理</title>
    <url>/117ba17a.html</url>
    <content><![CDATA[<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h4 id="Linux-系统的单根⽬录结构"><a href="#Linux-系统的单根⽬录结构" class="headerlink" title="Linux  系统的单根⽬录结构"></a><strong>Linux  系统的单根⽬录结构</strong></h4><p>linux与windows的⽬录结构对⽐</p>
<span id="more"></span>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/2321466-20210620230259931-1963226798.png" alt=" "></p>
<h4 id="⽂件的时间"><a href="#⽂件的时间" class="headerlink" title="⽂件的时间"></a><strong>⽂件的时间</strong></h4><figure class="highlight d"><table><tr><td class="code"><pre><span class="line">ls -l ⽂件名 仅看的是⽂件的修改时间</span><br><span class="line">Linux⽂件有三种时间,⽤stat查看</span><br><span class="line">    </span><br><span class="line">例如：stat anaconda-ks.cfg</span><br><span class="line">    </span><br><span class="line">访问时间：atime，查看内容，⽤cat检测</span><br><span class="line">修改时间：mtime，修改内容</span><br><span class="line">改变时间：ctime，修改内容，修改权限等属性，凡是有改动都会变</span><br></pre></td></tr></table></figure>



<h2 id="文件类型概念说明"><a href="#文件类型概念说明" class="headerlink" title="文件类型概念说明"></a>文件类型概念说明</h2><p><strong>1、文件详细信息详解</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -lhi</span></span><br><span class="line"> 总用量 8K</span><br><span class="line"> 134319695 -rw-------. 1 root root 1.7K Dec 8 12:08 anaconda-ks.cfg</span><br><span class="line"> 134319707 -rw-r--r--  1 root root  12 Dec 13 11:48 index</span><br></pre></td></tr></table></figure>

<p>文件属性信息详述图</p>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211216191817853.png" alt="image-20211216191817853"></p>
<p><strong>2、inode编号</strong></p>
<ul>
<li>Linux系统中文件的唯一编号，就相当于身份证号。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux系统内部不使用文件名，而使用inode编号来识别文件</span><br><span class="line">  对于系统来说，文件名只是inode编号便于识别的别称或者绰号，表面上用户通过文件名打开文件</span><br><span class="line">  实际上系统内部这个过程分成立三步：</span><br><span class="line">  		首先：系统找到这个文件名对应的inode编号</span><br><span class="line">  		其次：通过ionde编号获取inode信息</span><br><span class="line">  		最后：根据ionde信息找到文件数据所在的block，读出数据</span><br><span class="line">  		</span><br><span class="line">  使用ls -i命令可以看到文件对应额inode编号</span><br><span class="line">   [root@localhost data]<span class="comment"># ls -i</span></span><br><span class="line">    16781387 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h2 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h2><p>  <strong>1、什么是硬链接</strong></p>
<ul>
<li>硬链接：不具有完整的文件结构，它的文件名直接指向文件节点，它和源文件节点一致。<ul>
<li>硬链接用来指向(保存)inode编号。</li>
</ul>
</li>
</ul>
<p><strong>2、什么是软链接</strong></p>
<ul>
<li>软链接：具有完整的文件结构，最后指向的是目标文件名，它和源文件节点不一致。<ul>
<li>相当于Windows中的快捷方式，主要用来指向(保存)对应文件的路径。    </li>
</ul>
</li>
</ul>
<p><strong>3、创建命令</strong></p>
<ul>
<li><strong>ln</strong>  默认创建的就是硬链接<ul>
<li>参数： <strong>-s</strong>  创建的就是软链接      </li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 硬链接示例：ln [源文件] [链接文件名]  </span></span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># echo &#x27;hello world&#x27; &gt;&gt; a.txt  #创建源文件添加数据</span></span><br><span class="line">    </span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls -i 1.txt  #查看的inode编号</span></span><br><span class="line">  16781390 1.txt </span><br><span class="line">     </span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ln 1.txt 2.txt   #创建硬链接</span></span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls -i 1.txt</span></span><br><span class="line">  16781390 1.txt</span><br><span class="line"> [root@localhost <span class="built_in">test</span>]<span class="comment"># ls -i 2.txt  #两个文件的inode编号一模一样，数据也一样</span></span><br><span class="line">  16781390 2.txt</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 软链接示例：ln -s [源文件] [链接文件名] </span></span><br><span class="line"> [root@localhost haha]<span class="comment"># echo &#x27;123&#x27; &gt;&gt; a.txt  #创建源文件添加数据</span></span><br><span class="line">    </span><br><span class="line"> [root@localhost haha]<span class="comment"># ls -i a.txt  #查看的inode编号</span></span><br><span class="line">  33712451 a.txt</span><br><span class="line">     </span><br><span class="line"> [root@localhost haha]<span class="comment"># ln -s a.txt b.txt  #创建软链接</span></span><br><span class="line"> [root@localhost haha]<span class="comment"># ls -i a.txt  </span></span><br><span class="line">  33712451 a.txt</span><br><span class="line"> [root@localhost haha]<span class="comment"># ls -i b.txt  #两个文件的inode编号不一样，数据也一样</span></span><br><span class="line">  33712452 b.txt</span><br><span class="line">  </span><br><span class="line">			</span><br><span class="line"><span class="comment"># 删除文件的底层逻辑</span></span><br><span class="line">   1、删除的是硬链接</span><br><span class="line">   2、判断该文件硬链接数是否为0</span><br><span class="line">   3、如果为0，则在磁盘中将其删除</span><br><span class="line">   4、如果不为0，则只删除一个硬链接</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 删除源文件软链接和硬链接的影响</span></span><br><span class="line">查看软链接文件，查看的文件不存在。和windows一样，删除源文件，快捷方式也用不了。但是删除源文件，为什么硬链接文件还可以查看呢？</span><br><span class="line">这里要简单说下i节点了。i节点是文件和目录的唯一标识，每个文件和目录必有i节点，不然操作系统就无法识别该文件或系统，就像没有上户口的黑户。linux操作系统是不识别些字母的。</span><br><span class="line"></span><br><span class="line">通俗理解：</span><br><span class="line">硬链接文件相当于文件硬链接数+1，在windows里没这个概念，删除文件删除的是硬链接数，硬链接数为0时，数据就没了</span><br><span class="line">软连接就是指向文件的路径，文件删除了，路径就不存在了，所以软连接找不到了  </span><br></pre></td></tr></table></figure>

<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux⽂件没有扩展名！！！</span><br><span class="line"></span><br><span class="line"><span class="comment">#⽅法⼀：</span></span><br><span class="line"> ls -l ⽂件名  <span class="comment">#看第⼀个字符</span></span><br><span class="line">- <span class="comment">#普通⽂件（⽂本⽂件，⼆进制，压缩⽂件，电影，图⽚。。。）,例如：/bin/ls</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># ls -l</span></span><br><span class="line">   -rw-r--r-- 1 root root   0 12月 14 19:11 1</span><br><span class="line"></span><br><span class="line">d <span class="comment">#⽬录⽂件，例如/home/ </span></span><br><span class="line">   [root@localhost home]<span class="comment"># ls -l</span></span><br><span class="line">   drwx------ 2 <span class="built_in">test</span> <span class="built_in">test</span> 63 12月 14 19:13 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b <span class="comment">#设备⽂件（块设备）存储设备硬盘，U盘，例如：/dev/sda   </span></span><br><span class="line">   [root@localhost dev]<span class="comment"># ll</span></span><br><span class="line">   brw-rw---- 1 root disk    8,   0 12月 16 19:39 sda</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c <span class="comment">#设备⽂件（字符设备）打印机，例如：/dev/ttycc</span></span><br><span class="line">   [root@localhost dev]<span class="comment"># ll</span></span><br><span class="line">   crw-rw-rw- 1 root tty     5,   0 12月 16 19:39 tty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s <span class="comment">#套接字⽂件（socket），例如： /var/lib/mysql/</span></span><br><span class="line">   [root@localhost mysql]<span class="comment"># ll</span></span><br><span class="line">   srwxrwxrwx 1 mysql mysql   0 12月 16 21:52 mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p <span class="comment">#管道⽂件，例如：/run/systemd/initctl/fifo</span></span><br><span class="line">   [root@localhost initctl]<span class="comment"># ll</span></span><br><span class="line">   prw------- 1 root root 0 12月 16 19:39 fifo</span><br><span class="line"></span><br><span class="line">l <span class="comment">#链接⽂件，例如：/bin</span></span><br><span class="line">   [root@localhost bin]<span class="comment"># ll</span></span><br><span class="line">   lrwxrwxrwx.   1 root root   6 12月 13 11:40 apropos -&gt; whatis</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">ps:通过颜⾊判断⽂件的类型是错误的！！！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备套接字文件</span></span><br><span class="line">  <span class="comment">#安装mysql数据库</span></span><br><span class="line">	 [root@localhost run]<span class="comment"># yum install mariadb* -y</span></span><br><span class="line">	<span class="comment">#启动</span></span><br><span class="line">   [root@localhost run]<span class="comment"># systemctl start mariadb    </span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment"># ⽅法⼆：大致判断文件的类型</span></span><br><span class="line">[root@xxx ~]<span class="comment"># file /etc/krb5.conf</span></span><br><span class="line">  /etc/krb5.conf: ASCII text</span><br><span class="line"></span><br><span class="line">.conf <span class="comment">#配置文件</span></span><br><span class="line">.<span class="built_in">log</span>  <span class="comment">#日志文件</span></span><br><span class="line">.sh   <span class="comment">#脚本文件</span></span><br><span class="line">.py   <span class="comment">#脚本文件 </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统目录结构</title>
    <url>/684b776b.html</url>
    <content><![CDATA[<h1 id="重要目录文件"><a href="#重要目录文件" class="headerlink" title="重要目录文件"></a>重要目录文件</h1><h2 id="网卡配置文件"><a href="#网卡配置文件" class="headerlink" title="网卡配置文件"></a>网卡配置文件</h2><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/sysconfig/network-scripts/ifcfg-eth0  </span><br><span class="line">ip a</span><br><span class="line">作用：</span><br><span class="line">1、查看网卡配置</span><br><span class="line">  [root@localhost ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line"></span><br><span class="line">  [root@localhost ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens32</span></span><br><span class="line"></span><br><span class="line">  或</span><br><span class="line">  ip address show 或 nmtui</span><br><span class="line">2、重载网卡信息</span><br><span class="line">  <span class="comment"># 方式一</span></span><br><span class="line">  [root@localhost ~]<span class="comment"># systemctl restart network</span></span><br><span class="line">  <span class="comment"># 方式二</span></span><br><span class="line">	ifdown [网卡名称] &amp;&amp; ifup [网卡名称]</span><br><span class="line">		</span><br><span class="line">  关闭网络管理器（因为已经有了network）</span><br><span class="line">		systemctl  stop NetworkManager</span><br><span class="line">		systemctl  <span class="built_in">disable</span> NetworkManager</span><br><span class="line">		或</span><br><span class="line">		systemctl  <span class="built_in">disable</span> --now  NetworkManager</span><br><span class="line">		</span><br><span class="line">3、判断SSH服务是否开启</span><br><span class="line">   [root@localhost ~]<span class="comment"># systemctl status sshd</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/1113510-20170614182256790-1747672277-20211214152247352-20211214171846597.png" alt="1113510-20170614182256790-1747672277"></p>
<h2 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/resolv.conf</span><br><span class="line">作用：用于设置DNS解析地址，网卡中配置优于此文件配置</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看DNS信息</span></span><br><span class="line">  [root@test1 data]<span class="comment"># cat /etc/reslov.conf  #临时dns配置文件</span></span><br><span class="line">  nameserver 114.114.114.114  <span class="comment">#中国电信</span></span><br><span class="line"></span><br><span class="line">   223.5.5.5/223.6.6.6	 <span class="comment">#中国阿里云</span></span><br><span class="line">   8.8.8.8 谷歌</span><br></pre></td></tr></table></figure>

<h2 id="解析映射文件"><a href="#解析映射文件" class="headerlink" title="解析映射文件"></a>解析映射文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/hosts</span><br><span class="line">作用：用于设置DNS域名与IP地址对应关系</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看解析映射文件（dns解析）</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">   127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">   ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看系统版本</span></span><br><span class="line">   [root@localhost ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">   CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure>

<h2 id="主机名称文件"><a href="#主机名称文件" class="headerlink" title="主机名称文件"></a>主机名称文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/sysconfig/network</span><br><span class="line">作用：配置主机名称信息</span><br><span class="line"></span><br><span class="line">  修改主机名</span><br><span class="line">   <span class="comment">#查看主机名：</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># ehco $HOSTNAME</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">#临时修改</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># hostname baidu</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">#永久修改</span></span><br><span class="line">    [root@baidu ~]<span class="comment"># vim /etc/hostname	  #需要重启生效</span></span><br><span class="line">    [root@baidu ~]<span class="comment"># hostnamectl set-hostname admin	#立即生效</span></span><br></pre></td></tr></table></figure>

<h2 id="磁盘挂载文件"><a href="#磁盘挂载文件" class="headerlink" title="磁盘挂载文件"></a>磁盘挂载文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/fstab</span><br><span class="line">作用：实现指定设备文件信息，进行开机自动挂载</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看磁盘挂载文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/fstab </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Mon Dec 13 11:38:54 2021</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/centos-root /        xfs     defaults    0 0  <span class="comment">#挂载在根(/)目录</span></span><br><span class="line">UUID=9f8a98b0-805c-4adf-b9ef-517a2b527f89 /boot      xfs     defaults   0 0 <span class="comment">#挂载在/boot目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="开机加载脚本"><a href="#开机加载脚本" class="headerlink" title="开机加载脚本"></a>开机加载脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/rc.local</span><br><span class="line">作用：开启开机自启动脚本</span><br><span class="line"></span><br><span class="line">1、编辑开机自启动脚本</span><br><span class="line">	vim /etc/rc.local</span><br><span class="line">	 <span class="comment">#写入</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">&#x27;hello worl&#x27;</span></span><br><span class="line">2、设置开机自启动权限</span><br><span class="line">	chmod +x /etc/rc.d/rc.local</span><br><span class="line">3、重启系统</span><br></pre></td></tr></table></figure>

<h2 id="系统启动级别文件"><a href="#系统启动级别文件" class="headerlink" title="系统启动级别文件"></a>系统启动级别文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/inittab</span><br><span class="line"></span><br><span class="line">作用：设置系统启动级别</span><br><span class="line"> 0、关机</span><br><span class="line"> 1、单用户模式(无法通过xshell的方式使用)</span><br><span class="line"> 2、多用户无网络模式</span><br><span class="line"> 3、完全多用户模式</span><br><span class="line"> 4、待定</span><br><span class="line"> 5、桌面模式</span><br><span class="line"> 6、reboot (Do NOT <span class="built_in">set</span> initdefault to this) 重启</span><br><span class="line"></span><br><span class="line">设置系统级别：</span><br><span class="line"> init [编号]	<span class="comment">#临时设置</span></span><br><span class="line"> systemctl set-default [系统启动级别]</span><br><span class="line"></span><br><span class="line">通过单用户模式修改密码</span><br><span class="line"> 1、重启</span><br><span class="line"> 2、在启动选择系统内核界面，按 e 键进入单用户模式</span><br><span class="line"> 3、找到 linux16 开头行，删除 ro ，并且在 ro 处添加 rw init=/sysroot/bin/sh</span><br><span class="line"> 4、按 ctrl + x 进行系统重新引导</span><br><span class="line"> 5、执行 chroot /sysroot</span><br><span class="line"> 6、执行 passwd root</span><br><span class="line"> 7、执行 touch /.autorelabel</span><br><span class="line"> 8、执行 Ctrl + D 重启系统</span><br></pre></td></tr></table></figure>

<h2 id="变量加载文件"><a href="#变量加载文件" class="headerlink" title="变量加载文件"></a>变量加载文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Linux中添加环境变量怎么添加呢？</span></span><br><span class="line"></span><br><span class="line">文件信息：/etc/profile</span><br><span class="line">作用：配置环境变量和别名文件</span><br><span class="line">  文件</span><br><span class="line">    /etc/profile</span><br><span class="line">    /etc/bashrc</span><br><span class="line">    ~/.bash_profile</span><br><span class="line">    ~/.bash_rc</span><br><span class="line">  文件夹</span><br><span class="line">   /etc/profile.d/</span><br><span class="line"></span><br><span class="line">增加环境变量有两种方式：</span><br><span class="line">  1、临时添加</span><br><span class="line">  2、永久添加</span><br><span class="line"></span><br><span class="line">增加环境变量的格式：</span><br><span class="line"> <span class="built_in">export</span> PYTHON_HOME=<span class="string">&#x27;D:/python&#x27;</span></span><br><span class="line">	</span><br><span class="line">查看本机的环境变量：</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$PYTHON_HOME</span>  <span class="comment">#查看某一个环境变量</span></span><br><span class="line">  printenv           <span class="comment">#查看所有的环境变量</span></span><br><span class="line"></span><br><span class="line">读取环境变量的几种情况，并且测试出使用文件的先后顺序</span><br><span class="line"> 1、重启</span><br><span class="line">  /etc/profile.d --&gt; /etc/profile --&gt; /etc/bashrc --&gt; ~/.bashrc --&gt; ~/.bash_profile</span><br><span class="line"> 2、切换用户</span><br><span class="line">  /etc/profile.d --&gt; /etc/bashrc --&gt; ~/.bashrc</span><br><span class="line">  知识储备</span><br><span class="line">    创建用户：</span><br><span class="line">      useradd [用户名]</span><br><span class="line">    切换用户：</span><br><span class="line">      su [用户名]</span><br><span class="line"> 3、重新登录用户</span><br><span class="line">  1、su - [用户名]</span><br><span class="line">   /etc/profile.d --&gt; /etc/profile --&gt; /etc/bashrc --&gt; ~/.bashrc --&gt; ~/.bash_profile</span><br><span class="line">			</span><br><span class="line">  2、ssh root@192.168.15.101</span><br><span class="line">   /etc/profile.d --&gt; /etc/profile --&gt; /etc/bashrc --&gt; ~/.bashrc --&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h2 id="登录提示文件"><a href="#登录提示文件" class="headerlink" title="登录提示文件"></a>登录提示文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/etc/motd</span><br><span class="line"></span><br><span class="line">作用：登录成功之后显示的信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文件信息：/etc/issue</span><br><span class="line"></span><br><span class="line">作用：登录系统之前显示的信息。</span><br></pre></td></tr></table></figure>

<h2 id="编译安装目录"><a href="#编译安装目录" class="headerlink" title="编译安装目录"></a>编译安装目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件信息：/usr/<span class="built_in">local</span>  <span class="comment">#安装第三方软件的目录</span></span><br><span class="line"></span><br><span class="line">作用：编译安装软件的默认目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下载rpm安装包</span><br><span class="line">  <span class="comment"># yum安装python</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># yum install python3</span></span><br><span class="line">  <span class="comment"># 查看软件安装路径</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># which python3</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">知识储备：当前为DVD镜像需要设置阿里云的源</span><br><span class="line"> <span class="comment">#第一步：把之前的源备份换个位置</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># mv /etc/yum.repos.d/* /etc/yum.repos.d/bak</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#第二步：下载阿里云源repo文件</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#第三步：下载阿里云源的epel文件</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/image-20211214173804157.png" alt="image-20211214173804157"></p>
<h2 id="重要日志文件"><a href="#重要日志文件" class="headerlink" title="重要日志文件"></a>重要日志文件</h2><ul>
<li>系统日志目录：**/var**<ul>
<li>绝大部分的日志都存放在该目录下</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">系统日志文件</span><br><span class="line">文件信息：/var/<span class="built_in">log</span>/messages</span><br><span class="line">作用：软件安装运行以及系统运行异常日志文件</span><br><span class="line"></span><br><span class="line">  <span class="comment">#查看日志</span></span><br><span class="line">  [root@localhost /]<span class="comment"># cat /var/log/messages</span></span><br></pre></td></tr></table></figure>

<h2 id="重要信息文件"><a href="#重要信息文件" class="headerlink" title="重要信息文件"></a>重要信息文件</h2><ul>
<li>保存系统运行状态的目录：**/proc**</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">保存CPU信息情况的文件</span><br><span class="line">文件信息：：/proc/cpuinfo</span><br><span class="line">相关命令：lscpu</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">保存内存信息情况的文件</span><br><span class="line">文件信息：/proc/meminfo</span><br><span class="line">相关命令：free </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">保存系统负载信息情况的文件，用于衡量系统繁忙程度</span><br><span class="line">文件信息：/proc/loadavg</span><br><span class="line">相关命令：w</span><br><span class="line">  [root@localhost /]<span class="comment"># cat /proc/loadavg  #查看CPU负载</span></span><br><span class="line">    0.00  <span class="comment">#1分钟内的CPU负载</span></span><br><span class="line">    0.01  <span class="comment">#5分钟内的CPU负载</span></span><br><span class="line">    0.05  <span class="comment">#15分钟内的CPU负载</span></span><br><span class="line"></span><br><span class="line"> 负载：当前系统的所有进程占用CPU的时间比</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">保存系统挂载信息文件</span><br><span class="line">文件信息：/proc/mounts</span><br><span class="line">  mount</span><br><span class="line">  umount</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim的使用</title>
    <url>/627226e0.html</url>
    <content><![CDATA[<h1 id="系统快捷键"><a href="#系统快捷键" class="headerlink" title="系统快捷键"></a>系统快捷键</h1><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、历史命令信息：上下键</span><br><span class="line">2、清屏命令：ctrl + l | clear</span><br><span class="line">3、中断取消命令执行过程 ： ctrl + c</span><br><span class="line">4、快速移动光标到行首尾：ctrl + a/e</span><br><span class="line">5、将光标到行首信息剪切：ctrl + u</span><br><span class="line">6、将剪切的内容进行粘贴：ctrl + y</span><br><span class="line">7、将光标到行尾信息剪切：ctrl + k</span><br><span class="line">8、锁定系统窗口信息状态：ctrl + s</span><br><span class="line">9、解锁系统窗口信息状态：ctrl + q</span><br><span class="line">10、搜索最近执行过的指令：ctrl + r</span><br><span class="line">11、命令行中快速移动光标：ctrl + 方向键</span><br><span class="line">12、退出当前的登录，相当于<span class="built_in">logout</span>：ctrl+d</span><br><span class="line">13、删除当前光标向前一组字符串，以空格为分隔符：ctrl+w</span><br><span class="line">14、杀死当前进程：ctrl+z </span><br><span class="line">15、系统命令信息补全功能：tab</span><br></pre></td></tr></table></figure>



<h1 id="文件管理基础命令"><a href="#文件管理基础命令" class="headerlink" title="文件管理基础命令"></a>文件管理基础命令</h1><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>复制文件：主要可以起到数据备份的作用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy的缩写cp。主要作用就是复制、拷贝，没有-f选项，强制覆盖只能转义</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">	cp [参数] [被复制文件的路径] [复制到的新路径]</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">	-r : 递归复制，复制目录时所使用的</span><br><span class="line">	-p : 保持属性（时间戳、大小等）</span><br><span class="line">  -d : 复制的时候保证软连接</span><br><span class="line">  -a : 保证某些属性不变。相当于-rpd，上面三种</span><br><span class="line">  -t : 把源文件的位置与目标目录的位置进行交换，在批量拷贝文件时使用</span><br><span class="line">  -i : 默认执行，当拷贝的文件在目标目录已经存在时，提示是否覆盖</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">   案例1：将/root目录下anaconda-ks.cfg复制到/tmp目录</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp /root/anaconda-ks.cfg /tmp</span></span><br><span class="line">	</span><br><span class="line">   案例2：将/root目录下的<span class="built_in">test</span>文件夹及其内部的文件复制到/tmp中</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp -r /root/test /tmp</span></span><br><span class="line">		</span><br><span class="line">     补充：在linux中，文件夹是不可以直接复制。</span><br><span class="line">	</span><br><span class="line">   案例3：将/etc/hosts和/etc/resolv.conf 复制到/tmp目录中</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp /etc/hosts /etc/resolv.conf  /tmp</span></span><br><span class="line"></span><br><span class="line">注意：在linux没有提示就是做好的结果</span><br><span class="line"></span><br><span class="line">补充：Esc + . : 上一条命令的最后一个元素</span><br><span class="line">	 ls -l 等价于 ll</span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">   linux中的链接相当于快捷方式。</span><br><span class="line">   <span class="built_in">stat</span> : 查看文件详细属性。</span><br></pre></td></tr></table></figure>

<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>移动文件：移动文件相当于剪切</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">负责移动或者重命名，移动目录的时候最好是加/避免改名操作</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">	mv [移动文件的原路径] [移动文件的新路径]</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">	案例1：将/root目录下的1.txt移动到/opt目录中</span><br><span class="line">    [root@localhost ~]<span class="comment"># mv /root/1.txt /opt</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 移动文件夹</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># mv test/ /mnt/</span></span><br></pre></td></tr></table></figure>

<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除文件：rm 是一个物理删除的命令，系统中的危险命令</p>
<p>删除文件有两种方式：</p>
<ul>
<li>1、物理删除：直接删除文件。</li>
<li>2、逻辑删除：将文件隐藏，没有直接删除。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">	rm [参数] [需要删除文件的路径]</span><br><span class="line">参数：</span><br><span class="line">	-f : 不提示强制删除</span><br><span class="line">	-r : 递归删除目录及其内容</span><br><span class="line">	-i : 每次删除前提示是否确认删除</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">	案例1：将/root目录下的1.txt删除</span><br><span class="line">		[root@localhost ~]<span class="comment"># rm 1.txt </span></span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -f 1.txt </span></span><br><span class="line">	</span><br><span class="line">	案例2：删除/root目录下的<span class="built_in">test</span>文件夹及其内部所有的文件</span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -r /root/test/</span></span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -rf /root/test/</span></span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">   在linux系统中，不能够直接删除文件夹。</span><br><span class="line">   linux系统中禁止使用：</span><br><span class="line">      rm -rf /* <span class="comment"># 表示删除目录下的所有文件</span></span><br><span class="line"></span><br><span class="line">解决rm命令误操作</span><br><span class="line">  将rm命令改一个名称。</span><br><span class="line">	</span><br><span class="line">知识储备：</span><br><span class="line">  查看命令存放路径：<span class="built_in">which</span></span><br></pre></td></tr></table></figure>

<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>系统别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">	<span class="built_in">alias</span> xxx=<span class="string">&#x27;命令&#x27;</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">alias</span>  ： 查看系统别名</span><br><span class="line">	<span class="built_in">alias</span> rm=<span class="string">&#x27;xxx&#x27;</span> ： 设置系统别名</span><br><span class="line"></span><br><span class="line">不使用别名，就在命令之前增加\ </span><br><span class="line">	[root@localhost ~]<span class="comment"># \rm 1.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h2><p><strong>什么是vim</strong></p>
<p>vi和vim是Linux常用文本编辑工具，具有很强大的编辑功能，vim是vi的升级版编辑器</p>
<p><strong>为什么要使用VIM</strong><br>因为Linux系统一切皆为文件，而我们工作最多的就是修改某个服务的配置(其实就是修改文件内容)。<br>也就是说如果没有vi/vim，我们很多工作都无法完成。PS: vim是学习linux最重要的命令之一</p>
<p><strong>VI与VIM有什么区别</strong><br>vi和vim都是文本编辑器，只不过vim是vi的增强版，比vi多了语法高亮显示，其他编辑功能几乎无差，所以使用vi还是vim取决个人习惯。(相当于windows系统下的文本编辑软件“记事本”与”notepad++”的区别)</p>
<p>PS：因为前期最小化安装CentOS系统，所以默认情况下没有vim命令，但可以使用yum install vim -y</p>
<p><strong>如何使用VIM编辑器</strong></p>
<ul>
<li>vim编辑器中有三种模式<ul>
<li>命令模式：主要是使用各种快捷键，进入修改文件的第一个模式</li>
<li>末行模式：主要用于保存或退出文本。</li>
<li>编辑模式：主要进行文本内容编辑和修改</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/vim%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F.png" alt="vim三种模式"></p>
<p>小结: vim编辑打开文件整体流程如下:<br>1.默认打开文件处于普通模式<br>2.从普通模式切换至编辑模式需要使用a、i、o<br>3.编辑模式修改完毕后需要先使用ECS返回普通模式<br>4.在普通模式输入”:”或”/“进入命令模式，可实现文件的保存与退出。<br>PS: 在vim中，无法直接从编辑模式切换到命令模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装vim </span><br><span class="line">	yum install vim -y</span><br><span class="line">	</span><br><span class="line">2、打开编辑文件</span><br><span class="line">	[root@localhost ~]<span class="comment"># vim 1.txt</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">3、普通模式：命令光标快速移动快捷方式</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.命令光标跳转</span></span><br><span class="line">G     <span class="comment">#快速切换光标到底行  </span></span><br><span class="line">gg    <span class="comment">#快速切换光标到首行  </span></span><br><span class="line">ngg   <span class="comment">#光标跳转至当前文件内的N行</span></span><br><span class="line">$     <span class="comment">#快速跳转到行尾</span></span><br><span class="line">^|0   <span class="comment">#快速跳转到行首</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.快速跳转到指定行</span></span><br><span class="line">		1、进入末行模式</span><br><span class="line">		2、输入跳转的行数</span><br><span class="line">		3、回车</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.快速复制文本内容信息</span></span><br><span class="line">yy    <span class="comment">#复制当前光标所在的行</span></span><br><span class="line">nyy   <span class="comment">#复制当前光标及光标向下的n行</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#4.快速粘贴文本内容</span></span><br><span class="line">p(小)	<span class="comment">#在当前光标的下一行粘贴</span></span><br><span class="line">P(大)  <span class="comment">#在当前光标的上一行粘贴</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 删除文本内容</span></span><br><span class="line">dd    <span class="comment">#删除当前光标所在行</span></span><br><span class="line">ndd   <span class="comment">#删除当前光标所在行以及向下的n行</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#6.回撤</span></span><br><span class="line">u         <span class="comment">#撤销上一次的操作</span></span><br><span class="line">ctrl + r	<span class="comment">#退回上一次回撤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、进入编辑模式(从普通模式进入到编辑模式)</span><br><span class="line">	i	   <span class="comment">#在光标之前输入</span></span><br><span class="line">	o	   <span class="comment">#在光标下新创建一行空白内容</span></span><br><span class="line">	a	   <span class="comment">#在光标之后输入</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">5.文件保存与退出</span><br><span class="line"><span class="comment">#1、进入末行模式:</span></span><br><span class="line"><span class="comment">#2、操作</span></span><br><span class="line">:w      <span class="comment">#保存当前状态</span></span><br><span class="line">:w!     <span class="comment">#强制保存当前状态</span></span><br><span class="line">:q      <span class="comment">#退出当前文档(文档必须保存才能退出)</span></span><br><span class="line">:q!     <span class="comment">#强制退出文档不会修改当前内容</span></span><br><span class="line">:wq     <span class="comment">#先保存，在退出</span></span><br><span class="line">:wq!    <span class="comment">#强制保存并退出</span></span><br><span class="line">:x      <span class="comment">#先保存，在退出</span></span><br><span class="line">ZZ      <span class="comment">#保存退出, shfit+zz</span></span><br><span class="line">:number <span class="comment">#跳转至对应的行号  </span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">6.显示行号</span><br><span class="line"><span class="comment">#1、进入末行模式:</span></span><br><span class="line"><span class="comment">#2、输入:set nu</span></span><br><span class="line"><span class="comment">#3、回车</span></span><br><span class="line">	</span><br><span class="line">  </span><br><span class="line">7.取消行号</span><br><span class="line"><span class="comment">#1、进入末行模式</span></span><br><span class="line"><span class="comment">#2、输入:set nonu</span></span><br><span class="line"><span class="comment">#3、回车</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.文件内容查找</span><br><span class="line"><span class="comment">#1、进入命令模式</span></span><br><span class="line"><span class="comment">#2、输入/</span></span><br><span class="line"><span class="comment">#3、输入搜索的内容</span></span><br><span class="line"><span class="comment">#4、回车</span></span><br><span class="line">		</span><br><span class="line">n    <span class="comment">#下一个，按搜索到的内容依次往下进行查找</span></span><br><span class="line">N    <span class="comment">#上一个，按搜索到的内容依次往上进行查找</span></span><br><span class="line"></span><br><span class="line">:<span class="built_in">set</span> ic   <span class="comment">#忽略大小写，在搜索的时候有用</span></span><br><span class="line">:<span class="built_in">set</span> ai   <span class="comment">#自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> list <span class="comment">#显示制表符(空行、tab键)</span></span><br><span class="line"></span><br><span class="line">9.可视化编辑</span><br><span class="line"><span class="comment">#1、ctrl + v </span></span><br><span class="line"><span class="comment">#2、编辑：Shift + i</span></span><br><span class="line"><span class="comment">#3、按 Esc键退出即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10、解决vim编辑异常</span><br><span class="line">	1、删除.1.txt.swp</span><br><span class="line">	2、继续编辑（-r）</span><br><span class="line">		[root@localhost ~]<span class="comment"># vim -r 1.txt</span></span><br><span class="line">	3、放弃编辑（-n）</span><br><span class="line">		[root@localhost ~]<span class="comment"># vim -n 1.txt</span></span><br><span class="line">		</span><br><span class="line">知识储备</span><br><span class="line">  实时监控文件内容变化：</span><br><span class="line">		tail -f [要监控的文件]</span><br><span class="line">	</span><br><span class="line">  演示vim编辑异常</span><br><span class="line">		1、查看vim进程</span><br><span class="line">      [root@localhost ~]<span class="comment"># ps -ef | grep vim</span></span><br><span class="line">		2、杀死vim进程</span><br><span class="line">      [root@localhost ~]<span class="comment"># kill -9 pid</span></span><br><span class="line">			</span><br><span class="line">  批量复制</span><br><span class="line">		[root@localhost ~]<span class="comment"># while true;do echo &quot;Hello World&quot; &gt;&gt; 1.txt; done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/vim%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vim生命周期"></p>
<h2 id="cp-1"><a href="#cp-1" class="headerlink" title="cp"></a>cp</h2><p>复制文件：主要可以起到数据备份的作用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy的缩写cp。主要作用就是复制、拷贝，没有-f选项，强制覆盖只能转义</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">	cp [参数] [被复制文件的路径] [复制到的新路径]</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">	-r : 递归复制，复制目录时所使用的</span><br><span class="line">	-p : 保持属性（时间戳、大小等）</span><br><span class="line">  -d : 复制的时候保证软连接</span><br><span class="line">  -a : 保证某些属性不变。相当于-rpd，上面三种</span><br><span class="line">  -t : 把源文件的位置与目标目录的位置进行交换，在批量拷贝文件时使用</span><br><span class="line">  -i : 默认执行，当拷贝的文件在目标目录已经存在时，提示是否覆盖</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">   案例1：将/root目录下anaconda-ks.cfg复制到/tmp目录</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp /root/anaconda-ks.cfg /tmp</span></span><br><span class="line">	</span><br><span class="line">   案例2：将/root目录下的<span class="built_in">test</span>文件夹及其内部的文件复制到/tmp中</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp -r /root/test /tmp</span></span><br><span class="line">		</span><br><span class="line">     补充：在linux中，文件夹是不可以直接复制。</span><br><span class="line">	</span><br><span class="line">   案例3：将/etc/hosts和/etc/resolv.conf 复制到/tmp目录中</span><br><span class="line">    [root@localhost ~]<span class="comment"># cp /etc/hosts /etc/resolv.conf  /tmp</span></span><br><span class="line"></span><br><span class="line">注意：在linux没有提示就是做好的结果</span><br><span class="line"></span><br><span class="line">补充：Esc + . : 上一条命令的最后一个元素</span><br><span class="line">	 ls -l 等价于 ll</span><br><span class="line"></span><br><span class="line">知识储备：</span><br><span class="line">   linux中的链接相当于快捷方式。</span><br><span class="line">   <span class="built_in">stat</span> : 查看文件详细属性。</span><br></pre></td></tr></table></figure>

<h2 id="mv-1"><a href="#mv-1" class="headerlink" title="mv"></a>mv</h2><p>移动文件：移动文件相当于剪切</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">负责移动或者重命名，移动目录的时候最好是加/避免改名操作</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">	mv [移动文件的原路径] [移动文件的新路径]</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">	案例1：将/root目录下的1.txt移动到/opt目录中</span><br><span class="line">    [root@localhost ~]<span class="comment"># mv /root/1.txt /opt</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 移动文件夹</span></span><br><span class="line">    [root@localhost ~]<span class="comment"># mv test/ /mnt/</span></span><br></pre></td></tr></table></figure>

<h2 id="rm-1"><a href="#rm-1" class="headerlink" title="rm"></a>rm</h2><p>删除文件：rm 是一个物理删除的命令，系统中的危险命令</p>
<p>删除文件有两种方式：</p>
<ul>
<li>1、物理删除：直接删除文件。</li>
<li>2、逻辑删除：将文件隐藏，没有直接删除。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">	rm [参数] [需要删除文件的路径]</span><br><span class="line">参数：</span><br><span class="line">	-f : 不提示强制删除</span><br><span class="line">	-r : 递归删除目录及其内容</span><br><span class="line">	-i : 每次删除前提示是否确认删除</span><br><span class="line">	</span><br><span class="line">案例：</span><br><span class="line">	案例1：将/root目录下的1.txt删除</span><br><span class="line">		[root@localhost ~]<span class="comment"># rm 1.txt </span></span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -f 1.txt </span></span><br><span class="line">	</span><br><span class="line">	案例2：删除/root目录下的<span class="built_in">test</span>文件夹及其内部所有的文件</span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -r /root/test/</span></span><br><span class="line">		[root@localhost ~]<span class="comment"># rm -rf /root/test/</span></span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">   在linux系统中，不能够直接删除文件夹。</span><br><span class="line">   linux系统中禁止使用：</span><br><span class="line">      rm -rf /* <span class="comment"># 表示删除目录下的所有文件</span></span><br><span class="line"></span><br><span class="line">解决rm命令误操作</span><br><span class="line">  将rm命令改一个名称。</span><br><span class="line">	</span><br><span class="line">知识储备：</span><br><span class="line">  查看命令存放路径：<span class="built_in">which</span></span><br></pre></td></tr></table></figure>

<h2 id="vi-vim编辑器-1"><a href="#vi-vim编辑器-1" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h2><p><strong>什么是vim</strong></p>
<p>vi和vim是Linux常用文本编辑工具，具有很强大的编辑功能，vim是vi的升级版编辑器</p>
<p><strong>为什么要使用VIM</strong><br>因为Linux系统一切皆为文件，而我们工作最多的就是修改某个服务的配置(其实就是修改文件内容)。<br>也就是说如果没有vi/vim，我们很多工作都无法完成。PS: vim是学习linux最重要的命令之一</p>
<p><strong>VI与VIM有什么区别</strong><br>vi和vim都是文本编辑器，只不过vim是vi的增强版，比vi多了语法高亮显示，其他编辑功能几乎无差，所以使用vi还是vim取决个人习惯。(相当于windows系统下的文本编辑软件“记事本”与”notepad++”的区别)</p>
<p>PS：因为前期最小化安装CentOS系统，所以默认情况下没有vim命令，但可以使用yum install vim -y</p>
<p><strong>如何使用VIM编辑器</strong></p>
<ul>
<li>vim编辑器中有三种模式<ul>
<li>命令模式：主要是使用各种快捷键，进入修改文件的第一个模式</li>
<li>末行模式：主要用于保存或退出文本。</li>
<li>编辑模式：主要进行文本内容编辑和修改</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/vim%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F.png" alt="vim三种模式"></p>
<p>小结: vim编辑打开文件整体流程如下:<br>1.默认打开文件处于普通模式<br>2.从普通模式切换至编辑模式需要使用a、i、o<br>3.编辑模式修改完毕后需要先使用ECS返回普通模式<br>4.在普通模式输入”:”或”/“进入命令模式，可实现文件的保存与退出。<br>PS: 在vim中，无法直接从编辑模式切换到命令模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装vim </span><br><span class="line">	yum install vim -y</span><br><span class="line">	</span><br><span class="line">2、打开编辑文件</span><br><span class="line">	[root@localhost ~]<span class="comment"># vim 1.txt</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">3、普通模式：命令光标快速移动快捷方式</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.命令光标跳转</span></span><br><span class="line">G     <span class="comment">#快速切换光标到底行  </span></span><br><span class="line">gg    <span class="comment">#快速切换光标到首行  </span></span><br><span class="line">ngg   <span class="comment">#光标跳转至当前文件内的N行</span></span><br><span class="line">$     <span class="comment">#快速跳转到行尾</span></span><br><span class="line">^|0   <span class="comment">#快速跳转到行首</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.快速跳转到指定行</span></span><br><span class="line">		1、进入末行模式</span><br><span class="line">		2、输入跳转的行数</span><br><span class="line">		3、回车</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.快速复制文本内容信息</span></span><br><span class="line">yy    <span class="comment">#复制当前光标所在的行</span></span><br><span class="line">nyy   <span class="comment">#复制当前光标及光标向下的n行</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#4.快速粘贴文本内容</span></span><br><span class="line">p(小)	<span class="comment">#在当前光标的下一行粘贴</span></span><br><span class="line">P(大)  <span class="comment">#在当前光标的上一行粘贴</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 删除文本内容</span></span><br><span class="line">dd    <span class="comment">#删除当前光标所在行</span></span><br><span class="line">ndd   <span class="comment">#删除当前光标所在行以及向下的n行</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#6.回撤</span></span><br><span class="line">u         <span class="comment">#撤销上一次的操作</span></span><br><span class="line">ctrl + r	<span class="comment">#退回上一次回撤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、进入编辑模式(从普通模式进入到编辑模式)</span><br><span class="line">	i	   <span class="comment">#在光标之前输入</span></span><br><span class="line">	o	   <span class="comment">#在光标下新创建一行空白内容</span></span><br><span class="line">	a	   <span class="comment">#在光标之后输入</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">5.文件保存与退出</span><br><span class="line"><span class="comment">#1、进入末行模式:</span></span><br><span class="line"><span class="comment">#2、操作</span></span><br><span class="line">:w      <span class="comment">#保存当前状态</span></span><br><span class="line">:w!     <span class="comment">#强制保存当前状态</span></span><br><span class="line">:q      <span class="comment">#退出当前文档(文档必须保存才能退出)</span></span><br><span class="line">:q!     <span class="comment">#强制退出文档不会修改当前内容</span></span><br><span class="line">:wq     <span class="comment">#先保存，在退出</span></span><br><span class="line">:wq!    <span class="comment">#强制保存并退出</span></span><br><span class="line">:x      <span class="comment">#先保存，在退出</span></span><br><span class="line">ZZ      <span class="comment">#保存退出, shfit+zz</span></span><br><span class="line">:number <span class="comment">#跳转至对应的行号  </span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">6.显示行号</span><br><span class="line"><span class="comment">#1、进入末行模式:</span></span><br><span class="line"><span class="comment">#2、输入:set nu</span></span><br><span class="line"><span class="comment">#3、回车</span></span><br><span class="line">	</span><br><span class="line">  </span><br><span class="line">7.取消行号</span><br><span class="line"><span class="comment">#1、进入末行模式</span></span><br><span class="line"><span class="comment">#2、输入:set nonu</span></span><br><span class="line"><span class="comment">#3、回车</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.文件内容查找</span><br><span class="line"><span class="comment">#1、进入命令模式</span></span><br><span class="line"><span class="comment">#2、输入/</span></span><br><span class="line"><span class="comment">#3、输入搜索的内容</span></span><br><span class="line"><span class="comment">#4、回车</span></span><br><span class="line">		</span><br><span class="line">n    <span class="comment">#下一个，按搜索到的内容依次往下进行查找</span></span><br><span class="line">N    <span class="comment">#上一个，按搜索到的内容依次往上进行查找</span></span><br><span class="line"></span><br><span class="line">:<span class="built_in">set</span> ic   <span class="comment">#忽略大小写，在搜索的时候有用</span></span><br><span class="line">:<span class="built_in">set</span> ai   <span class="comment">#自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> list <span class="comment">#显示制表符(空行、tab键)</span></span><br><span class="line"></span><br><span class="line">9.可视化编辑</span><br><span class="line"><span class="comment">#1、ctrl + v </span></span><br><span class="line"><span class="comment">#2、编辑：Shift + i</span></span><br><span class="line"><span class="comment">#3、按 Esc键退出即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10、解决vim编辑异常</span><br><span class="line">	1、删除.1.txt.swp</span><br><span class="line">	2、继续编辑（-r）</span><br><span class="line">		[root@localhost ~]<span class="comment"># vim -r 1.txt</span></span><br><span class="line">	3、放弃编辑（-n）</span><br><span class="line">		[root@localhost ~]<span class="comment"># vim -n 1.txt</span></span><br><span class="line">		</span><br><span class="line">知识储备</span><br><span class="line">  实时监控文件内容变化：</span><br><span class="line">		tail -f [要监控的文件]</span><br><span class="line">	</span><br><span class="line">  演示vim编辑异常</span><br><span class="line">		1、查看vim进程</span><br><span class="line">      [root@localhost ~]<span class="comment"># ps -ef | grep vim</span></span><br><span class="line">		2、杀死vim进程</span><br><span class="line">      [root@localhost ~]<span class="comment"># kill -9 pid</span></span><br><span class="line">			</span><br><span class="line">  批量复制</span><br><span class="line">		[root@localhost ~]<span class="comment"># while true;do echo &quot;Hello World&quot; &gt;&gt; 1.txt; done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/gengff/blogimage/raw/master/images/vim%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vim生命周期"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python-并发编程</title>
    <url>/59b85335.html</url>
    <content><![CDATA[<h2 id="操作系统相关"><a href="#操作系统相关" class="headerlink" title="操作系统相关"></a>操作系统相关</h2><blockquote>
<p>操作系统就是一个协调、管理和控制计算机硬件资源和软件资源的控制程序</p>
</blockquote>
<span id="more"></span>
<h3 id="多道技术"><a href="#多道技术" class="headerlink" title="多道技术"></a>多道技术</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一 操作系统的作用：</span><br><span class="line">    <span class="number">1</span>：隐藏丑陋复杂的硬件接口，提供良好的抽象接口</span><br><span class="line">    <span class="number">2</span>：管理、调度进程，并且将多个进程对硬件的竞争变得有序</span><br><span class="line"></span><br><span class="line">二 多道技术：</span><br><span class="line">    <span class="number">1.</span>产生背景：针对单核，实现并发</span><br><span class="line">    ps：</span><br><span class="line">    现在的主机一般是多核，那么每个核都会利用多道技术</span><br><span class="line">    有<span class="number">4</span>个cpu，运行于cpu1的某个程序遇到io阻塞，会等到io结束再重新调度，会被调度到<span class="number">4</span>个</span><br><span class="line">    cpu中的任意一个，具体由操作系统调度算法决定。</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>空间上的复用：如内存中同时有多道程序</span><br><span class="line">    <span class="number">3.</span>时间上的复用：复用一个cpu的时间片</span><br><span class="line">    </span><br><span class="line">强调：CPU遇到I/O切，占用CPU时间过长也切，核心在于切之前将进程的状态保存下来，这样</span><br><span class="line">     才能保证下次切换回来时，能基于上次切走的位置继续运行</span><br></pre></td></tr></table></figure>

<h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><ul>
<li>进程:程序运行的过程，是一个动态的概念</li>
<li>程序:是一系列的代码文件，是一个静态的概念</li>
</ul>
<h3 id="并发、并行和串行"><a href="#并发、并行和串行" class="headerlink" title="并发、并行和串行"></a>并发、并行和串行</h3><ul>
<li>并发:是伪并行，多个任务看起来同时运行，单个CPU+多道技术就可以实现并发(并行也属于并发)</li>
<li>并行:多个任务真正意义上的同时运行，只有具备多个CPU才能实现并行</li>
<li>串行:一个任务运行完毕后才能开启下一个任务</li>
</ul>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/9Ihf9e.jpg" alt="9Ihf9e"></p>
<h3 id="提交任务的两种方式"><a href="#提交任务的两种方式" class="headerlink" title="提交任务的两种方式"></a>提交任务的两种方式</h3><ul>
<li><p>同步:发出一个功能调用时，在没有得到结果之前，该调用就不会返回</p>
</li>
<li><p>异步:当一个异步功能调用发出之后,调用者不能立刻得到结果，当该异步功能完成后，通过状态、通知或回调来通知调用者</p>
</li>
</ul>
<h3 id="一个任务运行的三种状态"><a href="#一个任务运行的三种状态" class="headerlink" title="一个任务运行的三种状态"></a>一个任务运行的三种状态</h3><ul>
<li><p>运行态:当前进程正在被CPU执行</p>
</li>
<li><p>阻塞态:正在执行的进程，由于等待某个事件而无法执行时，如遇到I/O</p>
</li>
<li><p>就绪态:当前进程没有被CPU执行</p>
</li>
</ul>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/RqtvS8.jpg" alt="RqtvS8"></p>
<h2 id="multiprocessing模块"><a href="#multiprocessing模块" class="headerlink" title="multiprocessing模块"></a>multiprocessing模块</h2><p>python中的多线程无法利用多核优势(<code>os.cpu_count()</code>查看)，在python大部分情况使用多进程，python提供了multipprocessing模块</p>
<p>multiprocess模块功能众多，支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件</p>
<p>与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内</p>
<h3 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><h5 id="创建进程的类"><a href="#创建进程的类" class="headerlink" title="创建进程的类"></a>创建进程的类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由改类实例化的对象，表示一个子进程中的任务，还没有启动</span></span><br><span class="line">Process([group [,target [, name [, args [, kwargs]]]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 需要使用关键字的方式来指定参数</span></span><br><span class="line"><span class="comment"># 2. args指定的为传给target函数的位置参数，是一个元组形式，必须有逗号</span></span><br></pre></td></tr></table></figure>

<h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">group  参数未使用，值始终为<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">target  表示调用对象，即子进程要执行的任务</span><br><span class="line"></span><br><span class="line">agrs  表示调用对象位置参数，是一个元组，agrs=(<span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">kwargs  表示调用对象的字典，kwargs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">name  表示子进程的名称</span><br></pre></td></tr></table></figure>

<h5 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.start()  启动进程</span><br><span class="line">  </span><br><span class="line">p.run()  进程启动时的运行方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 </span><br><span class="line"></span><br><span class="line">p.terminate()  强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，</span><br><span class="line">    		  使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</span><br><span class="line"></span><br><span class="line">p.is_alive()  判断是否运行，值为<span class="literal">True</span>或<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">p.join([timeout])  主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是</span><br><span class="line">      可选的 超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程</span><br></pre></td></tr></table></figure>

<h5 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.daemon  默认值为<span class="literal">False</span>，如果设为<span class="literal">True</span>，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且此时					p不能创建自己的新进程，必须在p.start()之前设置</span><br><span class="line"></span><br><span class="line">p.name  进程名称</span><br><span class="line"></span><br><span class="line">p.pid  进程的pid</span><br><span class="line"></span><br><span class="line">p.exitcode  进程在运行时为<span class="literal">None</span>、如果为–N，表示被信号N结束</span><br><span class="line"></span><br><span class="line">p.authkey  进程的身份验证键,默认是由os.urandom()随机生成的<span class="number">32</span>字符的字符串。这个键的用途是为涉及网络连接的        底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote>
<p>在Windows中<code>Process()</code>必须放到<code>if name == &#39;main&#39;:</code>下</p>
</blockquote>
<h5 id="开启进程方式一"><a href="#开启进程方式一" class="headerlink" title="开启进程方式一"></a>开启进程方式一</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;父进程: %s , 自己进程 %s 正在运行&#x27;</span> % (os.getppid(), os.getpid()))</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;父进程: %s , 自己进程 %s 正在运行&#x27;</span> % (os.getppid(), os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程 %s &#x27;</span> % os.getpid())</span><br></pre></td></tr></table></figure>

<h5 id="开启进程方式二"><a href="#开启进程方式二" class="headerlink" title="开启进程方式二"></a>开启进程方式二</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;父进程 %s , 自己 %s 正在运行&#x27;</span> % (os.getppid(), os.getpid()))</span><br><span class="line">        time.sleep(self.n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;父进程 %s , 自己 %s 正在运行&#x27;</span> % (os.getppid(), os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = MyProcess(<span class="number">3</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程 %s &#x27;</span> % os.getpid())</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>os.getpid()</code>获取当前进程pid</p>
<p><code>os.getppid()</code>获取当前进程的父进程pid</p>
</blockquote>
<h5 id="进程之间的内存空间是隔离的"><a href="#进程之间的内存空间是隔离的" class="headerlink" title="进程之间的内存空间是隔离的"></a>进程之间的内存空间是隔离的</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">count = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;自己&#x27;</span>, count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主 %s&#x27;</span> % count)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<h5 id="进程对象的方法"><a href="#进程对象的方法" class="headerlink" title="进程对象的方法"></a>进程对象的方法</h5><ul>
<li><p><code>join() </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 正在运行, 进程号是 %s&#x27;</span> % (self.name, os.getpid()))</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 运行结束, 进程号是 %s &#x27;</span> % (self.name, os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = MyProcess(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()  <span class="comment"># 保证子进程结束后才会向下执行，当前主线程处于等的状态，而p是处于运行的状态</span></span><br><span class="line">    <span class="comment"># p.join(2)  # 指定等待p子进程的时间，如果子进程p运行完直接往下执行，如果等了2s之后还没执行完也会向下执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始 主进程 %s &#x27;</span> % os.getpid())</span><br></pre></td></tr></table></figure>

<p>该方法并不是串行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 正在运行, 进程号是 %s&#x27;</span> % (self.name, os.getpid()))</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 运行结束, 进程号是 %s &#x27;</span> % (self.name, os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = MyProcess(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    p2 = MyProcess(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">    p3 = MyProcess(<span class="string">&#x27;p3&#x27;</span>)</span><br><span class="line">    p4 = MyProcess(<span class="string">&#x27;p4&#x27;</span>)</span><br><span class="line">    p5 = MyProcess(<span class="string">&#x27;p5&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这几个进程是差不多一起一起的,并不是启动一个执行完之后再运行第二个进程,是让主进程等,而不是让后面的子进程等</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    p4.start()</span><br><span class="line">    p5.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># p_list = [p1, p2, p3, p4, p5]</span></span><br><span class="line">    <span class="comment"># for p in p_list:</span></span><br><span class="line">    <span class="comment">#     p.start()</span></span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 但是当 p1 执行完成后确实要等后面的 p2-p5 进程执行完成后才能继续往后</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    p4.join()</span><br><span class="line">    p5.join()</span><br><span class="line">    </span><br><span class="line">		<span class="comment">#for p in p_list:</span></span><br><span class="line">    <span class="comment">#    p.join()</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程 %s &#x27;</span> % os.getpid())</span><br></pre></td></tr></table></figure></li>
<li><p><code>terminate()和is_alive()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is run, task is %s &#x27;</span> % (name, os.getppid()))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is end,task is %s &#x27;</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.terminate()  <span class="comment"># 关闭进程，不会立即关闭</span></span><br><span class="line">    <span class="built_in">print</span>(p.is_alive())  <span class="comment"># 所以此时查看进程是否存活时为True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main is start &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.is_alive())  <span class="comment"># 子进程已经关闭了，此时为False</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>name和pid</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment"># self.name=name</span></span><br><span class="line">        <span class="comment"># super().__init__() #Process的__init__方法会执行self.name=Piao-1,</span></span><br><span class="line">        <span class="comment">#                    #所以加到这里,会覆盖我们的self.name=name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#为我们开启的进程设置名字的做法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is run&#x27;</span> % self.name)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is end&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = MyProcess(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main is run&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.pid)  <span class="comment"># 查看pid</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="进程相关-1"><a href="#进程相关-1" class="headerlink" title="进程相关"></a>进程相关</h2><blockquote>
<p>参考: <a href="https://www.cnblogs.com/Anker/p/3271773.html">https://www.cnblogs.com/Anker/p/3271773.html</a></p>
</blockquote>
<h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程</span><br><span class="line">僵尸进程虽然不会占用内存CPU等系统资源，但是PID号如果过多之后，操作系统也无法创建新PID号</span><br></pre></td></tr></table></figure>

<ul>
<li><p>产生僵尸进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子&#x27;</span>, os.getpid())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=run)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>, os.getpid())</span><br><span class="line">    time.sleep(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>查看僵尸进程<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/sfHAIh.png" alt="sfHAIh"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|grep Z  <span class="comment"># SATA 显示 Z 就是僵尸进程</span></span><br></pre></td></tr></table></figure></li>
<li><p>解决办法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 杀死父进程  </span><br><span class="line">			kill -CHLD 父进程的pid  </span><br><span class="line">  		kill -<span class="number">9</span> 父进程的pid</span><br><span class="line"><span class="number">2.</span> 对开启的子进程应该记得使用join，join会回收僵尸进程</span><br><span class="line"><span class="number">3.</span> https://blog.csdn.net/u010571844/article/details/<span class="number">50419798</span></span><br></pre></td></tr></table></figure></li>
<li><p>问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join() <span class="comment"># 等待进程p结束后，join函数内部会发送系统调用wait，去告诉操作系统回收掉进程p的id号</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(p.pid) <span class="comment">#？？？此时能否看到子进程p的id号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># p.join()是像操作系统发送请求，告知操作系统p的id号不需要再占用了，回收就可以，</span></span><br><span class="line"><span class="comment"># 此时在父进程内还可以看到p.pid,但此时的p.pid是一个无意义的id号，因为操作系统已经将该编号回收</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程，由于进程不可能脱离进程树而独立存在，孤儿进程将被PID为<span class="number">1</span>的init进程所收养，并由init进程对它们完成状态收集工作。孤儿进程被收养后进行正常的释放，没有危害</span><br></pre></td></tr></table></figure>

<ul>
<li><p>演示代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子&#x27;</span>, os.getpid())</span><br><span class="line">    time.sleep(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = Process(target=run)</span><br><span class="line">    p2 = Process(target=run)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>, os.getpid())</span><br></pre></td></tr></table></figure></li>
<li><p>现象</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211216191021094.png" alt="image-20211216191021094"></p>
<p>两个子进程并没有退出，此时两个子进程的父进程由 1 接管，当时间久了之后会被释放掉</p>
</li>
</ul>
<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>主进程创建守护进程</p>
<ol>
<li>守护进程会在主进程代码执行结束后就终止</li>
<li>守护进程内无法再开启子进程，否则抛出异常: AssertionError: daemonic processes are not allowed to have children</li>
</ol>
<p>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p>
<ul>
<li><p>实例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is run&#x27;</span> % self.name)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is end &#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = MyProcess(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">p1.daemon = <span class="literal">True</span>  <span class="comment"># 一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span></span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main is run&#x27;</span>, os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：main is run 可以看到子线程没有执行 </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><blockquote>
<p>进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件,或同一个打印终端,是没有问题的</p>
<p>而共享带来的是竞争，竞争带来的结果就是错乱，如何控制，就是加锁处理</p>
</blockquote>
<h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h4><p> 没加锁的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is run &#x27;</span> % os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is end &#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = Process(target=work)</span><br><span class="line">        p.start()</span><br><span class="line"><span class="comment"># 并发运行,效率高,但竞争同一打印终端,带来了打印错乱</span></span><br></pre></td></tr></table></figure>



<p>加锁之后的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由并发变成了串行,牺牲了运行效率,但避免了竞争</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">lock</span>):</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is run &#x27;</span> % os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is end &#x27;</span> % os.getpid())</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = Process(target=work, args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>



<h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h4><p>文件当数据库,模拟抢票</p>
<p>不加锁的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并发运行，效率高，但是在竞争一个文件，数据写入错乱</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> % dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    dic = json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>] -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        json.dump(dic, <span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">lock</span>):</span></span><br><span class="line">    search()</span><br><span class="line">    get()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=task, args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>加锁之后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查票还是并发，但是在购票的时候由并发变成了串行，牺牲了运行效率，但保证了数据安全</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> % dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    dic = json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>] -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        json.dump(dic, <span class="built_in">open</span>(<span class="string">&#x27;db.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没票了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">lock</span>):</span></span><br><span class="line">    search()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    get()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = Process(target=task, args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加锁可以保证多个进程修改同一块数据时，同一时间只能有一个任务可以进行修改，即串行的修改，没错，速度是慢了，但牺牲了速度却保证了数据安全。</span></span><br><span class="line">虽然可以用文件共享数据实现进程间通信，但问题是：</span><br><span class="line"><span class="number">1.</span>效率低（共享数据基于文件，而文件是硬盘上的数据）</span><br><span class="line"><span class="number">2.</span>需要自己加锁处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#因此我们最好找寻一种解决方案能够兼顾：1、效率高（多个进程共享一块内存的数据）2、帮我们处理好锁问题。这就是mutiprocessing模块为我们提供的基于消息的IPC通信机制：队列和管道。</span></span><br><span class="line"><span class="number">1</span> 队列和管道都是将数据存放于内存中</span><br><span class="line"><span class="number">2</span> 队列又是基于（管道+锁）实现的，可以让我们从复杂的锁问题中解脱出来，</span><br><span class="line">我们应该尽量避免使用共享数据，尽可能使用消息传递和队列，避免处理复杂的同步和锁问题，而且在进程数目增多时，往往可以获得更好的可获展性。</span><br></pre></td></tr></table></figure>

<h3 id="IPC机制"><a href="#IPC机制" class="headerlink" title="IPC机制"></a>IPC机制</h3><p>进程彼此之间互相隔离，要实现进程之间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的</p>
<ul>
<li><p>管道</p>
<p>ps -ef |grep xx  前面的进程产生的数据交给后面的进程</p>
</li>
</ul>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><blockquote>
<p>底层就是以管道和锁定的方式实现</p>
</blockquote>
<p>创建队列的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Queue([maxsize]):创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递</span><br><span class="line">maxsize是队列中允许最大项数，省略则无大小限制</span><br></pre></td></tr></table></figure>

<p>主要方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q.put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。blocked为<span class="literal">True</span>（默认值）如果</span><br><span class="line">队列满了就锁住了并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会</span><br><span class="line">抛出Queue.Full异常。如果blocked为<span class="literal">False</span>，但该Queue已满，会立即抛出Queue.Full异常。</span><br><span class="line"></span><br><span class="line">q.get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked</span><br><span class="line">为<span class="literal">True</span>（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue.Empty异常。如果</span><br><span class="line">blocked为<span class="literal">False</span>有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出</span><br><span class="line">Queue.Empty异常.</span><br><span class="line"></span><br><span class="line">q.get_nowait():同q.get(<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">q.put_nowait():同q.put(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">q.empty():调用此方法时q为空则返回<span class="literal">True</span>，该结果不可靠，比如在返回<span class="literal">True</span>的过程中，如果队列中又加入了项目。</span><br><span class="line">    </span><br><span class="line">q.full()：调用此方法时q已满则返回<span class="literal">True</span>，该结果不可靠，比如在返回<span class="literal">True</span>的过程中，如果队列中的项目被取走。</span><br><span class="line"></span><br><span class="line">q.qsize():返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样</span><br></pre></td></tr></table></figure>

<p>其他方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q.cancel_join_thread():不会在进程退出时自动连接后台线程。可以防止join_thread()方法阻塞</span><br><span class="line">    </span><br><span class="line">q.close():关闭队列，防止队列中加入更多数据。调用此方法，后台线程将继续写入那些已经入队列但尚未写入的</span><br><span class="line">          数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将调用此方法。关闭队列不会在队列使用者中</span><br><span class="line">          产生任何类型的数据结束信号或异常。例如，如果某个使用者正在被阻塞在get()操作上，关闭生产者中</span><br><span class="line">          的队列不会导致get()方法返回错误。</span><br><span class="line">        </span><br><span class="line">q.join_thread()：连接队列的后台线程。此方法用于在调用q.close()方法之后，等待所有队列项被消耗。默认</span><br><span class="line">                 情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread方法可</span><br><span class="line">                 以禁 止这种行为</span><br></pre></td></tr></table></figure>

<p>应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">q = Queue(<span class="number">3</span>)  <span class="comment"># 创建共享的进程队列，指定队列长度为3，最多放三个值，超过3个无法放入</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.empty())</span><br><span class="line"><span class="comment"># print(q.get())  # 超值取不到q.get()默认为 q.get(block=True,timeout=None)</span></span><br><span class="line"><span class="comment"># print(q.get(block=True,timeout=3)) # 取不到三秒抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(q.get(block=<span class="literal">False</span>))  <span class="comment"># 取不到值立马抛异常</span></span><br></pre></td></tr></table></figure>

<h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><blockquote>
<p>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度</p>
</blockquote>
<ul>
<li><p>为什么要使用生产者和消费者模式</p>
<ul>
<li>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式</li>
</ul>
</li>
<li><p>什么是生产者消费者模式</p>
<ul>
<li>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力</li>
</ul>
</li>
<li><p>总结</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#程序中有两类角色</span></span><br><span class="line">    一类负责生产数据（生产者）</span><br><span class="line">    一类负责处理数据（消费者）</span><br><span class="line">    </span><br><span class="line"><span class="comment">#引入生产者消费者模型为了解决的问题是</span></span><br><span class="line">    平衡生产者与消费者之间的工作能力，从而提高程序整体处理数据的速度</span><br><span class="line">    </span><br><span class="line"><span class="comment">#如何实现</span></span><br><span class="line">    生产者&lt;--&gt;队列&lt;——&gt;消费者</span><br><span class="line"><span class="comment">#生产者消费者模型实现类程序的解耦和</span></span><br></pre></td></tr></table></figure>

<p>基于队列实现生产者消费者模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> time, os, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q, name, courier</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        res = <span class="string">&#x27;%s  %s &#x27;</span> % (courier, i)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 送来 %s &#x27;</span> % (name, res))</span><br><span class="line">    q.put(<span class="literal">None</span>)  <span class="comment"># 结束之后发送None信息到队里里面，有几个消费者就发几个None</span></span><br><span class="line">    q.put(<span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q, name</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 拿到了 %s&#x27;</span> % (name, res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    p1 = Process(target=producer, args=(q, <span class="string">&#x27;快递员1&#x27;</span>, <span class="string">&#x27;sf&#x27;</span>))</span><br><span class="line">    p2 = Process(target=producer, args=(q, <span class="string">&#x27;快递员2&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>))</span><br><span class="line">    p3 = Process(target=producer, args=(q, <span class="string">&#x27;快递员3&#x27;</span>, <span class="string">&#x27;jd&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer, args=(q, <span class="string">&#x27;拿货人1&#x27;</span>))</span><br><span class="line">    c2 = Process(target=consumer, args=(q, <span class="string">&#x27;拿货人2&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is run &#x27;</span> % os.getpid())</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>JoinableQueue([maxsize])`</strong></p>
<blockquote>
<p>这就像是一个Queue对象，但队列允许项目的使用者通知生成者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。</p>
</blockquote>
<p>  介绍</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数介绍：</span></span><br><span class="line">   maxsize是队列中允许最大项数，省略则无大小限制。    </span><br><span class="line">  　 <span class="comment">#方法介绍：</span></span><br><span class="line">  JoinableQueue的实例p除了与Queue对象相同的方法之外还具有：</span><br><span class="line">  q.task_done()：使用者使用此方法发出信号，表示q.get()的返回项目已经被处理。如果调用此方法的次数大于从队列中删除项目的数量，将引发ValueError异常</span><br><span class="line">  q.join():生产者调用此方法进行阻塞，直到队列中所有的项目均被处理。阻塞将持续到队列中的每个项目均调用q.task_done（）方法为止</span><br></pre></td></tr></table></figure>

<p>优化上面队列代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, JoinableQueue</span><br><span class="line"><span class="keyword">import</span> time, os, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q, name, courier</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        res = <span class="string">&#x27;%s  %s &#x27;</span> % (courier, i)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 送来 %s &#x27;</span> % (name, res))</span><br><span class="line">    q.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q, name</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 拿到了 %s&#x27;</span> % (name, res))</span><br><span class="line">        q.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = JoinableQueue()</span><br><span class="line"></span><br><span class="line">    p1 = Process(target=producer, args=(q, <span class="string">&#x27;快递员1&#x27;</span>, <span class="string">&#x27;sf&#x27;</span>))</span><br><span class="line">    p2 = Process(target=producer, args=(q, <span class="string">&#x27;快递员2&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>))</span><br><span class="line">    p3 = Process(target=producer, args=(q, <span class="string">&#x27;快递员3&#x27;</span>, <span class="string">&#x27;jd&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer, args=(q, <span class="string">&#x27;拿货人1&#x27;</span>))</span><br><span class="line">    c2 = Process(target=consumer, args=(q, <span class="string">&#x27;拿货人2&#x27;</span>))</span><br><span class="line">    c1.daemon = <span class="literal">True</span>  <span class="comment"># 主进程结束顺便带走了守护进程</span></span><br><span class="line">    c2.daemon = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    p_l = [p1, p2, p3, c1, c2]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()  <span class="comment"># p1、p2、p3都结束，代表队列一定被取空</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is run &#x27;</span> % os.getpid())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#主进程等---&gt;p1,p2,p3等----&gt;c1,c2</span></span><br><span class="line"><span class="comment">#p1,p2,p3结束了,证明c1,c2肯定全都收完了p1,p2,p3发到队列的数据</span></span><br><span class="line"><span class="comment">#因而c1,c2也没有存在的价值了,应该随着主进程的结束而结束,所以设置成守护进程</span></span><br></pre></td></tr></table></figure>

<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><blockquote>
<p>互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去，如果指定信号量为3，那么来一个人获得一把锁，计数加1，当计数等于3时，后面的人均需要等待。一旦释放，就有人可以获得一把锁</p>
<p>信号量与进程池的概念很像，但是要区分开，信号量涉及到加锁的概念</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Semaphore</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_wc</span>(<span class="params">sem, user</span>):</span></span><br><span class="line">    sem.acquire()  <span class="comment"># 运行的时候都会抢这把锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s 占到一个茅坑&#x27;</span> % user)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    sem.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sem = Semaphore(<span class="number">5</span>)  <span class="comment"># 创建信号量，自定义为5，相当于5把钥匙得到信号量对象</span></span><br><span class="line">    p_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=go_wc, args=(sem,<span class="string">&#x27;user%s&#x27;</span> % i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p_l.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p_l:</span><br><span class="line">        i.join()</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ps：互斥锁只能acquire一次，再有人来执行acquire，如果没有释放，下一个来拿的人就只能阻在原地无法拿到acquire。而信号量一把锁可以acquire指定5次（Semaphore(5)），如果第6个来在</span></span><br><span class="line"><span class="string">acquire的时候就没有了，相当于没有钥匙了，就只能在原地等着，只要5个人里面有人释放后面的人就</span></span><br><span class="line"><span class="string">可以拿到钥匙</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>     </span><br></pre></td></tr></table></figure>

<h2 id="线程相关"><a href="#线程相关" class="headerlink" title="线程相关"></a>线程相关</h2><p>线程是进程内代码运行的过程，线程是一个执行单位，CPU执行的就是线程。进程是一个资源单位</p>
<p>线程和进程的区别</p>
<ol>
<li>同一进程下的多个线程共享该进程的内存资源，线程之间可以互相通信</li>
<li>开启子线程的开销要远远小于开启子线程</li>
</ol>
<p><strong>线程相关的方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Thread实例对象的方法</span><br><span class="line">  <span class="comment"># isAlive(): 返回线程是否活动的。</span></span><br><span class="line">  <span class="comment"># getName(): 返回线程名。</span></span><br><span class="line">  <span class="comment"># setName(): 设置线程名。</span></span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">  <span class="comment"># threading.currentThread(): 返回当前的线程变量。</span></span><br><span class="line">  <span class="comment"># threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span></span><br><span class="line">  <span class="comment"># threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span></span><br></pre></td></tr></table></figure>



<h3 id="开启线程的两种方式"><a href="#开启线程的两种方式" class="headerlink" title="开启线程的两种方式"></a>开启线程的两种方式</h3><ul>
<li><p>方式一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running &#x27;</span> % current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=task)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>, current_thread().name)</span><br></pre></td></tr></table></figure></li>
<li><p>方式二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is running &#x27;</span> % current_thread().name)  <span class="comment"># 打印当前线程名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>, current_thread().name)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ggLKKR.jpg" alt="ggLKKR"></p>
<ul>
<li>线程之间数据相互影响</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=task)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()  <span class="comment"># 让线程运行完成，避免有可能出现主线程先打印 n 的情况</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>



<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote>
<p><strong>无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁</strong></p>
<p><strong>需要强调的是：运行完毕并非终止运行</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 对主进程来说，运行完毕指的是主进程代码运行完毕</span><br><span class="line">2. 对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束</span><br><span class="line">2. 主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束</span><br></pre></td></tr></table></figure>



<p>代码案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> % current_thread().name)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is end&#x27;</span> % current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = Thread(target=task, args=(<span class="number">2</span>,))</span><br><span class="line">    t2 = Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">    t3 = Thread(target=task, args=(<span class="number">300</span>,))</span><br><span class="line">    t3.daemon = <span class="literal">True</span>  <span class="comment"># t3最后的end并没有执行</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)  <span class="comment"># 主线程要等子线程执行完后才结束</span></span><br></pre></td></tr></table></figure>

<h3 id="互斥锁-1"><a href="#互斥锁-1" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>现象: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)  <span class="comment"># 线程速度太快了，如果不加sleep能减完，但是处理速度如果慢的情况下就会数据错乱</span></span><br><span class="line">    n = temp - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    thread_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        thread_l.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> thread_l:</span><br><span class="line">        obj.join()</span><br><span class="line">    <span class="built_in">print</span>(n)  <span class="comment"># 99</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread,Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">mutex = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="keyword">with</span> mutex:</span><br><span class="line">        temp = n</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        n = temp - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    thread_l = []</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        thread_l.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> thread_l:</span><br><span class="line">        obj.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果是 %s, 运行时间: %s &#x27;</span> % (n, end_time - start_time))  <span class="comment"># 结果是 0, 运行时间: 10.33482813835144 </span></span><br></pre></td></tr></table></figure>

<h3 id="信号量-1"><a href="#信号量-1" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Semaphore</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    sm.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s get sm&#x27;</span> % threading.current_thread().getName())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    sm.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sm = Semaphore(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">        t = Thread(target=func)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>同进程的一样</p>
<p>线程的一个关键特性是每个线程都是独立运行且状态不可预测。如果程序中的其 他线程需要通过判断某个线程的状态来确定自己下一步的操作,这时线程同步问题就会变得非常棘手。为了解决这些问题,我们需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。在 初始情况下,Event对象中的信号标志被设置为假。如果有线程等待一个Event对象, 而这个Event对象的标志为假,那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程。如果一个线程等待一个已经被设置为真的Event对象,那么它将忽略这个事件, 继续执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值；</span><br><span class="line"></span><br><span class="line">event.wait()：如果 event.isSet()==<span class="literal">False</span>将阻塞线程；</span><br><span class="line"></span><br><span class="line">event.<span class="built_in">set</span>()： 设置event的状态值为<span class="literal">True</span>，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line"></span><br><span class="line">event.clear()：恢复event的状态值为<span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/yFh1Wi.jpg" alt="yFh1Wi"></p>
<p><strong>案例代码一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event, Thread, current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">e = Event()  <span class="comment"># 全局变量为False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running &#x27;</span> % current_thread().name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    e.<span class="built_in">set</span>()  <span class="comment"># 全局变量为True</span></span><br><span class="line">    <span class="comment"># e.clear()  # 全局变量 = False</span></span><br><span class="line">    <span class="comment"># e.is_set()  # 判断是否set过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    e.wait()  <span class="comment"># 等全局变量变为True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running &#x27;</span> % current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = Thread(target=f1)</span><br><span class="line">    t2 = Thread(target=f2)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure>

<p><strong>模拟红绿灯</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event, Thread, current_thread</span><br><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line">e = Event()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e.clear()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;红灯亮了&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绿灯亮了&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;可以走了 %s&#x27;</span> % current_thread().name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在等待 %s&#x27;</span> % current_thread().name)</span><br><span class="line">            e.wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Thread(target=task1).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        Thread(target=task2).start()</span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><blockquote>
<p>定时器Timer类是Thread的派生类，用于在指定时间后调用一个方法。</p>
</blockquote>
<p>指定n秒后执行某操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Timer(<span class="number">3</span>, hello, args=(<span class="number">1111</span>,))  <span class="comment"># 3秒之后执行</span></span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure>

<h3 id="线程queue"><a href="#线程queue" class="headerlink" title="线程queue"></a>线程queue</h3><blockquote>
<p>queue队列 ：使用import queue，用法与进程Queue一样</p>
<p>当信息必须在多个线程之间安全交换时，队列在线程编程中特别有用</p>
</blockquote>
<ul>
<li><p>基本方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">put 往线程队列里防止,超过队列长度,直接阻塞</span><br><span class="line">get 从队列中取值,如果获取不到,直接阻塞</span><br><span class="line">put_nowait: 如果放入的值超过队列长度,直接报错（linux）</span><br><span class="line">get_nowait: 如果获取的值已经没有了,直接报错</span><br></pre></td></tr></table></figure></li>
<li><p>用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列：先进先出</span></span><br><span class="line">q = queue.Queue(<span class="number">3</span>) <span class="comment"># 指定队列的大小</span></span><br><span class="line">q.put(<span class="number">111</span>)  <span class="comment"># 整型</span></span><br><span class="line">q.put(<span class="string">&quot;aaa&quot;</span>) <span class="comment"># 字符串</span></span><br><span class="line">q.put((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">111</span></span><br><span class="line"><span class="string">aaa</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆栈：后进先出</span></span><br><span class="line">q = queue.LifoQueue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">111</span>)</span><br><span class="line">q.put(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">q.put((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">aaa</span></span><br><span class="line"><span class="string">111</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先级队列：</span></span><br><span class="line"><span class="comment"># 1.默认按照数字大小排序,然后会按照ascii编码在从小到大排序</span></span><br><span class="line"><span class="comment"># 2.先写先排,后写后排</span></span><br><span class="line">q = queue.PriorityQueue(<span class="number">3</span>)</span><br><span class="line">q.put((<span class="number">10</span>,<span class="number">111</span>))  <span class="comment"># 第一个值是优先级，第二值才是要放的元素</span></span><br><span class="line">q.put((<span class="number">11</span>,<span class="string">&quot;aaa&quot;</span>))</span><br><span class="line">q.put((-<span class="number">1</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(-1, (1, 2, 3))  # 数越小优先级越高</span></span><br><span class="line"><span class="string">(10, 111)</span></span><br><span class="line"><span class="string">(11, &#x27;aaa&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="死锁和递归锁"><a href="#死锁和递归锁" class="headerlink" title="死锁和递归锁"></a>死锁和递归锁</h3><blockquote>
<p>死锁是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程</p>
</blockquote>
<ul>
<li><p>代码演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mutexA = Lock()</span><br><span class="line">mutexB = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了A锁 &#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了B锁 &#x27;</span> % self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了B锁 &#x27;</span> % self.name)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了A锁 &#x27;</span> % self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.f1()</span><br><span class="line">        self.f2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">&#x27;线程1&#x27;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&#x27;线程2&#x27;</span>)</span><br><span class="line">    t3 = MyThread(<span class="string">&#x27;线程3&#x27;</span>)</span><br><span class="line">    t4 = MyThread(<span class="string">&#x27;线程4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line">    t4.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 线程1 抢到了A锁 </span></span><br><span class="line"><span class="comment"># 线程1 抢到了B锁 </span></span><br><span class="line"><span class="comment"># 线程1 抢到了B锁 </span></span><br><span class="line"><span class="comment"># 线程2 抢到了A锁 </span></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 此时卡在这了</span></span><br></pre></td></tr></table></figure></li>
<li><p>解决方法</p>
<blockquote>
<p>递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock</p>
<p> 这个RLock内部维护着一个Lock和一个计数（counter）变量，计数记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock, RLock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mutexA = mutexB = RLock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了A锁 &#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了B锁 &#x27;</span> % self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了B锁 &#x27;</span> % self.name)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 抢到了A锁 &#x27;</span> % self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.f1()</span><br><span class="line">        self.f2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">&#x27;线程1&#x27;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&#x27;线程2&#x27;</span>)</span><br><span class="line">    t3 = MyThread(<span class="string">&#x27;线程3&#x27;</span>)</span><br><span class="line">    t4 = MyThread(<span class="string">&#x27;线程4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line">    t4.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="多线程实现TCP并发"><a href="#多线程实现TCP并发" class="headerlink" title="多线程实现TCP并发"></a>多线程实现TCP并发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">sock</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = sock.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            data = res.upper()</span><br><span class="line">            sock.send(data)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sock, address = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(address)</span><br><span class="line">    t = Thread(target=task, args=(sock,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket()</span><br><span class="line">c.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">    c.send(cmd.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = c.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="GIL全局解释器锁"><a href="#GIL全局解释器锁" class="headerlink" title="GIL全局解释器锁"></a>GIL全局解释器锁</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p><strong>GIL的全称是：Global Interpreter Lock,意思就是全局解释器锁</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">定义：</span><br><span class="line">In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple </span><br><span class="line">native threads from executing Python bytecodes at once. This lock is necessary mainly </span><br><span class="line">because CPython’s memory management is not thread-safe. (However, since the GIL </span><br><span class="line">exists, other features have grown to depend on the guarantees that it enforces.)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">结论：在Cpython解释器中，同一个进程下开启的多线程，同一时刻只能有一个线程执行，无法利用多核优势</span><br></pre></td></tr></table></figure>



<p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p>
<p>GIL本质就是一把互斥锁，既然是互斥锁，所有互斥锁的本质都一样，都是将并发运行变成串行，以此来控制同一时间内共享数据只能被一个任务所修改，进而保证数据安全</p>
<p>综上：</p>
<p>如果多个线程的target=work，那么执行流程是</p>
<p>多个线程先访问到解释器的代码，即拿到执行权限，然后将target的代码交给解释器的代码去执行</p>
<p>解释器的代码是所有线程共享的，所以垃圾回收线程也可能访问到解释器的代码而去执行，这就导致了一个问题:对于同一个数据100，可能线程1执行x=100的同时，而垃圾回收执行的是回收100的操作，解决这种问题没有什么高明的方法，就是加锁处理，如下图的GIL，保证python解释器同一时间只能执行一个任务的代码</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/WK4tt1.jpg" alt="WK4tt1"></p>
<h3 id="GIL与Lock"><a href="#GIL与Lock" class="headerlink" title="GIL与Lock"></a>GIL与Lock</h3><p>只要在一个进程里就一定有GIL锁的存在，GIL锁不能保证python数据的安全，它保证的是解释器级别（内存管理）的安全，也可以说是背后存在的一种机制。可以肯定的一点是：保护不同的数据的安全，就应该加不同的锁。</p>
<p>GIL保护的是解释器级的数据，保护用户自己的数据则需要自己加锁处理，如下图：</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dRjCYL.jpg" alt="dRjCYL"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mutex = Lock()</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n = temp - <span class="number">1</span></span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        l.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> l:</span><br><span class="line">        obj.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(n)  <span class="comment"># 结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">1. 100个线程去抢GIL锁，即抢执行权限</span></span><br><span class="line"><span class="string">2. 肯定有一个线程先抢到GIL（暂且称为线程1），然后开始执行，一旦执行就会mutex.acquire()</span></span><br><span class="line"><span class="string">3. 极有可能线程1还未运行完毕，就有另外一个线程2抢到GIL，然后开始运行，但线程2发现互斥锁   	  lock还未被线程1释放，于是阻塞，被迫交出执行权限，即释放GIL</span></span><br><span class="line"><span class="string">4. 直到线程1重新抢到GIL，开始从上次暂停的位置继续执行，直到正常释放互斥锁lock，然后其他的</span></span><br><span class="line"><span class="string">   线程再重复2 3 4的过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="GIL与多线程"><a href="#GIL与多线程" class="headerlink" title="GIL与多线程"></a>GIL与多线程</h3><p>对计算来说，cpu越多越好，但是对于I/O来说，再多的cpu也没用</p>
<p>对运行一个程序来说，随着cpu的增多执行效率肯定会有所提高（不管提高幅度多大，总会有所提高），这是因为一个程序基本上不会是纯计算或者纯I/O，所以我们只能相对的去看一个程序到底是计算密集型还是I/O密集型，从而进一步分析python的多线程到底有无用武之地</p>
<p>场景：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">分析：</span><br><span class="line">我们有四个任务需要处理，处理方式肯定是要玩出并发的效果，解决方案可以是：</span><br><span class="line">方案一：开启四个进程</span><br><span class="line">方案二：一个进程下，开启四个线程</span><br><span class="line"></span><br><span class="line">单核情况下，分析结果: </span><br><span class="line">　　如果四个任务是计算密集型，没有多核来并行计算，方案一徒增了创建进程的开销，方案二胜</span><br><span class="line">　　如果四个任务是I/O密集型，方案一创建进程的开销大，且进程的切换速度远不如线程，方案二胜</span><br><span class="line"></span><br><span class="line">多核情况下，分析结果：</span><br><span class="line">　　如果四个任务是计算密集型，多核意味着并行计算，在python中一个进程中同一时刻只有一个线</span><br><span class="line">　　程执行用不上多核，方案一胜</span><br><span class="line">　　如果四个任务是I/O密集型，再多的核也解决不了I/O问题，方案二胜</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">结论：现在的计算机基本上都是多核，python对于计算密集型的任务开多线程的效率并不能带来多</span><br><span class="line">大性能上的提升，甚至不如串行(没有大量切换)，但是，对于IO密集型的任务效率还是有显著提升的。</span><br></pre></td></tr></table></figure>

<h3 id="多线程性能测试"><a href="#多线程性能测试" class="headerlink" title="多线程性能测试"></a>多线程性能测试</h3><ul>
<li><p>计算密集型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res *= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = []</span><br><span class="line">    <span class="built_in">print</span>(os.cpu_count())  <span class="comment"># 查看cpu核数</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        p = Process(target=work)  <span class="comment"># 进程 7.7s多</span></span><br><span class="line">        <span class="comment"># p = Thread(target=work)  # 线程 28s多</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s &#x27;</span> % (stop_time - start_time))</span><br></pre></td></tr></table></figure></li>
<li><p>I/O密集型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = []</span><br><span class="line">    <span class="comment"># print(os.cpu_count()) # 查看CPU核数</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        p=Process(target=work)  <span class="comment"># 使用进程</span></span><br><span class="line">        <span class="comment"># p = Thread(target=work)  # 使用线程比进程效率稍高</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> % (stop - start))</span><br></pre></td></tr></table></figure></li>
<li><p>结论</p>
<p>多线程用于IO密集型，如socket，爬虫，web</p>
<p>多进程用于计算密集型，如金融分</p>
</li>
</ul>
<h2 id="进程池与线程池"><a href="#进程池与线程池" class="headerlink" title="进程池与线程池"></a>进程池与线程池</h2><p>​    在刚开始接触多进程或多线程时，我们迫不及待地基于多进程或多线程实现并发的套接字通信，然而这种实现方式的致命缺陷是：<strong>服务的开启的进程数或线程数都会随着并发的客户端数目地增多而增多，这会对服务端主机带来巨大的压力，甚至于不堪重负而瘫痪。</strong>于是我们必须对服务端开启的进程数或线程数加以控制，让机器在一个自己可以承受的范围内运行，这就是进程池或线程池的用途，例如进程池，就是用来存放进程的池子，本质还是基于多进程，只不过是对开启进程的数目加上了限制</p>
<ul>
<li><p>Python标准模块concurrent.futures</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、介绍</span></span><br><span class="line">concurrent.futures模块是用来创建并行的任务，提供了高度封装的异步调用接口</span><br><span class="line">concurent.future这个模块用起来非常方便，它的接口也封装的非常简单，既可以实现进程池，也可以实现线程池</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">两者都实现了同一个接口，这个接口是由抽象Executor类定义的。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、基本方法</span></span><br><span class="line">submit(fn, *args, **kwargs)</span><br><span class="line">异步提交任务</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>(func, *iterables, timeout=<span class="literal">None</span>, chunksize=<span class="number">1</span>) </span><br><span class="line">取代<span class="keyword">for</span>循环submit的操作</span><br><span class="line"></span><br><span class="line">shutdown(wait=<span class="literal">True</span>) </span><br><span class="line">相当于进程池的pool.close()+pool.join()操作</span><br><span class="line">wait=<span class="literal">True</span>，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=<span class="literal">False</span>，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和<span class="built_in">map</span>必须在shutdown之前</span><br><span class="line"></span><br><span class="line">result(timeout=<span class="literal">None</span>)</span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line">add_done_callback(fn)</span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 介绍：</span></span><br><span class="line"><span class="string">ProcessPoolExecutor类是Executor的子类，它使用一个进程池来异步执行调用。ProcessPoolExecutor</span></span><br><span class="line"><span class="string">使用多处理模块，这允许它避免全局解释器锁，但也意味着只能执行和返回可pickle的对象。</span></span><br><span class="line"><span class="string">类concurrent.futures。ProcessPoolExecutor (max_workers = None, mp_context =没有)</span></span><br><span class="line"><span class="string">使用最多max_workers进程池异步执行调用的Executor子类。如果max_workers为None或未给出，则默认值为</span></span><br><span class="line"><span class="string">机器上的处理器数。如果max_workers小于或等于0，则会引发ValueError。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 用法：异步执行</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span>  <span class="comment"># 定一个任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid()) <span class="comment"># 任务启动先打印任务的进程pid</span></span><br><span class="line">    <span class="comment"># I/O密集型的，一般用线程，用进程开销大耗时长</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment"># 随机睡1-3秒</span></span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span>   <span class="comment"># 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">futrue</span>):</span> <span class="comment"># 处理任务的函数，拿到futrue对象</span></span><br><span class="line">    res = futrue.result() <span class="comment"># 拿到返回结果，一个任务运行完就会触发回调函数，所以不会阻塞</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 正在处理结果：%s&quot;</span> %(os.getpid(),res))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(max_workers=<span class="number">4</span>) <span class="comment"># 对于进程池如果不写max_works：默认的是cpu的数量是4个</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):  <span class="comment"># 现在开了19个任务，如果是上百个任务，就不能无限开进程，就要考虑控制</span></span><br><span class="line">        pool.submit(task,i).add_done_callback(handle) <span class="comment"># 异步的方式提交任务</span></span><br><span class="line"></span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">解析:</span></span><br><span class="line"><span class="string">pool.submit(task,i)会返回一个futrue对象，这个任务对象可以调出add_done_callback()方法，</span></span><br><span class="line"><span class="string">叫回调函数，里面就一个参数handle，也就是说每提交一个任务捆绑一个函数，一旦一个任务运行完就会立</span></span><br><span class="line"><span class="string">马触发这个回调函数的运行,并且会自动的把任务对象当做第一个参数传给回调函数。</span></span><br><span class="line"><span class="string">在回调函数里处理任务，先拿到结果，一个任务运行完就会触发这个回调函数，所以不会阻塞在原地。打印</span></span><br><span class="line"><span class="string">一边在运行一边就会有人在处理结果，一边在运行着一边结果正在被处理，这个运行效率并不慢，一直都是</span></span><br><span class="line"><span class="string">主进程在处理任务，这就是回调函数的概念。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 介绍：</span></span><br><span class="line"><span class="string">ThreadPoolExecutor是Executor的子类，它使用一个线程池来异步执行调用。</span></span><br><span class="line"><span class="string">类concurrent.futures。ThreadPoolExecutor (max_workers = None, thread_name_prefix = &quot;)</span></span><br><span class="line"><span class="string">一个Executor子类，使用最多max_workers线程池来异步执行调用。</span></span><br><span class="line"><span class="string">3.5版本的变化:如果max_workers没有或没有,它将默认为处理器的机器上,乘以5,假设ThreadPoolExecutor通常</span></span><br><span class="line"><span class="string">   用于重叠I / O而不是CPU工作和工人的数量应该为ProcessPoolExecutor高于工人的数量。</span></span><br><span class="line"><span class="string">3.6新版功能:添加了thread_name_prefix参数，允许用户控制线程。由池创建的工作线程的线程名，以便于调试。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 用法：</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %current_thread().name)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">futrue</span>):</span></span><br><span class="line">    res = futrue.result()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 正在处理结果：%s&quot;</span> %(current_thread().name,res))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="comment"># 对于线程池如果不写max_works：默认的是cpu的数目*5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>): <span class="comment"># 同样是19个任务，线程池效率高了</span></span><br><span class="line">        pool.submit(task,i).add_done_callback(handle)</span><br><span class="line"></span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>​    协程是单线程下实现的并发,协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的</p>
<p>​    对于单线程下，我们不可避免程序中出现io操作，但如果我们能在自己的程序中（即用户程序级别，而非操作系统级别）控制单线程下的多个任务能在一个任务遇到io阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度地处于就绪态，即随时都可以被cpu执行的状态，相当于我们在用户程序级别将自己的io操作最大限度地隐藏起来，从而可以迷惑操作系统，让其看到：该线程好像是一直在计算，io比较少，从而更多的将cpu的执行权限分配给我们的线程。</p>
<p>​    python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到io或执行时间过长就会被迫交出cpu执行权限，切换其他线程运行）</p>
<p>​    单线程内开启协程，一旦遇到io，就会从应用程序级别（而非操作系统）控制切换，以此来提升效率（！！！非io操作的切换与效率无关）</p>
<p>​    对比操作系统控制线程的切换，用户在单线程内控制协程的切换</p>
<ul>
<li><p>特点: 自己的应用程序实现多个人的调度</p>
<p>遇到I/O切换，可以将单线程的I/O降到最低，因此可以将单线程的威力发挥到最大</p>
</li>
<li><p>缺点: 不能实现并行</p>
<p>单线程下的多个任务一旦遇到I/O，整个线程都会阻塞，所有的任务都停滞</p>
</li>
<li><p>总结</p>
<ul>
<li>必须在只有一个单线程里实现并发</li>
<li>修改共享数据不需加锁</li>
<li>用户程序里自己保存多个控制流的上下文栈</li>
<li>附加：一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet都无法实现，就用到了gevent模块（select机制））**</li>
</ul>
<p><strong>yiled</strong>可以保存状态，<strong>yield</strong>的状态保存与操作系统的保存线程状态很像，但是<strong>yield是代码级别控制</strong>的，更轻量级send可以把一个函数的结果传给另外一个函数，以此实现<strong>单线程内程序之间的切换</strong></p>
</li>
</ul>
<h3 id="Gevent模块"><a href="#Gevent模块" class="headerlink" title="Gevent模块"></a>Gevent模块</h3><p>​        <strong>Gevent</strong>是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。</p>
<p>Gevent内部会用到greenlet这个模块，这个模块就是多个任务之间来回的切，切走之前把一个任务的状态保留下来，它们的底层都会用到yield，其实就是层层帮我们封装好了。greenlet内部会封装yield，Gevent就是对greenlet进行了进一步的封装，封装后greenlet会帮忙检测I/O，实现遇到I/O切换，这个才是我们所追求的协程</p>
<ul>
<li><p>使用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g1=gevent.spawn(func,<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)创建一个协程对象g1，spawn括号内第一个参数是函数名，</span><br><span class="line">                如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><span class="line"></span><br><span class="line">g2=gevent.spawn(func2)</span><br><span class="line"></span><br><span class="line">g1.join()  等待g1结束</span><br><span class="line"></span><br><span class="line">g2.join()  等待g2结束</span><br><span class="line"></span><br><span class="line">或者上述两步合作一步：gevent.joinall([g1,g2])</span><br><span class="line"></span><br><span class="line">g1.value<span class="comment">#拿到func1的返回值</span></span><br></pre></td></tr></table></figure>

<p>遇到IO阻塞时自动切换任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 1&#x27;</span> %name) <span class="comment"># 1.吃了一口饭</span></span><br><span class="line">    gevent.sleep(<span class="number">2</span>)  <span class="comment"># 2.原地睡了2秒，相当于模拟遇到I/O了</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 2&#x27;</span> %name) <span class="comment"># 6.接着打印又回来吃了一口饭</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 1&#x27;</span> %name)  <span class="comment"># 3.遇到I/O以后就切到了另外一个任务，玩了一下</span></span><br><span class="line">    gevent.sleep(<span class="number">1</span>)  <span class="comment"># 4.又遇到I/O了，睡了1秒，它先睡完</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 2&#x27;</span> %name) <span class="comment"># 5.接着又玩了一下，原本应该切到eat 2，但是仍在阻塞中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat,<span class="string">&#x27;egon&#x27;</span>) <span class="comment"># spawn提交eat任务，然后提交一个人名。协程1</span></span><br><span class="line">g2=gevent.spawn(play,name=<span class="string">&#x27;egon&#x27;</span>)<span class="comment"># spawn提交playt任务。协程2</span></span><br><span class="line">g1.join() <span class="comment"># 等着协程对象g1结束</span></span><br><span class="line">g2.join() <span class="comment"># 等着协程对象g2结束</span></span><br><span class="line"><span class="comment">#或者gevent.joinall([g1,g2])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">上例gevent.sleep(2)模拟的是gevent可以识别的io阻塞,而time.sleep(2)或其他的阻塞,gevent是不能直接识别的需要用下面一行代码,打补丁,就可以识别了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>打补丁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前或者我们干脆记忆成：要用gevent，需要将from gevent import monkey;monkey.patch_all()放到文件的开头</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat)</span><br><span class="line">g2=gevent.spawn(play_phone)</span><br><span class="line">gevent.joinall([g1,g2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">单线程下能抗住的并发已经非常非常高了，因为现在接触的软件大部分都是I/O密集型的</span></span><br><span class="line"><span class="string">其实单线程下完全可以一个任务运行完以后（它真正运行完花的时间是非常短的，大量时间都在做I/O）</span></span><br><span class="line"><span class="string">可以利用运行一段时间遇到I/O操作了就快速切换另一个任务再运行，在多任务之间快速的切</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>基于协程实现并发</p>
<p>  <strong>通过gevent实现单线程下的socket并发（from gevent import monkey;monkey.patch_all()一定要放到导入socket模块之前，否则gevent无法识别socket的阻塞）</strong></p>
<ul>
<li><p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先导了猴子补丁，打了补丁保证下面所有模块的I/O行为都能监测到</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all() </span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *   <span class="comment"># 然后导了socket模块，准备写套接字</span></span><br><span class="line"><span class="keyword">import</span> gevent <span class="comment"># 最后导入gevent模块， 用来单线程下实现并发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>(<span class="params">server_ip,port</span>):</span> <span class="comment"># 套接字服务端任务1：建链接</span></span><br><span class="line">    s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    s.bind((server_ip,port)) <span class="comment"># 绑定ip和端口</span></span><br><span class="line">    s.listen(<span class="number">5</span>)  <span class="comment"># 监听</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept() <span class="comment"># 等待链接请求</span></span><br><span class="line">        <span class="comment"># 每建成一个链接，就提交一个协程对象进行通信，异步提交</span></span><br><span class="line">        gevent.spawn(talk,conn,addr) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">conn,addr</span>):</span>  <span class="comment"># 套接字服务端任务2：建通信</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res=conn.recv(<span class="number">1024</span>) <span class="comment"># 收消息</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;client %s:%s msg: %s&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],res))</span><br><span class="line">            conn.send(res.upper()) <span class="comment"># 回消息，大写回</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>) <span class="comment"># 把ip和端口传进去</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 注：没必要join在原地等了，因为服务端在启动运行起来后，服务端函数是一个死循环，</span></span><br><span class="line"><span class="comment"># 不会结束，既然主进程不会结束那就不用再等了</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">整体逻辑：就一个线程server，没有多线程也没有多进程，这个线程每建成一个链接就提交</span></span><br><span class="line"><span class="string">一个协程对象，gevent会帮你在多个任务之间遇到I/O来回快速的切换，从而实现并发效果</span></span><br><span class="line"><span class="string">如何证明并发的效果？</span></span><br><span class="line"><span class="string">服务端启动起来后，同时多个客户端连接过去，如果多个客户端能同时得到结果，并发效果</span></span><br><span class="line"><span class="string">就实现了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可同时开多个客户端(客户端1、客户端2、客户端3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client.send(<span class="string">&quot;hello&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 在不停的向服务端发送“hello”</span></span><br><span class="line">    msg=client.recv(<span class="number">1024</span>) <span class="comment"># 收消息，在不停的收HELLO</span></span><br><span class="line">    <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">解析：</span></span><br><span class="line"><span class="string">三个客户端都能同时不停的发消息和收消息，都有并发效果，但服务端没有开多线程，事实上</span></span><br><span class="line"><span class="string">就是服务端在多个任务之间来回的切换</span></span><br><span class="line"><span class="string">其实就是给第一个客户端执行一个seed来发送I/O请求，只要seed发出之后运行完就是操作</span></span><br><span class="line"><span class="string">系统的任务了，seed负责发消息，操作系统负责做I/O。gevent模块会利用你seed的过程</span></span><br><span class="line"><span class="string">直接切到下一个任务，再切到下下一个任务，一直往下切，给客户端的感觉就是每一个客户端</span></span><br><span class="line"><span class="string">都能被服务，并发就实现了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>IO模型研究的主要是网络IO(linux系统)</p>
<ul>
<li>同步（synchronous）    大部分情况下会采用缩写的形式  sync</li>
<li>异步（asynchronous） async</li>
<li>阻塞（blocking） </li>
<li>非阻塞（non-blocking）</li>
</ul>
<p>五种IO模型：<br>    * blocking IO           阻塞IO<br>    * nonblocking IO          非阻塞IO<br>    * IO multiplexing          IO多路复用<br>    * signal driven IO         信号驱动IO<br>    * asynchronous IO            异步IO<br>    由signal driven IO（信号驱动IO）在实际中并不常用，所以主要介绍其余四种IO Model</p>
<h3 id="四种IO模型简介"><a href="#四种IO模型简介" class="headerlink" title="四种IO模型简介"></a>四种IO模型简介</h3><h4 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h4><pre><code>最为常见的一种IO模型 有两个等待的阶段(wait for data、copy data)
</code></pre>
<h4 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h4><pre><code>系统调用阶段变为了非阻塞(轮训) 有一个等待的阶段(copy data)
  轮训的阶段是比较消耗资源的
</code></pre>
<h4 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h4><pre><code>利用select或者epoll来监管多个程序 一旦某个程序需要的数据存在于内存中了 那么立刻通知该程序去取即可
</code></pre>
<h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><pre><code>只需要发起一次系统调用 之后无需频繁发送 有结果并准备好之后会通过异步回调机制反馈给调用者
</code></pre>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上VMware的NAT网络设置</title>
    <url>/2ba065a.html</url>
    <content><![CDATA[<h3 id="NAT网络设置"><a href="#NAT网络设置" class="headerlink" title="NAT网络设置"></a>NAT网络设置</h3><h4 id="创建一个NAT网络"><a href="#创建一个NAT网络" class="headerlink" title="创建一个NAT网络"></a>创建一个NAT网络</h4><span id="more"></span>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/4vNGH4.png" alt="4vNGH4"></p>
<h4 id="修改子网段"><a href="#修改子网段" class="headerlink" title="修改子网段"></a>修改子网段</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211214144606331.png" alt="image-20211214144606331"></p>
<h4 id="Mac上查看该子网段的网关"><a href="#Mac上查看该子网段的网关" class="headerlink" title="Mac上查看该子网段的网关"></a>Mac上查看该子网段的网关</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac上查自己的</span></span><br><span class="line">cat /Library/Preferences/VMware\ Fusion/vmnet3/nat.conf | grep gateway -A 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># NAT gateway address</span></span><br><span class="line">ip = 192.168.100.1</span><br><span class="line">netmask = 255.255.255.0</span><br></pre></td></tr></table></figure>

<h4 id="设置虚拟机网络"><a href="#设置虚拟机网络" class="headerlink" title="设置虚拟机网络"></a>设置虚拟机网络</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211214144722670.png" alt="image-20211214144722670"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211214144745643.png" alt="image-20211214144745643"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20211214144802455.png" alt="image-20211214144802455"></p>
<h4 id="Centos镜像源设置"><a href="#Centos镜像源设置" class="headerlink" title="Centos镜像源设置"></a>Centos镜像源设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos更换阿里云源</span></span><br><span class="line">mkdir -p /etc/yum.repos.d/bak </span><br><span class="line">mv /etc/yum.repos.d/* /etc/yum.repos.d/bak</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum install vim net-tools gcc make -y</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>python-网络编程</title>
    <url>/e67db240.html</url>
    <content><![CDATA[<h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/g3kSJQ.jpg" alt="g3kSJQ"></p>
<span id="more"></span>
<h4 id="每层运行常见物理设备"><a href="#每层运行常见物理设备" class="headerlink" title="每层运行常见物理设备"></a>每层运行常见物理设备</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/bevfsC.jpg" alt="bevfsC"></p>
<h4 id="七层协议数据传输的封包与解包过程"><a href="#七层协议数据传输的封包与解包过程" class="headerlink" title="七层协议数据传输的封包与解包过程"></a>七层协议数据传输的封包与解包过程</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/1036857-20200415215541847-564448301.gif" alt="1036857-20200415215541847-564448301"></p>
<h4 id="TCP三握四挥"><a href="#TCP三握四挥" class="headerlink" title="TCP三握四挥"></a>TCP三握四挥</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/nj8EEE.jpg" alt="nj8EEE"></p>
<h3 id="socket层"><a href="#socket层" class="headerlink" title="socket层"></a>socket层</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/lrLyh3.jpg" alt="lrLyh3"><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ek2QPk.jpg" alt="ek2QPk"></p>
<p><strong>数据传输动图如下：</strong><br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/1036857-20200415220004538-1827984001.gif" alt="1036857-20200415220004538-1827984001"></p>
<h4 id="socket工作流程"><a href="#socket工作流程" class="headerlink" title="socket工作流程"></a><code>socket</code>工作流程</h4><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/krzj1m.jpg" alt="krzj1m"></p>
<h4 id="socker-模块用法"><a href="#socker-模块用法" class="headerlink" title="socker()模块用法"></a><code>socker()</code>模块用法</h4><p><strong>简单版本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket</span></span><br><span class="line">server_test = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定地址</span></span><br><span class="line">server_test.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听, 半连接池数量</span></span><br><span class="line">server_test.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收连接请求,得到客户端连接信息和客户端地址</span></span><br><span class="line">conn, client_address = server_test.accept()</span><br><span class="line"><span class="built_in">print</span>(client_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收消息</span></span><br><span class="line">data = conn.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收字节</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发消息</span></span><br><span class="line">conn.send(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">server_test.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client_test = socket.socket(sockrt.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">client_test.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">client_test.send(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">data = client_test.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">client_test.close()</span><br></pre></td></tr></table></figure>



<p><strong>处理服务端连接不断</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_test = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">server_test.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">server_test.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个循环连接的</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, client_address = server_test.accept()</span><br><span class="line">    <span class="built_in">print</span>(client_address)</span><br><span class="line">    <span class="comment"># 这个循环处理连接内容</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">server_test.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client_test = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client_test.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    client_test.send(msg.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = client_test.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">client_test.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端套接字函数</span></span><br><span class="line">s.bind()    绑定(主机,端口号)到套接字</span><br><span class="line">s.listen()  开始TCP监听</span><br><span class="line">s.accept()  被动接受TCP客户的连接,(阻塞式)等待连接的到来</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端套接字函数</span></span><br><span class="line">s.connect()     主动初始化TCP服务器连接</span><br><span class="line">s.connect_ex()  connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共用途的套接字函数</span></span><br><span class="line">s.recv()            接收TCP数据</span><br><span class="line">s.send()            发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不会发完)</span><br><span class="line">s.sendall()         发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己端缓存区剩余空间时,数据不丢失,循环调用send直到发完)</span><br><span class="line">s.recvfrom()        接收UDP数据</span><br><span class="line">s.sendto()          发送UDP数据</span><br><span class="line">s.getpeername()     连接到当前套接字的远端的地址</span><br><span class="line">s.getsockname()     当前套接字的地址</span><br><span class="line">s.getsockopt()      返回指定套接字的参数</span><br><span class="line">s.setsockopt()      设置指定套接字的参数</span><br><span class="line">s.close()           关闭套接字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向锁的套接字方法</span></span><br><span class="line">s.setblocking()     设置套接字的阻塞与非阻塞模式</span><br><span class="line">s.settimeout()      设置阻塞套接字操作的超时时间</span><br><span class="line">s.gettimeout()      得到阻塞套接字操作的超时时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向文件的套接字的函数</span></span><br><span class="line">s.fileno()          套接字的文件描述符</span><br><span class="line">s.makefile()        创建一个与该套接字相关的文件</span><br></pre></td></tr></table></figure>



<h3 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h3><p>远程执行shell命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">server_test = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">server_test.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">server_test.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个循环连接的</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, client_address = server_test.accept()</span><br><span class="line">    <span class="built_in">print</span>(client_address)</span><br><span class="line">    <span class="comment"># 这个循环处理连接内容</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res = subprocess.Popen(cmd,</span><br><span class="line">                                   shell=<span class="literal">True</span>,</span><br><span class="line">                                   stdout=subprocess.PIPE,</span><br><span class="line">                                   stderr=subprocess.PIPE)</span><br><span class="line">            res1 = res.stdout.read()</span><br><span class="line">            res2 = res.stderr.read()</span><br><span class="line">            conn.send(res1 + res2)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">server_test.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client_test = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client_test.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    client_test.send(msg.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = client_test.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># windows编码是gbk</span></span><br><span class="line">client_test.close()</span><br></pre></td></tr></table></figure>

<p>客户端执行命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;:ps -ef</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 结果发现并没有接收全，还有残留</span></span><br><span class="line"><span class="comment"># 再次输入</span></span><br><span class="line">&gt;&gt;&gt;:ls</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 发现还是上次遗留的</span></span><br></pre></td></tr></table></figure>

<h4 id="粘包现象"><a href="#粘包现象" class="headerlink" title="粘包现象"></a>粘包现象</h4><blockquote>
<p>只有TCP有粘包现象，UDP永远不会粘包<br>粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的</p>
</blockquote>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/gXSqAs.jpg" alt="gXSqAs"></p>
<p><strong>两种粘包情况</strong></p>
<ol>
<li>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</li>
<li>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再收的时候还是从缓冲区拿上次遗留的数据，产生粘包） </li>
</ol>
<h4 id="解决粘包"><a href="#解决粘包" class="headerlink" title="解决粘包"></a>解决粘包</h4><blockquote>
<p>为字节流加上自定义固定长度报头，报头中包含字节流长度，然后一次send到对端，对端在接收时，先从缓存中取出定长的报头，然后再取真实数据</p>
</blockquote>
<p><strong><code>struct</code>模块</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct, json</span><br><span class="line"></span><br><span class="line">header_dic = &#123;<span class="string">&#x27;total_size&#x27;</span>: <span class="number">10241321431312</span>&#125;  <span class="comment"># 用字典存入服务端发送的头信息</span></span><br><span class="line">header_json = json.dumps(header_dic)  <span class="comment"># 将信息序列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(header_json)  <span class="comment"># &#123;&quot;total_size&quot;: 10241321431312&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(header_json))  <span class="comment"># 30  记录序列化信息后的长度</span></span><br><span class="line"></span><br><span class="line">header_total_size = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(header_json))  <span class="comment"># 将这个长度转化成固定为 4 的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(header_total_size))  <span class="comment"># 4 此时就是固定长度</span></span><br><span class="line"><span class="comment"># 客户端处就先接收4字节信息</span></span><br><span class="line"></span><br><span class="line">header_upk = struct.unpack(<span class="string">&#x27;i&#x27;</span>, header_total_size)</span><br><span class="line"><span class="built_in">print</span>(header_upk)  <span class="comment"># (30,)  # 将接收到的4字节固定长度继续接收到了30字节信息,继续再拿30字节的信息</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/QodwhX.jpg" alt="QodwhX"></p>
<p>实现:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket, struct, json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, address = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(address)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res = subprocess.Popen(cmd, shell=<span class="literal">True</span>,</span><br><span class="line">                                   stdout=subprocess.PIPE,</span><br><span class="line">                                   stderr=subprocess.PIPE)</span><br><span class="line">            res1 = res.stdout.read()</span><br><span class="line">            res2 = res.stderr.read()</span><br><span class="line"></span><br><span class="line">            header_dic = &#123;<span class="string">&#x27;total_size&#x27;</span>: <span class="built_in">len</span>(res1) + <span class="built_in">len</span>(res2)&#125;  <span class="comment"># 可以将内容记录到字典内,报头</span></span><br><span class="line">            header_json = json.dumps(header_dic)  <span class="comment"># 序列化字典</span></span><br><span class="line">            header_bytes = header_json.encode(<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 转为bytes类型</span></span><br><span class="line">            header = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(header_bytes))  <span class="comment"># 得到字典的固定字节长度</span></span><br><span class="line"></span><br><span class="line">            conn.send(header)</span><br><span class="line">            conn.send(header_bytes)  <span class="comment"># 发送bytes类型的序列化字典</span></span><br><span class="line"></span><br><span class="line">            conn.send(res1)</span><br><span class="line">            conn.send(res2)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket, struct, json</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    header_bytes_len = struct.unpack(<span class="string">&#x27;i&#x27;</span>, c.recv(<span class="number">4</span>))[<span class="number">0</span>]  <span class="comment"># 获取序列化后的字典的长度</span></span><br><span class="line"></span><br><span class="line">    header_bytes = c.recv(header_bytes_len)  <span class="comment"># 按照序列化后字典的长度接收到序列化的字典</span></span><br><span class="line">    header_json = header_bytes.decode(<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 将序列化后的字典解码</span></span><br><span class="line">    header_dic = json.loads(header_json)  <span class="comment"># 发序化得到记录了信息的字典</span></span><br><span class="line">    total_size = header_dic[<span class="string">&#x27;total_size&#x27;</span>]  <span class="comment"># 此时就拿到了后面要具体接收多少字节的数</span></span><br><span class="line"></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        data = c.recv(<span class="number">1024</span>)  <span class="comment"># 每次接收1024字节</span></span><br><span class="line">        recv_size += <span class="built_in">len</span>(data)</span><br><span class="line">        res += data  <span class="comment"># 最后拼接到 res</span></span><br><span class="line">    <span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure>



<h3 id="UDP协议套接字"><a href="#UDP协议套接字" class="headerlink" title="UDP协议套接字"></a>UDP协议套接字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, address = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data, address)</span><br><span class="line">    s.sendto(data.upper(), address)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    c.sendto(msg.encode(<span class="string">&#x27;utf8&#x27;</span>), (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line">    res, s_address = c.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf8&#x27;</span>), s_address)</span><br></pre></td></tr></table></figure>

<h3 id="socketserver模块实现并发"><a href="#socketserver模块实现并发" class="headerlink" title="socketserver模块实现并发"></a><code>socketserver模块</code>实现并发</h3><blockquote>
<p>基于tcp的套接字，关键就是两个循环，一个链接循环，一个通信循环</p>
<p>socketserver模块中分两大类：server类（解决链接问题）和request类（解决通信问题）</p>
</blockquote>
<p>server类:<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/phJIzv.jpg" alt="phJIzv"></p>
<p>request类：<br><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/nFGdy6.jpg" alt="nFGdy6"></p>
<p>TCP并发</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandler</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                self.request.send(data.upper())</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>), MyRequestHandler, bind_and_activate=<span class="literal">True</span>)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">c.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = c.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure>

<p>UDP并发</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequesthanlder</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="comment"># 必须要写一个函数，叫handle的方法，里面放通信循环</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="comment"># 收到消息，进行解压。第一个值是客户端发来的数据。第二个值是套接字对象，用它来回消息</span></span><br><span class="line">        data,server = self.request       </span><br><span class="line">        <span class="comment"># 将收到的消息转大写回复，所有套接字信息都封装进self里了</span></span><br><span class="line">        server.sendto(data.upper(),self.client_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = socketserver.ThreadingUDPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>),MyRequesthanlder)</span><br><span class="line"></span><br><span class="line">server.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体逻辑同上面TCP协议一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端.py</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;:&quot;</span>).strip()</span><br><span class="line">    client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>))</span><br><span class="line">    res,server_addr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-模块(四)</title>
    <url>/779eb679.html</url>
    <content><![CDATA[<h3 id="1-hashlib模块"><a href="#1-hashlib模块" class="headerlink" title="1. hashlib模块"></a>1. <code>hashlib</code>模块</h3><blockquote>
<p>加密模块</p>
<p>加密: 将明文数据通过一些列算法变成密文，为了数据安全</p>
<p>加密算法: md5、sha、 base、hmac等</p>
</blockquote>
<span id="more"></span>
<h4 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md51 = hashlib.md5()  <span class="comment"># 先决定算法类型,md5普遍使用</span></span><br><span class="line">md51.update(<span class="string">&#x27;哈喽&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 将明文数据传递给md5算法,update只能接受bytes类型数据</span></span><br><span class="line"><span class="comment"># md51.update(b&#x27;hello word&#x27;)  # 当数据是英文和数字的时候可以在前面加 b</span></span><br><span class="line">rest1 = md51.hexdigest()  <span class="comment"># 获取加密之后的密文数据</span></span><br><span class="line"><span class="built_in">print</span>(rest1)  <span class="comment"># 492389292f5e200f6d1518055b0b1755  (一串随机的字符串)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.加密之后的密文数据是没有办法反解密成明文数据的</span></span><br><span class="line"><span class="string">    市面上所谓的破解 其实就是提前算出一系列明文对应的密文</span></span><br><span class="line"><span class="string">    之后比对密文再获取明文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-特性一"><a href="#1-2-特性一" class="headerlink" title="1.2 特性一"></a>1.2 特性一</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 明文数据只要是相同的 那么无论如何传递加密结果肯定是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md52 = hashlib.md5()</span><br><span class="line">md52.update(<span class="string">b&#x27;admin123&#x27;</span>)</span><br><span class="line">rest2 = md52.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(rest2)  <span class="comment"># 0192023a7bbd73250516f069df18b500</span></span><br><span class="line"></span><br><span class="line">md53 = hashlib.md5()</span><br><span class="line">md53.update(<span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">md53.update(<span class="string">b&#x27;123&#x27;</span>)</span><br><span class="line">rest3 = md53.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(rest3)  <span class="comment"># 0192023a7bbd73250516f069df18b500</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-特性二"><a href="#1-3-特性二" class="headerlink" title="1.3 特性二"></a>1.3 特性二</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密文数据越长表示内部对应的算法越复杂 越难被正向破解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">sha1 = hashlib.sha256()</span><br><span class="line">sha1.update(<span class="string">b&#x27;admin123&#x27;</span>)</span><br><span class="line">rest = sha1.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(rest)  <span class="comment"># 240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">密文越长表示算法越复杂 对应的破解算法的难度越高</span></span><br><span class="line"><span class="string">但是越复杂的算法所需要消耗的资源也就越多 密文越长基于网络发送需要占据的数据也就越大</span></span><br><span class="line"><span class="string">具体使用什么算法取决于项目要求 一般情况下md5足够了</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-特性三"><a href="#1-4-特性三" class="headerlink" title="1.4 特性三"></a>1.4 特性三</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 涉及到用户密码存储,都是密文,只要用户自己知道明文是什么</span></span><br><span class="line"><span class="comment"># 内部程序员无法得知明文数据</span></span><br><span class="line"><span class="comment"># 数据泄露也无法得知明文数据</span></span><br></pre></td></tr></table></figure>

<h4 id="1-5-加盐处理"><a href="#1-5-加盐处理" class="headerlink" title="1.5 加盐处理"></a>1.5 加盐处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在对明文数据做加密处理过程前添加一些干扰项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md54 = hashlib.md5()</span><br><span class="line">md54.update(<span class="string">b&#x27;Add salt&#x27;</span>)  <span class="comment"># 此处是自己加的干扰项</span></span><br><span class="line">md54.update(<span class="string">b&#x27;passwordadmin123&#x27;</span>)  <span class="comment"># 此处就是用户传入的数据</span></span><br><span class="line">rest4 = md54.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(rest4)</span><br></pre></td></tr></table></figure>
<h4 id="1-6-动态加盐处理"><a href="#1-6-动态加盐处理" class="headerlink" title="1.6 动态加盐处理"></a>1.6 动态加盐处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在对明文数据做加密处理过程前添加一些变化的干扰项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">password = <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">md55 = hashlib.md5()</span><br><span class="line"><span class="comment"># 动态加盐(干扰项)  当前时间 用户名的部分 uuid(随机字符串(永远不会重复))</span></span><br><span class="line">md55.update(password[::-<span class="number">1</span>].encode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 此时的变化量为用户输入的密码字符串取反的值</span></span><br><span class="line">md55.update(password.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">rest5 = md55.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(rest5)  <span class="comment"># 658056dbefa3427fe4dddfbf28d4d54d</span></span><br></pre></td></tr></table></figure>
<h4 id="1-7-校验文件一致性"><a href="#1-7-校验文件一致性" class="headerlink" title="1.7 校验文件一致性"></a>1.7 校验文件一致性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件不是很大的情况下,可以将所有文件内部全部加密处理</span></span><br><span class="line"><span class="string">但是如果文件特别大,全部加密处理相当的耗时好资源,针对大文件可以使用切片读取的方式 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 方式一: 分开读</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_md5</span>(<span class="params">path</span>):</span></span><br><span class="line">    path_size = os.path.getsize(path)  <span class="comment"># 获取文件的大小</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> path_size &gt;= <span class="number">4096</span>:  <span class="comment"># 如果文件大于4096</span></span><br><span class="line">            cont = f.read(<span class="number">4096</span>)  <span class="comment"># 每次读取文件4096个字节</span></span><br><span class="line">            md5.update(cont)</span><br><span class="line">            path_size -= <span class="number">4096</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cont = f.read()  <span class="comment"># 文件小于4096一次性读取</span></span><br><span class="line">            <span class="keyword">if</span> cont:</span><br><span class="line">                md5.update(cont)</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()  <span class="comment"># 返回加密值</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># print(file_md5(&#x27;a.log&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验两个文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_file</span>(<span class="params">path1, path2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> file_md5([path1]) == file_md5([path2])</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 方式二:</span></span><br><span class="line"><span class="comment"># 指定分片读取策略(读几段 每段几个字节)  10  f.seek()</span></span><br></pre></td></tr></table></figure>
<h3 id="2-logging模块"><a href="#2-logging模块" class="headerlink" title="2. logging模块"></a>2. <code>logging</code>模块</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志有五个等级(从上往下重要程度不一样)</span></span><br><span class="line"><span class="comment"># logging.debug(&#x27;debug级别&#x27;)  # 10</span></span><br><span class="line"><span class="comment"># logging.info(&#x27;info级别&#x27;)  # 20</span></span><br><span class="line"><span class="comment"># logging.warning(&#x27;warning级别&#x27;)  # 30</span></span><br><span class="line"><span class="comment"># logging.error(&#x27;error级别&#x27;)  # 40</span></span><br><span class="line"><span class="comment"># logging.critical(&#x27;critical级别&#x27;)  # 50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;默认记录的级别在30及以上&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">&#x27;x1.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">    handlers=[file_handler,],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line">logging.error(<span class="string">&#x27;日志模块很好学 不要自己吓自己&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.如何控制日志输入的位置</span></span><br><span class="line"><span class="string">    想在文件和终端中同时打印</span></span><br><span class="line"><span class="string">2.不同位置如何做到不同的日志格式</span></span><br><span class="line"><span class="string">    文件详细一些 终端简单一些</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-详细介绍"><a href="#2-2-详细介绍" class="headerlink" title="2.2 详细介绍"></a>2.2 详细介绍</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.logger对象:负责产生日志</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;转账记录&#x27;</span>)</span><br><span class="line"><span class="comment"># 2.filter对象:负责过滤日志(直接忽略)</span></span><br><span class="line"><span class="comment"># 3.handler对象:负责日志产生的位置</span></span><br><span class="line">hd1 = logging.FileHandler(<span class="string">&#x27;a1.log&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 产生到文件的</span></span><br><span class="line">hd2 = logging.FileHandler(<span class="string">&#x27;a2.log&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 产生到文件的</span></span><br><span class="line">hd3 = logging.StreamHandler()  <span class="comment"># 产生在终端的</span></span><br><span class="line"><span class="comment"># 4.formatter对象:负责日志的格式</span></span><br><span class="line">fm1 = logging.Formatter(</span><br><span class="line">    fmt=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">fm2 = logging.Formatter(</span><br><span class="line">    fmt=<span class="string">&#x27;%(asctime)s - %(name)s %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 5.绑定handler对象</span></span><br><span class="line">logger.addHandler(hd1)</span><br><span class="line">logger.addHandler(hd2)</span><br><span class="line">logger.addHandler(hd3)</span><br><span class="line"><span class="comment"># 6.绑定formatter对象</span></span><br><span class="line">hd1.setFormatter(fm1)</span><br><span class="line">hd2.setFormatter(fm2)</span><br><span class="line">hd3.setFormatter(fm1)</span><br><span class="line"><span class="comment"># 7.设置日志等级</span></span><br><span class="line">logger.setLevel(<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 8.记录日志</span></span><br><span class="line">logger.debug(<span class="string">&#x27;写了半天 好累啊&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-配置字典"><a href="#2-3-配置字典" class="headerlink" title="2.3 配置字典"></a>2.3 配置字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心就在于CV</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span> <span class="comment">#其中name为getlogger指定的名字</span></span><br><span class="line"></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line">logfile_path = <span class="string">&#x27;a3.log&#x27;</span></span><br><span class="line"><span class="comment"># log配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,  <span class="comment"># 过滤日志</span></span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: logfile_path,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置  空字符串作为键 能够兼容所有的日志</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 向上（更高level的logger）传递</span></span><br><span class="line">        &#125;,  <span class="comment"># 当键不存在的情况下 (key设为空字符串)默认都会使用该k:v配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置字典</span></span><br><span class="line">logging.config.dictConfig(LOGGING_DIC)  <span class="comment"># 自动加载字典中的配置</span></span><br><span class="line">logger1 = logging.getLogger(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">logger1.debug(<span class="string">&#x27;测试&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-第三方模块"><a href="#3-第三方模块" class="headerlink" title="3. 第三方模块"></a>3. 第三方模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并不是python自带的 需要基于网络下载!!!</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;pip所在的路径添加环境变量&#x27;&#x27;&#x27;</span></span><br><span class="line">下载第三方模块的方式</span><br><span class="line">    方式<span class="number">1</span>:命令行借助于pip工具</span><br><span class="line">        pip3 install 模块名  <span class="comment"># 不知道版本默认是最新版</span></span><br><span class="line">        pip3 install 模块名==版本号  <span class="comment"># 指定版本下载</span></span><br><span class="line">        pip3 install 模块名 -i 仓库地址  <span class="comment"># 临时切换</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;命令行形式永久修改需要修改python解释器源文件&#x27;&#x27;&#x27;</span></span><br><span class="line">    方式<span class="number">2</span>:pycharm快捷方式</span><br><span class="line">        settings </span><br><span class="line">        	project </span><br><span class="line">            	project interprter</span><br><span class="line">                	双击或者加号</span><br><span class="line">        点击右下方manage管理添加源地址即可</span><br><span class="line"><span class="comment"># 下载完第三方模块之后 还是使用import或from import句式导入使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pip命令默认下载的渠道是国外的python官网(有时候会非常的慢)</span></span><br><span class="line"><span class="string">我们可以切换下载的源(仓库)</span></span><br><span class="line"><span class="string">    (1) 阿里云 http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">    (2) 豆瓣 http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="string">    (3) 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br><span class="line"><span class="string">    (4) 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="string">    (5) 华中科技大学http://pypi.hustunique.com/</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">pip3 install openpyxl -i http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">下载第三方模块可能报错的情况及解决措施</span></span><br><span class="line"><span class="string">	1.报错的提示信息中含有关键字timeout</span></span><br><span class="line"><span class="string">		原因:网络不稳定</span></span><br><span class="line"><span class="string">		措施:再次尝试 或者切换更加稳定的网络</span></span><br><span class="line"><span class="string">	2.找不到pip命令</span></span><br><span class="line"><span class="string">		环境变量问题</span></span><br><span class="line"><span class="string">	3.没有任何的关键字 不同的模块报不同的错</span></span><br><span class="line"><span class="string">		原因:模块需要特定的计算机环境</span></span><br><span class="line"><span class="string">		措施:拷贝报错信息 打开浏览器 百度搜索即可</span></span><br><span class="line"><span class="string">			pip下载某个模块报错错误信息</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>linux全局配置pip源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line"></span><br><span class="line">cat ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = https://pypi.douban.com/simple/</span><br><span class="line">[install]</span><br><span class="line">use-mirrors = <span class="literal">true</span></span><br><span class="line">mirrors = https://pypi.douban.com/simple/</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-模块(三)</title>
    <url>/8ddd5976.html</url>
    <content><![CDATA[<h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><ul>
<li><p><code>random()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 随机产生一个0-1之间的小数</span></span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p><code>randint()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.radint(<span class="number">1</span>, <span class="number">6</span>))  <span class="comment"># 随机产生一个1-6之间的整数</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>uniform()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>, <span class="number">6</span>)) <span class="comment"># 随机产生一个1-6之间的小数</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>choice()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="string">&#x27;一等奖&#x27;</span>, <span class="string">&#x27;二等奖&#x27;</span>, <span class="string">&#x27;三等奖&#x27;</span>, <span class="string">&#x27;谢谢惠顾&#x27;</span>]))  <span class="comment"># 随机抽取其中一个</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>sample()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.sample([<span class="string">&#x27;安徽省&#x27;</span>, <span class="string">&#x27;江苏省&#x27;</span>, <span class="string">&#x27;山东省&#x27;</span>, <span class="string">&#x27;广东省&#x27;</span>],<span class="number">2</span>))  <span class="comment"># 随机出去指定样本数量</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>shuffle()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">l = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">random.shuffle(l)  <span class="comment"># 随机打乱容器类型中的元素</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure></li>
<li><p><code>randrange()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))  <span class="comment"># 随机产生1到10之间的奇数,2 步长</span></span><br></pre></td></tr></table></figure></li>
<li><p>验证码生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_code</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="comment"># 提前定义一个存储验证码的变量</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 由于需要产生五位 每一位的操作都是一样的 所以肯定需要使用循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 随机产生一个数字</span></span><br><span class="line">        random_int = <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="comment"># 随机产生一个大写字母</span></span><br><span class="line">        random_upper = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">        <span class="comment"># 随机产生一个小写字母</span></span><br><span class="line">        random_lower = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        <span class="comment"># 随机选取一个</span></span><br><span class="line">        temp = random.choice([random_int, random_upper, random_lower])</span><br><span class="line">        <span class="comment"># 拼接到字符串中</span></span><br><span class="line">        code += temp</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line">code1 = get_code(<span class="number">5</span>)</span><br><span class="line">code2 = get_code(<span class="number">10</span>)</span><br><span class="line">code3 = get_code(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(code1,code2,code3)</span><br></pre></td></tr></table></figure>
<h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3></li>
<li><p><code>mkdir()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.mkdir(<span class="string">&#x27;test&#x27;</span>)  <span class="comment"># 只能创建单级目录</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>makedirs()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.makesdirs(<span class="string">&#x27;test/tes1&#x27;</span>)  <span class="comment"># 创建test目录和下级目录test1(当前斜线表示Linux系统内)  </span></span><br><span class="line"><span class="comment"># 和 linux命令 mkdir -p test/test1 结果一样</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>rmdir()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.rmdir(<span class="string">&#x27;test&#x27;</span>)  <span class="comment"># 只能删除空目录,否则会报错</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取当前文件所在路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.dirname(__file__)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br></pre></td></tr></table></figure></li>
<li><p>路劲拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.dirname(__file__)</span><br><span class="line">db_path = os.path.join(path, <span class="string">&#x27;db&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(db_path)  <span class="comment"># 返回当前路径加db</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>listdir()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列举出指定路径下的文件名称(任意类型文件) 返回的是一个列表</span></span><br><span class="line"><span class="comment"># 相当于Linux命令的 ls</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.listdir()) </span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">&#x27;/tmp&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p><code>remove()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;a.txt&#x27;</span>)  <span class="comment"># 删除当前a.txt</span></span><br><span class="line"><span class="comment"># 删除文件不能是目录  相当于 rm -f </span></span><br></pre></td></tr></table></figure></li>
<li><p><code>rename()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;b.txt&#x27;</span>)  <span class="comment"># 将a.txt 改名为 b.txt</span></span><br><span class="line">os.rename(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>)  <span class="comment"># 将test目录改为test1目录</span></span><br><span class="line"><span class="comment"># 可以改文件或者目录名字 类似Linux命令的 mv</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>getcwd()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="built_in">print</span>(os.getcwd())  <span class="comment"># 获取当前工作路径  Linux --&gt; pwd </span></span><br></pre></td></tr></table></figure></li>
<li><p><code>chdir()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.chdir(<span class="string">&#x27;/mnt&#x27;</span>)  <span class="comment"># 切换工作路径到/mnt目录  Linux --&gt; cd</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>exists()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断目录或者文件是否存在 存在返回Treu 不存在返回False</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;/tmp&#x27;</span>))  <span class="comment"># 存在目录/tmp返回True 不存在返回False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;/tmp/test.txt&#x27;</span>))  <span class="comment"># 存在文件test.txt 返回True 不存在返回False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;/tmp/test&#x27;</span>))  <span class="comment"># 存在目录/tmp/test返回True 不存在返回False</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>isfile()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否是文件,是文件返回True,是目录返回False</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">&#x27;/tmp/test.txt&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">&#x27;/tmp/&#x27;</span>))  <span class="comment"># Fales</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>isdir()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否是目录,是目录返回True,是文件返回False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;/tmp/test.txt&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">&#x27;/tmp/&#x27;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>getsize()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取文件大小(字节数)</span></span><br><span class="line"><span class="built_in">print</span>(os.path.getsize(<span class="string">r&#x27;a.txt&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>获取目录文件内的文件并按选择读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basic_path = os.path.dirname(__file__)  <span class="comment"># 获取当前文件的路径</span></span><br><span class="line">log_path = os.path.join(basic_path, <span class="string">&#x27;test1&#x27;</span>)  <span class="comment"># 拼接路径,得到 当前路径/test1</span></span><br><span class="line">file_list = os.listdir(log_path)  <span class="comment"># 得到 test1路径下的文件列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(file_list,<span class="number">1</span>):  <span class="comment"># 1 file_list[0], 2 file_list[1], 3 file_list[2]</span></span><br><span class="line">        <span class="built_in">print</span>(i,j)</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&#x27;请输入想查看的日志: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice.isdigit():</span><br><span class="line">        choice = <span class="built_in">int</span>(choice)</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file_list) + <span class="number">1</span>):  <span class="comment"># range顾头不顾尾所以 加一</span></span><br><span class="line">            file_name = file_list[choice - <span class="number">1</span>]  <span class="comment"># choice是从1开始的,所以取列表索引时需要 减一</span></span><br><span class="line">            file_path = os.path.join(log_path,file_name)  <span class="comment"># 拼接选择的文件绝对路径</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="built_in">print</span>(f.read())  <span class="comment"># 打印文件内容</span></span><br></pre></td></tr></table></figure>
<h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.path)  <span class="comment"># 搜索模块的路径集</span></span><br><span class="line"><span class="built_in">print</span>(sys.version)  <span class="comment"># 返回python解释器版本以及所处的平台</span></span><br><span class="line"><span class="built_in">print</span>(sys.platform)  <span class="comment"># 返回当前操作系统类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.argv)  <span class="comment"># 获取当前执行文件的绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.argv 第二种用法,类似shell脚本的外部传参</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    username = sys.argv[<span class="number">1</span>]  <span class="comment"># 相当于shell脚本中 $1</span></span><br><span class="line">    password = sys.argv[<span class="number">2</span>]  <span class="comment"># 相当于shell脚本中 $2</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正常执行文件内容&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入用户名和密码&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;目前只能让你体验一下(游客模式)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">sys.exit(<span class="number">1</span>)  <span class="comment">#  执行python执行脚本后抛出的异常信息默认为0,在shell中可以使用  echo $?  命令可以捕获到 一般认为0是正常执行，如果抛出其他数值则出现异常,如果python脚本中找到确切的数字就可以找到指定位置</span></span><br></pre></td></tr></table></figure>

<h3 id="序列化模块"><a href="#序列化模块" class="headerlink" title="序列化模块"></a>序列化模块</h3><blockquote>
<p>json格式化数据: 跨语言传输</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d,<span class="built_in">type</span>(d))  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;pwd&#x27;: 123&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典转为json格式的字符串(序列化), 此时是 str 类型, 但是是json的格式</span></span><br><span class="line">res1 = json.dumps(d)</span><br><span class="line"><span class="built_in">print</span>(res1, <span class="built_in">type</span>(res1))  <span class="comment"># &#123;&quot;username&quot;: &quot;jason&quot;, &quot;pwd&quot;: 123&#125; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将json格式字符串转成当前语言对应的某个数据类型(反序列化)</span></span><br><span class="line">res2 = json.loads(res1)</span><br><span class="line"><span class="built_in">print</span>(res2, <span class="built_in">type</span>(res2))  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;pwd&#x27;: 123&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes的</span></span><br><span class="line">bytes_data = <span class="string">b&#x27;&#123;&quot;username&quot;: &quot;jason&quot;, &quot;pwd&quot;: 123&#125;&#x27;</span></span><br><span class="line">bytes_str = bytes_data.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">bytes_dict = json.loads(bytes_str)</span><br><span class="line"><span class="built_in">print</span>(bytes_dict, <span class="built_in">type</span>(bytes_dict))  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;pwd&#x27;: 123&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典以json格式写入文件(序列化)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典取出来(反序列化)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">res = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(res, <span class="built_in">type</span>(res))  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;pwd&#x27;: 123&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用write 可以使用dump直接将 字典d 以json格式写入文件(序列化)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(d, f)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不用read 使用load 将字典d 从文件中去出来,直接转为字典(反序列化)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    rest = json.load(f)</span><br><span class="line"><span class="built_in">print</span>(rest, <span class="built_in">type</span>(rest))  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;pwd&#x27;: 123&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">暂且可以简单的理解为</span></span><br><span class="line"><span class="string">    序列化就是将其他数据类型转换成字符串过程</span></span><br><span class="line"><span class="string">        json.dumps()</span></span><br><span class="line"><span class="string">    反序列化就是将字符串转换成其他数据类型</span></span><br><span class="line"><span class="string">        json.loads()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = subprocess.Popen(<span class="string">&#x27;ps -ef&#x27;</span>,  <span class="comment"># 在终端运行的命令</span></span><br><span class="line">                       shell=<span class="literal">True</span>,  <span class="comment"># 新开一个端口</span></span><br><span class="line">                       stdout=subprocess.PIPE,  <span class="comment"># 执行完命令, 将正确输出放到一个管道里</span></span><br><span class="line">                       stderr=subprocess.PIPE  <span class="comment"># 将错误输出放到一个管道里</span></span><br><span class="line">                       )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stdout&#x27;</span>,res.stdout.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 获取正确命令执行之后的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stderr&#x27;</span>,res.stderr.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 获取错误命令执行之后的结果</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-模块(二)</title>
    <url>/f32e795d.html</url>
    <content><![CDATA[<h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><blockquote>
<p>在python中使用正则必须借助于模块，re是其中之一</p>
</blockquote>
<ul>
<li><p><code>re.findall()</code></p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据正则匹配所有符合条件的内容</span></span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;test adsa dcxzawqd &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [&#x27;t&#x27;, &#x27;t&#x27;] 匹配到有元素时结果是一个列表，没有匹配到时是一个空列表</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.search()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据正则匹配到一个符合条件的结束</span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;test adsa dcxzawqd &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;_sre.SRE_Match object; span=(6, 7), match=&#x27;d&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.group())  <span class="comment"># d</span></span><br><span class="line"><span class="comment"># 返回的是一个结果对象,想要获取值需要通过 group() </span></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;test adsa dcxzawqd &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(res.group())  <span class="comment"># 当没有匹配到值时用 group() 取值会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用判断是否取到值</span></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">  	<span class="built_in">print</span>(<span class="string">&#x27;res.group()&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  	<span class="built_in">print</span>(<span class="string">&#x27;没匹配到值&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><code>re.match()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据正则从头开始匹配,开头匹配上了就停止匹配 </span></span><br><span class="line"></span><br><span class="line">res = re.match(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;abacad&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.group())  <span class="comment"># a</span></span><br><span class="line"><span class="comment"># 返回的也是一个结果对象,想获取值需要 group() </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.match(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bbacad&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(res.group())  <span class="comment"># 报错</span></span><br><span class="line"><span class="comment"># 当没有匹配到时也会报错</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.split()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先用 a 分割得到 &#x27;&#x27; 和 &#x27;bbcdd&#x27;</span></span><br><span class="line"><span class="comment"># 再用 b 分割得到 &#x27;&#x27; &#x27;&#x27; 和 &#x27;bcdd&#x27;</span></span><br><span class="line"><span class="comment"># 再用 b 分割得到 &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; &#x27;cdd&#x27;</span></span><br><span class="line">res = re.split(<span class="string">&#x27;[ab]&#x27;</span>,<span class="string">&#x27;abbcdd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;cdd&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.sub()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类似于字符串类型的replace方法</span></span><br><span class="line">res1 = re.sub(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;eva3jason4yuan4&#x27;</span>,<span class="number">1</span>)  <span class="comment"># 替换正则匹配到的内容</span></span><br><span class="line">res2 = re.sub(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;eva3jason4yuan4&#x27;</span>)  <span class="comment"># 不写默认替换所有</span></span><br><span class="line"><span class="built_in">print</span>(res1)  <span class="comment"># evaHjason4yuan4</span></span><br><span class="line"><span class="built_in">print</span>(res2)  <span class="comment"># evaHjasonHyuanH</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.subn()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回元组 并提示替换了几处</span></span><br><span class="line">res = re.subn(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;eva3jason4yuan4&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># (&#x27;evaHjason4yuan4&#x27;, 1)</span></span><br><span class="line">res = re.subn(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;eva3jason4yuan4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># (&#x27;evaHjasonHyuanH&#x27;, 3)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.compile()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将正则表达式生成一个Pattern对象</span></span><br><span class="line">regexp_obj = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d+&#x27;</span>)</span><br><span class="line">res1 = regexp_obj.search(<span class="string">&#x27;absd213j1hjj213jk&#x27;</span>)</span><br><span class="line">res2 = regexp_obj.match(<span class="string">&#x27;123hhkj2h1j3123&#x27;</span>)</span><br><span class="line">res3 = regexp_obj.findall(<span class="string">&#x27;1213k1j2jhj21j3123hh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res1, res2, res3)  <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match=&#x27;213&#x27;&gt; &lt;_sre.SRE_Match object; span=(0, 3), match=&#x27;123&#x27;&gt; [&#x27;1213&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;21&#x27;, &#x27;3123&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(res1.group(), res2.group())  <span class="comment"># 213 123</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>re.finditer()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将匹配到的内容存为一个迭代对象</span></span><br><span class="line">res = re.finditer(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;ashdklah21h23kj12jk3klj112312121kl131&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>([i.group() <span class="keyword">for</span> i <span class="keyword">in</span> res]) <span class="comment"># [&#x27;21&#x27;, &#x27;23&#x27;, &#x27;12&#x27;, &#x27;3&#x27;, &#x27;112312121&#x27;, &#x27;131&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>分组优先展示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无名分组</span></span><br><span class="line"><span class="comment"># findall针对分组优先展示</span></span><br><span class="line">res = re.findall(<span class="string">&quot;^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[0-9x])?$&quot;</span>,<span class="string">&#x27;110105199812067023&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [&#x27;023&#x27;]</span></span><br><span class="line"><span class="comment"># 取消分组优先展示</span></span><br><span class="line">res1 = re.findall(<span class="string">&quot;^[1-9](?:\d&#123;14&#125;)(?:\d&#123;2&#125;[0-9x])?$&quot;</span>,<span class="string">&#x27;110105199812067023&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res1)  <span class="comment"># [&#x27;110105199812067023&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组</span></span><br><span class="line">res = re.search(<span class="string">&#x27;^[1-9](?P&lt;xxx&gt;\d&#123;14&#125;)(?P&lt;ooo&gt;\d&#123;2&#125;[0-9x])?$&#x27;</span>,<span class="string">&#x27;110105199812067023&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.group())  <span class="comment"># 110105199812067023</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>))  <span class="comment"># 10105199812067  无名分组的取值方式(索引取)</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;xxx&#x27;</span>))  <span class="comment"># 10105199812067</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;ooo&#x27;</span>))  <span class="comment"># 023</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过正则获取网页信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://www.redbull.com.cn/about/branch&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;index.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res.content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">title_list = re.findall(<span class="string">&#x27;&lt;h2&gt;(.*?)&lt;/h2&gt;&#x27;</span>, data)</span><br><span class="line">address_list = re.findall(<span class="string">&quot;&lt;p class=&#x27;mapIco&#x27;&gt;(.*?)&lt;/p&gt;&quot;</span>, data)</span><br><span class="line">zip_code_list = re.findall(<span class="string">&quot;&lt;p class=&#x27;mailIco&#x27;&gt;(.*?)&lt;/p&gt;&quot;</span>, data)</span><br><span class="line">phone_list = re.findall(<span class="string">&quot;&lt;p class=&#x27;telIco&#x27;&gt;(.*?)&lt;/p&gt;&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">zip</span>(title_list, address_list, zip_code_list, phone_list)</span><br><span class="line"><span class="comment"># print(list(res))</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        公司名称: %s</span></span><br><span class="line"><span class="string">        公司地址: %s</span></span><br><span class="line"><span class="string">        公司邮编: %s</span></span><br><span class="line"><span class="string">        公司电话: %s</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> % (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h3><blockquote>
<p>该模块内部提供了一些高阶的数据类型</p>
</blockquote>
<ul>
<li><p><code> namedtuple()</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具名元组</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">point = namedtuple(<span class="string">&#x27;坐标&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">res = point(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 坐标(x=11, y=22)</span></span><br><span class="line"><span class="built_in">print</span>(res.x)  <span class="comment"># 11</span></span><br><span class="line"><span class="built_in">print</span>(res.y)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">card = namedtuple(<span class="string">&#x27;扑克&#x27;</span>, <span class="string">&#x27;花色 点数&#x27;</span>)</span><br><span class="line">card1 = card(<span class="string">&#x27;♠&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">card2 = card(<span class="string">&#x27;♥&#x27;</span>, <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(card1)  <span class="comment"># 扑克(花色=&#x27;♠&#x27;, 点数=&#x27;A&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(card2)  <span class="comment"># 扑克(花色=&#x27;♥&#x27;, 点数=&#x27;K&#x27;)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>deque()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双端队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列模块</span></span><br><span class="line">    <span class="keyword">import</span> queue  <span class="comment"># 内置队列模块:FIFO</span></span><br><span class="line">    <span class="comment"># 初始化队列</span></span><br><span class="line">    <span class="comment"># q = queue.Queue()</span></span><br><span class="line">    <span class="comment"># 往队列中添加元素</span></span><br><span class="line">    q.put(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    q.put(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">    q.put(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line">    <span class="comment"># 从队列中获取元素</span></span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())  <span class="comment"># 值去没了就会原地等待</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deque()</span></span><br><span class="line">		<span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    q = deque([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])</span><br><span class="line">    q.append(<span class="number">44</span>)  <span class="comment"># 从右边添加</span></span><br><span class="line">    q.appendleft(<span class="number">55</span>)  <span class="comment"># 从左边添加</span></span><br><span class="line">    <span class="built_in">print</span>(q.pop())  <span class="comment"># 从右边取值</span></span><br><span class="line">    <span class="built_in">print</span>(q.popleft())  <span class="comment"># 从做边取值</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>OrderedDict()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有序字典</span></span><br><span class="line">    <span class="comment"># 无序的字典</span></span><br><span class="line">    normal_dict = <span class="built_in">dict</span>([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>), (<span class="string">&#x27;pwd&#x27;</span>, <span class="number">123</span>), (<span class="string">&#x27;hobby&#x27;</span>, <span class="string">&#x27;study&#x27;</span>)])</span><br><span class="line">    <span class="built_in">print</span>(normal_dict)  <span class="comment"># &#123;&#x27;hobby&#x27;: &#x27;study&#x27;, &#x27;pwd&#x27;: 123, &#x27;name&#x27;: &#x27;jason&#x27;&#125; 每次打印出来顺序都不一样</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    order_dict = OrderedDict([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>), (<span class="string">&#x27;pwd&#x27;</span>, <span class="number">123</span>), (<span class="string">&#x27;hobby&#x27;</span>, <span class="string">&#x27;study&#x27;</span>)])</span><br><span class="line">    <span class="built_in">print</span>(order_dict)  <span class="comment"># 打印结果顺序不变</span></span><br><span class="line"></span><br><span class="line">    OrderedDict([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>), (<span class="string">&#x27;pwd&#x27;</span>, <span class="number">123</span>), (<span class="string">&#x27;hobby&#x27;</span>, <span class="string">&#x27;study&#x27;</span>)])</span><br><span class="line">    order_dict[<span class="string">&#x27;xxx&#x27;</span>] = <span class="number">111</span></span><br><span class="line">    <span class="built_in">print</span>(order_dict)  <span class="comment"># 添加的值在最后面</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
<li><p><code>defaultdict()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认字典</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">values = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>]</span><br><span class="line">d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> values:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">60</span>:</span><br><span class="line">        d[<span class="string">&#x27;k1&#x27;</span>].append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[<span class="string">&#x27;k2&#x27;</span>].append(i)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># defaultdict(&lt;class &#x27;list&#x27;&gt;, &#123;&#x27;k2&#x27;: [11, 22, 33, 44, 55], &#x27;k1&#x27;: [66, 77, 88, 99, 90]&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>Counter()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符出现的次数</span></span><br><span class="line">res = <span class="string">&#x27;abcdeabcdabcaba&#x27;</span></span><br><span class="line">new_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> new_dict:</span><br><span class="line">        new_dict[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_dict[i] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(new_dict)  <span class="comment"># &#123;&#x27;a&#x27;: 5, &#x27;b&#x27;: 4, &#x27;c&#x27;: 3, &#x27;d&#x27;: 2, &#x27;e&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Counter()</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">ret = Counter(res)</span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># Counter(&#123;&#x27;a&#x27;: 5, &#x27;b&#x27;: 4, &#x27;c&#x27;: 3, &#x27;d&#x27;: 2, &#x27;e&#x27;: 1&#125;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><p>时间的三种表现形式:</p>
<ul>
<li>时间戳: 时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量</li>
<li>结构化时间: 元组(struct_time) 共九个元素:(年，月，日，时，分，秒，一年中第几周，一年中第几天等）</li>
<li>格式化时间: 格式化的时间字符串(Format String)： ‘1999-12-06’</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line">time.sleep()  <span class="comment"># 原地阻塞指定秒数</span></span><br><span class="line">time.time()  <span class="comment"># 获取当前时间戳</span></span><br></pre></td></tr></table></figure>

<p><strong>python中时间日期格式化符号</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python中时间日期格式化符号：</span><br><span class="line">%y 两位数的年份表示（<span class="number">00</span>-<span class="number">99</span>）</span><br><span class="line">%Y 四位数的年份表示（<span class="number">000</span>-<span class="number">9999</span>）</span><br><span class="line">%m 月份（01-<span class="number">12</span>）</span><br><span class="line">%d 月内中的一天（<span class="number">0</span>-<span class="number">31</span>）</span><br><span class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span>-<span class="number">23</span>）</span><br><span class="line">%I <span class="number">12</span>小时制小时数（01-<span class="number">12</span>）</span><br><span class="line">%M 分钟数（<span class="number">00</span>=<span class="number">59</span>）</span><br><span class="line">%S 秒（<span class="number">00</span>-<span class="number">59</span>）</span><br><span class="line">%a 本地简化星期名称</span><br><span class="line">%A 本地完整星期名称</span><br><span class="line">%b 本地简化的月份名称</span><br><span class="line">%B 本地完整的月份名称</span><br><span class="line">%c 本地相应的日期表示和时间表示</span><br><span class="line">%j 年内的一天（001-<span class="number">366</span>）</span><br><span class="line">%p 本地A.M.或P.M.的等价符</span><br><span class="line">%U 一年中的星期数（<span class="number">00</span>-<span class="number">53</span>）星期天为星期的开始</span><br><span class="line">%w 星期（<span class="number">0</span>-<span class="number">6</span>），星期天为星期的开始</span><br><span class="line">%W 一年中的星期数（<span class="number">00</span>-<span class="number">53</span>）星期一为星期的开始</span><br><span class="line">%x 本地相应的日期表示</span><br><span class="line">%X 本地相应的时间表示</span><br><span class="line">%Z 当前时区的名称</span><br><span class="line">%% %号本身</span><br></pre></td></tr></table></figure>

<p><strong>python中结构化时间</strong></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/cI9gOu.png" alt="cI9gOu"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.time()</span><br><span class="line"><span class="number">1637840852.839533</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2021-11-25 19:47:34&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2021-11-25 19:47:56&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">19</span>, tm_min=<span class="number">50</span>, tm_sec=<span class="number">35</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">329</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>几种格式之间的转换</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/bEbO8P.jpg" alt="bEbO8P"></p>
<h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.date.today())  <span class="comment"># 当前年月日</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.today())  <span class="comment"># 当前年月日时分秒</span></span><br><span class="line"></span><br><span class="line">res = datetime.datetime.today()</span><br><span class="line"><span class="built_in">print</span>(res.year)  <span class="comment"># 返回当前年</span></span><br><span class="line"><span class="built_in">print</span>(res.month)  <span class="comment"># 返回当前月</span></span><br><span class="line"><span class="built_in">print</span>(res.day)  <span class="comment"># 返回当前日</span></span><br><span class="line"><span class="built_in">print</span>(res.weekday())  <span class="comment"># 返回星期(0-6) 0代表周一</span></span><br><span class="line"><span class="built_in">print</span>(res.isoweekday())   <span class="comment"># 返回星期(1-7) 1代表周一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间差</span></span><br><span class="line">ctime = datetime.datetime.today()</span><br><span class="line">time_tel = datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ctime)  <span class="comment"># 返回当前年月日时分秒</span></span><br><span class="line"><span class="built_in">print</span>(ctime - time_tel)  <span class="comment"># 当前年月日时分秒往后推三天</span></span><br><span class="line"><span class="built_in">print</span>(ctime + time_tel)  <span class="comment"># 当前年月日时分秒往前推三天</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日期对象 = 日期对象 +/- timedelta对象</span></span><br><span class="line"><span class="string">timedelta对象 = 日期对象 +/- 日期对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ret = ctime + time_tel</span><br><span class="line"><span class="built_in">print</span>(ret - ctime)  <span class="comment"># 3 days, 0:00:00</span></span><br><span class="line"><span class="built_in">print</span>(ctime - ret)  <span class="comment"># -3 days, 0:00:00</span></span><br></pre></td></tr></table></figure>



<p>python标准库：<a href="https://docs.python.org/zh-cn/3.6/library/">https://docs.python.org/zh-cn/3.6/library/</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装NVIDIA驱动</title>
    <url>/b9c60b23.html</url>
    <content><![CDATA[<h3 id="安装NVIDIA驱动"><a href="#安装NVIDIA驱动" class="headerlink" title="安装NVIDIA驱动"></a>安装NVIDIA驱动</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭桌面</span></span><br><span class="line">systemctl <span class="built_in">disable</span> gdm3</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用nouveau</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;blacklist nouveau&quot;</span> &gt;&gt;  /etc/modprobe.d/blacklist.conf</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;options nouveau modeset=0&quot;</span> &gt;&gt;  /etc/modprobe.d/blacklist.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官网下载Linux版驱动 https://www.nvidia.cn/Download/index.aspx</span></span><br><span class="line"></span><br><span class="line">chmod +x NVIDIA-Linux-x86_64-440.100.run</span><br><span class="line">apt install curl make gcc g++ wget pkg-config --reinstall -y</span><br><span class="line"></span><br><span class="line">./NVIDIA-Linux-x86_64-440.100.run  -a -q -s -z -Z</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭桌面</span></span><br><span class="line">systemctl <span class="built_in">disable</span> gdm3</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用nouveau</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;blacklist nouveau&quot;</span> &gt;&gt;  /etc/modprobe.d/blacklist.conf</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;options nouveau modeset=0&quot;</span> &gt;&gt;  /etc/modprobe.d/blacklist.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找内核版本</span></span><br><span class="line">cat /proc/driver/nvidia/version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载显卡残留依赖</span></span><br><span class="line">sudo apt-get --purge remove nvidia* -y</span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;*nvidia*&quot;</span> -y</span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;*cublas*&quot;</span> <span class="string">&quot;cuda*&quot;</span> -y</span><br><span class="line">sudo apt autoremove -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装驱动460版本</span></span><br><span class="line">apt install nvidia-headless-460 -y</span><br><span class="line">apt install nvidia-utils-460</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装驱动455版本</span></span><br><span class="line">apt install -y nvidia-driver-455 nvidia-utils-455 nvidia-cuda-dev nvidia-cuda-toolkit nvidia-opencl-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查显卡驱动</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<h3 id="禁止Ubuntuz自动更新软件包"><a href="#禁止Ubuntuz自动更新软件包" class="headerlink" title="禁止Ubuntuz自动更新软件包"></a>禁止Ubuntuz自动更新软件包</h3><ul>
<li>防止自动更新依赖之后驱动无法正常使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s#1#0#g&#x27;</span> /etc/apt/apt.conf.d/20auto-upgrades 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">sed -i <span class="string">&#x27;s#1#0#g&#x27;</span> /etc/apt/apt.conf.d/10periodic 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop apt-daily.service 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop apt-daily.timer 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop apt-daily-upgrade.service 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop apt-daily-upgrade.timer 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl <span class="built_in">disable</span> apt-daily.service 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl <span class="built_in">disable</span> apt-daily.timer 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl <span class="built_in">disable</span> apt-daily-upgrade.service 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line">systemctl <span class="built_in">disable</span> apt-daily-upgrade.timer 1&gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Ubuntu</tag>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>python-软件目录规范和正则表达式</title>
    <url>/26f31071.html</url>
    <content><![CDATA[<h3 id="1-软件开发目录规范"><a href="#1-软件开发目录规范" class="headerlink" title="1. 软件开发目录规范"></a>1. 软件开发目录规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">demo</span><br><span class="line">├── <span class="built_in">bin</span>  <span class="comment"># 存放一系列启动文件,当启动文件很少或者只有一个时也可以直接放外面</span></span><br><span class="line">│   └── start.py</span><br><span class="line">├── conf  <span class="comment"># 存放一系列配置文件</span></span><br><span class="line">│   └── settings.py  <span class="comment"># 一般情况下该文件的变量名都大写</span></span><br><span class="line">├── core  <span class="comment"># 存放项目核心代码文件</span></span><br><span class="line">│   └── src.py</span><br><span class="line">├── db  <span class="comment"># 存放数据相关文件</span></span><br><span class="line">│   └── userinfo.txt</span><br><span class="line">├── lib  <span class="comment"># 存放公共的功能</span></span><br><span class="line">│   └── common.py</span><br><span class="line">├── log  <span class="comment"># 存放日志的目录</span></span><br><span class="line">│   └── log.txt</span><br><span class="line">├── readme  <span class="comment"># 存放相关信息(使用说明等)</span></span><br><span class="line">└── requirements.txt  <span class="comment"># 存放项目所需的第三方模块及版本号</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2. 正则表达式"></a>2. 正则表达式</h3><ul>
<li><p>正则表达式是利用一些特殊符号的组合去字符串中筛选出符合条件的数据</p>
</li>
<li><p>工具 <a href="https://tool.chinaz.com/regex">https://tool.chinaz.com/regex</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断输入的数字组合是否是合法的手机号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.必须是11位</span></span><br><span class="line"><span class="string">2.必须是纯数字</span></span><br><span class="line"><span class="string">3.必须符合手机号的排布  15 16 18 19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># phone = input(&#x27;请输入你的手机号&gt;&gt;&gt;:&#x27;).strip()</span></span><br><span class="line"><span class="comment"># if len(phone) == 11:</span></span><br><span class="line"><span class="comment">#     if phone.isdigit():</span></span><br><span class="line"><span class="comment">#         if phone.startswith(&#x27;15&#x27;) or phone.startswith(&#x27;16&#x27;) or phone.startswith(&#x27;18&#x27;) or phone.startswith(&#x27;19&#x27;):</span></span><br><span class="line"><span class="comment">#             print(&#x27;手机号正确&#x27;)</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             print(&#x27;格式不对&#x27;)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print(&#x27;手机号必须是纯数字&#x27;)</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     print(&#x27;必须是11位&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">phone_number = <span class="built_in">input</span>(<span class="string">&#x27;please input your phone number ： &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">&#x27;^(13|14|15|18)[0-9]&#123;9&#125;$&#x27;</span>,phone_number):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;是合法的手机号码&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不是合法的手机号码&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-1-字符组"><a href="#2-1-字符组" class="headerlink" title="2.1 字符组"></a>2.1 字符组</h4><ul>
<li>特征是使用中括号括起来的 ，字符串默认只能单个单个字符匹配</li>
</ul>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[123456789]简写[0-9]</td>
<td align="left">匹配数字0-9之间任何一个数字</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">匹配小写字母a-z其中任意一个字母</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">匹配大写字母a-z其中任意一个字母</td>
</tr>
<tr>
<td align="left">[a-zA-Z0-9]</td>
<td align="left">匹配所有数字、大写字母、小写字母</td>
</tr>
</tbody></table>
<h4 id="2-2-特殊符号"><a href="#2-2-特殊符号" class="headerlink" title="2.2 特殊符号"></a>2.2 特殊符号</h4><ul>
<li>特殊符号默认也只能匹配单个字符</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="left">匹配数字</td>
</tr>
<tr>
<td align="center">^</td>
<td align="left">匹配字符串的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="left">匹配字符串的结尾</td>
</tr>
<tr>
<td align="center">a|b</td>
<td align="left">匹配字符a或b</td>
</tr>
<tr>
<td align="center">()</td>
<td align="left">匹配括号内的表达式也表示一个组</td>
</tr>
<tr>
<td align="center">[…]</td>
<td align="left">匹配字符组中的字符</td>
</tr>
<tr>
<td align="center">[^…]</td>
<td align="left">匹配除了字符组中字符的所有字符</td>
</tr>
</tbody></table>
<ul>
<li><code>^</code>与<code>$</code>组合使用可以精准限制要查找的数据</li>
</ul>
<h4 id="2-3-量词"><a href="#2-3-量词" class="headerlink" title="2.3 量词"></a>2.3 量词</h4><ul>
<li>表达式在没有量词的修饰情况下都是单个匹配</li>
<li>量词必须结合(字符串、特殊符号等)一起使用，不能单独出现</li>
<li>量词只能影响前面的一个表达式(ab+ 只能影响b)</li>
<li>正则表达式中的量词默认都是‘贪婪匹配’</li>
</ul>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复零次或者更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或者更多次</td>
</tr>
<tr>
<td>？</td>
<td>重复零次或者一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或者更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<h4 id="2-4-贪婪匹配与非贪婪匹配"><a href="#2-4-贪婪匹配与非贪婪匹配" class="headerlink" title="2.4 贪婪匹配与非贪婪匹配"></a>2.4 贪婪匹配与非贪婪匹配</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="number">123</span>&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认贪婪匹配,尽可能的多匹配</span></span><br><span class="line">&lt;.*&gt; 匹配结果是&lt;script&gt;<span class="number">123</span>&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非贪婪匹配,尽可能的少匹配,结束条件由左右两边决定</span></span><br><span class="line">&lt;.*?&gt; 匹配结果是&lt;script&gt;和&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="取消转义"><a href="#取消转义" class="headerlink" title="取消转义"></a>取消转义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在原生的正则表达式中取消转义推荐使用\(每个\只能取消一个字符的转义)</span><br><span class="line">在python中取消转义推荐使用<span class="string">r&#x27;\n\a\t&#x27;</span>(也可以使用\)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-模块(一)</title>
    <url>/5c1fe23f.html</url>
    <content><![CDATA[<h3 id="1-面向过程编程"><a href="#1-面向过程编程" class="headerlink" title="1. 面向过程编程"></a>1. 面向过程编程</h3><p>面向过程编程，核心是过程二字，过程指的是解决问题的步骤，即先干什么、后干什么、再干什么、然后干什么……</p>
<p>基于该思想编写程序就好比在设计一条流水线，面向对称编程其实是一种机械式的思维方式</p>
<p>优点: 复杂的问题流程化，进而简单化</p>
<p>缺点: 一旦要修改功能 那么需要整体改造(牵一发而动全身)</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户注册功能</span></span><br><span class="line"><span class="comment"># 1.获取用户名和密码</span></span><br><span class="line"><span class="comment"># 2.组织成固定的格式</span></span><br><span class="line"><span class="comment"># 3.文件操作写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span>():</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名: &#x27;</span>).strip()</span><br><span class="line">    passwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(username) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(passwd) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名密码不能为空&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    id_msg = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">    u_id = <span class="built_in">input</span>(<span class="string">&#x27;%s\n请输入身份: &#x27;</span> % id_msg).strip()</span><br><span class="line">    <span class="keyword">if</span> u_id <span class="keyword">in</span> id_msg:</span><br><span class="line">        user_id = id_msg.get(u_id)</span><br><span class="line">        <span class="keyword">return</span> deal_data(username, passwd, user_id)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入的信息不合法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_data</span>(<span class="params">username, passwd, u_id</span>):</span></span><br><span class="line">    msg = <span class="string">&#x27;%s|%s|%s\n&#x27;</span> % (username, passwd, u_id)</span><br><span class="line">    <span class="keyword">return</span> save_data(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;info.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_info()</span><br></pre></td></tr></table></figure>



<h3 id="2-模块简介"><a href="#2-模块简介" class="headerlink" title="2. 模块简介"></a>2. 模块简介</h3><ol>
<li><p><strong>什么是模块</strong></p>
<p>模块是一系列功能的结合体</p>
</li>
<li><p><strong>为什么要用模块</strong></p>
<p>为了提升开发效率</p>
</li>
<li><p><strong>模块的三种来源</strong></p>
<ol>
<li>内置: Python解释器自带的，能直接导入使用</li>
<li>第三方: 别人已经写好的，下载后可以直接拿来用</li>
<li>自定义: 自己写的模块</li>
</ol>
</li>
<li><p><strong>模块的四种表现形式</strong></p>
<ol>
<li>使用Python编写的代码(.py文件)</li>
<li>已被编译为共享库活DLL或C++扩展</li>
<li>包好一组模块的包(文件夹)，其实是多个py文件的集合，包内通常用<code>__init__.py</code>文件</li>
<li>使用C编写并链接到Python解释器的内置模块</li>
</ol>
</li>
</ol>
<p>PS: 在编写大型项目的时候，遇到一些复杂的功能可以先考虑是否有相应的模块可以调用</p>
<h3 id="3-模块的导入"><a href="#3-模块的导入" class="headerlink" title="3. 模块的导入"></a>3. 模块的导入</h3><h4 id="3-1-import"><a href="#3-1-import" class="headerlink" title="3.1 import"></a>3.1 import</h4><ul>
<li><p>在同级目录下创建两个.py文件</p>
<p> mod-imp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imtest</span><br><span class="line"></span><br><span class="line">money = <span class="number">999</span></span><br><span class="line"><span class="built_in">print</span>(imtest.money)  <span class="comment"># 1000</span></span><br><span class="line"><span class="built_in">print</span>(imtest.func1())  <span class="comment"># from func1</span></span><br><span class="line">imtest.change()  </span><br><span class="line"><span class="built_in">print</span>(imtest.money)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(money)  <span class="comment"># 999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行该文件时会首先打印 imtest模块</span></span><br></pre></td></tr></table></figure>

<p>imtest.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;imtest模块&#x27;</span>)</span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>结论</p>
<ol>
<li>多次导入相同模块时，只会执行一次</li>
<li>首次导入<code>imtest</code>模块的过程<ol>
<li>运行导入文件(import句式.py)产生该文件的全局名称空间</li>
<li>运行<code>imtest.py</code>文件</li>
<li>运行<code>imtest.py</code>内代码，将产生的名字全部存档于<code>imtest.py</code>名称空间</li>
<li>在导入文件名称空间产生一个<code>imtest</code>的名字指向<code>imtest.py</code>全局名称空间</li>
</ol>
</li>
<li>import句式导入模块之后<ol>
<li>通过<code>模块名.</code>的方式可以使用模块内所有的名字，并且肯定不会产生冲突</li>
</ol>
</li>
</ol>
</li>
</ul>
<h4 id="3-2-from…import…"><a href="#3-2-from…import…" class="headerlink" title="3.2 from…import…"></a>3.2 from…import…</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> imtest <span class="keyword">import</span> money, func1, change</span><br></pre></td></tr></table></figure>

<ol>
<li>多次导入相同模块是，只会执行一次</li>
<li>导入发生的过程<ol>
<li>先产生执行文件的全局名称空间</li>
<li>执行模块文件，产生模块的全局名称空间</li>
<li>将模块中执行之后产生的名字全部存档于模块名称空间中</li>
<li>在执行文件中有一个<code>money</code>执行模块名称空间中<code>money</code>指向的值</li>
</ol>
</li>
<li>导入之后<ol>
<li>在使用的时候直接写名字即可，但是当当前名称空间有相同名字的时候，就会产生冲突，使用的就变成了当前名称空间</li>
</ol>
</li>
</ol>
<h4 id="3-3-导入模块扩展用法"><a href="#3-3-导入模块扩展用法" class="headerlink" title="3.3 导入模块扩展用法"></a>3.3 导入模块扩展用法</h4><ol>
<li><p>起别名</p>
<p>既可以给模块起别名也可以给模块中的某个起别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> modisverylonglong  <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">from</span> modisverylonglong <span class="keyword">import</span> name <span class="keyword">as</span> n</span><br></pre></td></tr></table></figure></li>
<li><p>连续导入</p>
<p>可以连续导入多个模块，但是只有当多个模块功能相似或属于同一系列，否则推荐分行导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mod1, mod2</span><br><span class="line"><span class="keyword">from</span> mod1 <span class="keyword">import</span> name1, name2</span><br></pre></td></tr></table></figure></li>
<li><p>通用导入</p>
<p>将模块中所有名字全部导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mod <span class="keyword">import</span> *  <span class="comment"># * 表示所有</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;name1&#x27;</span>, <span class="string">&#x27;name2&#x27;</span>]  <span class="comment"># 在被导入的模块文件中可以使用该方法指定可以被导入的名字,限制的是 * </span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-4-判断文件类型"><a href="#3-4-判断文件类型" class="headerlink" title="3.4 判断文件类型"></a>3.4 判断文件类型</h4><ul>
<li><p>判断py文件是作为模块文件还是执行文件</p>
<p><code>__name__</code>当文件是执行文件时会返回<code>__main__</code></p>
<p>文件被当做模块导入则返回文件名(模块名)</p>
<p>执行mod-imp.py时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imtest</span><br><span class="line"><span class="built_in">print</span>(__name__)  <span class="comment"># __main__</span></span><br><span class="line"><span class="built_in">print</span>(imtest.__name__)  <span class="comment"># imtest</span></span><br></pre></td></tr></table></figure>

<p>执行imtest.py时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;imtest模块&#x27;</span>)</span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func1&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(__name__)  <span class="comment"># __main__</span></span><br></pre></td></tr></table></figure></li>
<li><p>应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  func1()  <span class="comment"># 可以在这里放测试代码，避免在别模块导入之后执行</span></span><br></pre></td></tr></table></figure>

<p>ps: 在Pycharm中打出main之后按tab自动补全</p>
</li>
</ul>
<h4 id="3-5-循环导入"><a href="#3-5-循环导入" class="headerlink" title="3.5 循环导入"></a>3.5 循环导入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当出现循环导入的情况时，程序设计不合理。所以在编写程序时不能出现循环导入现象</span><br></pre></td></tr></table></figure>

<ul>
<li>现象:</li>
</ul>
<p>a.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> num_b</span><br><span class="line">num_a = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>b.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> num_a</span><br><span class="line">num_b = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>mod-imp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> num_a  <span class="comment"># 此时会出现异常</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解决方案:<ol>
<li>调换顺序，将彼此调用的句式放在代码的最后</li>
<li>函数形式，将导入的句式放入到函数体代码，等待所有的名字加载完毕之后再调用(本质等同于调换顺序)</li>
</ol>
</li>
</ul>
<h4 id="3-6-模块导入的顺序"><a href="#3-6-模块导入的顺序" class="headerlink" title="3.6 模块导入的顺序"></a>3.6 模块导入的顺序</h4><ul>
<li><p>查找顺序</p>
<ol>
<li><p>先从内存中查找</p>
</li>
<li><p>再去内置模块中查找</p>
</li>
<li><p>最后去<code>sys.path</code>系统路劲中查找(自定义模块)</p>
<p>如果都没找到就会报错</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)  <span class="comment"># 结果中你的第一个元素永远是当前执行文件的路径</span></span><br></pre></td></tr></table></figure></li>
<li><p>当自定义模块查找不到的时候解决方案</p>
<ol>
<li><p>手动将该模块的路径添加到<code>sys.path</code>中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>from...import...</code></p>
<ol>
<li><code>from</code>    文件夹名称.文件夹名称  <code>import</code>   模块名</li>
<li><code>from</code>    文件夹名称.模块名称     <code>import </code>       名字</li>
</ol>
</li>
</ol>
</li>
</ul>
<h4 id="3-7-绝对导入与相对导入"><a href="#3-7-绝对导入与相对导入" class="headerlink" title="3.7 绝对导入与相对导入"></a>3.7 绝对导入与相对导入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;在程序中涉及到多个文件之间导入模块的情况 一律按照执行文件所在的路径为准&quot;&quot;&quot;</span></span><br><span class="line">绝对导入</span><br><span class="line">	始终按照执行文件所在的sys.path查找模块</span><br><span class="line">相对导入</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	句点符(.)</span></span><br><span class="line"><span class="string">		.表示当前文件路径</span></span><br><span class="line"><span class="string">		..表示上一层文件路径</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">    能够打破始终以执行文件为准的规则 只考虑两个文件之间的位置</span><br><span class="line">    <span class="comment"># 相对导入只能用在模块文件中 不能在执行文件中使用</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CGroups和Namespace</title>
    <url>/4a318272.html</url>
    <content><![CDATA[<h2 id="CGroup"><a href="#CGroup" class="headerlink" title="CGroup"></a>CGroup</h2><h3 id="CGroups概述"><a href="#CGroups概述" class="headerlink" title="CGroups概述"></a>CGroups概述</h3><p><code>CGroups</code> 全称为 <code>Linux Control Group</code>，其作用是限制一组进程使用的资源（CPU、内存等）上限，<code>CGroups</code> 也是 Containerd 容器技术的核心实现原理之一</p>
<span id="more"></span>
<ul>
<li>Task: 在 cgroup 中，task 可以理解为一个进程，但这里的进程和一般意义上的操作系统进程不太一样，实际上是进程 ID 和线程 ID 列表。</li>
<li>CGroup: 即控制组，一个控制组就是一组按照某种标准划分的 Tasks，可以理解为资源限制是以进程组为单位实现的，一个进程加入到某个控制组后，就会受到相应配置的资源限制。</li>
<li>Hierarchy: cgroup 的层级组织关系，cgroup 以树形层级组织，每个 cgroup 子节点默认继承其父 cgroup 节点的配置属性，这样每个 Hierarchy 在初始化会有 root cgroup。</li>
<li>Subsystem: 即子系统，子系统表示具体的资源配置，如CPU使用，内存占用等，Subsystem附加到Hierarchy上后可用。</li>
</ul>
<ul>
<li>查看当前系统支持的CGroups子系统</li>
</ul>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/n6YGX3.png" alt="n6YGX3"></p>
<p>查看cgroup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h |grep cgroup</span><br></pre></td></tr></table></figure>

<p>查看当前系统挂载了哪些 cgroup</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/fARleD.png" alt="fARleD"></p>
<p><code>/sys/fs/cgroup</code> 目录下的每个子目录就对应着一个子系统，cgroup 是以目录形式组织的，<code>/</code> 是 cgroup 的根目录，但是这个根目录可以被挂载到任意目录，例如 CGroups 的 memory 子系统的挂载点是 <code>/sys/fs/cgroup/memory</code>，那么 <code>/sys/fs/cgroup/memory/</code> 对应 memory 子系统的根目录</p>
<h3 id="CGroups测试"><a href="#CGroups测试" class="headerlink" title="CGroups测试"></a>CGroups测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /sys/fsc</span><br><span class="line">ls /sys/fs/cgroup/cpu/klcc.test</span><br><span class="line">cat /sys/fs/cgroup/cpu/klcc.test/cpu.cfs_period_us </span><br><span class="line">cat /sys/fs/cgroup/cpu/klcc.test/cpu.cfs_quota_us </span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/hdIO6e.png" alt="hdIO6e"></p>
<p>目录创建完成后，下面就会已经自动创建 cgroup 的相关文件</p>
<p><code>cpu.cfs_period_us</code> 文件，用来配置 CPU 时间周期长度的，默认为 <code>100000us</code></p>
<p>cpu.cfs_quota_us文件，用来设置在此时间周期长度内所能使用的 CPU 时间数，默认值为-1，表示不受时间限制。</p>
<p>编写一个简单的python脚本消耗cpu</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python cgroup.py &amp;</span><br><span class="line">[1] 8288</span><br></pre></td></tr></table></figure>
<p>此时用top命令查看到 8288 进程已经达到了100%</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/hv8Mr8.png" alt="hv8Mr8"></p>
<p>现在我们将这个进程ID写入到 <code>/sys/fs/cgroup/cpu/klcc.test/tasks</code> 文件下面去，然后设置 <code>/sys/fs/cgroup/cpu/ydzs.test/cpu.cfs_quota_us</code> 为 <code>10000us</code>，因为 <code>cpu.cfs_period_us</code> 默认值为 <code>100000us</code>，所以这表示我们要限制 CPU 使用率为10%：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 8288 &gt;  /sys/fs/cgroup/cpu/klcc.test/tasks</span><br><span class="line"><span class="built_in">echo</span> 10000 &gt; /sys/fs/cgroup/cpu/klcc.test/cpu.cfs_quota_us</span><br></pre></td></tr></table></figure>

<p> 此时使用<code>top</code>命令查看是就是被限制在10%左右了</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Cw8YLg.png" alt="Cw8YLg"></p>
<p>如果要限制内存等其他资源的话，同样去对应的子系统下面设置资源，并将进程 ID 加入 tasks 中即可。如果要删除这个 cgroup，直接删除文件夹是不行的，需要使用 <code>libcgroup</code> 工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libcgroup libcgroup-tools</span><br><span class="line">cgdelete cpu:klcc.test</span><br></pre></td></tr></table></figure>

<h3 id="容器中CGroup的使用"><a href="#容器中CGroup的使用" class="headerlink" title="容器中CGroup的使用"></a>容器中CGroup的使用</h3><p>创建一个加<code>-m</code>参数限制容器内存</p>
<p>此时启动完成后容器的cgroup会出现在<code>/sys/fs/cgroup/memory/docker</code>下</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/1Sc8kM.png" alt="1Sc8kM"></p>
<p>可以看到很多和内存相关的配置文件</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Xdpq7i.png" alt="Xdpq7i"></p>
<p>查看<code>memory.limit_in_bytes</code> 结果是创建时设置的内存大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat  /sys/fs/cgroup/memory/docker/3f1a79a1ef6d613d36d32a5b7216068ef008d59cce879475b3ce5ad7ee131263/memory.limit_in_bytes </span><br><span class="line">52428800</span><br></pre></td></tr></table></figure>
<p>容器的进程ID也会在task文件中</p>
<p>![image-20211124165322290](/Users/zhijinliu/Library/Application Support/typora-user-images/image-20211124165322290.png)</p>
<p>当删除这个容器之后，相应的容器ID也会被删除</p>
<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p><code>namespace</code> 也称命名空间，是 Linux 为我们提供的用于隔离进程树、网络接口、挂载点以及进程间通信等资源的方法。在日常使用个人 PC 时，我们并没有运行多个完全分离的服务器的需求，但是如果我们在服务器上启动了多个服务，这些服务其实会相互影响的，每一个服务都能看到其他服务的进程，也可以访问宿主机器上的任意文件，一旦服务器上的某一个服务被入侵，那么入侵者就能够访问当前机器上的所有服务和文件，这是我们不愿意看到的，我们更希望运行在同一台机器上的不同服务能做到完全隔离，就像运行在多台不同的机器上一样。而我们这里的容器其实就通过 Linux 的 Namespaces 技术来实现的对不同的容器进行隔离。</p>
<p>linux 共有6(7)种命名空间:</p>
<ul>
<li><code>ipc namespace</code>: 管理对 IPC 资源（进程间通信（信号量、消息队列和共享内存）的访问</li>
<li><code>net namespace</code>: 网络设备、网络栈、端口等隔离</li>
<li><code>mnt namespace</code>: 文件系统挂载点隔离</li>
<li><code>pid namespace</code>: 用于进程隔离</li>
<li><code>user namespace</code>: 用户和用户组隔离（3.8以后的内核才支持）</li>
<li><code>uts namespace</code>: 主机和域名隔离</li>
<li><code>cgroup namespace</code>：用于 cgroup 根目录隔离（4.6以后版本的内核才支持）</li>
</ul>
<p>通过lsns查看当前系统已经创建的名称空间</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/jxos29.png" alt="jxos29"></p>
<p>要查看一个进程所属的命名空间信息，可以到 <code>/proc/&lt;pid&gt;/ns</code> 目录下查看，</p>
<p>这些 namespace 都是链接文件, 格式为 <code>namespaceType:[inode number]</code>，<code>inode number</code> 用来标识一个 namespace，可以理解为 namespace id，如果两个进程的某个命名空间的链接文件指向同一个，那么其相关资源在同一个命名空间中，也就没有隔离了</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/snZVnb.png" alt="snZVnb"></p>
<p>可以看出 nginx 容器启动后，已经为该容器自动创建了单独的 <code>mtn</code>、<code>uts</code>、<code>ipc</code>、<code>pid</code>、<code>net</code> 命名空间，也就是这个容器在这些方面是独立隔离的，其他容器想要和该容器共享某一个命名空间，那么就需要指向同一个命名空间</p>
<p>白嫖地址: <a href="https://www.qikqiak.com/k3s/runtime/cgroups-namespaces/">https://www.qikqiak.com/k3s/runtime/cgroups-namespaces/</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python-生成器和常见内置函数</title>
    <url>/ae4233d7.html</url>
    <content><![CDATA[<h3 id="异常捕获-二"><a href="#异常捕获-二" class="headerlink" title="异常捕获(二)"></a>异常捕获(二)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    name</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;代码错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;代码正常才会执行了&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;代码不管是否异常都会运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断言</span></span><br><span class="line">name = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(name, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主动抛出异常</span></span><br><span class="line"><span class="keyword">raise</span> ZeroDivisionError(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="for循环本质"><a href="#for循环本质" class="headerlink" title="for循环本质"></a>for循环本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = d.__iter__()  <span class="comment"># StopIteration的异常,该异常是在循环对象穷尽所有元素时的报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while实现循环打印</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.__next__())</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环打印</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="迭代取值与索引取值对比"><a href="#迭代取值与索引取值对比" class="headerlink" title="迭代取值与索引取值对比"></a>迭代取值与索引取值对比</h3><ul>
<li><p>迭代取值</p>
<ol>
<li>不依赖索引进行取值</li>
<li>取值的顺序都是固定的从左到右，无法重复获取</li>
</ol>
</li>
<li><p>索引取值</p>
<ol>
<li>可以重复取值</li>
<li>需要提供有序容器类型才可取值(不是通用方式)</li>
</ol>
</li>
</ul>
<h3 id="生成器对象"><a href="#生成器对象" class="headerlink" title="生成器对象"></a>生成器对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">生成器其实就是自定义迭代器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义阶段就是一个普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_generator</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">11</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当函数体内含有yield关键字 那么在第一次调用函数的时候</span></span><br><span class="line"><span class="string">并不会执行函数体代码 而是将函数变成了生成器(迭代器)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">res = my_generator()  <span class="comment"># 调用函数不执行函数体代码，而是将函数变成生成器(迭代器)</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;generator object my_generator at 0x7fcc5f7d3888&gt;</span></span><br><span class="line">ret = res.__next__()  <span class="comment"># 每执行一个__next__代码往下运行到yield停止 返回后面的数据</span></span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># first \n 11</span></span><br><span class="line">ret = res.__next__()  <span class="comment"># 再次执行__next__接着上次停止的地方继续往后 遇到yield再停止</span></span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># second \n 22</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义range功能"><a href="#自定义range功能" class="headerlink" title="自定义range功能"></a>自定义range功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span>(<span class="params">start, stop=<span class="literal">None</span>, step=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stop:</span><br><span class="line">        stop, start = start, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_range(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="yield传值"><a href="#yield传值" class="headerlink" title="yield传值"></a>yield传值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_func1</span>(<span class="params">age</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age is %s &#x27;</span> % age)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        name = <span class="keyword">yield</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s NB&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = generator_func1(<span class="number">18</span>)  <span class="comment"># 不会执行函数体代码，而是转换成生成器</span></span><br><span class="line">res.__next__()</span><br><span class="line">res.send(<span class="string">&#x27;json&#x27;</span>)  <span class="comment"># 给yield传值</span></span><br><span class="line">res.send(<span class="string">&#x27;xxx&#x27;</span>)  <span class="comment"># 再次给yield传值</span></span><br></pre></td></tr></table></figure>

<h3 id="yeild与return对比"><a href="#yeild与return对比" class="headerlink" title="yeild与return对比"></a>yeild与return对比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">相同点:可以返回值,支持多个并且组织成元组</span><br><span class="line">不同点:</span><br><span class="line">    <span class="keyword">yield</span>:</span><br><span class="line">      <span class="number">1.</span> 函数体代码遇到<span class="keyword">yield</span>不会结束,会<span class="string">&#x27;停住&#x27;</span></span><br><span class="line">      <span class="number">2.</span> <span class="keyword">yield</span>可以将函数变成生成器,并且支持外界传值</span><br><span class="line">    <span class="keyword">return</span>:</span><br><span class="line">      <span class="number">1.</span> 函数体代码遇到<span class="keyword">return</span>直接结束</span><br></pre></td></tr></table></figure>

<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表生成式</span></span><br><span class="line">l1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]</span><br><span class="line">res = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> i != <span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [12, 23, 34, 56, 67]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;生成器表达式内部的代码只有在迭代取值的时候才会执行&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res1 = (i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> i != <span class="number">44</span>)  </span><br><span class="line"><span class="built_in">print</span>(res1)  <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x7fbbb7e96ca8&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res1.__next__())  <span class="comment"># 12 </span></span><br><span class="line"><span class="built_in">print</span>(res1.__next__())  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(res1.__next__())  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>笔试题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">n, i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n + i</span><br><span class="line"><span class="comment"># 调用之前是函数 调用之后是生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">g = test()  <span class="comment"># 初始化生成器对象</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">10</span>]:</span><br><span class="line">    g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    第一次for循环</span></span><br><span class="line"><span class="string">        g = (add(n, i) for i in g)</span></span><br><span class="line"><span class="string">    第二次for循环</span></span><br><span class="line"><span class="string">        g = (add(10, i) for i in (add(10, i) for i in g))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">res = <span class="built_in">list</span>(g)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#A. res=[10,11,12,13]</span></span><br><span class="line"><span class="comment">#B. res=[11,12,13,14]</span></span><br><span class="line">C. res=[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line"><span class="comment">#D. res=[21,22,23,24]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常见内置函数"><a href="#常见内置函数" class="headerlink" title="常见内置函数"></a>常见内置函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">abs</span>()  <span class="comment"># 取绝对值</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">10</span>))  <span class="comment"># 10</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">all</span>()  <span class="built_in">any</span>()</span><br><span class="line">   l = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">0</span>]</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">all</span>(l))  <span class="comment"># 所有元素为True才是True</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">any</span>(l))  <span class="comment"># 所有元素有一个为True就是True</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">bin</span>()  <span class="built_in">oct</span>()  <span class="built_in">hex</span>() </span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">12</span>))  <span class="comment"># 0b1100  二进制</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">12</span>))  <span class="comment"># 0o14  八进制</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">12</span>))  <span class="comment"># 0xc  十六进制</span></span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">bytes</span>()  <span class="built_in">str</span>()</span><br><span class="line">   res = <span class="string">&#x27;测试&#x27;</span></span><br><span class="line">   ret1 = <span class="built_in">bytes</span>(res, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(ret1)  <span class="comment"># b&#x27;\xe6\xb5\x8b\xe8\xaf\x95&#x27;</span></span><br><span class="line">   ret2 = <span class="built_in">str</span>(ret1, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(ret2)  <span class="comment"># 测试</span></span><br><span class="line">  </span><br><span class="line"><span class="number">5.</span> <span class="built_in">callable</span>()  <span class="comment"># 是否看调用(看是否能加括号运行)</span></span><br><span class="line">   i = <span class="number">1</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">callable</span>(i), <span class="built_in">callable</span>(f))  <span class="comment"># Flse True</span></span><br><span class="line">  </span><br><span class="line"><span class="number">6.</span> <span class="built_in">chr</span>()  <span class="built_in">ord</span>()</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># A  按照ASICC码表的数字打印字符</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 65  按照ASICC码表的字符打印数字</span></span><br><span class="line">    </span><br><span class="line"><span class="number">7.</span> <span class="built_in">complex</span>()  复数</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">123</span>))  <span class="comment"># (123+0j)</span></span><br><span class="line">  </span><br><span class="line"><span class="number">8.</span> <span class="built_in">dir</span>()  <span class="comment"># 查看当前对象可以调用的名字</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">dir</span>(f))</span><br><span class="line">  </span><br><span class="line"><span class="number">9.</span> <span class="built_in">divmod</span>()  <span class="comment"># 接收两个数字类型参数，返回一个包含商和余数的元组(a // b, a % b)</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">divmod</span>(<span class="number">101</span>, <span class="number">10</span>))  <span class="comment"># (10 1)</span></span><br><span class="line">   应用:</span><br><span class="line">      <span class="comment"># 生成页数</span></span><br><span class="line">      num, more = <span class="built_in">divmod</span>(<span class="number">201</span>, <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">if</span> more:</span><br><span class="line">          num += <span class="number">1</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;总共需要%s页&#x27;</span> % num)</span><br><span class="line">      </span><br><span class="line"><span class="number">10.</span> <span class="built_in">eval</span>()  <span class="built_in">exec</span>()  <span class="comment"># 将字符串内的内容加载执行</span></span><br><span class="line">    s1 = <span class="string">&quot;print(&#x27;hello&#x27;)&quot;</span></span><br><span class="line">    s2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    for i in range(10):</span></span><br><span class="line"><span class="string">        print(i)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">eval</span>(s1)  <span class="comment"># 只能执行简单的内容</span></span><br><span class="line">    <span class="built_in">exec</span>(s2)  <span class="comment"># 可以执行复杂的内容</span></span><br><span class="line">    </span><br><span class="line"><span class="number">11.</span> <span class="built_in">isinstance</span>()  <span class="comment"># 判断是否属于某个数据类型</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">isinstance</span>(i, <span class="built_in">int</span>))  <span class="comment"># True</span></span><br><span class="line">    </span><br><span class="line"><span class="number">12.</span> <span class="built_in">pow</span>() </span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">4</span>, <span class="number">3</span>))  <span class="comment"># 64  4**3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">13.</span> <span class="built_in">round</span>()</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">4.5</span>))  <span class="comment"># 4</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">4.6</span>))  <span class="comment"># 5</span></span><br><span class="line"> </span><br><span class="line"><span class="number">14.</span> <span class="built_in">sum</span>()  <span class="comment"># 求和</span></span><br><span class="line">    l = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(l))  <span class="comment"># 110 将列表 l 中的元素求和</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-迭代器</title>
    <url>/ccf84d2b.html</url>
    <content><![CDATA[<h3 id="1-常用内置函数"><a href="#1-常用内置函数" class="headerlink" title="1. 常用内置函数"></a>1. 常用内置函数</h3><h4 id="1-1-map"><a href="#1-1-map" class="headerlink" title="1.1 map()"></a>1.1 map()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map()  # 映射</span></span><br><span class="line">l = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">res = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x + <span class="number">1</span>, l)  <span class="comment"># 循环获取列表中的每个元素并交给匿名函数保存返回值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(res))  <span class="comment"># [12, 23, 34, 45]</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="1-2-zip"><a href="#1-2-zip" class="headerlink" title="1.2 zip()"></a>1.2 zip()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zip() 拉链  按最少元素</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">l2 = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>]</span><br><span class="line">res = <span class="built_in">zip</span>(l1, l2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(res))</span><br><span class="line"><span class="comment"># [(1, &#x27;jason&#x27;), (2, &#x27;tony&#x27;), (3, &#x27;xxx&#x27;), (4, &#x27;tom&#x27;), (5, &#x27;bob&#x27;)]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-max-和min"><a href="#1-3-max-和min" class="headerlink" title="1.3 max()和min()"></a>1.3 max()和min()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># max()求最大值 min()求最小值</span></span><br><span class="line">l3 = [<span class="number">115</span>, <span class="number">292</span>, <span class="number">303</span>, <span class="number">414</span>, <span class="number">526</span>, <span class="number">809</span>, <span class="number">910</span>, <span class="number">101</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(l3))  <span class="comment"># 910</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(l3))  <span class="comment"># 101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只接字典时会将K值进行比较</span></span><br><span class="line">d1 = &#123;<span class="string">&quot;alex&quot;</span>: <span class="number">1000000</span>,</span><br><span class="line">      <span class="string">&quot;tony&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="string">&quot;jason&quot;</span>: <span class="number">3000000</span>,</span><br><span class="line">      <span class="string">&quot;tom&quot;</span>: <span class="number">8900000000</span>,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(d1, key=<span class="keyword">lambda</span> key: d1[key]))  <span class="comment"># tom  循环取值再比较大小，返回K</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(d1, key=<span class="keyword">lambda</span> key: d1[key]))  <span class="comment"># tony</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-filter"><a href="#1-4-filter" class="headerlink" title="1.4 filter()"></a>1.4 filter()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filter() 过滤</span></span><br><span class="line">l3 = [<span class="number">115</span>, <span class="number">292</span>, <span class="number">303</span>, <span class="number">414</span>, <span class="number">526</span>, <span class="number">809</span>, <span class="number">910</span>, <span class="number">101</span>]</span><br><span class="line">res = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">400</span>, l3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(res))  <span class="comment"># [414, 526, 809, 910]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-5-reduce"><a href="#1-5-reduce" class="headerlink" title="1.5 reduce()"></a>1.5 reduce()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reduce() 归总</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">l3 = [<span class="number">115</span>, <span class="number">292</span>, <span class="number">303</span>, <span class="number">414</span>, <span class="number">526</span>, <span class="number">809</span>, <span class="number">910</span>, <span class="number">101</span>]</span><br><span class="line">res1 = reduce(<span class="keyword">lambda</span> x, y: x + y, l3)</span><br><span class="line">res2 = reduce(<span class="keyword">lambda</span> x, y: x + y, l3, <span class="number">100</span>)  <span class="comment"># 还可以继续添加额外的元素</span></span><br><span class="line"><span class="built_in">print</span>(res1) <span class="comment"># 3470</span></span><br><span class="line"><span class="built_in">print</span>(res2) <span class="comment"># 3570</span></span><br></pre></td></tr></table></figure>

<h3 id="2-可迭代对象"><a href="#2-可迭代对象" class="headerlink" title="2. 可迭代对象"></a>2. 可迭代对象</h3><ol>
<li>迭代:迭代即更新换代,每次的更新都必须依赖上一次的结果<br>迭代提供了一种不依赖索引取值的方  </li>
<li>可迭代对象:内置 <code>__intr__</code>方法的都称之为可迭代对象，内置可通过<code>.</code>的方式查看</li>
<li>双下滑线开头双下滑线结尾的方法叫双下方法名，面向对象的时候为了与隐藏变量名区分开</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过变量名.__查看是否有intr</span></span><br><span class="line">i = <span class="number">12</span>  <span class="comment"># 没有</span></span><br><span class="line">f = <span class="number">11.11</span>  <span class="comment"># 没有</span></span><br><span class="line">s = <span class="string">&#x27;jason&#x27;</span>  <span class="comment"># 有</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">4</span>]  <span class="comment"># 有</span></span><br><span class="line">d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="number">123</span>&#125;  <span class="comment"># 有</span></span><br><span class="line">t = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)  <span class="comment"># 有</span></span><br><span class="line">se = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;  <span class="comment"># 有</span></span><br><span class="line">b = <span class="literal">True</span>  <span class="comment"># 没有</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">含有__iter__的有</span></span><br><span class="line"><span class="string">    字符串 列表 字典 元组 集合 文件对象</span></span><br><span class="line"><span class="string">上述通常为可迭代对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种结果一样</span></span><br><span class="line"><span class="built_in">print</span>(d.__iter__()) <span class="comment"># &lt;dict_keyiterator object at 0x7fdf258b4a98&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">iter</span>(d))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可迭代对象调用__iter__方法会变成迭代器对象(老母猪)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__iter__方法在调用的时候还有一个简便的写法iter()</span></span><br><span class="line"><span class="string">    一般情况下所有的双下方法都会有一个与之对应的简化版本 方法名()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-迭代器对象"><a href="#3-迭代器对象" class="headerlink" title="3. 迭代器对象"></a>3. 迭代器对象</h3><ol>
<li>迭代器对象:即含有<code>__iter__</code>方法，又含有<code>__next__</code>方法</li>
<li>可以让可迭代对象执行<code>__iter__</code>方法后就可以生成迭代器对象</li>
<li>迭代器对象无论执行多少次<code>__iter__</code>方法还是迭代器对象(本身)</li>
<li>迭代器提供了不依赖于索引取值的方式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过变量名.__查看是否有next方法</span></span><br><span class="line">i = <span class="number">12</span></span><br><span class="line">f = <span class="number">11.11</span></span><br><span class="line">s = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">4</span>]</span><br><span class="line">d = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="number">123</span>&#125;  </span><br><span class="line">t = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)  </span><br><span class="line">se = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;  </span><br><span class="line">b = <span class="literal">True</span>  </span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = s.__iter__()  <span class="comment"># 转成迭代器对象</span></span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 迭代器对象执行__next__方法其实就是在迭代取值(for循环) j</span></span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 在取完元素之后会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面结果是一样的，每次生成新的迭代器对象再执行__next__方法</span></span><br><span class="line"><span class="built_in">print</span>(s.__iter__().__next__())  <span class="comment"># j</span></span><br><span class="line"><span class="built_in">print</span>(s.__iter__().__next__())  <span class="comment"># j</span></span><br></pre></td></tr></table></figure>

<h3 id="4-for循环本质"><a href="#4-for循环本质" class="headerlink" title="4. for循环本质"></a>4. for循环本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 循环打印每个元素,不使用for循环</span></span><br><span class="line"><span class="comment"># __iter__和__next__</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转为迭代器对象</span></span><br><span class="line">res = l1.__iter__()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(res.__next__())  <span class="comment"># 循环执行__next__取值，当取完元素之后会报错</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for 循环内部原理</span></span><br><span class="line"><span class="string">  1.将关键字in后面的数据先调用__iter__方法转为迭代器对象</span></span><br><span class="line"><span class="string">  2.循环执行__next__方法</span></span><br><span class="line"><span class="string">  3.在取完值后__next__会报错,但是for循环会自动捕获该错误并处理</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-异常捕获"><a href="#5-异常捕获" class="headerlink" title="5. 异常捕获"></a>5. 异常捕获</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 什么是异常</span></span><br><span class="line">	代码运行出错会导致异常 异常发生后如果没有解决方案则会到底整个程序结束</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 异常三个重要组成部分</span></span><br><span class="line">	<span class="number">1.</span>traceback:提示错误的行</span><br><span class="line">  <span class="number">2.</span>XXXError:错误的类型</span><br><span class="line">  <span class="number">3.</span>错误类型冒号后面的内容:错误的详细原因(仔细看可能就会找到解决的方法)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误的种类   </span></span><br><span class="line">    <span class="number">1.</span>语法错误:不被允许的,出现了应该立刻修改!!!</span><br><span class="line">    <span class="number">2.</span>逻辑错误:可以被允许的,出现了之后尽快修改即可</span><br><span class="line">   		<span class="string">&#x27;&#x27;&#x27;修改逻辑错误的过程其实就是在从头到尾理清思路的过程&#x27;&#x27;&#x27;</span></span><br><span class="line">     </span><br><span class="line"><span class="comment"># 基本语法结构</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        有可能会出错的代码</span><br><span class="line">    <span class="keyword">except</span> 错误类型 <span class="keyword">as</span> e:</span><br><span class="line">        出错之后对应的处理机制(e是错误的详细信息)</span><br><span class="line">    <span class="keyword">except</span> 错误类型 <span class="keyword">as</span> e:</span><br><span class="line">        出错之后对应的处理机制(e是错误的详细信息)</span><br><span class="line">    <span class="keyword">except</span> 错误类型 <span class="keyword">as</span> e:</span><br><span class="line">        出错之后对应的处理机制(e是错误的详细信息)</span><br><span class="line"></span><br><span class="line">  eg:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="built_in">int</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;变量名name不存在&#x27;</span>,e)</span><br><span class="line">  <span class="keyword">except</span> ValueError:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;值不是纯数字&#x27;</span>)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 捕获万能异常</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="comment"># int(&#x27;abc&#x27;)</span></span><br><span class="line">      <span class="built_in">print</span>(name)</span><br><span class="line">      <span class="comment"># l = [11]</span></span><br><span class="line">      <span class="comment"># l[100]</span></span><br><span class="line">  <span class="keyword">except</span> Exception:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;你来啥都行 无所谓&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异常捕获句式和万能异常</span></span><br><span class="line"><span class="string">    1.有可能会出现错误的代码才需要被监测</span></span><br><span class="line"><span class="string">    2.被监测的代码一定要越少越好</span></span><br><span class="line"><span class="string">    3.异常捕获使用频率越低越好</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 使用__next__方法抛出异常</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line">res = l1.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.__next__())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-函数使用(三)</title>
    <url>/d5376901.html</url>
    <content><![CDATA[<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><blockquote>
<p>函数在运行过程中，直接或间接调用了自身</p>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官网表示:python默认的最大递归深度为1000次</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># print(sys.getrecursionlimit())  # 查看当前递归最大深度</span></span><br><span class="line"><span class="comment"># print(sys.setrecursionlimit(2000))  # 修改递归最大深度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限自己调用自己，但是python限制了次数</span></span><br><span class="line"><span class="comment"># 无用递归1:</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    index()</span><br><span class="line">index()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 无用递归2:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line">    index()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    func()</span><br><span class="line">index()  <span class="comment"># 两个函数互相调用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>递归使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>递推:一层层往下推导,每次往下推会相对于上一次复制度一定要有所下降</span><br><span class="line"><span class="number">2.</span>回溯:依据最后的结论往上推导出最初的答案</span><br><span class="line"><span class="number">3.</span>递归一定要有结束条件</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">伪代码:可能无法运行,但是可以表述逻辑</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不打印列表，只打印数字</span></span><br><span class="line">l1 = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,[<span class="number">9</span>,[<span class="number">10</span>,[<span class="number">11</span>,[<span class="number">12</span>,[<span class="number">13</span>,[<span class="number">14</span>,]]]]]]]]]]]]]]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">l1</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> <span class="built_in">int</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            func1(i)</span><br><span class="line">func1(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = n*factorial(n-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">4</span>))  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure>

<ul>
<li>代码可视化运行: <a href="https://pythontutor.com/">https://pythontutor.com/</a></li>
</ul>
<h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表中查出指定数字</span></span><br><span class="line"><span class="comment"># 第一种方法 直接用for循环从左往右依次查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种使用二分法,二分法使用前提数据集必须有序</span></span><br><span class="line">num = <span class="number">567</span></span><br><span class="line">l2 = [<span class="number">1</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">57</span>, <span class="number">68</span>, <span class="number">76</span>, <span class="number">81</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">222</span>, <span class="number">321</span>, <span class="number">432</span>, <span class="number">444</span>, <span class="number">567</span>, <span class="number">666</span>, <span class="number">712</span>, <span class="number">899</span>, <span class="number">999</span>, <span class="number">1111</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num</span>(<span class="params">num, l2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l2) == <span class="number">0</span>:  <span class="comment"># 列表中没有这个数</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    sli_num = <span class="built_in">len</span>(l2) // <span class="number">2</span>  <span class="comment"># 先从中间获取位置索引值</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; l2[sli_num]:  <span class="comment"># 与列表中间的值做对比</span></span><br><span class="line">        r_list = l2[sli_num + <span class="number">1</span>:]  <span class="comment"># 如果大于中间值,截取优化右边为新列表</span></span><br><span class="line">        <span class="built_in">print</span>(r_list)</span><br><span class="line">        get_num(num, r_list)  <span class="comment"># 重新走到这个函数</span></span><br><span class="line">    <span class="keyword">elif</span> num &lt; l2[sli_num]:  <span class="comment"># 如果小于中间值,目标值就在左边</span></span><br><span class="line">        l_list = l2[:sli_num]  <span class="comment"># 将左边记录为新列表</span></span><br><span class="line">        <span class="built_in">print</span>(l_list)</span><br><span class="line">        get_num(num, l_list)  <span class="comment"># 继续走到这个函数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)  <span class="comment"># 刚好等于中间值的情况</span></span><br><span class="line"></span><br><span class="line">get_num(<span class="number">444</span>, l2)</span><br></pre></td></tr></table></figure>

<h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>当功能需求仅仅是二选一的情况下 那么推荐使用三元表达式</span><br><span class="line"><span class="comment"># 常规使用时</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">      <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> b</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用三元表达式后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b </span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件成立抛出if前面的值，否则就抛出else后面的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>虽然可以嵌套使用,但是不推荐</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求三个数最大值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_num</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> (b <span class="keyword">if</span> b &gt; c <span class="keyword">else</span> c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(max_num(<span class="number">10</span>, <span class="number">22</span>, <span class="number">33</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二</span></span><br><span class="line">is_free = <span class="built_in">input</span>(<span class="string">&quot;是否收费Y/N:&quot;</span>).strip().upper()</span><br><span class="line">res = <span class="string">&#x27;收费&#x27;</span><span class="keyword">if</span> is_free == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;免费&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例三</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;username:&quot;</span>).strip()</span><br><span class="line">res = <span class="string">&#x27;NB&#x27;</span> <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;LB&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给列表中所有的人名加上_NEW后缀</span></span><br><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jerry&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一:for循环加字符拼接</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    new_list.append(i + <span class="string">&#x27;_NEW&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二:列表生成式</span></span><br><span class="line">new_list = [<span class="string">&#x27;%s_NEW&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> name_list]</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br></pre></td></tr></table></figure>

<h3 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将两个列表合成为一个字典</span></span><br><span class="line">l1 = [<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">l2 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;hobby&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l2)):</span><br><span class="line">    new_dict[l2[i]] = l1[i]</span><br><span class="line"><span class="built_in">print</span>(new_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line">res = &#123;i: j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(name_list, start=<span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &#123;1: &#x27;jason&#x27;, 2: &#x27;tony&#x27;, 3: &#x27;tom&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">enumerate(l1)</span></span><br><span class="line"><span class="string">    针对该方法使用for循环取值 每次会产生两个结果</span></span><br><span class="line"><span class="string">        第一个是从0开始的数字</span></span><br><span class="line"><span class="string">        第二个是被循环对象里面的元素</span></span><br><span class="line"><span class="string">    还可以通过start参数控制起始位置</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名函数:没有名字的函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">语法格式:</span></span><br><span class="line"><span class="string">    lambda 形参:返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line">eg1:</span><br><span class="line">a = (<span class="keyword">lambda</span> x, y: x * y)(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line">res = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">res2 = [(<span class="keyword">lambda</span> x:x**<span class="number">2</span>)(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"></span><br><span class="line">eg3:</span><br><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b)(<span class="number">10</span>, <span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数一般不会单独使用，会配合其他函数一起使用</span></span><br><span class="line"><span class="comment"># map() 映射 </span></span><br><span class="line"><span class="comment"># 使用 map(function, iterable)</span></span><br><span class="line"><span class="comment">#         函数名,可迭代对象</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> i ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(double, l)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, l)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-装饰器</title>
    <url>/3a5cdcf8.html</url>
    <content><![CDATA[<h3 id="1-装饰器定义"><a href="#1-装饰器定义" class="headerlink" title="1. 装饰器定义"></a>1. 装饰器定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">装饰器由名称空间，函数对象，闭包函数组合而来</span><br><span class="line"></span><br><span class="line">装饰:给被装饰对象添加额外的功能</span><br><span class="line">器:指的是工具</span><br><span class="line"></span><br><span class="line">装饰器的原则:开放封闭原则</span><br><span class="line">  开放:对扩展开放</span><br><span class="line">  封闭:对修改封闭</span><br><span class="line">    </span><br><span class="line">装饰器核心思想:在不改变被<span class="string">&quot;装饰对象内部代码&quot;</span>和<span class="string">&quot;原有调用方式&quot;</span>的基础上添加额外的功能</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">  <span class="keyword">import</span> time</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">      time.sleep(<span class="number">3</span>)  <span class="comment"># 阻塞3秒</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;form index&#x27;</span>)</span><br><span class="line">  start_time = time.time()  <span class="comment"># 记录函数运行之前的时间戳(1970年1月1日开始计算的秒数)</span></span><br><span class="line">  index()  <span class="comment"># 调用函数</span></span><br><span class="line">  end_time = time.time()  <span class="comment"># 记录函数运行之后的时间戳</span></span><br><span class="line">  <span class="built_in">print</span>(end_time - start_time)  <span class="comment"># 计算出函数运行的时间值</span></span><br></pre></td></tr></table></figure>

<h3 id="2-装饰器简易版"><a href="#2-装饰器简易版" class="headerlink" title="2. 装饰器简易版"></a>2. 装饰器简易版</h3><blockquote>
<p>给函数添加统计执行时间的功能</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">r_time</span>():</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;程序运行时间为%s&#x27;</span> % (end_time - start_time))</span><br><span class="line">    <span class="keyword">return</span> r_time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">for_loop</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_loop</span>():</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">100000</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">for_loop = run_time(for_loop)  <span class="comment"># 左侧的for_loop其实是r_time函数名，赋值给一个叫for_loop的变量名</span></span><br><span class="line">for_loop()  <span class="comment"># 只是在使用上感觉还是原来的函数名</span></span><br><span class="line">while_loop = run_time(while_loop)</span><br><span class="line">while_loop()</span><br></pre></td></tr></table></figure>

<h3 id="3-装饰器参数问题"><a href="#3-装饰器参数问题" class="headerlink" title="3. 装饰器参数问题"></a>3. 装饰器参数问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_time</span>(<span class="params">*args, **kwargs</span>):</span>  <span class="comment"># 将传入的位置参数组织成元组，关键字参数组织成字典</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args, **kwargs)  <span class="comment"># 将组织成元组的参数进行拆分成位置参数，将组织成字典的参数拆分成关键字参数</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序运行时间%s&quot;</span> % (end_time - start_time))</span><br><span class="line">    <span class="keyword">return</span> run_time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index name is %s&quot;</span> % name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_age</span>(<span class="params">age</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from func age is %s&quot;</span> % age)</span><br><span class="line"></span><br><span class="line">get_name = outer(get_name)</span><br><span class="line">get_name(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line">get_age = outer(get_age)</span><br><span class="line">get_age(<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-装饰器返回值问题"><a href="#4-装饰器返回值问题" class="headerlink" title="4. 装饰器返回值问题"></a>4. 装饰器返回值问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_time</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># res用于接收被装饰函数的返回值</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序运行时间%s&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> res  <span class="comment"># 此时run_time函数的返回值就是被装饰函数的返回值了</span></span><br><span class="line">    <span class="keyword">return</span> run_time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_max</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">num_max = outer(num_max)</span><br><span class="line"><span class="built_in">print</span>(num_max(<span class="number">11</span>, <span class="number">22</span>))</span><br></pre></td></tr></table></figure>

<h3 id="5-认证装饰器"><a href="#5-认证装饰器" class="headerlink" title="5. 认证装饰器"></a>5. 认证装饰器</h3><blockquote>
<p>小功能实现</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每次运行都校验用户名和密码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&#x27;username:&#x27;</span>).strip()</span><br><span class="line">        passwd = <span class="built_in">input</span>(<span class="string">&#x27;passwd:&#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            func()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;认证失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能1&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">func1 = login(func1)</span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line">func2 = login(func2)</span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录用户登录状态,只需要认证一次</span></span><br><span class="line">login_flag = &#123;<span class="string">&#x27;flag&#x27;</span>: <span class="literal">False</span>&#125;  <span class="comment"># 数据为可变类型，则函数名称空间内可以进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">        <span class="keyword">if</span> login_flag.get(<span class="string">&#x27;flag&#x27;</span>):</span><br><span class="line">            func()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">&quot;username:&quot;</span>).strip()</span><br><span class="line">            passwd = <span class="built_in">input</span>(<span class="string">&quot;passwd:&quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                func()</span><br><span class="line">                login_flag[<span class="string">&#x27;flag&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;认证失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能1&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能2&quot;</span>)</span><br><span class="line"></span><br><span class="line">func1 = login(func1)</span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line">func2 = login(func2)</span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<h3 id="6-装饰器固定模板"><a href="#6-装饰器固定模板" class="headerlink" title="6. 装饰器固定模板"></a>6. 装饰器固定模板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之前可以添加的额外功能&#x27;</span>)</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># 执行被装饰的函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之后可以添加的额外功能&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res  <span class="comment"># 将被装饰函数执行之后的返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>

<h3 id="7-装饰器语法糖"><a href="#7-装饰器语法糖" class="headerlink" title="7. 装饰器语法糖"></a>7. 装饰器语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之前可以添加的额外功能&#x27;</span>)</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># 执行被装饰的函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之后可以添加的额外功能&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res  <span class="comment"># 将被装饰函数执行之后的返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@outer  </span><span class="comment"># index = outer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"><span class="meta">@outer  </span><span class="comment"># home = outer(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">装饰器语法糖书写规范</span></span><br><span class="line"><span class="string">    语法糖必须紧贴在被装饰对象的上方</span></span><br><span class="line"><span class="string">装饰器语法糖内部原理</span></span><br><span class="line"><span class="string">    会自动将下面紧贴着的被装饰对象名字当做参数传给装饰器函数调用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-装饰器双层语法糖"><a href="#8-装饰器双层语法糖" class="headerlink" title="8. 装饰器双层语法糖"></a>8. 装饰器双层语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带参数带返回值的双层装饰器</span></span><br><span class="line">login_flag = &#123;<span class="string">&#x27;flag&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_time</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># 接收的返回值是func1和func2的</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序执行时间%s&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> res  </span><br><span class="line">    <span class="keyword">return</span> run_time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> login_flag.get(<span class="string">&#x27;flag&#x27;</span>):</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">&quot;username:&quot;</span>).strip()</span><br><span class="line">            passwd = <span class="built_in">input</span>(<span class="string">&quot;passwd:&quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                res = func(*args, **kwargs)  <span class="comment"># 接收的返回值是run_time的</span></span><br><span class="line">                login_flag[<span class="string">&#x27;flag&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> auth</span><br><span class="line"></span><br><span class="line"><span class="meta">@all_time</span></span><br><span class="line"><span class="meta">@login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能1%s&quot;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;功能1-&gt;%s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@all_time</span></span><br><span class="line"><span class="meta">@login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能2%s&quot;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;功能2-&gt;%s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func1(<span class="string">&#x27;购物&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(func2(<span class="string">&#x27;付款&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-装饰器三层语法糖"><a href="#9-装饰器三层语法糖" class="headerlink" title="9. 装饰器三层语法糖"></a>9. 装饰器三层语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断七句print执行顺序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter1</span>(<span class="params">func1</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加载了outter1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行了wrapper1&#x27;</span>)</span><br><span class="line">        res1 = func1(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res1</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter2</span>(<span class="params">func2</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加载了outter2&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行了wrapper2&#x27;</span>)</span><br><span class="line">        res2 = func2(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res2</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter3</span>(<span class="params">func3</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加载了outter3&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper3</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行了wrapper3&#x27;</span>)</span><br><span class="line">        res3 = func3(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res3</span><br><span class="line">    <span class="keyword">return</span> wrapper3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter1</span></span><br><span class="line"><span class="meta">@outter2</span></span><br><span class="line"><span class="meta">@outter3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 加载了outter3</span></span><br><span class="line"><span class="comment"># 加载了outter2</span></span><br><span class="line"><span class="comment"># 加载了outter1</span></span><br><span class="line"><span class="comment"># 执行了wrapper1</span></span><br><span class="line"><span class="comment"># 执行了wrapper2</span></span><br><span class="line"><span class="comment"># 执行了wrapper3</span></span><br><span class="line"><span class="comment"># from index</span></span><br></pre></td></tr></table></figure>

<h3 id="10-装饰器修复技术"><a href="#10-装饰器修复技术" class="headerlink" title="10. 装饰器修复技术"></a>10. 装饰器修复技术</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)  </span><span class="comment"># 修复技术就是为了让被装饰对象更加不容易被察觉装饰了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之前可以添加的额外功能&#x27;</span>)</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># 执行被装饰的函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行函数之后可以添加的额外功能&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res  <span class="comment"># 将被装饰函数执行之后的返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer  </span><span class="comment"># index = outer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(index)</span><br><span class="line"><span class="built_in">help</span>(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个home函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># help(index)</span></span><br><span class="line"><span class="comment"># help(home)</span></span><br><span class="line"><span class="comment"># print(index)</span></span><br><span class="line"><span class="comment"># help(len)</span></span><br></pre></td></tr></table></figure>

<h3 id="11-有参装饰器"><a href="#11-有参装饰器" class="headerlink" title="11. 有参装饰器"></a>11. 有参装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过第三层传值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">source_data</span>):</span></span><br><span class="line">    <span class="comment"># source_data = &#x27;file&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_auth</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            <span class="comment"># 2.校验用户名和密码是否正确</span></span><br><span class="line">            <span class="comment"># 数据的校验方式可以切换多种</span></span><br><span class="line">            <span class="keyword">if</span> source_data == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="comment"># 从文件中获取用户数据并比对</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;file文件获取&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> source_data == <span class="string">&#x27;MySQL&#x27;</span>:</span><br><span class="line">                <span class="comment"># 从MySQL数据库中获取数据比对</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;MySQL数据库获取&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> source_data == <span class="string">&#x27;postgreSQL&#x27;</span>:</span><br><span class="line">                <span class="comment"># 从postgreSQL数据库中获取数据对比</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;postgreSQL数据库获取&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误 无法执行函数&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> auth</span><br><span class="line">    <span class="keyword">return</span> login_auth</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer(<span class="params"><span class="string">&#x27;file&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"><span class="meta">@outer(<span class="params"><span class="string">&#x27;MySQL&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-函数使用(二)</title>
    <url>/abc4492a.html</url>
    <content><![CDATA[<h2 id="1-名称空间作用域"><a href="#1-名称空间作用域" class="headerlink" title="1. 名称空间作用域"></a>1. 名称空间作用域</h2><ol>
<li><p>作用域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">名称空间所能够作用的范围</span><br></pre></td></tr></table></figure></li>
<li><p>内置名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">程序任何阶段位置均可使用(全局有效)</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>全局名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">程序任何阶段位置均可使用(全局有效)</span><br></pre></td></tr></table></figure></li>
<li><p>局部名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一般情况下只在各自的局部名称空间中有效</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-global与nonlocal"><a href="#2-global与nonlocal" class="headerlink" title="2. global与nonlocal"></a>2. global与nonlocal</h2><h3 id="2-1-global"><a href="#2-1-global" class="headerlink" title="2.1 global"></a>2.1 global</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg1:</span><br><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x  <span class="comment"># 局部修改全局变量</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">index()  <span class="comment"># 调用函数之后,因为有了global，x可以被修改</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 结果为222</span></span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">a</span>):</span></span><br><span class="line">    name_list.append(a)</span><br><span class="line">index(<span class="string">&#x27;tony&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;xxx&#x27;, &#x27;tony&#x27;]</span></span><br><span class="line"></span><br><span class="line">结论:</span><br><span class="line">  如果想在局部修改全局数据</span><br><span class="line">    数据为不可变类型则需要关键字<span class="keyword">global</span>声明</span><br><span class="line">    数据为可变类型则不需要关键字<span class="keyword">global</span>声明</span><br></pre></td></tr></table></figure>

<h3 id="2-2-nolocal"><a href="#2-2-nolocal" class="headerlink" title="2.2 nolocal"></a>2.2 nolocal</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg1:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x  <span class="comment"># 内部的局部修改外部的局部数据使用 nonlocal </span></span><br><span class="line">        x = <span class="number">222</span></span><br><span class="line">    func()  <span class="comment"># 此时已经将 x 重新赋值为222</span></span><br><span class="line">    <span class="built_in">print</span>(x)  <span class="comment"># 打印x</span></span><br><span class="line">index()  <span class="comment"># 调用index函数,结果为222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    l1 = [<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">        l1.append(<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">    func()</span><br><span class="line">    <span class="built_in">print</span>(l1)  <span class="comment"># [&#x27;jason&#x27;, 18, &#x27;male&#x27;]</span></span><br></pre></td></tr></table></figure>



<h2 id="3-函数使用"><a href="#3-函数使用" class="headerlink" title="3. 函数使用"></a>3. 函数使用</h2><h3 id="3-1-函数对象-函数名"><a href="#3-1-函数对象-函数名" class="headerlink" title="3.1 函数对象(函数名)"></a>3.1 函数对象(函数名)</h3><blockquote>
<p><strong>函数名遇到括号就会被调用</strong></p>
</blockquote>
<ol>
<li><p>用法一：函数名可以当做变量名赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line">a = index</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &lt;function index at 0x7fcb278c5ea0&gt; 相当于函数的内存地址</span></span><br><span class="line">a()  <span class="comment"># 相当于调用index() 结果为 from index</span></span><br></pre></td></tr></table></figure></li>
<li><p>用法二：函数名可以当做函数的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from func&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 函数的内存地址</span></span><br><span class="line">    a()</span><br><span class="line">func(index) </span><br><span class="line"><span class="comment"># from func</span></span><br><span class="line"><span class="comment"># from index</span></span><br></pre></td></tr></table></figure></li>
<li><p>用法三：函数名可以当做函数的返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from func&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">res = func()  <span class="comment"># 先得到 from func</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 得到func函数的返回值，是index函数的内存地址</span></span><br><span class="line">res()  <span class="comment"># 得到 from index</span></span><br></pre></td></tr></table></figure></li>
<li><p>用法四：函数名可以当做容器类型(内部可以存放多个数据)的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg1:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from func&quot;</span>)</span><br><span class="line">l1 = [index, func]</span><br><span class="line">l1[<span class="number">0</span>]()  <span class="comment"># 本质就是index() 即调用函数index</span></span><br><span class="line">l1[<span class="number">1</span>]()  <span class="comment"># 本质就是func()  即调用函数func</span></span><br><span class="line"><span class="built_in">print</span>(l1)  <span class="comment"># 得到函数index和func的内存地址</span></span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能1&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能2&quot;</span>)</span><br><span class="line">choice_dict = &#123;<span class="string">&#x27;1&#x27;</span>: func1,</span><br><span class="line">               <span class="string">&#x27;2&#x27;</span>: func2&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        1.功能1</span></span><br><span class="line"><span class="string">        2.功能2</span></span><br><span class="line"><span class="string">        3.退出</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;请输入选项&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 比if-elif-else格式精简</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> choice_dict:</span><br><span class="line">            func_name = choice_dict.get(choice)</span><br><span class="line">            func_name()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;选项不存在&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-函数嵌套调用"><a href="#3-2-函数嵌套调用" class="headerlink" title="3.2 函数嵌套调用"></a>3.2 函数嵌套调用</h3><ul>
<li><p>函数内部调用其他函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg1:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    index()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_max</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">four_max</span>(<span class="params">x, y, m, n</span>):</span></span><br><span class="line">    res1 = two_max(x, y)</span><br><span class="line">    res2 = two_max(res1, m)</span><br><span class="line">    res3 = two_max(res2, n)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"><span class="built_in">max</span> = four_max(<span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">59</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3-函数嵌套定义"><a href="#3-3-函数嵌套定义" class="headerlink" title="3.3 函数嵌套定义"></a>3.3 函数嵌套定义</h3><ul>
<li><p>函数体内部定义其他函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将复杂的功能全部隐藏起来，暴露一个简单的接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_func</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;功能一&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;功能二&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;功能三&#x27;</span>)</span><br><span class="line">    all_dict = &#123;<span class="string">&#x27;1&#x27;</span>: func1,</span><br><span class="line">                <span class="string">&#x27;2&#x27;</span>: func2,</span><br><span class="line">                <span class="string">&#x27;3&#x27;</span>: func3&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> <span class="keyword">in</span> all_dict:</span><br><span class="line">        func_name = all_dict.get(<span class="built_in">type</span>)</span><br><span class="line">        func_name()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;功能不存在&quot;</span>)</span><br><span class="line">        </span><br><span class="line">all_func(<span class="string">&#x27;2&#x27;</span>)  <span class="comment"># 功能二</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4-闭包函数"><a href="#3-4-闭包函数" class="headerlink" title="3.4 闭包函数"></a>3.4 闭包函数</h3><ol>
<li><p>闭包函数定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">闭:定义在函数内部的函数</span><br><span class="line">包:内部函数使用了外部函数名称空间中的名字</span><br><span class="line">  </span><br><span class="line">eg:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">      x = <span class="number">111</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;form func&#x27;</span>, x)</span><br><span class="line">      <span class="keyword">return</span> func</span><br><span class="line">  <span class="built_in">print</span>(outer())</span><br><span class="line">  a = outer()</span><br><span class="line">  a()</span><br></pre></td></tr></table></figure></li>
<li><p>函数传参的两种方式</p>
<ol>
<li><p>方式一:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数体代码需要用到的数据直接在括号内定义形参即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">index(<span class="string">&#x27;jason&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>方式二:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 闭包函数</span></span><br><span class="line">eg1:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">x, y</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">          <span class="keyword">if</span> x &gt; y:</span><br><span class="line">              <span class="keyword">return</span> x</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              <span class="keyword">return</span> y</span><br><span class="line">      <span class="keyword">return</span> func</span><br><span class="line">  res = outer(<span class="number">23</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="built_in">print</span>(res())  <span class="comment"># 23</span></span><br><span class="line">  <span class="built_in">print</span>(res())  <span class="comment"># 23</span></span><br><span class="line">  </span><br><span class="line">eg2:</span><br><span class="line">  <span class="keyword">import</span> requests</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">url</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">get_content</span>():</span></span><br><span class="line">          res = requests.get(url)</span><br><span class="line">          <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">              <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;xxx.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                  f.write(res.content)</span><br><span class="line">      <span class="keyword">return</span> get_content</span><br><span class="line"></span><br><span class="line">  res = outer(<span class="string">&#x27;https://jd.com&#x27;</span>)  <span class="comment"># 需要爬哪个网站直接替换实参，比定义全局url更灵活</span></span><br><span class="line">  res()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装配置使用</title>
    <url>/13085aa8.html</url>
    <content><![CDATA[<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全一些的依赖</span></span><br><span class="line">yum install -y libxml2 libxml2-devel openssl \</span><br><span class="line">openssl-devel bzip2 bzip2-devel libcurl \</span><br><span class="line">libcurl-devel libjpeg libjpeg-devel \</span><br><span class="line">libpng libpng-devel freetype freetype-devel \</span><br><span class="line">gmp gmp-devel libmcrypt libmcrypt-devel \</span><br><span class="line">readline readline-devel libxslt libxslt-devel  \</span><br><span class="line">libicu-devel  openldap  openldap-devel \</span><br><span class="line">make zlib zlib-devel gcc-c++ libtool \</span><br><span class="line">pcre pcre-devel  cmake gcc  ncurses ncurses-devel \</span><br><span class="line">bison bison-devel libgcrypt perl wget</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最小依赖</span></span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建www用户管理nginx并设置为不可登录</span></span><br><span class="line">useradd www</span><br><span class="line">usermod -s nologin www</span><br><span class="line"></span><br><span class="line"><span class="comment">#www用户一步到位#</span></span><br><span class="line">useradd -s nologin www</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建nginx工作目录</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建存放nginx下载的目录</span></span><br><span class="line">mkdir -p /data/tools &amp;&amp; <span class="built_in">cd</span> /data/tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本选择</span></span><br><span class="line"><span class="comment">#http://nginx.org/en/download.html  #下载地址</span></span><br><span class="line"><span class="comment">#Stable version		 稳定版本</span></span><br><span class="line"><span class="comment">#Mainline version 	 新版本（不推荐，无特殊要求稳定版即可）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载安装包</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压nginx</span></span><br><span class="line">tar xf nginx-1.20.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#隐藏版本，看需要是否隐藏nginx版本</span></span><br><span class="line">sed -i <span class="string">&#x27;s/1.20.1//g&#x27;</span> nginx-1.20.1/src/core/nginx.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译参数开始编译</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.20.1</span><br><span class="line">./configure --user=www --group=www \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx  \</span><br><span class="line">--with-http_stub_status_module  \</span><br><span class="line">--with-http_ssl_module --with-pcre </span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx -V 可查看安装的nginx的编译参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make -j `cat /proc/cpuinfo |grep processor |wc -l` &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=/usr/local/nginx/sbin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#给nginx工作目录www权限</span></span><br><span class="line">chown -R www.www /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure>

<h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">nginx </span><br><span class="line"></span><br><span class="line"><span class="comment">#平滑重载</span></span><br><span class="line">nginx -s reload </span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">nginx -s stop </span><br><span class="line"></span><br><span class="line"><span class="comment">#查找nginx进程，杀死PID</span></span><br><span class="line">ps -ef |grep nginx </span><br><span class="line"><span class="built_in">kill</span> nginxPID</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查语法，修改配置文件后必做</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看编译参数及版本</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br><span class="line">cp nginx.conf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到最简单的配置文件</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|#&quot;</span> nginx.conf.bak &gt; nginx.conf</span><br></pre></td></tr></table></figure>

<p>最简配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相对优化后的主配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相对优化后的配置文件</span></span><br><span class="line">user  www www;					<span class="comment">#用户</span></span><br><span class="line">worker_processes 2;				<span class="comment">#进程数，可根据自身配置调配  可选 auto </span></span><br><span class="line">events</span><br><span class="line">    &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 8192;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line">http</span><br><span class="line">    &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line">        charset UTF-8;</span><br><span class="line">        server_names_hash_bucket_size 128;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line">        <span class="comment">#####################################</span></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line">        tcp_nodelay on;</span><br><span class="line">        <span class="comment">#####################################</span></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">        <span class="comment">#####################################</span></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        server_tokens off;</span><br><span class="line">        include vhost/*.conf;<span class="comment">#conf/vhost下存放虚拟主机配置文件，将每个域名配置文件写到此目录下以 .conf结尾即可，实现多域名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>站点配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf/vhost</span><br><span class="line">cat www.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;  #配置访问日志文件位置</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/<span class="built_in">local</span>/nginx/html;  <span class="comment">#站点目录位置</span></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="动态添加模块"><a href="#动态添加模块" class="headerlink" title="动态添加模块"></a>动态添加模块</h2><p><strong>扩展模块nginx-rtmp-module为例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载rtmp模块</span></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压并查看模块</span></span><br><span class="line">unzip master.zip</span><br><span class="line">ls nginx-rtmp-module-master</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看之前的编译参数</span></span><br><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到之前编译的nginx的目录</span></span><br><span class="line"><span class="built_in">cd</span> /data/tools/nginx-1.20.1/</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新编译增加一个模块</span></span><br><span class="line">./configure  --user=www --group=www \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_ssl_module --with-pcre \</span><br><span class="line">--add-module=/data/tools/nginx-rtmp-module-master</span><br><span class="line"></span><br><span class="line"><span class="comment">#不能make install 否则出问题</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份之前的nginx软件</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#替换旧版本nginx软件</span></span><br><span class="line">cp ./objs/nginx&#123;,.bak&#125;</span><br><span class="line">mv ./objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新检查当前是否添加了rtmp模块</span></span><br><span class="line">nginx -V</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h2><h4 id="下载服务器"><a href="#下载服务器" class="headerlink" title="下载服务器"></a>下载服务器</h4><p>编辑做下载的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/vhost/download.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8000;  <span class="comment">#端口</span></span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /download;  <span class="comment">#下载目录</span></span><br><span class="line">            autoindex on;  <span class="comment">#开启索引功能</span></span><br><span class="line">            autoindex_exact_size off; <span class="comment">#关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb）</span></span><br><span class="line">            autoindex_localtime on; <span class="comment">#显示本机时间而非 GMT 时间</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建存放文件的下载目录</span></span><br><span class="line"> mkdir /download</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#改变属主属组</span></span><br><span class="line"> chown -R www.www /download/</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#检查nginx语法配置</span></span><br><span class="line"> nginx -t</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#平滑重启nginx</span></span><br><span class="line"> nginx -s reload </span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /download/test.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/vedTHQ.png" alt="vedTHQ"></p>
<h4 id="https证书配置"><a href="#https证书配置" class="headerlink" title="https证书配置"></a>https证书配置</h4>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-命令记录-02</title>
    <url>/36b9df2b.html</url>
    <content><![CDATA[<h3 id="去除文件空行和-开头的行"><a href="#去除文件空行和-开头的行" class="headerlink" title="去除文件空行和#开头的行"></a>去除文件空行和#开头的行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep ^[^<span class="comment">#] file</span></span><br><span class="line">grep -Ev <span class="string">&quot;^$|[#;]&quot;</span>  file</span><br><span class="line">egrep -v <span class="string">&quot;^$|#&quot;</span>  file</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="修改文件最大打开数"><a href="#修改文件最大打开数" class="headerlink" title="修改文件最大打开数"></a>修改文件最大打开数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 1048576</span><br><span class="line">sed -i <span class="string">&quot;/nofile/d&quot;</span> /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* hard nofile 1048576&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* soft nofile 1048576&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root hard nofile 1048576&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root soft nofile 1048576&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure>

<h3 id="优化ssh"><a href="#优化ssh" class="headerlink" title="优化ssh"></a>优化ssh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port 52113                 <span class="comment">#10000以上的端口</span></span><br><span class="line">PermitRootLogin no         <span class="comment">#禁止root远程登录</span></span><br><span class="line">PermitEmptyPasswords no    <span class="comment">#禁止空密码登录</span></span><br><span class="line">UseDNS no                  <span class="comment">#不使用解析。</span></span><br><span class="line">GSSAPIAuthentication no    <span class="comment">#连接慢的解决配置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查sshd语法</span></span><br><span class="line">sshd -t  </span><br><span class="line"></span><br><span class="line"><span class="comment">#重启ssh</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h3 id="Centos常用包"><a href="#Centos常用包" class="headerlink" title="Centos常用包"></a>Centos常用包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y libxml2 libxml2-devel openssl \</span><br><span class="line">openssl-devel bzip2 bzip2-devel libcurl \</span><br><span class="line">libcurl-devel libjpeg libjpeg-devel \</span><br><span class="line">libpng libpng-devel freetype freetype-devel \</span><br><span class="line">gmp gmp-devel libmcrypt libmcrypt-devel \</span><br><span class="line">readline readline-devel libxslt libxslt-devel  \</span><br><span class="line">libicu-devel  openldap  openldap-devel \</span><br><span class="line">make zlib zlib-devel gcc-c++ libtool \</span><br><span class="line">pcre pcre-devel  cmake gcc  ncurses ncurses-devel \</span><br><span class="line">bison bison-devel libgcrypt perl</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python-函数参数(一)</title>
    <url>/c86b83ee.html</url>
    <content><![CDATA[<h3 id="1-函数参数分类"><a href="#1-函数参数分类" class="headerlink" title="1. 函数参数分类"></a>1. 函数参数分类</h3><h4 id="1-1-形式参数"><a href="#1-1-形式参数" class="headerlink" title="1.1 形式参数"></a>1.1 形式参数</h4><p>在函数定义阶段括号内所填写的参数，简称形参</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># a和b就是函数func的形参</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-实际参数"><a href="#1-2-实际参数" class="headerlink" title="1.2 实际参数"></a>1.2 实际参数</h4><p>在函数调用阶段括号内传入的参数，简称实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 数据1和2就是函数func的实参</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-关系"><a href="#1-3-关系" class="headerlink" title="1.3 关系"></a>1.3 关系</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">形参可以看成变量名,实参可以看成变量值</span><br><span class="line">两者在函数调用阶段临时绑定,函数运行结束断开</span><br><span class="line"></span><br><span class="line">形参的表现形式只有一种就是变量名</span><br><span class="line">实参的表现形式有很多中(核心是数据值)</span><br></pre></td></tr></table></figure>

<h3 id="2-位置参数"><a href="#2-位置参数" class="headerlink" title="2. 位置参数"></a>2. 位置参数</h3><ol>
<li><p>位置参数</p>
<p>按照从左往右的顺序依次填入的参数</p>
</li>
<li><p>位置形参</p>
<p>在函数定义阶段括号内按照从左往右的顺序依次填入的变量名</p>
</li>
<li><p>位置实参</p>
<p>在函数调用阶段括号内按照从左往右的顺序依次传入的数据值</p>
</li>
<li><p>关键字实参</p>
<p>可以打破位置顺序</p>
<p>在函数调用阶段可以通过 <code>形参名=数据值</code>  的形式进行传值</p>
</li>
<li><p>总结</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>位置形参与位置实参在函数调用阶段，按照位置一一对应</span><br><span class="line"><span class="number">2.</span>位置参数在绑定的时候个数一致</span><br><span class="line"><span class="number">3.</span>格式越简单的越靠前，格式越复杂的越靠后</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-默认参数"><a href="#3-默认参数" class="headerlink" title="3. 默认参数"></a>3. 默认参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">默认参数描述的是默认形参:</span><br><span class="line">  <span class="number">1.</span>函数在定义阶段就给形参赋值了</span><br><span class="line">  <span class="number">2.</span>该形参在调用阶段如果不给值，则使用默认值</span><br><span class="line">  <span class="number">3.</span>该形参在函数调用阶段也可以继续给值，则使用所给的值</span><br><span class="line">  <span class="number">4.</span>位置形参与默认形参在定义的时候，位置形参必须在默认形参的前面</span><br><span class="line">  </span><br><span class="line">  eg:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name, age, gender=<span class="string">&#x27;male&#x27;</span></span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s:%s:%s&#x27;</span> % (name, age, gender))</span><br><span class="line"></span><br><span class="line">    register(<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>)  <span class="comment"># jason:18:male</span></span><br><span class="line">    register(<span class="string">&#x27;lili&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;female&#x27;</span>)  <span class="comment"># lili:18:female</span></span><br></pre></td></tr></table></figure>

<h3 id="4-可变长参数"><a href="#4-可变长参数" class="headerlink" title="4. 可变长参数"></a>4. 可变长参数</h3><h4 id="4-1-形参"><a href="#4-1-形参" class="headerlink" title="4.1 形参"></a>4.1 形参</h4><h5 id="4-1-1-位置参数"><a href="#4-1-1-位置参数" class="headerlink" title="4.1.1 位置参数"></a>4.1.1 位置参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数无论传入多少位置参数都可以正常运行</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b, *c</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line">  func(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 1 2 ()</span></span><br><span class="line">  func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 1 2 (3,)</span></span><br><span class="line">  func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 1 2 (3, 4)</span></span><br><span class="line"></span><br><span class="line">* 在形参数中的使用，用于接收多余位置的参数，并组织成元组的形式赋值给*号后面的变量名</span><br></pre></td></tr></table></figure>

<h5 id="4-1-2-关键字参数"><a href="#4-1-2-关键字参数" class="headerlink" title="4.1.2 关键字参数"></a>4.1.2 关键字参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数无论传入多少关键字参数都可以正常运行</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b, **c</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  func(a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 1 2 &#123;&#125;</span></span><br><span class="line">  func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)  <span class="comment"># 1 2 &#123;&#x27;c&#x27;: 3&#125;</span></span><br><span class="line">  func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)  <span class="comment"># 1 2 &#123;&#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125; </span></span><br><span class="line">  </span><br><span class="line">** 号在形参中的使用，用于接收多余的关键字参数，并组织成字典的形式赋值给给**号后面的变量名</span><br></pre></td></tr></table></figure>

<h5 id="4-1-3-位置参数-关键字参数"><a href="#4-1-3-位置参数-关键字参数" class="headerlink" title="4.1.3 位置参数+关键字参数"></a>4.1.3 位置参数+关键字参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数无论传入多少位置参数和关键字参数都可以正常运行</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*a, **b</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line">  func()  <span class="comment"># () &#123;&#125;</span></span><br><span class="line">  func(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># (1, 2) &#123;&#125;</span></span><br><span class="line">  func(a=<span class="number">1</span>, b=<span class="number">2</span>  <span class="comment"># () &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line">  func(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># (1, 2) &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">规定:</span><br><span class="line">    可变长形参 *和**后面的变量名可以随便定义，但是python中推荐使用</span><br><span class="line">       *args</span><br><span class="line">       **kwargs</span><br></pre></td></tr></table></figure>

<h4 id="4-2-实参"><a href="#4-2-实参" class="headerlink" title="4.2 实参"></a>4.2 实参</h4><h5 id="4-2-1-在实参中使用"><a href="#4-2-1-在实参中使用" class="headerlink" title="4.2.1 *在实参中使用"></a>4.2.1 <code>*</code>在实参中使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"><span class="comment"># func(list1)  # 报错，list1是一个整体给了a，后面的b和c参数没有传入</span></span><br><span class="line">func(list1[<span class="number">0</span>], list1[<span class="number">1</span>], list1[<span class="number">2</span>])  <span class="comment"># 需要拆散一一传值</span></span><br><span class="line"></span><br><span class="line">当形参是*args，列表里面的元素如何按照位置一一传值</span><br><span class="line">eg:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(args)</span><br><span class="line">  list1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">  func(*list1)  <span class="comment"># (11, 22, 33, 44)</span></span><br><span class="line">*号在实参中的使用，会将列表、元组内的元素打散成位置参数的形式一一传值</span><br></pre></td></tr></table></figure>

<h5 id="4-2-3-在实参中使用"><a href="#4-2-3-在实参中使用" class="headerlink" title="4.2.3 **在实参中使用"></a>4.2.3 <code>**</code>在实参中使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line">func(**dict1)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;xxx&#x27;, &#x27;pwd&#x27;: 123&#125;</span></span><br><span class="line"><span class="comment"># name=&#x27;xxx&#x27;  --&gt; &#x27;name&#x27;: &#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment"># pwd=123     --&gt; &#x27;pwd&#x27;: 123</span></span><br><span class="line"></span><br><span class="line">**号在实参中的使用，会将字典内的键值对打散成关键字参数传入</span><br></pre></td></tr></table></figure>

<h3 id="5-函数参数补充"><a href="#5-函数参数补充" class="headerlink" title="5. 函数参数补充"></a>5. 函数参数补充</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">name, age, *a, sex, height</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name, age, a, sex, height)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func(&#x27;jason&#x27;, 18, &#x27;male&#x27;, 183)  # 报错</span></span><br><span class="line">func(<span class="string">&#x27;lili&#x27;</span>, <span class="number">18</span>, sex=<span class="string">&#x27;male&#x27;</span>, height=<span class="number">183</span>) </span><br><span class="line"></span><br><span class="line">当*号后面还有参数时，后面传入实参的时候必须以关键字参数的形式，该形式不常用</span><br></pre></td></tr></table></figure>

<h3 id="6-名称空间"><a href="#6-名称空间" class="headerlink" title="6. 名称空间"></a>6. 名称空间</h3><p>用于存放变量名与变量值绑定关系的地方</p>
<h5 id="6-1-分类"><a href="#6-1-分类" class="headerlink" title="6.1 分类"></a>6.1 分类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>内置名称空间</span><br><span class="line">  python解释器定义好的，如 <span class="built_in">len</span>()</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>全局名称空间</span><br><span class="line">	在py文件中顶格编写的代码运行之后都会存入全局名称空间</span><br><span class="line">	        	name = <span class="string">&#x27;jason&#x27;</span>  <span class="comment"># name全局</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span>  <span class="comment"># func全局</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">                a = <span class="number">123</span>  <span class="comment"># a全局</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="built_in">print</span>(i)  <span class="comment"># i全局</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                a = <span class="number">123</span>  <span class="comment"># a全局</span></span><br><span class="line">                </span><br><span class="line"><span class="number">3.</span>局部名称空间</span><br><span class="line">  函数体代码运行之后产生的都是局部名称空间</span><br></pre></td></tr></table></figure>

<h5 id="6-2-存活周期"><a href="#6-2-存活周期" class="headerlink" title="6.2 存活周期"></a>6.2 存活周期</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>内置名称空间</span><br><span class="line">  python解释器启动与关闭而创建和销毁</span><br><span class="line"><span class="number">2.</span>全局名称空间</span><br><span class="line">  随着py文件的运行与结束而创建和销毁</span><br><span class="line"><span class="number">3.</span>局部名称空间</span><br><span class="line">  随着函数体代码的执行与结束而创建和销毁</span><br></pre></td></tr></table></figure>

<h5 id="6-3-查找顺序"><a href="#6-3-查找顺序" class="headerlink" title="6.3 查找顺序"></a>6.3 查找顺序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查找名字的时候，先确定自己当前在哪儿</span><br><span class="line">  如果在局部</span><br><span class="line">    局部 --&gt; 全局 --&gt; 内置</span><br><span class="line">  如果在全局</span><br><span class="line">    全局 --&gt; 内置</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>局部名称空间的嵌套</span><br><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        x = <span class="number">333</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">            x = <span class="number">444</span>  <span class="comment"># 如果没在这定义 x 会向上查找，依次类推</span></span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="comment"># x = 444 # 当x定义在这时，会报错</span></span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用f1() 执行所有函数</span></span><br><span class="line">f1()  <span class="comment"># 444</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func_dic = &#123;<span class="string">&#x27;1&#x27;</span>: register, <span class="string">&#x27;2&#x27;</span>: login&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.注册</span></span><br><span class="line"><span class="string">    2.登录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&#x27;please&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">        func_name = func_dic.get(choice)</span><br><span class="line">        func_name()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;功能编号不存在&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Bond4配置</title>
    <url>/c2b5b878.html</url>
    <content><![CDATA[<h3 id="Ubuntu配置"><a href="#Ubuntu配置" class="headerlink" title="Ubuntu配置"></a>Ubuntu配置</h3><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens3f1: &#123;&#125;</span><br><span class="line">    ens3f0: &#123;&#125;</span><br><span class="line">  renderer: networkd</span><br><span class="line">  bonds:</span><br><span class="line">    bond4:</span><br><span class="line">      addresses: [10.10.2.1/16]</span><br><span class="line">      gateway4: 10.10.1.254</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [114.114.114.114,202.96.128.86,8.8.8.8]</span><br><span class="line">      interfaces:</span><br><span class="line">        - ens3f1</span><br><span class="line">        - ens3f0</span><br><span class="line">      parameters:</span><br><span class="line">        mode: 802.3ad</span><br><span class="line">        mii-monitor-interval:</span><br><span class="line">        lacp-rate: fast</span><br><span class="line">        transmit-hash-policy: layer3+4</span><br><span class="line">        </span><br><span class="line"><span class="comment">#生效        </span></span><br><span class="line">netplan apply</span><br></pre></td></tr></table></figure>

<h3 id="Centos配置"><a href="#Centos配置" class="headerlink" title="Centos配置"></a>Centos配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">参考文档：https://support.huawei.com/enterprise/zh/knowledge/EKB1100053867</span><br><span class="line"></span><br><span class="line"><span class="comment">#双bond配置</span></span><br><span class="line"><span class="comment">#备份原本的网卡配置信息</span></span><br><span class="line">mkdir /opt/net_bak</span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line">cp ifcfg-* /opt/net_bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成bond网卡配置文件名称为bond4</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond ifname bond4 mode 4</span><br><span class="line"></span><br><span class="line"><span class="comment">#将ens1f0和ens6f0网卡绑定到bond4</span></span><br><span class="line"><span class="comment">#f0为两个网卡的第一口</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname ens1f0 master bond4</span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname ens6f0 master bond4</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成bond网卡配置文件名称为bond20</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond ifname bond20 mode 4</span><br><span class="line"></span><br><span class="line"><span class="comment">#将ens1f1和ens6f1网卡绑定到bond20</span></span><br><span class="line"><span class="comment">#f1为两个网卡的第一口</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname ens1f1 master bond20</span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname ens6f1 master bond20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看生成的bond配置文件</span></span><br><span class="line">ls ifcfg-bond-*</span><br><span class="line">ifcfg-bond-bond0 ifcfg-bond-slave-enp125s0f0 ifcfg-bond-slave-enp125s0f1</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看生成的bond配置信息</span></span><br><span class="line">nmcli con show</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置网卡，将IP、网关、掩码、DNS配置</span></span><br><span class="line">vim ifcfg-bond-bond4</span><br><span class="line">vim ifcfg-bond-bond20</span><br><span class="line"></span><br><span class="line"><span class="comment">#网卡模式选择：</span></span><br><span class="line"><span class="comment">#bond4配置：</span></span><br><span class="line">BONDING_OPTS=<span class="string">&#x27;mode=4 miimon=100 xmit_hash_policy=layer3+4&#x27;</span></span><br><span class="line"><span class="comment">#刻录系统需要将网卡内的UUID删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启网卡</span></span><br><span class="line">nmcli con reload</span><br><span class="line">systemctl restart network.service </span><br><span class="line"></span><br><span class="line"><span class="comment">#检查配置情况</span></span><br><span class="line"><span class="comment">#查看是否配置成功</span></span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看生成的bond是否正常</span></span><br><span class="line">cat /proc/net/bond/bond0</span><br><span class="line">ethtool bond0</span><br></pre></td></tr></table></figure>

<p>交换机配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bond4需要交换机配置</span></span><br><span class="line">interface Eth-Trunk10</span><br><span class="line">mode lacp-static</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0/0/1</span><br><span class="line">eth-trunk 10</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0/0/2</span><br><span class="line">eth-trunk 10</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Bond</tag>
      </tags>
  </entry>
  <entry>
    <title>python-文件与函数初识</title>
    <url>/a7f42e80.html</url>
    <content><![CDATA[<h2 id="1-文件"><a href="#1-文件" class="headerlink" title="1. 文件"></a>1. 文件</h2><h3 id="1-1-二进制模式读"><a href="#1-1-二进制模式读" class="headerlink" title="1.1 二进制模式读"></a>1.1 二进制模式读</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())  <span class="comment"># 读取的是二进制内容</span></span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 经过住解码，能正常读取内容</span></span><br><span class="line">    <span class="built_in">print</span>(f.read(<span class="number">3</span>).decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 三个字节为一个中文</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">read()  括号内可以放数字</span></span><br><span class="line"><span class="string">    在t模式下表示字符个数</span></span><br><span class="line"><span class="string">    在b模式下表示字节个数</span></span><br><span class="line"><span class="string">英文字符统一使用一个bytes来表示</span></span><br><span class="line"><span class="string">中文字符统一使用三个bytes来表示</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="1-2-文件内光标的移动"><a href="#1-2-文件内光标的移动" class="headerlink" title="1.2 文件内光标的移动"></a>1.2 文件内光标的移动</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read(<span class="number">6</span>).decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(f.tell())  <span class="comment"># 查看光标移动了多少字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.seek(<span class="number">8</span>, <span class="number">1</span>))  <span class="comment"># 从上面第6字节位置开始往后移动8个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 查看上面移动后的结果</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">seek()</span></span><br><span class="line"><span class="string">  控制文件光标的移动,eg:</span></span><br><span class="line"><span class="string">  f.seek(offset,whence)</span></span><br><span class="line"><span class="string">      offset表示位移量,始终以字节为最小单位,正数从左往右，负数从右往左</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      whence表示模式</span></span><br><span class="line"><span class="string">          0:以文件开头为参考(支持tb两种模式)</span></span><br><span class="line"><span class="string">          1:以当前位置为参考,只支持b模式</span></span><br><span class="line"><span class="string">          2:以文件末尾为参考,只支持b模</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>通过光标实现动态查看日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 直接将光标移动到文件末尾</span></span><br><span class="line">    f.seek(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 从文件末尾一直读取文件内容</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="comment"># 判断读取的内容是否为0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-文件内容修改"><a href="#1-3-文件内容修改" class="headerlink" title="1.3 文件内容修改"></a>1.3 文件内容修改</h3><h4 id="1-3-1-覆盖"><a href="#1-3-1-覆盖" class="headerlink" title="1.3.1 覆盖"></a>1.3.1 覆盖</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data = f.read()  <span class="comment"># 取出内容</span></span><br><span class="line">     <span class="comment"># print(type(data))</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">     new_data = data.replace(<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;jason&#x27;</span>)  <span class="comment"># 替换</span></span><br><span class="line">     f1.write(new_data)  <span class="comment"># 重新写入</span></span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-新建"><a href="#1-3-2-新建" class="headerlink" title="1.3.2 新建"></a>1.3.2 新建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> read_f, \</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;c.txt.swap&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        write_f.write(line.replace(<span class="string">&#x27;SB&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>))</span><br><span class="line">os.remove(<span class="string">&#x27;c.txt&#x27;</span>)  <span class="comment"># 删除原文件</span></span><br><span class="line">os.rename(<span class="string">&#x27;c.txt.swap&#x27;</span>, <span class="string">&#x27;c.txt&#x27;</span>)  <span class="comment"># 重命名文件</span></span><br></pre></td></tr></table></figure>

<h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h2><h3 id="2-1-函数语法结构"><a href="#2-1-函数语法结构" class="headerlink" title="2.1 函数语法结构"></a>2.1 函数语法结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;函数注释&#x27;&#x27;&#x27;</span></span><br><span class="line">  函数体代码</span><br><span class="line">  <span class="keyword">return</span> 返回值</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.def 定义函数的关键字 必要的</span></span><br><span class="line"><span class="string">2.函数名  相当于变量名,命名规范与风格遵循变量名 必要的</span></span><br><span class="line"><span class="string">3.参数 参数可以没有也可以有多个,表示在使用函数之前需要满足的一些条件 非必要</span></span><br><span class="line"><span class="string">4.函数注释 介绍函数功能 参数使用,以及其他情况 非必要</span></span><br><span class="line"><span class="string">5.函数体代码 函数核心的代码逻辑 必要的</span></span><br><span class="line"><span class="string">6.return返回值 使用函数之后反馈给使用者的结果 非必要</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-定义与调用"><a href="#2-2-定义与调用" class="headerlink" title="2.2 定义与调用"></a>2.2 定义与调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>函数必须先定义后调用(顺序不能乱)</span><br><span class="line"><span class="number">2.</span>函数在定义阶段只检测语法不执行代码</span><br><span class="line"><span class="number">3.</span>函数在调用阶段才会执行函数体代码</span><br><span class="line">调用函数:函数名加括号,如果函数在定义阶段有参数则在调用阶段也需要给参数</span><br><span class="line">  </span><br><span class="line">函数在定义与调用阶段底层原理</span><br><span class="line"><span class="number">1.</span>在内存空间中申请一块空间存储函数体代码</span><br><span class="line"><span class="number">2.</span>将函数体代码所在的空间地址绑定给函数名</span><br><span class="line"><span class="number">3.</span>函数名加括号则会执行函数体代码</span><br></pre></td></tr></table></figure>

<h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>内置函数</span><br><span class="line">  python解释器自带的(提前已经定义好,直接使用即可)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>自定义函数</span><br><span class="line">  自己写的函数</span><br><span class="line">    <span class="number">1.</span>无参函数:在定义函数阶段括号内没有写参数(变量名)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_func</span>():</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="number">2.</span>有参函数:在定义函数阶段括号内写了参数(变量名)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_func</span>(<span class="params">a, b</span>)</span></span><br><span class="line"><span class="function">            <span class="title">print</span>(<span class="params"><span class="string">&quot;hello&quot;</span></span>)</span></span><br><span class="line"><span class="function">    3.空函数:</span>函数体代码为空(<span class="keyword">pass</span>),虽然空函数本身没有意义,但是空函数可以提前规定好编写代码的思路</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">          <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML格式</title>
    <url>/2391e1e4.html</url>
    <content><![CDATA[<h2 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在Kubernetes 环境下可以使用 kubectl run 运行应用，但是不推荐，而是希望使用资源清单的东西来描述应用，资源清单可以使用YAML和JSON文件来编写，一般YAML更方便阅读</p>
<p>通过一个资源清单文件定义好一个应用后，可以使用kubectl工具直接运行</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kuebctl create -f xxx.yaml</span><br></pre></td></tr></table></figure>

<p>资源清单提交给了 APIServer，然后集群获取到清单描述的应用信息后存入到 etcd 数据库中，然后 <code>kube-scheduler</code> 组件发现这个时候有一个 Pod 还没有绑定到节点上，就会对这个 Pod 进行一系列的调度，把它调度到一个最合适的节点上，然后把这个节点和 Pod 绑定到一起（写回到 etcd），然后节点上的 kubelet 组件这个时候 watch 到有一个 Pod 被分配过来了，就去把这个 Pod 的信息拉取下来，然后根据描述通过容器运行时把容器创建出来，最后当然同样把 Pod 状态再写回到 etcd 中去</p>
<p>示例:</p>
<p>nginx-deployment.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>  <span class="comment"># API版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>  <span class="comment"># API对象类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">chapter:</span> <span class="string">first-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>  <span class="comment"># Pod 副本数量</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># Pod 模板</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建应用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nginx-deployment.yaml</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>创建应用之后可以看到有两个副本，由定义的属性<code>replicas: 2</code> 决定的</p>
<p>可以使用<code>kubectl describe</code> 命令查看资源对象的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl  describe pod nginx-deploy-75b69bd684-h4sc2  <span class="comment">#后面编号随机的</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到看到很多这个 Pod 的详细信息，比如调度到的节点、状态、IP 等，一般我们比较关心的是下面的 <code>Events</code> 部分，可以看到这个Pod是如何创建的</p>
<p>在集群中删除这个应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f nginx-deployment.yaml</span><br></pre></td></tr></table></figure>

<h3 id="YAML文件"><a href="#YAML文件" class="headerlink" title="YAML文件"></a>YAML文件</h3><p><code>YAML</code> 是专门用来写配置文件的语言，非常简洁和强大，远比 <code>JSON</code> 格式方便，为了方便人类读写，实质上是一种通用的数据串行化格式。</p>
<h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用<code>Tab</code>键，只允许使用空格</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li><code>#</code> 表示注释</li>
</ul>
<h4 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h4><p>在kubernets中只需要了解以下结构类型</p>
<ul>
<li>Lists(列表)</li>
<li>Maps(字典)</li>
</ul>
<h4 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h4><p>字典，key:value的键值对，例如:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">Kind:</span> <span class="string">Pod</span></span><br></pre></td></tr></table></figure>

<p>转换为JSON</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">    &quot;kind&quot;: &quot;pod&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建复杂一点的Maps，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ydzs-site</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure>

<p>metadata对应的值又可以是一个Maps，转换为JSON</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;Pod&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;kube100-site&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;labels&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;app&quot;</span>: <span class="string">&quot;web&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>列表，也就是一个数组，定义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">args</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Fish</span></span><br></pre></td></tr></table></figure>

<p>对应的JSON格式:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [ &#x27;Cat&#x27;, &#x27;Dog&#x27;, &#x27;Fish&#x27; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lists 的子项也可以是 Maps，Maps 的子项也可以是 Lists 如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ydzs-site</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">front-end</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flaskapp-demo</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">cnych/flaskapp</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<p>转换为JSON格式如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;Pod&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ydzs-site&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;labels&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;app&quot;</span>: <span class="string">&quot;web&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;containers&quot;</span>: [&#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;front-end&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ports&quot;</span>: [&#123;</span><br><span class="line">                <span class="attr">&quot;containerPort&quot;</span>: <span class="string">&quot;80&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;flaskapp-demo&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;cnych/flaskapp&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ports&quot;</span>: [&#123;</span><br><span class="line">                <span class="attr">&quot;containerPort&quot;</span>: <span class="string">&quot;5000&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Kuberneters</category>
      </categories>
      <tags>
        <tag>Kuberneters</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>python-文件操作(二)</title>
    <url>/19603b60.html</url>
    <content><![CDATA[<h3 id="1-文件操作方法"><a href="#1-文件操作方法" class="headerlink" title="1. 文件操作方法"></a>1. 文件操作方法</h3><h4 id="1-1-读方法"><a href="#1-1-读方法" class="headerlink" title="1.1 读方法"></a>1.1 读方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())  <span class="comment"># 一次性读取文件所有的内容</span></span><br><span class="line">    <span class="built_in">print</span>(f.readline())  <span class="comment"># 每次值读文件一行内容</span></span><br><span class="line">    <span class="built_in">print</span>(f.readlines())  <span class="comment"># 读取文件所有内容,组织成列表,每个元素是文件的每行内容</span></span><br><span class="line">    <span class="built_in">print</span>(f.readable())  <span class="comment"># 判断当前文件是否可读,返回布尔值</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h4 id="1-2-写方法"><a href="#1-2-写方法" class="headerlink" title="1.2 写方法"></a>1.2 写方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;这是写入的内容&#x27;</span>)  <span class="comment"># 向文件写入内容</span></span><br><span class="line">    f.write(<span class="number">123</span>)  <span class="comment"># 写入的内容必须是字符串,这句会报错</span></span><br><span class="line">    f.writelines([<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>])  <span class="comment"># 将列表中的每个字符串元素写入文件</span></span><br><span class="line">    <span class="built_in">print</span>(f.writable())  <span class="comment"># 判断忘记拿是否可写</span></span><br><span class="line">    f.flush()  <span class="comment"># 将内存文件数据刷到硬盘</span></span><br></pre></td></tr></table></figure>

<h3 id="2-文件优化操作"><a href="#2-文件优化操作" class="headerlink" title="2. 文件优化操作"></a>2. 文件优化操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">read() 会一次性读取文件内所有的内容</span><br><span class="line">弊端:</span><br><span class="line">  <span class="number">1.</span>一次性读完内容之后,光标停留在文件末尾,无法再次读取内容</span><br><span class="line">  <span class="number">2.</span>该方法在读取大文件的时候,可能会造成内存溢出的情况</span><br><span class="line">  </span><br><span class="line">解决:逐行读取文件内容</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 涉及到文件多行内容读取的情况一般采用for循环读取</span></span><br></pre></td></tr></table></figure>

<h3 id="3-文件操作模式"><a href="#3-文件操作模式" class="headerlink" title="3. 文件操作模式"></a>3. 文件操作模式</h3><h4 id="3-1-文本模式"><a href="#3-1-文本模式" class="headerlink" title="3.1 文本模式"></a>3.1 文本模式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t 文本模式</span><br><span class="line"><span class="number">1.</span>默认的模式, r w a 其实是rt wt at</span><br><span class="line"><span class="number">2.</span>该模式所有操作都是以字符串为基本单位(文本)</span><br><span class="line"><span class="number">3.</span>该模式必须要指定encoding参数</span><br><span class="line"><span class="number">4.</span>该模式只能操作文本文件</span><br></pre></td></tr></table></figure>

<h4 id="3-2-二进制模式"><a href="#3-2-二进制模式" class="headerlink" title="3.2 二进制模式"></a>3.2 二进制模式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b 二进制模式</span><br><span class="line"><span class="number">1.</span>该模式可以操作任意类型的文件</span><br><span class="line"><span class="number">2.</span>该模式所有操作都是以<span class="built_in">bytes</span>类型(二进制)基本单位</span><br><span class="line"><span class="number">3.</span>该模式不需要指定encoding参数</span><br><span class="line">指定模式的时候就需要rb wb ab</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  读:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="built_in">print</span>(data, <span class="built_in">type</span>(data))  <span class="comment"># 英文正常显示,中文是一串字符, 类型是bytes</span></span><br><span class="line">      </span><br><span class="line">  写:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="string">&#x27;您好&#x27;</span></span><br><span class="line">    res = data.encode(<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 将中文进行编码</span></span><br><span class="line">    f.write(res)  <span class="comment"># 编码之后再写入,文本中正常写入</span></span><br></pre></td></tr></table></figure>

<h3 id="4-练习"><a href="#4-练习" class="headerlink" title="4. 练习"></a>4. 练习</h3><h4 id="4-1-文件版登录注册功能"><a href="#4-1-文件版登录注册功能" class="headerlink" title="4.1 文件版登录注册功能"></a>4.1 文件版登录注册功能</h4><p>注册功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求用户输入用户名和密码</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line"><span class="comment"># 格式化输入的信息,添加分隔符和换行符</span></span><br><span class="line">msg = <span class="string">&quot;%s|%s\n&quot;</span> % (username, password)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_reg:</span><br><span class="line">    <span class="comment"># for循环读取文件内容</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f_reg:</span><br><span class="line">      <span class="comment"># 取到用户名的值</span></span><br><span class="line">      name = line.split(<span class="string">&quot;|&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># 如果用户输入的用户名与存在的用户名一致就退出</span></span><br><span class="line">      <span class="keyword">if</span> name == username:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;用户名已存在!&quot;</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment"># 否则就将用户输入的信息写入到文件</span></span><br><span class="line">          <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_reg_insert:</span><br><span class="line">              f_reg_insert.write(msg)</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;%s注册成功&quot;</span> % username)</span><br></pre></td></tr></table></figure>



<p>登录功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收输入的用户名和密码</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_log:</span><br><span class="line">    <span class="comment"># for循环读取文件每行内容</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f_log:</span><br><span class="line">        <span class="comment"># 将文件中的用户名与密码处理出来并解压赋值</span></span><br><span class="line">        u_name, passwd = line.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">        <span class="comment"># 判断用户输入的用户名密码和文件存在的用户密码是否相等,密码后面有换行符也进行处理</span></span><br><span class="line">        <span class="comment"># 如果相等就登录成功,否则就显示登录失败</span></span><br><span class="line">        <span class="keyword">if</span> u_name == name <span class="keyword">and</span> passwd.strip(<span class="string">&quot;\n&quot;</span>) == pwd:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败,用户名或密码错误!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>整体功能实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        1.用户注册</span></span><br><span class="line"><span class="string">        2.用户登录</span></span><br><span class="line"><span class="string">        3.退出系统</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 接收用户想要的功能编号</span></span><br><span class="line">    options = <span class="built_in">input</span>(<span class="string">&quot;请输入选项&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">    <span class="comment"># 当编号为1的时候,实现用户注册功能</span></span><br><span class="line">    <span class="keyword">if</span> options == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="comment"># 要求用户输入用户名和密码</span></span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">        password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">        <span class="comment"># 格式化输入的信息,添加分隔符和换行符</span></span><br><span class="line">        msg = <span class="string">&quot;%s|%s\n&quot;</span> % (username, password)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_reg:</span><br><span class="line">            <span class="comment"># for循环读取文件内容</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f_reg:</span><br><span class="line">                <span class="comment"># 取到用户名的值</span></span><br><span class="line">                name = line.split(<span class="string">&quot;|&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 如果用户输入的用户名与存在的用户名一致就退出</span></span><br><span class="line">                <span class="keyword">if</span> name == username:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;用户名已存在!&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则就将用户输入的信息写入到文件</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_reg_insert:</span><br><span class="line">                    f_reg_insert.write(msg)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s注册成功&quot;</span> % username)</span><br><span class="line">    <span class="comment"># 当用户输入编号为2时,就是登录功能</span></span><br><span class="line">    <span class="keyword">elif</span> options == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="comment"># 接收输入的用户名和密码</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">        pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;user.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f_log:</span><br><span class="line">            <span class="comment"># for循环读取文件每行内容</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f_log:</span><br><span class="line">                <span class="comment"># 将文件中的用户名与密码处理出来并解压赋值</span></span><br><span class="line">                u_name, passwd = line.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">                <span class="comment"># 判断用户输入的用户名密码和文件存在的用户密码是否相等,密码后面有换行符也进行处理</span></span><br><span class="line">                <span class="comment"># 如果相等就登录成功,否则就显示登录失败</span></span><br><span class="line">                <span class="keyword">if</span> u_name == name <span class="keyword">and</span> passwd.strip(<span class="string">&quot;\n&quot;</span>) == pwd:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;登录成功!&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;登录失败,用户名或密码错误!&quot;</span>)</span><br><span class="line">    <span class="comment"># 当用户输入3就退出整个循环</span></span><br><span class="line">    <span class="keyword">elif</span> options == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出系统!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的选项不正确,请重新输入!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-2-简易拷贝功能"><a href="#4-2-简易拷贝功能" class="headerlink" title="4.2 简易拷贝功能"></a>4.2 简易拷贝功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">src_path = <span class="built_in">input</span>(<span class="string">&#x27;源文件绝对路径: &#x27;</span>).strip()</span><br><span class="line">dst_path = <span class="built_in">input</span>(<span class="string">&#x27;目标文件绝对路径: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> % src_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> % dst_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> copy_f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            copy_f.write(line)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-编码和文件操作</title>
    <url>/b8f382b7.html</url>
    <content><![CDATA[<h3 id="1-字符编码"><a href="#1-字符编码" class="headerlink" title="1. 字符编码"></a>1. 字符编码</h3><p>只跟文本和字符串有关<br>由于计算机内部只是别二进制,但是用户在使用计算机的时候却可以看到各种语言字符,字符编码就是内部记录了人类字符与数字对应关系的数据</p>
<span id="more"></span>
<h4 id="1-1-字符编码史"><a href="#1-1-字符编码史" class="headerlink" title="1.1 字符编码史"></a>1.1 字符编码史</h4><ol>
<li>一家独大</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">计算机由美国发明,因此美国人为了能让计算机识别英文字符诞生了ASCII码表</span><br><span class="line">特点:</span><br><span class="line">  只有英文字符与数字的一一对应关系</span><br><span class="line">  一个英文字符对应1Bytes,1Bytes=8bit,8bit最多包含<span class="number">256</span>个数字,可以对应<span class="number">256</span>个字符,足够表示所有的英文字符,目前只用到<span class="number">127</span>个,剩下的为了后续发现新的语言</span><br><span class="line">需要记住的是:</span><br><span class="line">  A-Z: <span class="number">65</span>-<span class="number">90</span></span><br><span class="line">  a-z: <span class="number">97</span>-<span class="number">122</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/L7G4SM.jpg" alt="L7G4SM"></p>
<ol>
<li>群雄割据</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中国:</span><br><span class="line">  GBK码:记录了英文中文与数字的对应关系</span><br><span class="line">        对于英文还是使用一个字节</span><br><span class="line">        中文使用了两个字节甚至更多字节,两个字节也不能够全部表示出所有的中文,需要生僻字需要更多位</span><br><span class="line">        </span><br><span class="line">日本:</span><br><span class="line">  shift_JIS码:记录了日文英文与数字的对应关系</span><br><span class="line">韩国</span><br><span class="line">  Euc_kr码:记录了韩文英文与数字的对应关系</span><br></pre></td></tr></table></figure>
<ol>
<li>分久必合</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为了能够实现不同国家之间的文本数据能够彼此无障碍交流需要对编码统一</span><br><span class="line">unicode(万国码)出现了</span><br><span class="line">  特点:统一使用两个及以上字符记录字符与数字的对应关系</span><br><span class="line">    </span><br><span class="line">utf8(万国码的优化版)</span><br><span class="line">  英文还是用一个字节存储,中文使用三个字节或更多字节存储</span><br><span class="line"> </span><br><span class="line">现在默认使用的编码是uft8</span><br></pre></td></tr></table></figure>

<h4 id="1-2-编码操作"><a href="#1-2-编码操作" class="headerlink" title="1.2 编码操作"></a>1.2 编码操作</h4><ol>
<li>如何解决文件乱码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件当初以什么编码编的,打开的时候就以什么编码解</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>python解释器不同版本的编码差异</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2.x内部使用的编码默认是ASCII</span><br><span class="line">  <span class="number">1.</span>文件头</span><br><span class="line">  <span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span>在python2中定义字符串前面需要加一个u</span><br><span class="line">    s = <span class="string">u&#x27;你&#x27;</span></span><br><span class="line">  </span><br><span class="line">python3.x内部使用utf8</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Pycharm定义文件模板内容</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/uJTsDP.png" alt="uJTsDP"></p>
<ol start="4">
<li>编码与解码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">编码</span><br><span class="line">  将人类能够读懂的字符按照指定的编码转换成数字</span><br><span class="line">解码</span><br><span class="line">  将数字按照指定的编码转换成人类能够读懂的字符</span><br><span class="line">  </span><br><span class="line">eg:</span><br><span class="line"> <span class="comment"># 编码</span></span><br><span class="line">   s = <span class="string">&#x27;这是一段文字&#x27;</span></span><br><span class="line">   res = s.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(res, <span class="built_in">type</span>(res))  <span class="comment"># b&#x27;\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe6\xae\xb5\xe6\x96\x87\xe5\xad\x97&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 解码</span></span><br><span class="line">  res1 = res.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(res1)  <span class="comment"># 这是一段文字</span></span><br></pre></td></tr></table></figure>

<h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2. 文件"></a>2. 文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件其实是操作系统暴露给用户操作硬盘的接口</span><br></pre></td></tr></table></figure>

<h4 id="2-1-文件操作"><a href="#2-1-文件操作" class="headerlink" title="2.1 文件操作"></a>2.1 文件操作</h4><h5 id="2-1-1-如何操作文件"><a href="#2-1-1-如何操作文件" class="headerlink" title="2.1.1 如何操作文件"></a>2.1.1 如何操作文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关键字<span class="built_in">open</span>()</span><br><span class="line">    <span class="number">1.</span><span class="built_in">open</span>()打开文件</span><br><span class="line">    <span class="number">2.</span>其他方法操作文件</span><br><span class="line">    <span class="number">3.</span>关闭文件</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-路径斜杠"><a href="#2-1-2-路径斜杠" class="headerlink" title="2.1.2 路径斜杠"></a>2.1.2 路径斜杠</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在路径中出现字母与斜杠的组合产生了特殊含义如何取消</span><br><span class="line">在路径字符串前面加一个r</span><br><span class="line">  <span class="string">r&#x27;D:\py20\day08\a.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-操作文件"><a href="#2-1-3-操作文件" class="headerlink" title="2.1.3 操作文件"></a>2.1.3 操作文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="built_in">open</span>(文件路径,读写模式,字符编码)</span><br><span class="line">       文件路径与读写模式是必须的</span><br><span class="line">       字符编码是可选的(有些模式需要编码)</span><br><span class="line">      </span><br><span class="line">  eg:</span><br><span class="line">    res = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.read())</span><br><span class="line">    res.close()</span><br></pre></td></tr></table></figure>

<h5 id="2-1-4-with上下文管理"><a href="#2-1-4-with上下文管理" class="headerlink" title="2.1.4 with上下文管理"></a>2.1.4 with上下文管理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以自动close()</span><br><span class="line">eg:</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">       <span class="built_in">print</span>(f1.read())</span><br></pre></td></tr></table></figure>

<h4 id="2-2-读写模式"><a href="#2-2-读写模式" class="headerlink" title="2.2 读写模式"></a>2.2 读写模式</h4><h5 id="2-2-1-只读模式-r"><a href="#2-2-1-只读模式-r" class="headerlink" title="2.2.1 只读模式 r"></a>2.2.1 只读模式 r</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">只能查看不能修改</span><br><span class="line"><span class="comment"># 当路径不存在时,直接报错</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 运行代码报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当路劲存在时,读取没有问题,写操作时报错</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(f1.read())  <span class="comment"># 能读取文件内容</span></span><br><span class="line">    f1.write(<span class="string">&#x27;123&#x27;</span>)  <span class="comment"># 报错,无法写入</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-2-只写模式-w"><a href="#2-2-2-只写模式-w" class="headerlink" title="2.2.2 只写模式 w"></a>2.2.2 只写模式 w</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当路劲不存在时,不会报错,会创建该文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;b.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路劲存在时,写入会先清空文件内容,再写入内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(f1.read())  <span class="comment"># 读取会报错</span></span><br><span class="line">    f1.write(<span class="string">&#x27;123&#x27;</span>)  <span class="comment"># 写入的都会在一行,不会自动换行</span></span><br><span class="line">    f1.write(<span class="string">&#x27;\n123\n&#x27;</span>)  <span class="comment"># 需要加入换行符</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-只追加模式-a"><a href="#2-2-3-只追加模式-a" class="headerlink" title="2.2.3 只追加模式 a"></a>2.2.3 只追加模式 a</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当路劲不存在时,不会报错,同样会创建该文件</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f3:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 当路劲存在时,写入不会清空文件</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">      f1.write(<span class="string">&#x27;\nwoooooo&#x27;</span>)  <span class="comment"># 需要加入换行符,否则都会在一行</span></span><br><span class="line">      f1.write(<span class="string">&#x27;\nwoooooo&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(f1.read())  <span class="comment"># 读取会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r w a读写模式都只能操作文本文件</span></span><br></pre></td></tr></table></figure>

<h3 id="3-debug代码调试"><a href="#3-debug代码调试" class="headerlink" title="3. debug代码调试"></a>3. debug代码调试</h3><ol>
<li>在代码右侧使用右键标记，空白处右键出现在Run下面有Debug运行</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/JSfh9B.png" alt="JSfh9B"></p>
<ol start="2">
<li>debug运行的时候会一步步执行,并给出每一步的结果</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/AMmZCZ.png" alt="AMmZCZ"></p>
<ol start="3">
<li>停止debug</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/BrFJ9l.png" alt="BrFJ9l"></p>
<p>取消小点</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/xfnoQa.png" alt="xfnoQa"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Containerd相关使用</title>
    <url>/4610149.html</url>
    <content><![CDATA[<h2 id="Containerd安装"><a href="#Containerd安装" class="headerlink" title="Containerd安装"></a>Containerd安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依赖安装</span></span><br><span class="line">rpm -qa |grep libseccomp</span><br><span class="line">yum install wget -y</span><br><span class="line">wget http://mirror.centos.org/centos/7/os/x86_64/Packages/libseccomp-2.3.1-4.el7.x86_64.rpm</span><br><span class="line">yum install libseccomp-2.3.1-4.el7.x86_64.rpm -y</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 如果有限制，也可以替换成下面的 URL 加速下载</span></span><br><span class="line"><span class="comment"># wget https://download.fastgit.org/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解压到系统各个目录中去</span></span><br><span class="line">tar -C / -xzf cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/bin:/usr/local/sbin&#x27;</span> &gt;&gt; ~/.bashrc </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成默认配置</span></span><br><span class="line">mkdir -p /etc/containerd</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看启动配置文件</span></span><br><span class="line">cat /etc/systemd/system/containerd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd --now</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">ctr version</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看插件列表</span></span><br><span class="line">ctr plugin ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置加速器</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">      endpoint = [<span class="string">&quot;https://bqr1dr1n.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">      endpoint = [<span class="string">&quot;https://registry.aliyuncs.com/k8sxio&quot;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Containerd使用"><a href="#Containerd使用" class="headerlink" title="Containerd使用"></a>Containerd使用</h2><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#要注意的是镜像地址需要加上 docker.io Host 地址,  --platform 选项指定对应平台的镜像</span></span><br><span class="line">ctr image pull docker.io/library/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送镜像,如果是私有镜像则在推送的时候可以通过 --user 来自定义仓库的用户名和密码</span></span><br><span class="line">ctr image push</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出本地镜像  -q 参数只打印镜像名称</span></span><br><span class="line">ctr image ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测本地镜像,主要查看其中的 STATUS, complete 表示镜像是完整可用的状态</span></span><br><span class="line">ctr image check</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新打标签</span></span><br><span class="line">ctr image tag docker.io/library/nginx:alpine harbor.k8s.local/course/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像 加上 --sync 选项可以同步删除镜像和所有相关的资源</span></span><br><span class="line">ctr image rm harbor.k8s.local/course/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#将镜像挂载到主机目录</span></span><br><span class="line">ctr image mount docker.io/library/nginx:alpine /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将镜像从主机目录上卸载</span></span><br><span class="line">ctr image unmount /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将镜像到处为压缩包</span></span><br><span class="line">ctr image <span class="built_in">export</span>  --all-platforms nginx.tar.gz docker.io/library/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#将压缩包导入镜像</span></span><br><span class="line">ctr image import nginx.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接导入可能会出现类似于 ctr: content digest sha256:xxxxxx not found 的错误，要解决这个办法需要 pull 所有平台镜像：</span></span><br><span class="line">ctr i pull --all-platforms docker.io/library/nginx:alpine</span><br><span class="line">ctr i <span class="built_in">export</span> --all-platforms nginx.tar.gz docker.io/library/nginx:alpine</span><br><span class="line">ctr i rm docker.io/library/nginx:alpine</span><br><span class="line">ctr i import nginx.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">ctr container create docker.io/library/nginx:alpine nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出容器 -q 精简内容</span></span><br><span class="line">ctr container ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器详细配置,类似docker inspect</span></span><br><span class="line">ctr container info nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除容器 也可以使用 delete 或者 del 删除容器</span></span><br><span class="line">ctr container rm nginx</span><br><span class="line">ctr container ls</span><br></pre></td></tr></table></figure>

<h3 id="任务相关"><a href="#任务相关" class="headerlink" title="任务相关"></a>任务相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#container create 命令创建的容器，并没有处于运行状态，只是一个静态的容器</span></span><br><span class="line"><span class="comment">#一个 container 对象只是包含了运行一个容器所需的资源及相关配置数据，表示 namespaces、rootfs 和容器的配置都已经初始化成功了，只是用户进程还没有启动</span></span><br><span class="line"><span class="comment">#一个容器真正运行起来是由 Task 任务实现的，Task 可以为容器设置网卡，还可以配置工具来对容器进行监控等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行容器</span></span><br><span class="line">ctr container create docker.io/library/nginx:alpine nginx</span><br><span class="line">ctr task start -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看正在运行的容器</span></span><br><span class="line">ctr task ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取容器的cgroup相关信息,还有内存、CPU 和 PID 的限额与使用量</span></span><br><span class="line">ctr task metrics nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器中所有进程在宿主机中的 PID</span></span><br><span class="line">ctr task ps nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器操作 --exec-id 后的id可以随意,唯一即可</span></span><br><span class="line">ctr task exex --exec-id 0 -t nginx sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂停容器</span></span><br><span class="line">ctr task pause nginx</span><br><span class="line">ctr task ls  <span class="comment"># STATUS 变成了PAUSED</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复容器</span></span><br><span class="line">ctr task resume nginx</span><br><span class="line">ctr task ls  <span class="comment"># STATUS 变成了RUNING</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#杀掉容器  没有stop,只有暂停或者杀死</span></span><br><span class="line">ctr task <span class="built_in">kill</span> nginx</span><br><span class="line">ctr task ls  <span class="comment"># STATUS 变成了STOPPED</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除task</span></span><br><span class="line">ctr task rm nginx</span><br><span class="line">ctr task ls  <span class="comment"># 此时没有了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#containerd支持命名空间概念,不指定命名空间就是在default</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看命名空间</span></span><br><span class="line">ctr ns ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建命名空间</span></span><br><span class="line">ctr ns creat <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除命名空间</span></span><br><span class="line">ctr ns rm <span class="built_in">test</span>  <span class="comment"># ctr ns remove test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#操作资源的时候就可以指定命名空间,使用 -n 参数指定即可</span></span><br><span class="line">ctr -n <span class="built_in">test</span> image ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#Docker 使用的 containerd 下面的命名空间默认是 moby，而不是 default，所以假如我们有用 docker 启动容器，那么我们也可以通过 ctr -n moby 来定位下面的容器</span></span><br><span class="line">ctr -n moby container ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#同样 Kubernetes 下使用的 containerd 默认命名空间是 k8s.io，所以我们可以使用 ctr -n k8s.io 来查看 Kubernetes 下面创建的容器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Containerd高级工具nerdctl"><a href="#Containerd高级工具nerdctl" class="headerlink" title="Containerd高级工具nerdctl"></a>Containerd高级工具nerdctl</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有安装 containerd，则可以下载 nerdctl-full-&lt;VERSION&gt;-linux-amd64.tar.gz 包进行安装</span></span><br><span class="line">wget https://github.com/containerd/nerdctl/releases/download/v0.12.1/nerdctl-0.12.1-linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 如果有限制，也可以替换成下面的 URL 加速下载</span></span><br><span class="line"><span class="comment"># wget https://download.fastgit.org/containerd/nerdctl/releases/download/v0.12.1/nerdctl-0.12.1-linux-amd64.tar.gz</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/containerd/bin/ &amp;&amp; tar -zxvf nerdctl-0.12.1-linux-amd64.tar.gz nerdctl &amp;&amp; mv nerdctl /usr/<span class="built_in">local</span>/containerd/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/containerd/bin/nerdctl /usr/<span class="built_in">local</span>/bin/nerdctl</span><br><span class="line"></span><br><span class="line">nerdctl version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h3><h4 id="容器相关-1"><a href="#容器相关-1" class="headerlink" title="容器相关"></a>容器相关</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行容器</span></span><br><span class="line">nerdctl run -d -p 80:80 --name=nginx --restart=always nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">nerdctl <span class="built_in">exec</span> -it nginx /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出容器 -a -q</span></span><br><span class="line">nerdctl ps </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取容器详细信息</span></span><br><span class="line">nerdctl inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器日志</span></span><br><span class="line">nerdctl logs -f nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">nerdctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除容器 -f 或者 --force 强制删除</span></span><br><span class="line">nerdctl rm nginx</span><br></pre></td></tr></table></figure>

<h4 id="镜像相关-1"><a href="#镜像相关-1" class="headerlink" title="镜像相关"></a>镜像相关</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有镜像</span></span><br><span class="line">nerdctl images</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">nerdctl pull docker.io/library/busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送镜像</span></span><br><span class="line">nerdctl login --username xxx --password xxx  <span class="comment">#登录</span></span><br><span class="line">nerdctl <span class="built_in">logout</span>  <span class="comment">#注销退出登录</span></span><br><span class="line">nerdctl push</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新给镜像打标签</span></span><br><span class="line">nerdctl tag nginx:alpine harbor.k8s.local/course/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出镜像</span></span><br><span class="line">nerdctl save -o busybox.tar.gz busybox:lastest</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">nerdctl rmi busybox</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入镜像</span></span><br><span class="line">nerdctl load -i busybox.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><h5 id="安装-buildctl"><a href="#安装-buildctl" class="headerlink" title="安装 buildctl"></a>安装 buildctl</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nerdctl build 需要依赖 buildkit 工具</span><br><span class="line"></span><br><span class="line">buildkit 项目也是 Docker 公司开源的一个构建工具包，支持 OCI 标准的镜像构建。它主要包含以下部分</span><br><span class="line">		服务端 buildkitd：当前支持 runc 和 containerd 作为 worker，默认是 runc，我们这里使用 containerd</span><br><span class="line">		客户端 buildctl：负责解析 Dockerfile，并向服务端 buildkitd 发出构建请求</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buildkit 是典型的 C/S 架构，客户端和服务端是可以不在一台服务器上，而 nerdctl 在构建镜像的时候也作为 buildkitd 的客户端，所以需要我们安装并运行 buildkitd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget https://github.com/moby/buildkit/releases/download/v0.9.1/buildkit-v0.9.1.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 如果有限制，也可以替换成下面的 URL 加速下载</span></span><br><span class="line"><span class="comment"># wget https://download.fastgit.org/moby/buildkit/releases/download/v0.9.1/buildkit-v0.9.1.linux-amd64.tar.gz</span></span><br><span class="line">tar -zxvf buildkit-v0.9.1.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/containerd/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/containerd/bin/buildkitd /usr/<span class="built_in">local</span>/bin/buildkitd</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/containerd/bin/buildctl /usr/<span class="built_in">local</span>/bin/buildctl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat /etc/systemd/system/buildkit.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=BuildKit</span><br><span class="line">Documentation=https://github.com/moby/buildkit</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/buildkitd --oci-worker=<span class="literal">false</span> --containerd-worker=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> buildkit --now</span><br><span class="line">systemctl status buildkit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat Dockerfile </span><br><span class="line">FROM nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;Hello Nerdctl From Containerd&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#一定要关闭防火墙和selinux</span></span><br><span class="line">nerdctl build -t nginx:nerdctl -f Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否构建成功</span></span><br><span class="line">nerdctl images </span><br><span class="line"></span><br><span class="line"><span class="comment">#测试是否成功</span></span><br><span class="line">nerdctl run -d -p 80:80 --name=nginx --restart=always nginx:nerdctl</span><br><span class="line"></span><br><span class="line">crul 127.0.0.1</span><br></pre></td></tr></table></figure>
<p>文档整理:<a href="https://www.qikqiak.com/k3s/">https://www.qikqiak.com/k3s/</a></p>
]]></content>
      <categories>
        <category>Containerd</category>
      </categories>
      <tags>
        <tag>Containerd</tag>
      </tags>
  </entry>
  <entry>
    <title>python-内置方法(三)</title>
    <url>/bb5f959.html</url>
    <content><![CDATA[<h3 id="1-列表其他方法"><a href="#1-列表其他方法" class="headerlink" title="1. 列表其他方法"></a>1. 列表其他方法</h3><h4 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">11</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"><span class="number">1.</span>sort()  <span class="comment"># 默认是升序</span></span><br><span class="line">  l1.sort()</span><br><span class="line">  <span class="built_in">print</span>(l1)  <span class="comment"># [11, 22, 33, 44, 55, 77, 88, 99]</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>sort(reverse=<span class="literal">True</span>)  <span class="comment"># 降序</span></span><br><span class="line">  l1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">  <span class="built_in">print</span>(l1)  <span class="comment"># [99, 88, 77, 55, 44, 33, 22, 11]</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>revers()  <span class="comment"># 顺序颠倒</span></span><br><span class="line">  l1.reverse()</span><br><span class="line">	<span class="built_in">print</span>(l1)  <span class="comment"># [55, 44, 88, 11, 99, 77, 22, 33]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-切片"><a href="#1-2-切片" class="headerlink" title="1.2 切片"></a>1.2 切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">11</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># [22, 77]</span></span><br><span class="line"><span class="built_in">print</span>(l1[:])  <span class="comment"># [33, 22, 77, 99, 11, 88, 44, 55]</span></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">3</span>:])  <span class="comment"># [99, 11, 88, 44, 55]</span></span><br><span class="line"><span class="built_in">print</span>(l1[:<span class="number">3</span>])  <span class="comment"># [33, 22, 77]</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-比较"><a href="#1-3-比较" class="headerlink" title="1.3 比较"></a>1.3 比较</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">99</span>, <span class="number">22</span>]</span><br><span class="line">l2 = [<span class="number">88</span>, <span class="number">44</span>, <span class="number">33</span>]</span><br><span class="line"><span class="built_in">print</span>(l1 &gt; l2)  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 列表比较运算采用相同索引的元素进行比较,只要有一个比出了结果就直接得出结论</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s2)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 字符串比较也会根据索引位置内部转成ASCII对应的数字进行比较</span></span><br></pre></td></tr></table></figure>

<h3 id="2-字典内置方法"><a href="#2-字典内置方法" class="headerlink" title="2. 字典内置方法"></a>2. 字典内置方法</h3><h4 id="2-1-取值"><a href="#2-1-取值" class="headerlink" title="2.1 取值"></a>2.1 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>按K取值,K不存在会直接报错,不太推荐此方式</span><br><span class="line">  <span class="built_in">print</span>(dic[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">#	jason</span></span><br><span class="line">  <span class="built_in">print</span>(dic[<span class="string">&#x27;pwd&#x27;</span>])  <span class="comment"># 报错</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span>get() 键值不存在返回<span class="literal">None</span>,不会报错</span><br><span class="line">  <span class="built_in">print</span>(dic.get(<span class="string">&#x27;xxx&#x27;</span>))  <span class="comment"># None  键不存在 不会报错返回None</span></span><br><span class="line">  <span class="built_in">print</span>(dic.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;哈哈哈&#x27;</span>))  <span class="comment"># 第二个参数 可以在k不存在的时候自定义返回信息</span></span><br><span class="line">  <span class="built_in">print</span>(dic.get(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;哈哈哈&#x27;</span>))  <span class="comment"># 第二个参数 可以在k不存在的时候自定义返回信息</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改值"><a href="#2-2-修改值" class="headerlink" title="2.2 修改值"></a>2.2 修改值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>键值存在则修改</span><br><span class="line">dic[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;jasonxx&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jasonxx&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>键不存在就新增键值对</span><br><span class="line">dic[<span class="string">&#x27;pwd&#x27;</span>] = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;, &#x27;read&#x27;], &#x27;pwd&#x27;: 123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>hobbies的 V 是一个列表,可以用append()为列表增加一个值</span><br><span class="line">dic[<span class="string">&#x27;hobbies&#x27;</span>].append(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;, &#x27;read&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-统计"><a href="#2-3-统计" class="headerlink" title="2.3 统计"></a>2.3 统计</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">统计字典内部键值对的个数</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dic))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-成员运算"><a href="#2-4-成员运算" class="headerlink" title="2.4 成员运算"></a>2.4 成员运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> dic)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;jason&#x27;</span> <span class="keyword">in</span> dic)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 默认只暴露K</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-删除元素"><a href="#2-5-删除元素" class="headerlink" title="2.5 删除元素"></a>2.5 删除元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>方式<span class="number">1</span> <span class="keyword">del</span> 根据K删除键值对</span><br><span class="line">  <span class="keyword">del</span> dic[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>方式<span class="number">2</span> 弹出指定K的键值对pop()</span><br><span class="line">  <span class="built_in">print</span>(dic.pop(<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># 18</span></span><br><span class="line">  <span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>方式<span class="number">3</span> 直接弹出键值对,组织成元组的形式,第一个元素K,第二个元素是V</span><br><span class="line">  <span class="built_in">print</span>(dic.popitem())  <span class="comment"># (&#x27;hobbies&#x27;, [&#x27;play game&#x27;, &#x27;basketball&#x27;])</span></span><br><span class="line">  <span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jason&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-取值"><a href="#2-6-取值" class="headerlink" title="2.6 取值"></a>2.6 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>keys()</span><br><span class="line"><span class="built_in">print</span>(dic.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;hobbies&#x27;])  获取字典所有的键 看成列表即可</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>values()</span><br><span class="line"><span class="built_in">print</span>(dic.values())  <span class="comment"># dict_values([&#x27;jason&#x27;, 18, [&#x27;play game&#x27;, &#x27;basketball&#x27;]])  获取字典所有的值 看成列表即可</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>items()</span><br><span class="line"><span class="built_in">print</span>(dic.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;jason&#x27;), (&#x27;age&#x27;, 18), (&#x27;hobbies&#x27;, [&#x27;play game&#x27;, &#x27;basketball&#x27;])])</span></span><br><span class="line"><span class="comment"># 获取字典里面所有的键值对 组织成列表套元组的形式 元组内有两个元素 第一个是k第二个是v</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-更新字典"><a href="#2-7-更新字典" class="headerlink" title="2.7 更新字典"></a>2.7 更新字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update()  键存在则修改 不存在则创建</span><br><span class="line">dic.update(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jasonNB&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jasonNB&#x27;, &#x27;age&#x27;: 18, &#x27;hobbies&#x27;: [&#x27;play game&#x27;, &#x27;basketball&#x27;], &#x27;pwd&#x27;: 123&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-初始化字典"><a href="#2-8-初始化字典" class="headerlink" title="2.8 初始化字典"></a>2.8 初始化字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>], []))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;笔试题&#x27;&#x27;&#x27;</span></span><br><span class="line">res = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>], [])</span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">111</span>)</span><br><span class="line">res[<span class="string">&#x27;k2&#x27;</span>].append(<span class="number">222</span>)</span><br><span class="line">res[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">333</span>)</span><br><span class="line"><span class="comment"># V 是相同的一个列表,对该列表操作,V的值是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当对k1对应的V重新赋值后,就会被单独出来了</span></span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>] = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]</span><br><span class="line">res[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">444</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h4 id="2-9-setdefault"><a href="#2-9-setdefault" class="headerlink" title="2.9 setdefault()"></a>2.9 setdefault()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当键存在的情况下 不修改而是获取该键对应的值</span><br><span class="line"><span class="comment"># print(dic.setdefault(&#x27;name&#x27;, &#x27;jasonNB&#x27;))</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 当键不存在的情况下 新增一组键值对 并且该方法的结果是新增的值</span></span><br><span class="line"><span class="built_in">print</span>(dic.setdefault(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure>



<h3 id="3-元组内置方法"><a href="#3-元组内置方法" class="headerlink" title="3. 元组内置方法"></a>3. 元组内置方法</h3><h4 id="3-1-类型转换"><a href="#3-1-类型转换" class="headerlink" title="3.1 类型转换"></a>3.1 类型转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>能够支持<span class="keyword">for</span>循环的数据都可以转换成元组</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># (&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]))  <span class="comment"># (11, 22, 33)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="number">123</span>&#125;))  <span class="comment"># (&#x27;name&#x27;, &#x27;pwd&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>元组类型的定义</span><br><span class="line">t1 = (<span class="number">111</span>)  <span class="comment"># 整型</span></span><br><span class="line">t2 = (<span class="number">11.11</span>)  <span class="comment"># 浮点型</span></span><br><span class="line">t3 = (<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 字符串</span></span><br><span class="line">t1 = (<span class="number">11</span>, )  <span class="comment"># 第一个元素后一定需要加逗号才会被定义为元组,否则就不是元组类型</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-取值"><a href="#3-2-取值" class="headerlink" title="3.2 取值"></a>3.2 取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>])  <span class="comment"># 222</span></span><br><span class="line"><span class="built_in">print</span>(t[-<span class="number">1</span>])  <span class="comment"># 555</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-切片"><a href="#3-3-切片" class="headerlink" title="3.3 切片"></a>3.3 切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># (222, 333)</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># (222, 444)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-统计元素个数"><a href="#3-4-统计元素个数" class="headerlink" title="3.4 统计元素个数"></a>3.4 统计元素个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-for循环取值"><a href="#3-5-for循环取值" class="headerlink" title="3.5 for循环取值"></a>3.5 for循环取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">		<span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-计数"><a href="#3-6-计数" class="headerlink" title="3.6 计数"></a>3.6 计数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count()</span><br><span class="line"><span class="built_in">print</span>(t.cont(<span class="number">111</span>))  <span class="comment"># 1  111只出现一次</span></span><br></pre></td></tr></table></figure>

<h3 id="4-集合操作"><a href="#4-集合操作" class="headerlink" title="4. 集合操作"></a>4. 集合操作</h3><h4 id="4-1-类型转换"><a href="#4-1-类型转换" class="headerlink" title="4.1 类型转换"></a>4.1 类型转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">能够支持<span class="keyword">for</span>循环的数据类型都可以转成集合(元素要是不可变类型)</span><br><span class="line">集合内元素是无序的</span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>



<h4 id="4-2-去重"><a href="#4-2-去重" class="headerlink" title="4.2 去重"></a>4.2 去重</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>去重练习<span class="number">1</span></span><br><span class="line">name_list = [<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">s2 = <span class="built_in">set</span>(name_list)</span><br><span class="line">l1 = <span class="built_in">list</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(l1)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>练习<span class="number">2</span></span><br><span class="line">  ll = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">77</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>]</span><br><span class="line">  <span class="comment"># 基本要求:去重即可</span></span><br><span class="line">  s3 = <span class="built_in">set</span>(ll)</span><br><span class="line">  ll1 = <span class="built_in">list</span>(s3)</span><br><span class="line">  <span class="built_in">print</span>(ll1)  <span class="comment"># [33, 66, 11, 44, 77, 22, 55]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 拔高要求:去重并保留原来的顺序</span></span><br><span class="line">    l2 = []  <span class="comment"># 定义一个新列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ll:  <span class="comment"># 循环取值列表ll</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> l2:  <span class="comment"># 判断取到的值是不是在新列表l2里,如果在说明重复,则不操作</span></span><br><span class="line">            l2.append(i)  <span class="comment"># 如果值不在新列表里就追加进去,达到去重且按顺序</span></span><br><span class="line">    <span class="built_in">print</span>(l2)  <span class="comment"># [33, 22, 11, 44, 55, 66, 77]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-关系运算"><a href="#4-3-关系运算" class="headerlink" title="4.3 关系运算"></a>4.3 关系运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">两个群体之间做差异比较</span><br><span class="line"></span><br><span class="line">friends1 = &#123;<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;kevin&quot;</span>, <span class="string">&quot;jason&quot;</span>, <span class="string">&quot;eg&quot;</span>&#125;  <span class="comment"># 用户1的好友们</span></span><br><span class="line">friends2 = &#123;<span class="string">&quot;Jy&quot;</span>, <span class="string">&quot;ricky&quot;</span>, <span class="string">&quot;jason&quot;</span>, <span class="string">&quot;eg&quot;</span>&#125;  <span class="comment"># 用户2的好友们</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-1-交集"><a href="#4-3-1-交集" class="headerlink" title="4.3.1 交集"></a>4.3.1 交集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 共同的好友</span></span><br><span class="line"><span class="built_in">print</span>(friends1 &amp; friends2)  <span class="comment">#&#123;&#x27;jason&#x27;, &#x27;eg&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-2-并集"><a href="#4-3-2-并集" class="headerlink" title="4.3.2 并集"></a>4.3.2 并集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个用户所有的好友</span></span><br><span class="line"><span class="built_in">print</span>(friends1 | friends2)  <span class="comment"># &#123;&#x27;kevin&#x27;, &#x27;ricky&#x27;, &#x27;jason&#x27;, &#x27;zero&#x27;, &#x27;Jy&#x27;, &#x27;eg&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-3-差集"><a href="#4-3-3-差集" class="headerlink" title="4.3.3 差集"></a>4.3.3 差集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求用户1独有的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends1 - friends2)  <span class="comment"># &#123;&#x27;zero&#x27;, &#x27;kevin&#x27;&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 求用户2独有的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends2 - friends1)  <span class="comment"># &#123;&#x27;ricky&#x27;, &#x27;Jy&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-4-对称差集"><a href="#4-3-4-对称差集" class="headerlink" title="4.3.4 对称差集"></a>4.3.4 对称差集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求用户1和用户2各自的好友</span></span><br><span class="line">  <span class="built_in">print</span>(friends1 ^ friends2)  <span class="comment"># &#123;&#x27;Jy&#x27;, &#x27;zero&#x27;, &#x27;kevin&#x27;, &#x27;ricky&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-5-父集与子集"><a href="#4-3-5-父集与子集" class="headerlink" title="4.3.5 父集与子集"></a>4.3.5 父集与子集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">11</span>, <span class="number">33</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s2)  <span class="comment"># 判断s1是否是s2的父集   True</span></span><br><span class="line"><span class="built_in">print</span>(s2 &lt; s1)  <span class="comment"># 判断s2是否是s1的子集   True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-内置方法(二)</title>
    <url>/d645d15c.html</url>
    <content><![CDATA[<h2 id="1-字符串内置方法"><a href="#1-字符串内置方法" class="headerlink" title="1. 字符串内置方法"></a>1. 字符串内置方法</h2><h3 id="1-1-大小写转换"><a href="#1-1-大小写转换" class="headerlink" title="1.1 大小写转换"></a>1.1 大小写转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;jasOn123 JAsOn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>全转大写upper()</span><br><span class="line">  <span class="built_in">print</span>(res.upper())  <span class="comment"># JASON123 JASON</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>全转小写lower()</span><br><span class="line">  <span class="built_in">print</span>(res.lower())  <span class="comment"># jason123 jason</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>eg:</span><br><span class="line">  old_code = <span class="string">&#x27;jAson123&#x27;</span></span><br><span class="line">  code = <span class="built_in">input</span>(<span class="string">&quot;请输入验证码:%s&gt;&gt;&gt;:&quot;</span> % old_code).strip()</span><br><span class="line">  <span class="keyword">if</span> code.upper() == old_code.upper():  <span class="comment"># 这里也可以用lower()</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;验证码输入正确&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;验证码输入错误&quot;</span>)</span><br><span class="line"> <span class="comment"># 忽略大小写,全部转为大写或者小写</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-判断大小写"><a href="#1-2-判断大小写" class="headerlink" title="1.2 判断大小写"></a>1.2 判断大小写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res1 = <span class="string">&#x27;JASON&#x27;</span></span><br><span class="line">res2 = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>判断是否纯大写isupper()</span><br><span class="line">  <span class="built_in">print</span>(res1.isupper())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(res2.isupper())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>判断是否纯小写islower()</span><br><span class="line">  <span class="built_in">print</span>(res1.islower())  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(res2.islower())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-判断指定字符开头、结尾"><a href="#1-3-判断指定字符开头、结尾" class="headerlink" title="1.3 判断指定字符开头、结尾"></a>1.3 判断指定字符开头、结尾</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;jason 123 newapeman heiheihei oldgirl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>判断字符串是否以指定的字符开头startswith()</span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jon&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jas&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(s1.startswith(<span class="string">&#x27;jason 123&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>判断字符串是否以指定的字符结尾endswith()</span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;oldboy&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;girl&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(s1.endswith(<span class="string">&#x27;hei oldgirl&#x27;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-格式化输出format"><a href="#1-4-格式化输出format" class="headerlink" title="1.4 格式化输出format"></a>1.4 格式化输出format</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>之前使用的是占位符 %s %d</span><br><span class="line"><span class="number">2.</span>字符串内置方法 <span class="built_in">format</span>()</span><br><span class="line"></span><br><span class="line">使用方式<span class="number">1</span>:相当于占位符</span><br><span class="line">  s1 = <span class="string">&#x27;my name is &#123;&#125; my age is &#123;&#125;&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s1.<span class="built_in">format</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>))  <span class="comment"># my name is jason my age is 18</span></span><br><span class="line"></span><br><span class="line">使用方式<span class="number">2</span>:大括号内写索引值可以打破顺序,并且可以反复使用相同位置的数据</span><br><span class="line">  s2 = <span class="string">&#x27;&#123;1&#125; my name is &#123;0&#125; my age is &#123;1&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>  <span class="comment"># 18 my name is jason my age is 18 18 jason</span></span><br><span class="line">  <span class="built_in">print</span>(s2.<span class="built_in">format</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line">使用方式<span class="number">3</span>:大括号内写变量名</span><br><span class="line">  s3 = <span class="string">&#x27; my name is &#123;name&#125; my age is  &#123;age&#125;&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s3.<span class="built_in">format</span>(name=<span class="string">&#x27;jason&#x27;</span>, age=<span class="number">18</span>))  <span class="comment"># my name is jason my age is  18</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-字符串的拼接"><a href="#1-5-字符串的拼接" class="headerlink" title="1.5 字符串的拼接"></a>1.5 字符串的拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用 +</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27;world&#x27;</span>)  <span class="comment"># hello world</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用join()</span><br><span class="line">  l = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(l[<span class="number">0</span>] + <span class="string">&#x27;|&#x27;</span> + l[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + l[<span class="number">2</span>])  <span class="comment"># jason|tony|kevin</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>.join(l))  <span class="comment"># jason|tony|kevin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 = [&#x27;jason&#x27;, 123, &#x27;tony&#x27;]</span></span><br><span class="line"><span class="comment"># print(&#x27;$&#x27;.join(l1))  # 报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;必须是字符串类型 (在python不同数据类型之间无法直接操作)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-替换字符串中指定的字符"><a href="#1-6-替换字符串中指定的字符" class="headerlink" title="1.6 替换字符串中指定的字符"></a>1.6 替换字符串中指定的字符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">replace()</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  s4 = <span class="string">&#x27;my name is tony tony tony my age is 18&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s4.replace(<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>))  <span class="comment"># my name is Bob Bob Bob my age is 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换指定字符的次数</span></span><br><span class="line">  s4 = <span class="string">&#x27;my name is tony tony tony my age is 18&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s4.replace(<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">1</span>))  <span class="comment"># my name is Bob tony tony my age is 18</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-判断是否纯数字"><a href="#1-7-判断是否纯数字" class="headerlink" title="1.7 判断是否纯数字"></a>1.7 判断是否纯数字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">isdigit()</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">  s1 = <span class="string">&#x27;asd123&#x27;</span></span><br><span class="line">  s2 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(s1.isdigit())  <span class="comment"># False</span></span><br><span class="line">  <span class="built_in">print</span>(s2.isdigit())  <span class="comment"># True</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 案例:判断用户输入的是否是纯数字</span></span><br><span class="line">  real_age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      age = <span class="built_in">input</span>(<span class="string">&quot;请输入猜测的年龄:&quot;</span>).strip()  <span class="comment"># 去除首尾的空格</span></span><br><span class="line">      <span class="keyword">if</span> age.isdigit():  <span class="comment"># 判断输入的是否是纯数字</span></span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">int</span>(age) == real_age:  <span class="comment"># 将输入的整数字符串转换为整型</span></span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line">              <span class="keyword">break</span>  <span class="comment"># 猜对了就退出循环</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;请输入正确的数字&quot;</span>)  <span class="comment"># 如果用户输入的不是纯数字提示并再次循环</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-字体格式相关"><a href="#1-8-字体格式相关" class="headerlink" title="1.8 字体格式相关"></a>1.8 字体格式相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;my namE iS Bob&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;but&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;tony123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>title()  <span class="comment"># 所有单词首字母大写</span></span><br><span class="line">  <span class="built_in">print</span>(str1.title())  <span class="comment"># My Name Is Bob</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>capitalize()  <span class="comment"># 第一个单词首字母大写</span></span><br><span class="line">  <span class="built_in">print</span>(str1.capitalize())  <span class="comment"># My name is bob</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>swapcase()  <span class="comment"># 大小写互换</span></span><br><span class="line">  <span class="built_in">print</span>(str1.swapcase())  <span class="comment"># MY NAMe Is bOB</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>find()  <span class="comment"># 查看指定字符对应的起始索引值,从左往右找到一个就结束</span></span><br><span class="line">  <span class="built_in">print</span>(str1.find(<span class="string">&#x27;n&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line">  <span class="built_in">print</span>(str1.find(<span class="string">&#x27;nam&#x27;</span>))  <span class="comment"># 3  返回的是第三个字母n的索引值</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>center()  <span class="comment"># 指定字符补齐指定个数,居中显示</span></span><br><span class="line">  <span class="built_in">print</span>(str2.center(<span class="number">15</span>, <span class="string">&#x27;$&#x27;</span>))  <span class="comment"># $$$$$$but$$$$$$</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>ljust()  <span class="comment"># 指定字符补齐指定个数,左对齐</span></span><br><span class="line">  <span class="built_in">print</span>(str2.ljust(<span class="number">15</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># but************</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>rjust()  <span class="comment"># 指定字符补齐指定个数,右对齐</span></span><br><span class="line">  <span class="built_in">print</span>(str2.rjust(<span class="number">15</span>, <span class="string">&#x27;%&#x27;</span>))  <span class="comment"># %%%%%%%%%%%%but</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>isalnum()  <span class="comment"># 字符串中即可以包含数字也可以包含字母,返回布尔值</span></span><br><span class="line">  <span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(str3.isalnum())  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>isalpha()  <span class="comment"># 字符串中只包含字母,返回布尔值</span></span><br><span class="line">  <span class="built_in">print</span>(str2.isalpha())  <span class="comment"># True</span></span><br><span class="line">  <span class="built_in">print</span>(str3.isalpha())  <span class="comment"># False	</span></span><br></pre></td></tr></table></figure>

<h2 id="2-列表内置方法"><a href="#2-列表内置方法" class="headerlink" title="2.列表内置方法"></a>2.列表内置方法</h2><h3 id="2-1-基本方法"><a href="#2-1-基本方法" class="headerlink" title="2.1 基本方法"></a>2.1 基本方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>列表内一般都会存储相同数据类型的数据</span><br><span class="line"><span class="number">2.</span><span class="built_in">list</span>()  转换为列表类型,可以将支持<span class="keyword">for</span>循环的数据类型转换成列表</span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># print(list(123))  # 报错</span></span><br><span class="line">  <span class="comment"># print(list(123.21))  # 报错</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>&#125;))  <span class="comment"># [&#x27;username&#x27;, &#x27;pwd&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>((<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)))  <span class="comment"># [11, 22, 33]</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;))  <span class="comment"># [33, 11, 22]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-列表增改数据"><a href="#2-2-列表增改数据" class="headerlink" title="2.2 列表增改数据"></a>2.2 列表增改数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>改</span><br><span class="line">  name_list[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [666, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>增</span><br><span class="line">  方式<span class="number">1</span>: append()</span><br><span class="line">    <span class="comment"># 尾部追加</span></span><br><span class="line">    name_list.appernd(<span class="number">666</span>)</span><br><span class="line">    <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, 666]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尾部追加(将括号内的数据当成一个整体追加到列表末尾)</span></span><br><span class="line">    name_list.append([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]) </span><br><span class="line">	  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, [111, 222, 333]]</span></span><br><span class="line">    </span><br><span class="line">  方式<span class="number">2</span>: insert()</span><br><span class="line">    <span class="comment"># 可以在指定索引值插入元素</span></span><br><span class="line">    name_list.insert(<span class="number">3</span>, <span class="string">&#x27;vae&#x27;</span>)</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;vae&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 元素会被当成一个整体插入到指定索引位置</span></span><br><span class="line">    name_list.insert(<span class="number">2</span>, [<span class="number">11</span>, <span class="number">22</span>])</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, [11, 22], &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"> </span><br><span class="line"> 方式<span class="number">3</span>: extend()</span><br><span class="line">    <span class="comment"># 扩展元素</span></span><br><span class="line">    name_list.extend([<span class="number">11</span>, <span class="number">22</span>])</span><br><span class="line">		<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;, 11, 22]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 相当于for循环+append()</span></span><br><span class="line">    l1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">    l2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l2:</span><br><span class="line">    		l1.append(i)</span><br><span class="line">		<span class="built_in">print</span>(l1)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-列表删除数据"><a href="#2-3-列表删除数据" class="headerlink" title="2.3 列表删除数据"></a>2.3 列表删除数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"><span class="number">1.</span>通过<span class="keyword">del</span>删除</span><br><span class="line">  <span class="keyword">del</span> name_list[<span class="number">0</span>]  <span class="comment"># 直接删除索引为0的值</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>remove()</span><br><span class="line">  <span class="comment"># 移除括号内的元素值</span></span><br><span class="line">  name_list.remove(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;jason&#x27;, &#x27;kevin&#x27;, &#x27;tony&#x27;]</span></span><br><span class="line">  <span class="built_in">print</span>(name_list.remove(<span class="string">&#x27;jack&#x27;</span>))  <span class="comment"># None</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>pop()</span><br><span class="line">  <span class="comment"># 弹出括号内的元素索引值,如果括号没有值,则默认弹出列表尾部的元素</span></span><br><span class="line">  <span class="built_in">print</span>(name_list.pop(<span class="number">0</span>))  <span class="comment"># jason</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [&#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br></pre></td></tr></table></figure>



<h2 id="可变类型与不可变类型"><a href="#可变类型与不可变类型" class="headerlink" title="可变类型与不可变类型"></a>可变类型与不可变类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可变类型: 列表</span><br><span class="line">    值改变,内存地址不变,修改的是原值</span><br><span class="line">不可变类型: 整型 浮点型 字符串</span><br><span class="line">    值改变,内存地址肯定变,产生了新值</span><br><span class="line">    </span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># 不可变类型</span></span><br><span class="line">  str1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(str1.title())  <span class="comment"># Hello World 结果操作之后的值,是一个新的值</span></span><br><span class="line">  <span class="built_in">print</span>(str1)  <span class="comment"># hello world 原值并没有改变</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 可变类型</span></span><br><span class="line">  name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">id</span>(name_list))  <span class="comment"># 现在的值为 140618704502856 (不固定值)</span></span><br><span class="line">	name_list[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">  <span class="built_in">print</span>(name_list)  <span class="comment"># [666, &#x27;kevin&#x27;, &#x27;tony&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">id</span>(name_list))  <span class="comment"># 修改之后值还是 140618704502856 </span></span><br></pre></td></tr></table></figure>

<h2 id="实现队列与堆栈"><a href="#实现队列与堆栈" class="headerlink" title="实现队列与堆栈"></a>实现队列与堆栈</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line">    <span class="built_in">print</span>(list1)  <span class="comment"># 一个个进,从0开始</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列 先进先出</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">del</span> list1[<span class="number">0</span>]  <span class="comment"># 一个个删除,相当于一个个出来,每次出来都从索引0开始,从0开始删除到9</span></span><br><span class="line">    <span class="built_in">print</span>(list1)  <span class="comment"># 根据循环打印出过程,可以直观看出先进先出</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆栈 先进后出</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.pop()  <span class="comment"># 从尾部开始删除,相当于最后进来的先删除</span></span><br><span class="line">    <span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/cd988ed5.html</url>
    <content><![CDATA[<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/moC1KB.jpg" alt="moC1KB"></p>
<span id="more"></span>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>灵活性：即使是最复杂的应用也可以集装箱化</li>
<li>轻量级：容器利用并共享主机内核</li>
<li>可互换：您可以即时部署更新和升级</li>
<li>便携式：您可以在本地构建，部署到云，并在任何地方运行</li>
<li>可扩展：您可以增加并自动分发容器副本</li>
<li>可堆叠：您可以垂直和即时堆叠服务</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">是一个只读的模板，可以在模板上添加额外的功能</span><br></pre></td></tr></table></figure>

<p>容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">是镜像的可运行实例，本质是进程，但是有独立的命名空间，有独立的网络配置，文件系统，进程空间等等... 相当于在一个独立的隔离环境</span><br></pre></td></tr></table></figure>

<p><code>registry </code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">存储镜像的一个仓库，Docker hub官网提供了一个公共的仓库，而且也可以单独的运行一个私有仓库</span><br></pre></td></tr></table></figure>

<h3 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">虚拟机：是一个独立的操作系统，占用资源较多，完全隔离，所以比较安全</span><br><span class="line">容器：与宿主机共享主机的内核，是一个独立的进程，不占用其他执行文件，比较轻量</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/container--vs-vm.png" alt="docker container vs vm"></p>
<h3 id="docker的底层"><a href="#docker的底层" class="headerlink" title="docker的底层"></a>docker的底层</h3><p><a href="https://klcc.cc/4a318272.html">Namespace和CGroup</a></p>
<p>UnionFS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker镜像是由一系列的层组成，每层代表 Dockerfile 中的一条指令</span><br><span class="line"></span><br><span class="line">镜像中每层都是只读的，在运行容器时，就可以在基础层上添加新的可写层，也就是通常说的容器层，对于运行中的容器所做的更改都会写入容器层</span><br><span class="line"></span><br><span class="line">容器与镜像之间的主要区别就是在镜像之上有一个可写层，在容器中的所有操作都会存储在这个容器层中，删除容器后，容器层也会被删除，但是镜像不会变化</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-filesystems.png" alt="docker filesystem"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/container-layers.jpg" alt="container layers"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/sharing-layers.jpg" alt="sharing layers"></p>
<h3 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker 使用 C/S体系的架构，Docker客户端与Docker守护进程（Dockerd）通信，Docker守护进程负责构建，运行和分发 Docker 容器。Docker 客户端和守护进程可以在同一个系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护进程。Docker 客户端和守护进程使用 REST API 通过 UNIX 套接字或网络接口进行通信</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-structrue.png" alt="docker structrue"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考文档</span></span><br><span class="line"><span class="comment"># https://docs.docker.com/install/linux/docker-ce/centos/</span></span><br><span class="line"><span class="comment"># https://www.kuboard.cn/install/install-k8s.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">yum remove docker docker-client docker-client-latest docker-common \</span><br><span class="line">docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新docker-ce</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line">yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像加速、更改Docker根目录</span></span><br><span class="line">mkdir -p /data/docker  <span class="comment"># 挂载到新的硬盘上</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;<span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span>&#125;,</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span> : [<span class="string">&quot;https://ot2k4d59.mirror.aliyuncs.com/&quot;</span>],</span><br><span class="line">  <span class="string">&quot;graph&quot;</span>: <span class="string">&quot;/data/docker&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">yum remove docer-ce</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内核参数，解决以下报错</span></span><br><span class="line"><span class="comment"># WARNING: bridge-nf-call-iptables is disabled</span></span><br><span class="line"><span class="comment"># WARNING: bridge-nf-call-ip6tables is disabled</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#内核调整出现错误</span></span><br><span class="line">sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">sysctl: cannot <span class="built_in">stat</span> /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such file or directory</span><br><span class="line">sysctl: cannot <span class="built_in">stat</span> /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法</span></span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull ubuntu:18.04     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像</span></span><br><span class="line">docker images   	      </span><br><span class="line">docker image ls       </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定镜像 可以指定镜像名字或者镜像ID</span></span><br><span class="line">docker image rm xxx	    </span><br><span class="line">docker rmi -f   xxx            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">docker tag nginx nginx:<span class="built_in">test</span>			</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker image save nginx &gt; /tmp/nginx.tar.gz        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">docker load &lt;  /tmp/nginx.tar.gz    </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像的详情</span></span><br><span class="line">docker image inspect nginx:latest </span><br></pre></td></tr></table></figure>

<h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker  run -itd --name bs busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个容器并进入并在退出容器是自动删除</span></span><br><span class="line">docker run -it --rm  ubuntu:18.04  /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 bs 容器内 屏幕共享的方式(两个终端都是用该命令进入就会同步操作)</span></span><br><span class="line">docker  attach bs   </span><br><span class="line">ctrl + p ctrl + q  	<span class="comment"># 退出容器后，容器不死</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定命令终端进入</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bs sh   	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps        <span class="comment"># 正在运行的</span></span><br><span class="line">docker ps -a     <span class="comment"># 查看所有容器(包含已退出的)</span></span><br><span class="line">docker ps -a -q  <span class="comment"># 查看所有容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有容器</span></span><br><span class="line">docker stop `docker ps -a -q`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker rm -f `docker ps -a -q`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据容器ID强制删除容器</span></span><br><span class="line">docker rm -f 562faccc3106</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line"><span class="comment">## 这个容器不是后台运行</span></span><br><span class="line">docker run --name <span class="built_in">test</span> ubuntu:18.04 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个容器会在后台运行</span></span><br><span class="line">docker run -d --name <span class="built_in">test</span> ubuntu:18.04 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker logs -f <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器占用资源情况</span></span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run 参数</span></span><br><span class="line">-it                     <span class="comment"># 这是两个参数 -i 交互操作 -t 终端</span></span><br><span class="line">-d                      <span class="comment"># 后台运行</span></span><br><span class="line">--name                  <span class="comment"># 设置容器名</span></span><br><span class="line">--restart=always        <span class="comment"># 容器自启</span></span><br><span class="line">-h x.x.x.x		          <span class="comment"># 容器主机名</span></span><br><span class="line">--dns x.x.x.x           <span class="comment"># 容器dns</span></span><br><span class="line">--dns-search</span><br><span class="line">--add-host hostname:IP	<span class="comment"># hostname和主机ip的关系 hosts文件</span></span><br><span class="line">--rm		                <span class="comment"># 服务停止自动删除</span></span><br></pre></td></tr></table></figure>

<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="端口暴露"><a href="#端口暴露" class="headerlink" title="端口暴露"></a>端口暴露</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一个nginx容器</span></span><br><span class="line">docker run --name webserver -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器情况</span></span><br><span class="line">docker ps </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该容器的IP</span></span><br><span class="line">docker inspect webserver |grep IPAddress</span><br><span class="line"><span class="comment"># 会得到 &quot;IPAddress&quot;: &quot;172.17.0.2&quot;</span></span><br><span class="line"><span class="comment"># 访问这个地址的80端口 可以访问到nginx页面</span></span><br><span class="line">curl 172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除该容器</span></span><br><span class="line">docker rm -f webserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将宿主机的8080端口和容器的80端口进行绑定</span></span><br><span class="line">docker run --name webserver -d -p 8080:80 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时就可以访问宿主机的8080端口访问到容器的80端口</span></span><br><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure>

<h4 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h4><p>docker启动会产生一个docker0的网桥，启动的容器会连接到这个网桥上，类似物理交换机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以看到docker0这个网卡</span></span><br><span class="line">ip address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 brctl 命令查看</span></span><br><span class="line">yum install -y bridge-utils</span><br><span class="line">brctl show</span><br></pre></td></tr></table></figure>

<p>bridge 模式是 docker 的默认网络模式，使用<code>docker run -p</code>时，实际上是通过 iptables 做了<code>DNAT</code>规则，实现端口转发功能。可以使用iptables -t nat -vnL查看</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-netework-bridge.jpeg" alt="docker network bridge"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brctl show </span><br><span class="line">docker run -tid --net=bridge --name docker_bri busybox top</span><br><span class="line"><span class="comment"># interfaces</span></span><br><span class="line">brctl show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的ip、路由</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_bri ifconfig -a</span><br><span class="line">docker <span class="built_in">exec</span> docker_bri route -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看宿主机上的的iflink情况</span></span><br><span class="line">ip link show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的iflink文件，由此可以看到是对应的</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_bri cat /sys/class/net/eth0/iflink</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220114171735473.png" alt="image-20220114171735473"></p>
<h4 id="自定义网络模式"><a href="#自定义网络模式" class="headerlink" title="自定义网络模式"></a>自定义网络模式</h4><p>可以通过自定义的 Docker 网络来连接多个容器，而不是使用<code>--link</code>命令</p>
<h5 id="link方式"><a href="#link方式" class="headerlink" title="--link方式"></a><code>--link</code>方式</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再创建一个容器加入到上面的 docker_bri容器建立连接</span></span><br><span class="line">docker run -tid --link docker_bri --name docker_bri1 busybox top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在docker_bri1内可以ping通docker_bri</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_bri1 ping docker_bri</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是反过来就不可以</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_bri ping docker_bri1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实 --link 操作就是在创建容器的时候将 ip 容器名称写入到了 /etc/hosts内，而最开始的那个容器并没有做解析</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_bri cat /etc/hosts</span><br><span class="line">docker <span class="built_in">exec</span> docker_bri1 cat /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/image-20220114172747607.png" alt="image-20220114172747607"></p>
<h5 id="自定义网络方式"><a href="#自定义网络方式" class="headerlink" title="自定义网络方式"></a>自定义网络方式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">docker network <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line">docker network create -d bridge my-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动两个容器加入到 my-net 网络</span></span><br><span class="line">docker run -itd --name busybox1 --network my-net busybox top</span><br><span class="line">docker run -itd --name busybox2 --network my-net busybox top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试互ping</span></span><br><span class="line">docker <span class="built_in">exec</span> busybox1 ping busybox2</span><br><span class="line">docker <span class="built_in">exec</span> busybox2 ping busybox1</span><br></pre></td></tr></table></figure>

<h4 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h4><p>使用 host 模式，这个容器不会获得一个独立的<code>Network Namespace</code>，而是和宿主机共用一个 Network Namespace，和宿主机共用端口。但是其他资源依旧是隔离的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在运行时使用下面参数即可</span></span><br><span class="line">--net=host </span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-network-host.jpeg" alt="docker host network"></p>
<h4 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h4><p>新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享</p>
<p>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等</p>
<p>其他资源依旧隔离，文件系统、进程列表等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用参数</span></span><br><span class="line">--net=container:目标容器名</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes 里面的 Pod 中容器之间就是通过 Container 模式链接到 pause 容器上面的，所以容器直接可以通过 localhost 来进行访问</span></span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-network-container.jpeg" alt="docker container network"></p>
<h4 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h4><p>None模式不会为容器创建任何的网络配置，没有路由、IP等信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--network none</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/docker-network-none.jpeg" alt="docker none network"></p>
<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume create my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种用法</span></span><br><span class="line">docker run -d -p 8080:80 --name web -v my-vol:/usr/share/nginx/html nginx</span><br><span class="line">docker run -d -p 8080:80 --name web --mount <span class="built_in">source</span>=my-vol,target=/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载之后查看宿主机内的该卷的内容</span></span><br><span class="line">ls /data/docker/volumes/my-vol/_data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问容器的nginx服务</span></span><br><span class="line">curl localhost:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉默认nginx首页内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Docker&quot;</span> &gt; /data/docker/volumes/my-vol/_data/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时访问就是修改后的内容</span></span><br><span class="line">curl localhost:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理无主的数据卷</span></span><br><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>


<h4 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将宿主机的目录挂载到容器中,参数</span></span><br><span class="line">-v</span><br><span class="line">--mount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="comment"># 模拟宿主机内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello&#x27;</span> &gt; /mnt/test.txt</span><br><span class="line"><span class="comment"># 运行容器并检查容器内挂载的内容</span></span><br><span class="line">docker run -it -v /mnt/:/usr/mnt busybox /bin/sh</span><br><span class="line">cat /usr/mnt/test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 冒号前为宿主机目录，必须为绝对路径，冒号后为容器内挂载的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载权限</span></span><br><span class="line">默认挂载的路径权限为读写，如果指定为只读使用 ro ,例如 -v /mnt/:/usr/mnt:ro</span><br><span class="line">容器目录不可以为相对路径</span><br><span class="line">宿主机目录如果不存在，则会自动生成</span><br><span class="line"></span><br><span class="line">挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission denied”。可通过两种方式解决：</span><br><span class="line">1.关闭selinux</span><br><span class="line">    临时关闭：setenforce 0</span><br><span class="line">    永久关闭：修改  /etc/sysconfig/selinux 文件，将 SELINUX 的值设置为disabled</span><br><span class="line"></span><br><span class="line">2.以特权方式启动容器</span><br><span class="line">    指定 --privileged 参数，如：</span><br><span class="line">    docker run -it --privileged=<span class="literal">true</span> -v /<span class="built_in">test</span>:/soft centos /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>镜像的定制实际上就是定制镜像的每一层所添加的配置、文件等信息</p>
<p>当在容器内添加或修改了一些文件后，可以通过<code>docker commit</code>命令来生成一个新的镜像(可用来还原场景等)，一般不使用该方式制作镜像，而是使用Dockerfile的方式，还可以作为版本记录的追踪</p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">指定基础镜像，而且必须是第一条指令</span><br><span class="line">scratch镜像，这个镜像是一个虚拟的镜像，并不实际存在，表示一个空白的镜像，不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在</span><br><span class="line"></span><br><span class="line">FROM centos:7</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">FROM scratch</span><br></pre></td></tr></table></figure>

<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">执行命令的指令，有两种格式</span><br><span class="line">1.shell格式</span><br><span class="line">...</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2.exec格式</span><br><span class="line">RUN [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span><br><span class="line"></span><br><span class="line">在Dockerfile中RUN指令尽量使用 &amp;&amp; 将命令拼接在一起，因为每一个指令就是一层，合并在一层优化层数，并且有 UnionFS 层数限制，不得超过127层</span><br></pre></td></tr></table></figure>

<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">指定工作目录，后续的指令都会在当前工作目录，如果该目录不存在会创建该目录</span><br><span class="line">格式: WORKDIR /path/</span><br></pre></td></tr></table></figure>

<h3 id="ADD和COPY"><a href="#ADD和COPY" class="headerlink" title="ADD和COPY"></a>ADD和COPY</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这两个指令都可以将主机上的资源复制到容器镜像上</span><br><span class="line">COPY  </span><br><span class="line">1.只能将宿主机上的资料复制到镜像里</span><br><span class="line">格式: COPY &lt;src&gt;  &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">ADD   </span><br><span class="line">1.可以通过URL从远程服务器上复制到镜像上</span><br><span class="line">2.可以将宿主机上的压缩包解压缩后复制到镜像上</span><br><span class="line">格式: </span><br><span class="line">ADD &lt;src&gt;  &lt;dest&gt;                         <span class="comment"># 简单的将宿主机上的资源复制到镜像中</span></span><br><span class="line">ADD http://test.com/nginx.tar.gz /tools/  <span class="comment"># 下载资源到镜像中</span></span><br><span class="line">ADD nginx.tar.gz /workdir/                <span class="comment"># 将压缩包解压缩到镜像中</span></span><br><span class="line"></span><br><span class="line">使用注意事项</span><br><span class="line">1.源路径可以有多个</span><br><span class="line">2.源路径是相对于执行 build 的相对路径</span><br><span class="line">3.源路径如果是本地路径，必须是构建上下文中的路径</span><br><span class="line">4.源路径如果是一个目录，则该目录下的所有内容都将被加入到容器，但是该目录本身不会</span><br><span class="line">5.目标路径必须是绝对路径，或相对于 WORKDIR 的相对路径</span><br><span class="line">6.目标路径如果不存在，则会创建相应的完整路径</span><br><span class="line">7.目标路径如果不是一个文件，则必须使用/结束</span><br><span class="line">8.路径中可以使用通配符</span><br></pre></td></tr></table></figure>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile所在目录，-t 指定镜像名称</span></span><br><span class="line">docker build -t nginx:v1 .</span><br></pre></td></tr></table></figure>

<h3 id="构建上下文"><a href="#构建上下文" class="headerlink" title="构建上下文"></a>构建上下文</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">上述中的 . 指的是上下文路径</span><br></pre></td></tr></table></figure>



<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><h3 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h3><p>客户端设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于自建的仓库荣如果不是https的会拒绝，因此在配置文件中写入以下内容</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;127.0.0.1:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.0.1:5000私有仓库地址，可设置为自己的</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="Dockerfile实践"><a href="#Dockerfile实践" class="headerlink" title="Dockerfile实践"></a>Dockerfile实践</h2><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 国内下载http://get.daocloud.io/</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h3 id="管理参数"><a href="#管理参数" class="headerlink" title="管理参数"></a>管理参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f 			    <span class="comment"># 指定使用的yaml文件</span></span><br><span class="line">ps 			    <span class="comment"># 显示所有的容器信息</span></span><br><span class="line">restart 	  <span class="comment"># 重新启动容器</span></span><br><span class="line">logs 		    <span class="comment"># 查看日志信息</span></span><br><span class="line">config -q 	<span class="comment"># 验证yaml配置文件</span></span><br><span class="line">stop 		    <span class="comment"># 停止容器</span></span><br><span class="line">start 		  <span class="comment"># 启动容器</span></span><br><span class="line">up -d 		  <span class="comment"># 启动容器项目</span></span><br><span class="line">pause 		  <span class="comment"># 暂停项目</span></span><br><span class="line">UNpause 	  <span class="comment"># 恢复暂停项目</span></span><br><span class="line">rm 			    <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure>

<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 docker-compose.yaml 文件</span></span><br><span class="line"><span class="comment"># 检查语法</span></span><br><span class="line">docker-compose config -q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">        <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br></pre></td></tr></table></figure>

<h3 id="python-web"><a href="#python-web" class="headerlink" title="python-web"></a>python-web</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir pythonweb &amp;&amp; <span class="built_in">cd</span> pythonweb</span><br><span class="line">touch app.py</span><br><span class="line">touch docker-compose.yaml</span><br><span class="line">touch Dockerfile</span><br><span class="line"></span><br><span class="line">docker pull python:3.6-alpine</span><br><span class="line">docker pull redis:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line">import redis</span><br><span class="line">import time</span><br><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>,port=6379)</span><br><span class="line">def get_count():</span><br><span class="line">    retries = 5</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        try:</span><br><span class="line">            <span class="built_in">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            <span class="keyword">if</span> retries == 0:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= 1</span><br><span class="line">            time.sleep(0.3)</span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def hello():</span><br><span class="line">    cnt = get_count()</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&#x27;Hello World! cnt=&#123;&#125;\n&#x27;</span>.format(cnt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,debug=True)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">FROM python:3.6-alpine</span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN pip install redis flask -i https://pypi.douban.com/simple</span><br><span class="line">CMD [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;app.py&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">    - ./code</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker-compos up</span><br><span class="line"><span class="comment"># 访问 http://0.0.0.0:5000</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>for循环及内置方法</title>
    <url>/5bfa71b5.html</url>
    <content><![CDATA[<h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><h4 id="1-1-continue"><a href="#1-1-continue" class="headerlink" title="1.1 continue"></a>1.1 continue</h4><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contiue可以让循环体代码直接回到条件判断处重新判断,相当于跳出本次循环</span><br><span class="line">eg:</span><br><span class="line">  <span class="comment"># 使用while循环打印0-10但是不打印4</span></span><br><span class="line">  num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> num &lt; <span class="number">11</span>:</span><br><span class="line">      <span class="keyword">if</span> num == <span class="number">4</span>:</span><br><span class="line">          num += <span class="number">1</span>  <span class="comment"># 跳出的时候将num加1到num为5,好继续下次的循环,否则会卡在4一直循环</span></span><br><span class="line">          <span class="keyword">continue</span>  <span class="comment"># 当num为4时跳出本次循环</span></span><br><span class="line">      <span class="built_in">print</span>(num)</span><br><span class="line">      num += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-else"><a href="#1-2-else" class="headerlink" title="1.2 else"></a>1.2 else</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当<span class="keyword">while</span>循环没有被人为中断(<span class="keyword">break</span>)的情况下才会走<span class="keyword">else</span></span><br><span class="line">eg:</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">print</span>(count)</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;被执行了&quot;</span>)  <span class="comment"># 结果:在打印了0-4之后,这段代码被执行了</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">print</span>(count)</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>  <span class="comment"># 遇到break之后跳出了循环</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;不被执行了&quot;</span>)  <span class="comment"># 这段就没有执行</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-死循环"><a href="#1-3-死循环" class="headerlink" title="1.3 死循环"></a>1.3 死循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一个靠自身控制无法终止的程序叫死循环,死循环会让CPU极度繁忙</span><br><span class="line">eg：</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">for</span>循环能做到的事情 <span class="keyword">while</span>循环都可以做到,但是<span class="keyword">for</span>循环语法更加简洁 并且在循环取值问题上更加方便</span><br><span class="line"><span class="number">2.</span><span class="keyword">for</span>循环一般用于遍历任意可迭代对象中的元素,可迭代对象包括字符串,列表,元组,集合和字典,字典默认只能取到K</span><br><span class="line"><span class="number">3.</span>变量名如果没有合适的名称,可以使用i,j,k,v,item</span><br><span class="line"><span class="number">4.</span>结构：</span><br><span class="line">  <span class="keyword">for</span> 变量 <span class="keyword">in</span> 迭代对象:</span><br><span class="line">      重复执行的代码</span><br><span class="line"> <span class="number">5.</span>eg:</span><br><span class="line">   name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line">   <span class="comment"># 循环打印列表中的每一个元素</span></span><br><span class="line">   <span class="comment"># while实现</span></span><br><span class="line">     count = <span class="number">0</span></span><br><span class="line">     <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">         <span class="built_in">print</span>(name_list[count])</span><br><span class="line">         count += <span class="number">1</span></span><br><span class="line">   <span class="comment"># for实现</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">         <span class="built_in">print</span>(i)</span><br><span class="line">   <span class="comment"># for循环打印字符串中每个字符</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">         <span class="built_in">print</span>(i)  <span class="comment"># 每个字母都会被打印,中间的空格也回被打印</span></span><br><span class="line">   <span class="comment"># for循环字典,默认只能取到K</span></span><br><span class="line">     d = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;read&#x27;</span>&#125;</span><br><span class="line">     <span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">         <span class="built_in">print</span>(k, d[k])  <span class="comment"># 结果:前面是K值,后面是V值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/uVzeKa.png" alt="uVzeKa"></p>
<h4 id="2-2-range"><a href="#2-2-range" class="headerlink" title="2.2 range"></a>2.2 range</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>第一种:一个参数,从零开始,顾头不顾尾</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印0-9</span></span><br><span class="line"><span class="number">2.</span>第二种:两个参数,自定义起始位置,顾头不顾尾</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印4-9</span></span><br><span class="line"><span class="number">3.</span>第三种:三个参数,第三个数字用来控制等差值</span><br><span class="line">  eg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 循环打印从2开始每隔10个数的值,2 12 22...92</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">扩展:</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250  第一页</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=25&amp;filter=  第二页 每页相差25</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=50&amp;filter=  第三页</span></span><br><span class="line"><span class="string">    https://movie.douban.com/top250?start=75&amp;filter=  第四页</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">base_url = <span class="string">&#x27;https://movie.douban.com/top250?start=%s&amp;filter=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">  <span class="built_in">print</span>(base_url % i)  <span class="comment"># 打印出了豆瓣top250每页的url</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># range()在python2.x和python3.x返回值不同</span></span><br><span class="line">  在python2.x中<span class="built_in">range</span>()会生成一个列表,但有个xrange()也是迭代器</span><br><span class="line">  在python3.x中<span class="built_in">range</span>()是一个迭代器,相对于python2.x生成列表更加节省内存</span><br><span class="line"><span class="comment"># python2.x中的xrange()就是python3.x中的range()</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-break"><a href="#2-3-break" class="headerlink" title="2.3 break"></a>2.3 break</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结束本层循环</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 当i等于4的时候遇到了break,直接结束这层的for循环</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 结果是打印0-3</span></span><br></pre></td></tr></table></figure>



<h4 id="2-4-continue"><a href="#2-4-continue" class="headerlink" title="2.4 continue"></a>2.4 continue</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结束本次循环</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 当i等于4的时候,结束本次循环,不影响</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 打印0-3,5-9</span></span><br></pre></td></tr></table></figure>



<h4 id="2-5-else"><a href="#2-5-else" class="headerlink" title="2.5 else"></a>2.5 else</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在<span class="keyword">for</span>循环正常结束的情况下才会被执行</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rnage(<span class="number">10</span>)：</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这段被执行了&quot;</span>)  <span class="comment"># 在循环打印了0-9之后,会继续执行这段代码,打印 这段被执行了</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 在循环打印了0-3之后,就被跳出了本层循环</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这段代码没有被执行&quot;</span>)  <span class="comment">#这段代码就没有被执行</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h4 id="2-6-嵌套"><a href="#2-6-嵌套" class="headerlink" title="2.6 嵌套"></a>2.6 嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in range(3):</span></span><br><span class="line"><span class="comment">#     for j in range(5):</span></span><br><span class="line"><span class="comment">#         print(&quot;*&quot;, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#     print()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s*%s=%s&#x27;</span> % (i, j, i * j), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>



<h3 id="3-数据类型内置方法"><a href="#3-数据类型内置方法" class="headerlink" title="3. 数据类型内置方法"></a>3. 数据类型内置方法</h3><h4 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1 整型"></a>3.1 整型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>类型转换 <span class="built_in">int</span>()</span><br><span class="line"><span class="comment"># 只能转换成纯数字,且在转换的时候只识别整数,遇到其他类型的都会报错,如小数,带字母的等</span></span><br><span class="line">eg:</span><br><span class="line">  res = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res))  <span class="comment"># 输出结果是 str</span></span><br><span class="line">  <span class="built_in">int</span>(res)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res))  <span class="comment"># 输出结果是 int</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span>(<span class="number">123.123</span>)  <span class="comment"># 报错,不识别小数</span></span><br><span class="line">  <span class="built_in">int</span>(t123)  <span class="comment"># 报错，不识别除数字以外的</span></span><br><span class="line">  </span><br><span class="line"> <span class="number">2.</span>进制转换</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成二进制  0b1100100</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成八进制  0o144</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">100</span>))  <span class="comment"># 将十进制的100转换成十六进制  0x64</span></span><br><span class="line">  <span class="comment"># 0b开头为二进制数  0o开头为八进制数  0x开头为十六进制数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0b1100100&#x27;</span>, <span class="number">2</span>))  <span class="comment"># 使用int()将0b1100100以二进制的方式转换为十进制</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0o144&#x27;</span>, <span class="number">8</span>))  <span class="comment"># 使用int()将0o144以八进制的方式转换为十进制</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0x64&#x27;</span>, <span class="number">16</span>))  <span class="comment"># 使用int()将0x64以十六进制的方式转换为十进制</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-浮点型"><a href="#3-2-浮点型" class="headerlink" title="3.2 浮点型"></a>3.2 浮点型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类型转换 <span class="built_in">float</span>()</span><br><span class="line">可以转换成小数,在转换的时候可以识别整数和小数,遇到其他类型的都会报错</span><br><span class="line">eg:</span><br><span class="line">  res1 = <span class="string">&#x27;123.123&#x27;</span></span><br><span class="line">  res2 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res1))  <span class="comment"># 没被转换前类型是 str</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res2))  <span class="comment"># 没被转换前类型是 str</span></span><br><span class="line">  <span class="built_in">float</span>(res1)  <span class="comment"># 使用float()进行转换</span></span><br><span class="line">  <span class="built_in">float</span>(res2)  <span class="comment"># 使用float()进行转换</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res1))  <span class="comment"># 转换后res1类型是整型</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(res2))  <span class="comment"># 转换后res2类型是整型</span></span><br><span class="line">  <span class="built_in">print</span>(res2)  <span class="comment"># res2的结果变成 123.0</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a>3.3 字符串</h4><h5 id="3-3-1-类型转换str"><a href="#3-3-1-类型转换str" class="headerlink" title="3.3.1 类型转换str()"></a>3.3.1 类型转换str()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">任何类型都可以转换成字符串类型 <span class="built_in">str</span>()</span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">str</span>(<span class="number">123.123</span>)</span><br><span class="line"><span class="built_in">str</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;paswd&#x27;</span>])</span><br><span class="line"><span class="built_in">str</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="number">123</span>&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="comment">#最终结果都会是str类型</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-2-索引取值"><a href="#3-3-2-索引取值" class="headerlink" title="3.3.2 索引取值"></a>3.3.2 索引取值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>])  <span class="comment"># 结果为e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还可以支持负数索引</span></span><br><span class="line"><span class="built_in">print</span>(res[-<span class="number">1</span>])  <span class="comment"># 结果为 ！ </span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-切片操作"><a href="#3-3-3-切片操作" class="headerlink" title="3.3.3 切片操作"></a>3.3.3 切片操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 结果为ell</span></span><br><span class="line"><span class="comment">#切片操作顾头不顾尾,左闭右开</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-4-步长操作"><a href="#3-3-4-步长操作" class="headerlink" title="3.3.4 步长操作"></a>3.3.4 步长操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>])  <span class="comment"># 结果为el ol</span></span><br><span class="line"><span class="comment">#先取到1到10的字符为在ello worl,同样顾头不顾尾</span></span><br><span class="line"><span class="comment">#再每隔两个取,结果就是el ol</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(res[-5:-1])  # orld  顾头不顾尾</span></span><br><span class="line"><span class="comment"># print(res[-5:-1:-1])  # 方向冲突</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-5-len"><a href="#3-3-5-len" class="headerlink" title="3.3.5 len()"></a>3.3.5 len()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">统计字符串内部字符的个数 <span class="built_in">len</span>()</span><br><span class="line">res = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))  <span class="comment"># 结果为12</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-6-strip"><a href="#3-3-6-strip" class="headerlink" title="3.3.6 strip()"></a>3.3.6 strip()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">移除字符串首尾指定的字符,默认移除的是首位的空格 strip()</span><br><span class="line">eg1:</span><br><span class="line">  name = <span class="string">&#x27;  jason  &#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(name, <span class="built_in">len</span>(name))</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">len</span>(name.strip()))  <span class="comment"># 默认移除首尾的空格</span></span><br><span class="line">eg2:</span><br><span class="line">  name1 = <span class="string">&#x27;$$jason$$&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(name1.strip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除指定字符$ 结果为jason</span></span><br><span class="line">  <span class="built_in">print</span>(name1.lstrip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除左边的$$ 结果为jason$$  </span></span><br><span class="line">  <span class="built_in">print</span>(name1.rstrip(<span class="string">&#x27;$&#x27;</span>))  <span class="comment"># 移除右边的$$ 结果为$$jason</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在应用中,用户在输入的时候在首位手残输入了空格之后的解决办法</span></span><br><span class="line">  username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>).strip()  <span class="comment"># 用户在输入的时候前后输入了空格将不受影响</span></span><br><span class="line">  <span class="keyword">if</span> username == <span class="string">&#x27;root&#x27;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;用户名输入正确&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;用户名输入错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-7-split"><a href="#3-3-7-split" class="headerlink" title="3.3.7 split()"></a>3.3.7 split()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">按照指定的字符切割字符串,该方法返回的是一个列表 split()</span><br><span class="line">res = <span class="string">&#x27;root|123|test&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res.split(<span class="string">&#x27;|&#x27;</span>))  <span class="comment"># [&#x27;root&#x27;, &#x27;123&#x27;, &#x27;test&#x27;] 以|进行分割,返回列表</span></span><br><span class="line"><span class="built_in">print</span>(res.split(<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))  <span class="comment"># [&#x27;root&#x27;, &#x27;123|test&#x27;]  maxsplit用于控制切割的次数</span></span><br><span class="line"><span class="built_in">print</span>(res.rsplit(<span class="string">&#x27;|&#x27;</span>, maxsplit=<span class="number">1</span>))  <span class="comment"># [&#x27;root|123&#x27;, &#x27;test&#x27;] 从右边开始分割</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装</title>
    <url>/60b500c7.html</url>
    <content><![CDATA[<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><table>
<thead>
<tr>
<th>IP</th>
<th>Hostname</th>
<th>配置</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.0.11</td>
<td>master1</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>192.168.0.12</td>
<td>node1</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
<tr>
<td>192.168.0.13</td>
<td>node2</td>
<td>4c8g</td>
<td>Centos7.6</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.0.11 master1</span><br><span class="line">192.168.0.12 node1</span><br><span class="line">192.168.0.13 node2</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙及selinux"><a href="#关闭防火墙及selinux" class="headerlink" title="关闭防火墙及selinux"></a>关闭防火墙及selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i  s<span class="comment">#enforcing#disabled#g /etc/selinux/config</span></span><br></pre></td></tr></table></figure>

<h3 id="加载内核模块"><a href="#加载内核模块" class="headerlink" title="加载内核模块"></a>加载内核模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由于开启内核 ipv4 转发需要加载 br_netfilter 模块，所以加载下该模块：</span></span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="安装ipvs"><a href="#安装ipvs" class="headerlink" title="安装ipvs"></a>安装ipvs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ipset ipvsadm wget vim net-tools curl chrony  -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#同步服务器时间</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line">systemctl start chronyd</span><br><span class="line">chronyc sources</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap</span></span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#修改/etc/fstab文件，注释掉 SWAP 的自动挂载</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Containerd"><a href="#安装Containerd" class="headerlink" title="安装Containerd"></a>安装Containerd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#国内会被限制下载</span></span><br><span class="line"><span class="comment">#wget https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有限制，也可以替换成下面的 URL 加速下载</span></span><br><span class="line">wget https://download.fastgit.org/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接将压缩包解压到系统的各个目录中</span></span><br><span class="line">tar -C / -xzf cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后要将 /usr/local/bin 和 /usr/local/sbin 追加到 ~/.bashrc 文件的 PATH 环境变量中：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/bin:/usr/local/sbin&#x27;</span> &gt;&gt; /root/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令生成一个默认的配置</span></span><br><span class="line">mkdir -p /etc/containerd</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改一:</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">    SystemdCgroup = <span class="literal">true</span></span><br><span class="line"><span class="comment">#修改二:配置加速器国内版本</span></span><br><span class="line"> [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># sandbox_image = &quot;k8s.gcr.io/pause:3.5&quot;</span></span><br><span class="line">  sandbox_image = <span class="string">&quot;registry.aliyuncs.com/k8sxio/pause:3.5&quot;</span></span><br><span class="line">  ...</span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">        endpoint = [<span class="string">&quot;https://bqr1dr1n.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">        endpoint = [<span class="string">&quot;https://registry.aliyuncs.com/k8sxio&quot;</span>]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd --now</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本情况</span></span><br><span class="line">ctr version</span><br><span class="line">crictl version</span><br></pre></td></tr></table></figure>


<h3 id="下载kubeadm、kubelet"><a href="#下载kubeadm、kubelet" class="headerlink" title="下载kubeadm、kubelet"></a>下载kubeadm、kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#能上外网版本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#国内版本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line"><span class="comment"># --disableexcludes 禁掉除了kubernetes之外的别的仓库</span></span><br><span class="line">yum makecache fast -y</span><br><span class="line">yum install -y kubelet-1.22.2 kubeadm-1.22.2 kubectl-1.22.2 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">kubeadm version</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>

<h3 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --component-configs KubeletConfiguration &gt; kubeadm.yaml</span><br></pre></td></tr></table></figure>
<p>kubeadm.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>  <span class="comment"># 指定master节点内网IP</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/run/containerd/containerd.sock</span>  <span class="comment"># 使用 containerd的Unix socket 地址</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">taints:</span>  <span class="comment"># 给master添加污点，master节点不能调度应用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;node-role.kubernetes.io/master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span>  <span class="comment"># kube-proxy 模式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span> &#123;&#125;</span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/k8sxio</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="number">1.22</span><span class="number">.2</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span>  <span class="comment"># 指定 pod 子网</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">anonymous:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">x509:</span></span><br><span class="line">    <span class="attr">clientCAFile:</span> <span class="string">/etc/kubernetes/pki/ca.crt</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">Webhook</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheAuthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">cacheUnauthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">clusterDNS:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line"><span class="attr">clusterDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">cpuManagerReconcilePeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">evictionPressureTransitionPeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">fileCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">healthzPort:</span> <span class="number">10248</span></span><br><span class="line"><span class="attr">httpCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">imageMinimumGCAge:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span>  <span class="comment"># 配置 cgroup driver</span></span><br><span class="line"><span class="attr">logging:</span> &#123;&#125;</span><br><span class="line"><span class="attr">memorySwap:</span> &#123;&#125;</span><br><span class="line"><span class="attr">nodeStatusReportFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">nodeStatusUpdateFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">rotateCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runtimeRequestTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">shutdownGracePeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">shutdownGracePeriodCriticalPods:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">staticPodPath:</span> <span class="string">/etc/kubernetes/manifests</span></span><br><span class="line"><span class="attr">streamingConnectionIdleTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">syncFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">volumeStatsAggPeriod:</span> <span class="string">0s</span></span><br></pre></td></tr></table></figure>

<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只下载镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面coredns镜像有问题需要单独拉</span></span><br><span class="line">ctr -n k8s.io i pull docker.io/coredns/coredns:1.8.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉下来后进行改名</span></span><br><span class="line">ctr -n k8s.io i tag docker.io/coredns/coredns:1.8.4 registry.aliyuncs.com/k8sxio/coredns:v1.8.4</span><br></pre></td></tr></table></figure>

<h3 id="初始化集群-1"><a href="#初始化集群-1" class="headerlink" title="初始化集群"></a>初始化集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --config kubeadm.yaml</span><br><span class="line"></span><br><span class="line"> mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"> sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"> sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#在初始化完成后会出现其他节点加入进来的命令</span></span><br><span class="line"> kubeadm join 192.168.31.31:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:ca0c87226c69309d7779096c15b6a41e14b077baf4650bfdb6f9d3178d4da645</span><br></pre></td></tr></table></figure>

<h3 id="查看是否初始化成功"><a href="#查看是否初始化成功" class="headerlink" title="查看是否初始化成功"></a>查看是否初始化成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h3 id="安装flannel"><a href="#安装flannel" class="headerlink" title="安装flannel"></a>安装flannel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 如果有节点是多网卡，则需要在资源清单文件中指定内网网卡</span></span><br><span class="line"><span class="comment"># 搜索到名为 kube-flannel-ds 的 DaemonSet，在kube-flannel容器下面</span></span><br><span class="line">vim kube-flannel.yml</span><br><span class="line">......</span><br><span class="line">containers:</span><br><span class="line">- name: kube-flannel</span><br><span class="line">  image: quay.io/coreos/flannel:v0.15.0</span><br><span class="line">  <span class="built_in">command</span>:</span><br><span class="line">  - /opt/bin/flanneld</span><br><span class="line">  args:</span><br><span class="line">  - --ip-masq</span><br><span class="line">  - --kube-subnet-mgr</span><br><span class="line">  - --iface=eth0  <span class="comment"># 如果是多网卡的话，指定内网网卡的名称</span></span><br><span class="line">......</span><br><span class="line">kubectl apply -f kube-flannel.yml  <span class="comment"># 安装 flannel 网络插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看flannel情况</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>

<h3 id="Dashboard安装"><a href="#Dashboard安装" class="headerlink" title="Dashboard安装"></a>Dashboard安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用下面这种方式</span></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br><span class="line">➜  ~ vi recommended.yaml</span><br><span class="line"><span class="comment"># 修改Service为NodePort类型</span></span><br><span class="line">......</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  <span class="built_in">type</span>: NodePort  <span class="comment"># 加上type=NodePort变成NodePort类型的服务</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kubernetes-dashboard -o wide</span><br></pre></td></tr></table></figure>

<h3 id="更换cni网络"><a href="#更换cni网络" class="headerlink" title="更换cni网络"></a>更换cni网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个节点都需要操作</span></span><br><span class="line">mv /etc/cni/net.d/10-containerd-net.conflist /etc/cni/net.d/10-containerd-net.conflist.bak</span><br><span class="line"></span><br><span class="line">ifconfig cni0 down &amp;&amp; ip link delete cni0</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart containerd kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除coredns达到重启目的</span></span><br><span class="line">kubectl  -n kube-system delete pod coredns-7568f67dbd-9wcv4</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启dashboard</span></span><br><span class="line">kubectl delete -f recommended.yaml</span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>

<h3 id="进入Dashboard"><a href="#进入Dashboard" class="headerlink" title="进入Dashboard"></a>进入Dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看dashboard的端口</span></span><br><span class="line">kubectl get svc -n kubernetes-dashboard</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建权限</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>创建并生成token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f admin.yaml</span><br><span class="line"></span><br><span class="line">kubectl get secret -n kubernetes-dashboard|grep admin-token</span><br><span class="line"><span class="comment">#得到一个以 admin-token-xxx 的一个</span></span><br><span class="line"></span><br><span class="line">kubectl get secret &#123;admin-token-xxx&#125; -o jsonpath=&#123;.data.token&#125; -n kubernetes-dashboard |base64 -d</span><br><span class="line"><span class="comment"># 会生成一串很长的base64后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#谷歌浏览器访问的时候会打不开</span></span><br><span class="line"><span class="comment">#解决方法一: 更换火狐浏览器</span></span><br><span class="line"><span class="comment">#解决方法二: 谷歌浏览器非安全页面,空白处输入thisisunsafe即可</span></span><br></pre></td></tr></table></figure>

<h3 id="kubectl命令补全"><a href="#kubectl命令补全" class="headerlink" title="kubectl命令补全"></a>kubectl命令补全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bash-completion*</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="master污点"><a href="#master污点" class="headerlink" title="master污点"></a>master污点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#去除污点变成可调度</span></span><br><span class="line">kubectl taint node master node-role.kubernetes.io/master-</span><br><span class="line"></span><br><span class="line"><span class="comment">#打上污点补课调度</span></span><br><span class="line">kubectl taint node master node-role.kubernetes.io/master=<span class="string">&quot;&quot;</span>:NoSchedule</span><br></pre></td></tr></table></figure>

<h3 id="剔除节点并重新加入"><a href="#剔除节点并重新加入" class="headerlink" title="剔除节点并重新加入"></a>剔除节点并重新加入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">###简易版本###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##master节点上操作</span></span><br><span class="line"><span class="comment">#驱逐节点上的pod</span></span><br><span class="line">kubectl drain node3 --delete-local-data --ignore-daemonsets --force</span><br><span class="line"></span><br><span class="line"><span class="comment">#主节点上删除node节点</span></span><br><span class="line">kubectl  delete nodes node3</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看加入集群命令</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment">##node3节点上操作</span></span><br><span class="line"><span class="comment">#在node3上重置</span></span><br><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到上面加入集群的命令重新加入</span></span><br><span class="line">kubeadm join  xxx</span><br></pre></td></tr></table></figure>


<h3 id="kubectl远程"><a href="#kubectl远程" class="headerlink" title="kubectl远程"></a>kubectl远程</h3><p>mac(zsh下)操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">brew install kubectl</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source &lt;(kubectl completion zsh)&#x27;</span> &gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">mkdir ~/.kube</span><br><span class="line"></span><br><span class="line"><span class="comment">#将k8s集群下的/etc/kubernetes/admin.conf拷贝到本机的~/.kube/config</span></span><br><span class="line"><span class="comment">#在k8s集群master上查看，DNS 区域就是包含的校验的域名，后面还有 IP</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> /etc/kubernetes/pki/apiserver.crt -noout -text</span><br><span class="line">...</span><br><span class="line">DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, DNS:master1, IP Address:10.96.0.1, IP Address:192.168.0.21</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地，将k8s的master外网IP和上面得到的DNS后面的映射信息写入到/etc/hosts中</span></span><br><span class="line"><span class="comment">#将本地~/.kube/config中  server:6443 改成写入到/etc/hosts中的DNS映射信息</span></span><br><span class="line">cat ~/.kube/config</span><br><span class="line">...</span><br><span class="line">server: https://master1:6443  <span class="comment"># 这里如果直接用公网IP不行</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat /etc/hosts </span><br><span class="line">139.155.237.70 master1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个时候就可以愉快的本地操作k8s集群了</span><br></pre></td></tr></table></figure>
<p>brew安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/111014448</span><br><span class="line"></span><br><span class="line"><span class="comment">#全部国内源，下载速度快</span></span><br><span class="line"><span class="comment">#常规安装</span></span><br><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#急速安装</span></span><br><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span> speed</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载脚本</span></span><br><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#项目地址</span></span><br><span class="line">https://gitee.com/cunkai/HomebrewCN/blob/master/error.md</span><br></pre></td></tr></table></figure>



<p>文档整理:<a href="https://www.qikqiak.com/k3s/">https://www.qikqiak.com/k3s/</a></p>
]]></content>
      <categories>
        <category>Kuberneters</category>
      </categories>
      <tags>
        <tag>Kuberneters</tag>
        <tag>kubeadm</tag>
      </tags>
  </entry>
  <entry>
    <title>python-流程控制</title>
    <url>/26ba1150.html</url>
    <content><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="1-定义及说明"><a href="#1-定义及说明" class="headerlink" title="1. 定义及说明"></a>1. 定义及说明</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">流程控制即控制事物的执行过程</span><br><span class="line">任何使用执行流程只有三种情况:</span><br><span class="line">  <span class="number">1.</span>顺序结构  <span class="comment"># 自上而下依次运行</span></span><br><span class="line">  <span class="number">2.</span>分支结构  <span class="comment"># 在运行过程中根据条件的不同可能会执行不同的流程</span></span><br><span class="line">  <span class="number">3.</span>循环结构  <span class="comment"># 在运行过程中有些代码需要反复执行</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>条件都会转成布尔值  从而决定子代码是否执行</span><br><span class="line"><span class="number">2.</span>在python中 使用缩进来表示代码的从属关系</span><br><span class="line"><span class="number">3.</span>并不是所有的代码都可以拥有子代码</span><br><span class="line"><span class="number">4.</span>同属于某个代码的多行子代码 必须要保持相同的缩进量</span><br><span class="line">	在python中推荐使用四个空格来缩进</span><br><span class="line">ps:小技巧 上一行代码的结尾如果是冒号 那么下一行代码必缩进</span><br></pre></td></tr></table></figure>

<h3 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.  顺序结构"></a>2.  顺序结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">从上到下依次执行</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/T8iFeL.png" alt="T8iFeL"></p>
<h3 id="3-分支结构"><a href="#3-分支结构" class="headerlink" title="3. 分支结构"></a>3. 分支结构</h3><h4 id="3-1-if基本使用"><a href="#3-1-if基本使用" class="headerlink" title="3.1 if基本使用"></a>3.1 if基本使用</h4><h5 id="3-1-1-if单分支"><a href="#3-1-1-if单分支" class="headerlink" title="3.1.1 if单分支"></a>3.1.1 if单分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立之后执行的子代码块</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;小姐姐好&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/sizMEI.png" alt="sizMEI"></p>
<h5 id="3-1-2-if-else使用"><a href="#3-1-2-if-else使用" class="headerlink" title="3.1.2 if-else使用"></a>3.1.2 if-else使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的子代码块</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># if与else连用情况下,两者子代码永远只会执行一个</span></span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小姐姐好&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;认错人了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/alOv1n.png" alt="alOv1n"></p>
<h5 id="3-1-3-if-elif-else使用"><a href="#3-1-3-if-elif-else使用" class="headerlink" title="3.1.3 if-elif-else使用"></a>3.1.3 if-elif-else使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>不成立 条件<span class="number">2</span>成立之后执行的子代码块</span><br><span class="line">  <span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    条件<span class="number">1</span>和<span class="number">2</span>都不成立 条件<span class="number">3</span>成立之后执行的子代码块</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">   上述条件都不成立 执行的子代码块</span><br><span class="line">  <span class="comment"># elif 可以有多个,三者连用也只会执行其中一个子代码块</span></span><br><span class="line">eg:</span><br><span class="line">    score = <span class="number">79</span></span><br><span class="line">    <span class="keyword">if</span> score &gt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt; <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt; <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;一般&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score <span class="number">78</span>&gt; <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;及格&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;挂科重修&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/GYHxdd.png" alt="GYHxdd"></p>
<h4 id="3-2-if嵌套使用"><a href="#3-2-if嵌套使用" class="headerlink" title="3.2 if嵌套使用"></a>3.2 if嵌套使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>:</span><br><span class="line">	条件 <span class="number">1</span> 成立执行的代码</span><br><span class="line">	<span class="keyword">if</span> 条件 <span class="number">2</span>:</span><br><span class="line">		条件 <span class="number">2</span> 成立执行的代码</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">26</span></span><br><span class="line">  height = <span class="number">165</span></span><br><span class="line">  weight = <span class="number">99</span></span><br><span class="line">  is_beautiful = <span class="literal">True</span></span><br><span class="line">  is_success = <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> age &lt; <span class="number">28</span> <span class="keyword">and</span> height &gt; <span class="number">160</span> <span class="keyword">and</span> weight &lt; <span class="number">100</span> <span class="keyword">and</span> is_beautiful:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;小姐姐能否加个微信&#x27;</span>)</span><br><span class="line">      <span class="comment"># 判断小姐姐是否会给微信</span></span><br><span class="line">      <span class="keyword">if</span> is_success:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;吃饭 看电影 天黑了...&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;去你妹的 变态!&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;可惜了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/voz9xF.png" alt="voz9xF"></p>
<h4 id="3-3-小练习"><a href="#3-3-小练习" class="headerlink" title="3.3 小练习"></a>3.3 小练习</h4><p>1.编写一个用户登录功能 ,用户名是jason, 密码是123,用户如果输入正确则打印来宾三位,否则登录失败</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义默认用户名和密码</span></span><br><span class="line">NAME = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">PASSWD = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户输入的用户名和密码传给username和passwd</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line">passwd = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断用户输入的用户名和密码是否和定义默认的用户名密码相同</span></span><br><span class="line"><span class="keyword">if</span> NAME == username <span class="keyword">and</span> PASSWD == passwd:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;来宾三位&quot;</span>)  <span class="comment"># 如果相同,则打印来宾三位</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)  <span class="comment"># 其中一个不同都会显示登录失败</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ma5Orf.png" alt="Ma5Orf"></p>
<p>2.根据用户名的不同打印不同的用户身份<br>jason管理员 tony安保人员 kevin财务 jack销售 其他普通员工</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将用户输入的用户名给变量username,然后判断</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&quot;jason&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;管理员&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;tony&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;安保人员&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;kevin&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;财务&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> username == <span class="string">&#x27;jack&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;销售&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通员工&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/eqPxPs.png" alt="eqPxPs"></p>
<h3 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4. 循环结构"></a>4. 循环结构</h3><h4 id="4-1-while循环"><a href="#4-1-while循环" class="headerlink" title="4.1 while循环"></a>4.1 while循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">  <span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立之后循环执行的子代码</span><br><span class="line">eg:</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">      username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">      password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">      <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">      <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line"> <span class="comment"># 含义:这段代码执行后,当用户输入用户名密码进行判断是否是jason和123,不管用户输入对错与否,都会一直执行下去,因为True一直成立,是个死循环</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/7bpWCy.png" alt="7bpWCy"></p>
<h4 id="4-2-while-break"><a href="#4-2-while-break" class="headerlink" title="4.2 while-break"></a>4.2 while-break</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>:结束本层循环</span><br><span class="line">eg:</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">     username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">     password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">     <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">     <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">         <span class="keyword">break</span>  <span class="comment"># 直接跳出本层循环</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="4-3-全局标志位"><a href="#4-3-全局标志位" class="headerlink" title="4.3 全局标志位"></a>4.3 全局标志位</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标志位的使用</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="comment"># 1.获取用户输入的用户名和密码</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.判断用户名和密码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;jason&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;来宾三位&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> flag:</span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的指令&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="comment"># 判断用户是否想退出</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在执行您的指令:%s&#x27;</span> % cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去你妹的 没钱滚蛋&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-练习"><a href="#5-练习" class="headerlink" title="5. 练习"></a>5. 练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">猜年龄的游戏</span><br><span class="line">	<span class="number">1.</span>要求<span class="number">1</span></span><br><span class="line">    	用户可以有三次猜错的机会 如果过程中猜对了直接退出</span><br><span class="line">  <span class="number">2.</span>要求<span class="number">2</span></span><br><span class="line">    	三次机会用完之后提示用户是否继续尝试 如果是则再给三次机会 如果否则直接结束</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据类型转换提示</span></span><br><span class="line">		age = <span class="built_in">input</span>(<span class="string">&#x27;age&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    real_age = <span class="number">18</span></span><br><span class="line">    <span class="comment"># 将字符串的数字转换成整型</span></span><br><span class="line">    age = <span class="built_in">int</span>(age)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求1:</span></span><br><span class="line">AGE = <span class="number">26</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你猜的年龄:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age == AGE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜对了,年龄是%s&quot;</span> % age)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要求2:</span></span><br><span class="line">AGE = <span class="number">26</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你猜的年龄: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age == AGE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜对了,年龄是%s&quot;</span> % age)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            again = <span class="built_in">input</span>(<span class="string">&quot;已经答错三次,是否继续三次Y/N: &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> again == <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> again == <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入正确的字符&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;答错了请继续!&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础-02</title>
    <url>/43f82467.html</url>
    <content><![CDATA[<h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><h3 id="1-1-字符串str"><a href="#1-1-字符串str" class="headerlink" title="1.1 字符串str"></a>1.1 字符串str</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:主要记录描述性质的数据，例如姓名、地址、邮箱......</span><br><span class="line"></span><br><span class="line">定义:</span><br><span class="line">  方式<span class="number">1</span>:使用单引号,eg:</span><br><span class="line">      name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  方式<span class="number">2</span>:使用双引号,eg:</span><br><span class="line">      name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">  方式<span class="number">3</span>:使用三引号,eg:</span><br><span class="line">      name = <span class="string">&#x27;&#x27;&#x27;hello&#x27;&#x27;&#x27;</span></span><br><span class="line">  方式<span class="number">4</span>:使用三引号,eg:</span><br><span class="line">      name = <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line">      </span><br><span class="line">  类型查看:</span><br><span class="line">    str_a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br><span class="line">    结果:&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">      </span></span><br><span class="line"><span class="class">  三引号说明:</span></span><br><span class="line">    <span class="number">1.</span>两个三引号都支持换行</span><br><span class="line">    <span class="number">2.</span>定义字符的多种方式原因</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&#x27;鲁迅说：&#x27;</span>我没说过这句话<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 这语句就是错误的了</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;鲁迅说：&quot;我没说过这句话&quot;&#x27;</span>)  <span class="comment"># 这条语句就正确了</span></span><br><span class="line">    <span class="number">3.</span><span class="built_in">print</span>(<span class="string">&#x27;It\&#x27;s a dog&#x27;</span>)  <span class="comment"># 可以用\ 进行转义为本身含义</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-列表list"><a href="#1-2-列表list" class="headerlink" title="1.2 列表list"></a>1.2 列表list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:能够存储多个数据并且可以方便的取出任意个数</span><br><span class="line">特征:中括号括起来,内部可以存放多个元素,元素与元素之间用逗号隔开,元素可以是任意类型</span><br><span class="line">eg:</span><br><span class="line">  first_list = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">123</span>, <span class="number">12344</span>, [<span class="string">&quot;test&quot;</span>, <span class="number">555</span>, [<span class="string">&quot;two&quot;</span>, <span class="string">&quot;results&quot;</span>, <span class="number">777</span>]]]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(first_list))    <span class="comment"># 结果:&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">索引取值(从<span class="number">0</span>开始的连续数字)</span><br><span class="line">  <span class="built_in">print</span>(first_list[<span class="number">1</span>])  <span class="comment"># world</span></span><br><span class="line">  <span class="built_in">print</span>(first_list[<span class="number">3</span>])  <span class="comment"># 12344</span></span><br><span class="line">  </span><br><span class="line">取值练习:</span><br><span class="line">  取例中的results</span><br><span class="line">  方法一:逐一提取</span><br><span class="line">    l1 = first_list[<span class="number">4</span>]  <span class="comment"># [&#x27;test&#x27;, 555, [&#x27;two&#x27;, &#x27;results&#x27;, 777]]</span></span><br><span class="line">    l2 = l1[<span class="number">2</span>]  <span class="comment"># [&#x27;two&#x27;, &#x27;results&#x27;, 777]</span></span><br><span class="line">    l3 = l2[<span class="number">1</span>]  <span class="comment"># results</span></span><br><span class="line">    <span class="built_in">print</span>(l3)</span><br><span class="line">  方法二:熟悉之后一步到位</span><br><span class="line">    <span class="built_in">print</span>(first_list[<span class="number">4</span>][<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h3 id="1-3-字典dict"><a href="#1-3-字典dict" class="headerlink" title="1.3 字典dict"></a>1.3 字典dict</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:能够更加精准的存储数据</span><br><span class="line">定义:大括号括起来,内存可以存放多个元素,元素与元素之间逗号隔开,元素是K:V键值对的形式</span><br><span class="line">    K是对数据的描述,V是所存的数据</span><br><span class="line">eg:</span><br><span class="line">  first_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>: <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(first_dict))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">取值:</span><br><span class="line">  <span class="number">1.</span>字典无法索取值</span><br><span class="line">  <span class="number">2.</span>字典取值需要借助K</span><br><span class="line">  eg:</span><br><span class="line">    <span class="built_in">print</span>(first_dict[<span class="string">&#x27;username&#x27;</span>])  <span class="comment"># root</span></span><br><span class="line">    </span><br><span class="line">取值练习:</span><br><span class="line">info = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;addr&#x27;</span>: [<span class="string">&#x27;安徽&#x27;</span>, <span class="string">&#x27;芜湖&#x27;</span>, &#123;<span class="string">&#x27;国家&#x27;</span>: <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;编号&#x27;</span>: [<span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;中国最牛逼&#x27;</span>]&#125;]&#125;</span><br><span class="line">方式一:</span><br><span class="line">    d1 = info[<span class="string">&#x27;addr&#x27;</span>]  <span class="comment"># &#x27;安徽&#x27;, &#x27;芜湖&#x27;, &#123;&#x27;国家&#x27;: &#x27;中国&#x27;, &#x27;编号&#x27;: [11, 22, &#x27;中国最牛逼&#x27;]&#125;]</span></span><br><span class="line">  	d2 = d1[<span class="number">2</span>]  <span class="comment"># &#123;&#x27;国家&#x27;: &#x27;中国&#x27;, &#x27;编号&#x27;: [11, 22, &#x27;中国最牛逼&#x27;]&#125;</span></span><br><span class="line">    d3 = d2[<span class="string">&#x27;编号&#x27;</span>]  <span class="comment"># [11, 22, &#x27;中国最牛逼&#x27;]</span></span><br><span class="line">    d4 = d3[<span class="number">2</span>]  <span class="comment"># 中国最牛逼</span></span><br><span class="line">方式二:</span><br><span class="line">		<span class="built_in">print</span>(info[<span class="string">&#x27;addr&#x27;</span>][<span class="number">2</span>][<span class="string">&#x27;编号&#x27;</span>][<span class="number">2</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-4-布尔值-bool"><a href="#1-4-布尔值-bool" class="headerlink" title="1.4 布尔值 bool"></a>1.4 布尔值 bool</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:用于判断事物的对错</span><br><span class="line">定义:</span><br><span class="line">  <span class="literal">True</span>  <span class="comment"># 正确的</span></span><br><span class="line">  <span class="literal">False</span>  <span class="comment"># 错误的</span></span><br><span class="line">  <span class="comment">#ps: 首字母大写</span></span><br><span class="line">  </span><br><span class="line">布尔变量的命名一般采用<span class="keyword">is</span>开头,eg:</span><br><span class="line">  is_right = <span class="literal">True</span></span><br><span class="line">  is_delete = <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(is_right))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line">数据类型转换为布尔值的注意点:</span><br><span class="line">  <span class="number">0</span>, <span class="literal">None</span>, <span class="string">&#x27;&#x27;</span>, [], &#123;&#125;</span><br><span class="line">以上转换为布尔值的<span class="literal">False</span>,其他情况都是<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">其他:生活中数据存储的销户,很大概率并没有删除用户的数据,而是通过数据的唯一标识进行过滤掉,从而对外显示已删除</span><br></pre></td></tr></table></figure>

<h3 id="1-5-元组tuple"><a href="#1-5-元组tuple" class="headerlink" title="1.5 元组tuple"></a>1.5 元组tuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:与列表几乎一致,内部可以存放多个元素(可以看成是不可变的列表)</span><br><span class="line">定义:用小括号括起来,存放多个元素,元素与元素之间逗号隔开,元素不支持修改</span><br><span class="line">eg:</span><br><span class="line">  t = (<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>)  </span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(t))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-集合set"><a href="#1-6-集合set" class="headerlink" title="1.6 集合set"></a>1.6 集合set</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:去重和关系运算</span><br><span class="line">定义:用大括号括起来,内存可以存放多个元素,元素与元素之间逗号隔开,元素不是K:V键值对</span><br><span class="line">eg:</span><br><span class="line">  s = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line">定义空集合</span><br><span class="line">  s = <span class="built_in">set</span>()</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line">  </span><br><span class="line">默认情况下使用&#123;&#125;是空字典</span><br><span class="line">  s = &#123;&#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、输入与输出"><a href="#2、输入与输出" class="headerlink" title="2、输入与输出"></a>2、输入与输出</h2><h3 id="2-1-输入"><a href="#2-1-输入" class="headerlink" title="2.1 输入"></a>2.1 输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入:程序接收用户输入的数据功能,使用内置函数<span class="built_in">input</span>()</span><br><span class="line">  <span class="built_in">input</span>()</span><br><span class="line">  	<span class="number">1.</span>接收到的任意输入的数据都会处理为字符串类型</span><br><span class="line">    <span class="number">2.</span>程序执行到<span class="built_in">input</span>时会等待输入数据才开始进行下一步操作</span><br><span class="line">eg: </span><br><span class="line">  username = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line">  age = <span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(username))		<span class="comment"># 查看username的数据类型</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">type</span>(age))  <span class="comment"># 查看age的数据类型</span></span><br><span class="line">  <span class="built_in">print</span>(username, age)  <span class="comment"># 将输入的数据进行打印</span></span><br><span class="line">  </span><br><span class="line">res:</span><br><span class="line">  请输入你的名字:tom  <span class="comment"># 输入的tom</span></span><br><span class="line">  请输入你的年龄:<span class="number">18</span>   <span class="comment"># 输入的18</span></span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;  # 显示<span class="title">username</span>的数据类型为<span class="title">str</span></span></span><br><span class="line"><span class="class">  &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;  # 显示<span class="title">age</span>的数据类型也是<span class="title">str</span></span></span><br><span class="line"><span class="class">  <span class="title">tom</span> 18  # 输出结果与输入结果一致</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-输出"><a href="#2-2-输出" class="headerlink" title="2.2 输出"></a>2.2 输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出:程序输出内容给用户,内置函数<span class="built_in">print</span>()</span><br><span class="line">  <span class="built_in">print</span>()</span><br><span class="line">    <span class="number">1.</span>括号内可以使用逗号将多个元素一起打印</span><br><span class="line">    <span class="number">2.</span>自带end参数控制打印的排版</span><br><span class="line">    	eg:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>, end=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">      res:</span><br><span class="line">        test&amp;<span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-格式化输出"><a href="#2-3-格式化输出" class="headerlink" title="2.3 格式化输出"></a>2.3 格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式化输出:将字符串中某些内容替换掉再输出就是格式化输出</span><br><span class="line"><span class="number">1.</span>先使用占位符 %s</span><br><span class="line"><span class="number">2.</span>再使用%按照位置进行替换</span><br><span class="line">eg:</span><br><span class="line">  res = <span class="string">&#x27;亲爱的%s你好！你%s月的话费是%s，余额是%s&#x27;</span></span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;jason&#x27;</span>, <span class="number">11</span>, <span class="number">100</span>, <span class="number">999</span>))</span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;tony&#x27;</span>, <span class="number">11</span>, <span class="number">200</span>, -<span class="number">100</span>))</span><br><span class="line">	<span class="built_in">print</span>(res % (<span class="string">&#x27;kevin&#x27;</span>, <span class="number">11</span>, <span class="number">500</span>, -<span class="number">999</span>))</span><br><span class="line">res:</span><br><span class="line">  亲爱的jason你好！你<span class="number">11</span>月的话费是<span class="number">100</span>，余额是<span class="number">999</span></span><br><span class="line">	亲爱的tony你好！你<span class="number">11</span>月的话费是<span class="number">200</span>，余额是-<span class="number">100</span></span><br><span class="line">	亲爱的kevin你好！你<span class="number">11</span>月的话费是<span class="number">500</span>，余额是-<span class="number">999</span></span><br><span class="line">  </span><br><span class="line">%d占位符只能给数字占位</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%08d&#x27;</span> % <span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%08d&#x27;</span> % <span class="number">6666666666666</span>)</span><br><span class="line"></span><br><span class="line">res:</span><br><span class="line">  00000123</span><br><span class="line">  <span class="number">6666666666666</span></span><br><span class="line"><span class="comment"># 08导致输出结果会保留8位,不足的用0补齐,超过的直接显示源数据</span></span><br></pre></td></tr></table></figure>

<h2 id="3、基本运算符"><a href="#3、基本运算符" class="headerlink" title="3、基本运算符"></a>3、基本运算符</h2><h3 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h3><p>a = 10 , b = 20</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">两个对象相加</td>
<td>a + b 值为 30</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">得到负数或是一个数减去另一个数</td>
<td>a - b 值为 -10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 值为 200</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">x除以y</td>
<td>b / a 值为  2</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>
<td>9 // 2 值为 4</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模,返回除法的余数</td>
<td>b % a 输出结果 0</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">返回x的y次幂</td>
<td>2 ** 3 值为8</td>
</tr>
</tbody></table>
<h3 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2 比较运算符"></a>3.2 比较运算符</h3><table>
<thead>
<tr>
<th align="center">比较运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td>等于,两边相等为True,否则返回False</td>
</tr>
<tr>
<td align="center">!=</td>
<td>不等于,两边不相等为True,否则返回False</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td>大于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>小于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h3 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h3><h4 id="3-3-1-增量赋值"><a href="#3-3-1-增量赋值" class="headerlink" title="3.3.1 增量赋值"></a>3.3.1 增量赋值</h4><table>
<thead>
<tr>
<th>赋值运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单赋值运算</td>
<td>a = 10</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算</td>
<td>a +=1 相当于a = a+1</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算</td>
<td>a -= 1 相当于a = a-1</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算</td>
<td></td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算</td>
<td></td>
</tr>
<tr>
<td>//=</td>
<td>取整赋值运算</td>
<td></td>
</tr>
<tr>
<td>%=</td>
<td>取余赋值运算</td>
<td></td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算</td>
<td></td>
</tr>
</tbody></table>
<h4 id="3-3-2-链式赋值"><a href="#3-3-2-链式赋值" class="headerlink" title="3.3.2 链式赋值"></a>3.3.2 链式赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以把同一个值同时赋值个多个变量名</span><br><span class="line">eg:</span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  b = a</span><br><span class="line">  c = b</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 链式赋值可以一行解决</span></span><br><span class="line">  a = b = c = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-交叉赋值"><a href="#3-3-3-交叉赋值" class="headerlink" title="3.3.3 交叉赋值"></a>3.3.3 交叉赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg: </span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  b = <span class="number">22</span></span><br><span class="line">  </span><br><span class="line">  需要a和b交换</span><br><span class="line">  方式<span class="number">1</span>:</span><br><span class="line"> 		tmp = a  <span class="comment"># 引入第三变量暂存a的值</span></span><br><span class="line">		a = b  <span class="comment"># 变量a指向变量b,此时a的值为22</span></span><br><span class="line">		b = tmp  <span class="comment"># 变量b指向tmp,此时b的值就是10，完成互换吧</span></span><br><span class="line">		<span class="built_in">print</span>(a, b)    </span><br><span class="line">  方式<span class="number">2</span>:</span><br><span class="line">    a, b = <span class="number">22</span>, <span class="number">10</span>  <span class="comment"># 简单粗暴</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-解压赋值"><a href="#3-3-4-解压赋值" class="headerlink" title="3.3.4 解压赋值"></a>3.3.4 解压赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将列表中的多个值取出来依次赋值给多个变量名</span><br><span class="line">eg:</span><br><span class="line">  eg_list = [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">  a = eg_list[<span class="number">0</span>]</span><br><span class="line">  b = eg_list[<span class="number">1</span>]</span><br><span class="line">  c = eg_list[<span class="number">2</span>]</span><br><span class="line">  d = eg_list[<span class="number">3</span>]</span><br><span class="line">  <span class="built_in">print</span>(a, b, c, d,)  <span class="comment"># 输出为12 13 14 15</span></span><br><span class="line">  </span><br><span class="line">  解压赋值可以这样写:</span><br><span class="line">    a, b, c, d = eg_list</span><br><span class="line">    </span><br><span class="line">  解压赋值注意事项:</span><br><span class="line">    <span class="number">1.</span>等号左边的变量名格式化必须与右面包含的格式相同</span><br><span class="line">    <span class="number">2.</span>可以使用*_打破上述规则</span><br><span class="line">      eg:</span><br><span class="line">        a, *_, d = eg_list</span><br><span class="line">        <span class="built_in">print</span>(a, _, b)  <span class="comment"># 结果为 12 [13, 14] 15</span></span><br><span class="line">     说明:</span><br><span class="line">      * 可以接收多余的元素,组成列表赋值给后面的变量名</span><br><span class="line">      _ 作为单独变量名时,通常表达指向的值无用</span><br></pre></td></tr></table></figure>

<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在python逻辑运算符就三个</span><br><span class="line"><span class="keyword">and</span>	与:</span><br><span class="line">	用于连接多个条件并且多个条件必须都成立才可以</span><br><span class="line"><span class="keyword">or</span>	或:</span><br><span class="line">	用于连接多个条件并且多个条件只要有一个成立即可</span><br><span class="line"><span class="keyword">not</span> 非:</span><br><span class="line">	取反</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:三个连接符在混合使用的时候是有优先级的,但是我们在编写的时候应该人为的规定好优先级,()优先级最高</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-成员运算"><a href="#3-5-成员运算" class="headerlink" title="3.5 成员运算"></a>3.5 成员运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义:判断某个个体在不在某个群体内</span><br><span class="line">关键字: </span><br><span class="line">  <span class="keyword">in</span>  			(在)</span><br><span class="line">  <span class="keyword">not</span> <span class="keyword">in</span>    (不在)</span><br><span class="line">eg:</span><br><span class="line">   name_list = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要查询的学生姓名&gt;&gt;&gt;:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name <span class="keyword">in</span> name_list)</span><br><span class="line">    <span class="built_in">print</span>(name <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br><span class="line">    <span class="comment"># 最终返回的是True或者False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#字典默认暴露给外界的只有K</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;jason&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;)  <span class="comment"># False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-身份运算"><a href="#3-6-身份运算" class="headerlink" title="3.6 身份运算"></a>3.6 身份运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义:判断两个数据 值和内存地址是否相等</span><br><span class="line">符号:</span><br><span class="line">  ==  (只判断值)</span><br><span class="line">  <span class="keyword">is</span>  (判断内存地址)</span><br><span class="line">eg:</span><br><span class="line">    s1 = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    s2 = [<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jackson&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(s1 == s2)  <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(s1),<span class="built_in">id</span>(s2))  <span class="comment"># 查看相当于内存地址的数字</span></span><br><span class="line">    <span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)  <span class="comment"># False</span></span><br><span class="line">结论:</span><br><span class="line">  值相等内存地址不一定相等</span><br><span class="line">  内存地址相等值一定相等</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础-01</title>
    <url>/daf175dd.html</url>
    <content><![CDATA[<h2 id="1、Pycharm基本使用"><a href="#1、Pycharm基本使用" class="headerlink" title="1、Pycharm基本使用"></a>1、Pycharm基本使用</h2><h3 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h3><span id="more"></span>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Fg5CT2.png" alt="Fg5CT2"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/koHl29.png" alt="koHl29"></p>
<h3 id="1-2-主题设置"><a href="#1-2-主题设置" class="headerlink" title="1.2 主题设置"></a>1.2 主题设置</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Yr8VSa.png" alt="Yr8VSa"></p>
<h3 id="1-3-Pycharm切换解释器"><a href="#1-3-Pycharm切换解释器" class="headerlink" title="1.3 Pycharm切换解释器"></a>1.3 Pycharm切换解释器</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/xy5MbY.png" alt="xy5MbY"></p>
<h3 id="1-4-调整字体"><a href="#1-4-调整字体" class="headerlink" title="1.4 调整字体"></a>1.4 调整字体</h3><p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/kBm63I.png" alt="kBm63I"></p>
<h3 id="1-5-运行python脚本文件"><a href="#1-5-运行python脚本文件" class="headerlink" title="1.5 运行python脚本文件"></a>1.5 运行python脚本文件</h3><p>鼠标右键到项目目录之后可以创建文件夹与文件，在代码空白处右键选择如下的Run即可运行python脚本</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dI0FCk.png" alt="dI0FCk"></p>
<h2 id="2、Python的注释语法"><a href="#2、Python的注释语法" class="headerlink" title="2、Python的注释语法"></a>2、Python的注释语法</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;注释是代码之母&quot;&quot;&quot;</span></span><br><span class="line">注释：对代码的解释和说明，目的是为了让人们能够轻松的了解代码，注释不参与持续的运行</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用注释"><a href="#2-2-使用注释" class="headerlink" title="2.2 使用注释"></a>2.2 使用注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方式一:使用井号</span><br><span class="line">  <span class="comment"># 这是一行注释</span></span><br><span class="line">方式二:使用三引号(单引号和双引号)</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  这是多行注释</span></span><br><span class="line"><span class="string">  这是多行注释</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.3 Pycharm注释快捷键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Windows： ctrl + ?</span><br><span class="line">Mac:      command + ?</span><br><span class="line">选中多行代码之后执行快捷键就会被一起注释</span><br></pre></td></tr></table></figure>

<h2 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h2><h3 id="3-1-什么是变量"><a href="#3-1-什么是变量" class="headerlink" title="3.1 什么是变量"></a>3.1 什么是变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量即变化的量，用于记录事物的某种状态，是模仿人类事物记忆能力</span><br></pre></td></tr></table></figure>

<h3 id="3-2-使用变量"><a href="#3-2-使用变量" class="headerlink" title="3.2 使用变量"></a>3.2 使用变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">日常生活种:</span><br><span class="line">  姓名:xxx</span><br><span class="line">  年龄:<span class="number">28</span></span><br><span class="line">  爱好:学习</span><br><span class="line">程序中:</span><br><span class="line">  username = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  age      = <span class="number">18</span></span><br><span class="line">  hobby    = <span class="string">&#x27;music&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-语法格式"><a href="#3-3-语法格式" class="headerlink" title="3.3 语法格式"></a>3.3 语法格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">变量名  赋值号 变量值</span><br></pre></td></tr></table></figure>

<h3 id="3-4-变量三要素"><a href="#3-4-变量三要素" class="headerlink" title="3.4 变量三要素"></a>3.4 变量三要素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>变量的值 </span><br><span class="line"><span class="number">2.</span>变量的内存地址</span><br><span class="line"><span class="number">3.</span>变量的数据类型</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)         <span class="comment"># 变量值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(name))     <span class="comment"># 返回一串数字 相当于是内存地址编号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))   <span class="comment"># 返回数据类型  &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/I6iPWT.png" alt="I6iPWT"></p>
<h3 id="3-5-底层原理"><a href="#3-5-底层原理" class="headerlink" title="3.5 底层原理"></a>3.5 底层原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line">  age = <span class="number">18</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  遇到赋值号先看符号右边，再看到左边</span></span><br><span class="line"><span class="string">  1.在内存中申请到了一块内存空间来存储18这个数字</span></span><br><span class="line"><span class="string">  2.将18所在的内存空间地址指向绑定给变量名age</span></span><br><span class="line"><span class="string">  3.后续如果要访问18可以直接通过访问变量age</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/gyg2Ck.png" alt="gyg2Ck"></p>
<h3 id="3-6-Python底层优化"><a href="#3-6-Python底层优化" class="headerlink" title="3.6 Python底层优化"></a>3.6 Python底层优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当值数据量很小的时候 如果有多个变量名需要使用 那么会指向同一块地址</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一个变量名只能指向一个内存地址</span></span><br><span class="line"><span class="string">一个内存地址可以有多个变量名指向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、常量"><a href="#4、常量" class="headerlink" title="4、常量"></a>4、常量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">常量:主要记录一些不变的状态</span><br><span class="line">  </span><br><span class="line">在python中没有真正意义上的常量 我们墨守成规的将全大写的变量看成是常量</span><br><span class="line">	HOST = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment"># 一般情况下在配置文件中使用较多</span></span><br><span class="line">在其他编程语言中是存在真正意义上的常量 定义了就无法修改</span><br><span class="line"><span class="comment"># JavaScript代码</span></span><br><span class="line">	const pi = <span class="number">3.14</span>  <span class="comment"># 定义常量</span></span><br><span class="line">    pi = <span class="number">4</span>  <span class="comment"># 不支持修改</span></span><br><span class="line"><span class="comment"># golang常量声明</span></span><br><span class="line">const MAX = <span class="number">1024</span></span><br><span class="line">const (</span><br><span class="line">  a = iota</span><br><span class="line">  b = iota</span><br><span class="line">  c = iota</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="5、垃圾回收机制"><a href="#5、垃圾回收机制" class="headerlink" title="5、垃圾回收机制"></a>5、垃圾回收机制</h2><h3 id="5-1-垃圾数据的定义"><a href="#5-1-垃圾数据的定义" class="headerlink" title="5.1 垃圾数据的定义"></a>5.1 垃圾数据的定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在内存中没有任何变量名指向的数据</span><br></pre></td></tr></table></figure>

<h3 id="5-2-回收方案"><a href="#5-2-回收方案" class="headerlink" title="5.2 回收方案"></a>5.2 回收方案</h3><h4 id="5-2-1-引用记数"><a href="#5-2-1-引用记数" class="headerlink" title="5.2.1 引用记数"></a>5.2.1 引用记数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内存中变量值身上有几个变量名绑定引用计数就是几,只要不为<span class="number">0</span>就不是垃圾</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-标记清除"><a href="#5-2-2-标记清除" class="headerlink" title="5.2.2 标记清除"></a>5.2.2 标记清除</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当内存即将沾满的时候,python会自动暂停程序的执行,从头到尾将内存中数据进行扫描,并打上标记,之后一次性清除掉标记的数据</span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-分代回收"><a href="#5-2-3-分代回收" class="headerlink" title="5.2.3 分代回收"></a>5.2.3 分代回收</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">会将数据的监管分为三个层次,随着层级的下降监督的频率降低</span><br><span class="line">用时间换空间</span><br></pre></td></tr></table></figure>

<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/CR2fkx.png" alt="CR2fkx"></p>
<h2 id="6、数据类型"><a href="#6、数据类型" class="headerlink" title="6、数据类型"></a>6、数据类型</h2><h3 id="6-1-什么是数据类型"><a href="#6-1-什么是数据类型" class="headerlink" title="6.1 什么是数据类型"></a>6.1 什么是数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">存储数据的方式和表现形式有很多种，例如文本文件，视频文件，音频文件......</span><br></pre></td></tr></table></figure>

<h3 id="6-2-int类型"><a href="#6-2-int类型" class="headerlink" title="6.2 int类型"></a>6.2 int类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int类型:整数类型,长度与其他语言对比无限</span></span><br><span class="line">作用:可以记录人的年龄，人数......</span><br><span class="line">eg:</span><br><span class="line">  age = <span class="number">18</span>  <span class="comment"># 直接些整数就是整型</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-float类型"><a href="#6-3-float类型" class="headerlink" title="6.3 float类型"></a>6.3 float类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># float可以理解为小数</span></span><br><span class="line">作用:记录人的体重，薪资......</span><br><span class="line">eg:</span><br><span class="line">  salary = <span class="number">3.14</span>  <span class="comment"># 直接写小数就是浮点型</span></span><br></pre></td></tr></table></figure>

<h2 id="7、代码规范"><a href="#7、代码规范" class="headerlink" title="7、代码规范"></a>7、代码规范</h2><h3 id="7-1-注释规范"><a href="#7-1-注释规范" class="headerlink" title="7.1 注释规范"></a>7.1 注释规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.警号与注释文本之间一定要有一个空格</span></span><br><span class="line"><span class="string">2.如果单行注释跟在了一行代码的后面 需要先空两个再写</span></span><br><span class="line"><span class="string">pycharm也提供自动化格式代码的功能 </span></span><br><span class="line"><span class="string">code </span></span><br><span class="line"><span class="string">reformat code</span></span><br><span class="line"><span class="string">Windows快捷键：ctrl + alt + l</span></span><br><span class="line"><span class="string">Mac快捷键： option + command + L </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">python代码编写规范  &gt;&gt;&gt;: PEP8规范</span><br><span class="line"><span class="comment"># 如何快速掌握 借助于pycharm的自动化提示 前后对比 每天记忆</span></span><br></pre></td></tr></table></figure>



<h3 id="7-2-命名规范"><a href="#7-2-命名规范" class="headerlink" title="7.2 命名规范"></a>7.2 命名规范</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名规范</span></span><br><span class="line">    <span class="number">1.</span>变量名只能由数字、字母、下划线任意组合</span><br><span class="line">    	user@name(不对)、_(可以)、pwd_123_aaa(可以)</span><br><span class="line">    <span class="number">2.</span>变量名不能以数字开头，下划线建议不要开头因为有特殊含义</span><br><span class="line">    <span class="number">3.</span>变量名不能与关键字冲突</span><br><span class="line">    <span class="number">4.</span>变量名的命名一定要做到见名知意(重要)</span><br><span class="line">    	<span class="string">&#x27;&#x27;&#x27;变量名见名知意是核心 无论变量多长&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 命名风格</span></span><br><span class="line">	<span class="number">1.</span>驼峰体  </span><br><span class="line">    	大驼峰  <span class="comment"># 所有单词首字母大写</span></span><br><span class="line">        	UserNameFromDb</span><br><span class="line">        小驼峰  <span class="comment"># 第一首字母小写其余首字母大写</span></span><br><span class="line">        	userNameFromDB</span><br><span class="line">        <span class="string">&quot;&quot;&quot;JavaScript推荐使用驼峰体&quot;&quot;&quot;</span></span><br><span class="line">    <span class="number">2.</span>下划线  <span class="comment"># 单词与单词之间下划线隔开</span></span><br><span class="line">    	user_name_from_db </span><br><span class="line">        <span class="string">&quot;&quot;&quot;python推荐使用下划线&quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 好东西！！！输入中文即可给出对应英文命名</span></span><br><span class="line">https://unbug.github.io/codelf/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python解释器与Pycharm</title>
    <url>/c1fd5357.html</url>
    <content><![CDATA[<h1 id="1、Python解释器安装"><a href="#1、Python解释器安装" class="headerlink" title="1、Python解释器安装"></a>1、Python解释器安装</h1><h2 id="1-1-Python下载"><a href="#1-1-Python下载" class="headerlink" title="1.1 Python下载"></a>1.1 Python下载</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网，下载速度慢</span></span><br><span class="line">https://www.python.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#国内下载</span></span><br><span class="line">https://npm.taobao.org/mirrors/python</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<ol>
<li>找到下载位置并点击</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/NoHxoM.png" alt="NoHxoM"></p>
<ol start="2">
<li><p>选择对应的版本以及操作系统进行下载</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/enrDoA.png" alt="enrDoA"></p>
</li>
</ol>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Se7Gmo.png" alt="Se7Gmo"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/J0BKed.png" alt="J0BKed"></p>
<h2 id="1-2-Python安装"><a href="#1-2-Python安装" class="headerlink" title="1.2 Python安装"></a>1.2 Python安装</h2><h3 id="1-2-1-Mac安装"><a href="#1-2-1-Mac安装" class="headerlink" title="1.2.1 Mac安装"></a>1.2.1 Mac安装</h3><p>根据提示下载的安装包如下：</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/LdenzD.png" alt="LdenzD"></p>
<p>双击打开之后直接继续即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Dl1wXm.png" alt="Dl1wXm"></p>
<h3 id="1-2-2-Windows安装"><a href="#1-2-2-Windows安装" class="headerlink" title="1.2.2 Windows安装"></a>1.2.2 Windows安装</h3><p>第一个红框选择自定义安装，可选择python安装路径。第二个红框是自动配置环境变量</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/tjeIhK.png" alt="tjeIhK"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/XhyZ3E.png" alt="XhyZ3E"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3YqU60.png" alt="d"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ja6EtC.png" alt="Ja6EtC"></p>
<p>环境变量设置</p>
<p>此时还无法直接使用python</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/A717xq.png" alt="A717xq"></p>
<p>此电脑右键，选择属性，选择高级系统设置，选择环境变量，选择Path，编辑，再变量最后使用英文状态下的 ; 进行结尾，将Python安装的路径复制出来，粘贴到最后然后选择确定。最后新打开命令提示符输入python即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dhoaNQ.png" alt="dhoaNQ"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/DGvRCE.png" alt="DGvRCE"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/KZmLEE.png" alt="KZmLEE"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/aOntw1.png" alt="aOntw1"></p>
<h3 id="1-2-3-多版本"><a href="#1-2-3-多版本" class="headerlink" title="1.2.3 多版本"></a>1.2.3 多版本</h3><ol>
<li><p>Mac系统下</p>
<p>可以使用pyenv进行多版本控制</p>
</li>
<li><p>Windows</p>
</li>
</ol>
<p>python2.7安装：</p>
<p>下载加速地址：<a href="https://npm.taobao.org/mirrors/python">https://npm.taobao.org/mirrors/python</a></p>
<p>下载完成后继续将Python2.7的路径放入到Path的最后，将对应版本的exe改名，最后在终端输入对应版本</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/cBrS1B.png" alt="cBrS1B">     </p>
<p>更对应版本的名称</p>
<p>此时就可以多版本试用</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/Ciyvlb.png" alt="Ciyvlb"></p>
<h1 id="2、Pycharm安装"><a href="#2、Pycharm安装" class="headerlink" title="2、Pycharm安装"></a>2、Pycharm安装</h1><ol>
<li>下载安装</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网</span></span><br><span class="line">https://www.jetbrains.com/pycharm/download/</span><br></pre></td></tr></table></figure>



<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/aJKd3J.png" alt="aJKd3J"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/dag3R6.png" alt="dag3R6"></p>
<p>下载完成后下一步下一步安装即可</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/BJbgci.png" alt="BJbgci"></p>
<ol start="2">
<li><p>2021.3版本破解</p>
<p>无限期试用方法参考：<a href="https://www.macwk.com/article/jetbrains-crack">https://www.macwk.com/article/jetbrains-crack</a></p>
</li>
</ol>
<p>最新版本试用需要登录账号才可以</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3u8VVR.png" alt="3u8VVR"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ddVmoo.png" alt="ddVmoo"></p>
<p>破解：</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/ZEJ0Od.png" alt="ZEJ0Od"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/3kEn2a.png" alt="3kEn2a"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/kdhtq0.png" alt="kdhtq0"></p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/7IwHNz.png" alt="7IwHNz"></p>
<p>使用插件即可重置试用时间</p>
<p><img src="https://klcc-img-1251900471.cos.ap-chengdu.myqcloud.com/img/p1l5h0.png" alt="p1l5h0"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用</title>
    <url>/28cddff3.html</url>
    <content><![CDATA[<h2 id="1、Markdown"><a href="#1、Markdown" class="headerlink" title="1、Markdown"></a>1、Markdown</h2><h3 id="1-1-Typora软件"><a href="#1-1-Typora软件" class="headerlink" title="1.1 Typora软件"></a>1.1 Typora软件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Typora：最好用的Markdown语法编辑器</span></span><br><span class="line"><span class="comment">#官网</span></span><br><span class="line">https://www.typora.io</span><br><span class="line"><span class="comment">#下载地址</span></span><br><span class="line">https://www.typora.io/<span class="comment">#download</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源代码模式快捷键</span></span><br><span class="line">Windows系统 ctrl + /</span><br><span class="line">mac command + /</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="1-2-Markdown基础语法"><a href="#1-2-Markdown基础语法" class="headerlink" title="1.2 Markdown基础语法"></a>1.2 Markdown基础语法</h3><h4 id="1-2-1-生成目录"><a href="#1-2-1-生成目录" class="headerlink" title="1.2.1 生成目录"></a>1.2.1 生成目录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源代码模式下在文档最上方输入以下，就会在文档最上方根据标题生成目录</span></span><br><span class="line">[toc]</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-标题"><a href="#1-2-2-标题" class="headerlink" title="1.2.2 标题"></a>1.2.2 标题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-子标题"><a href="#1-2-3-子标题" class="headerlink" title="1.2.3 子标题"></a>1.2.3 子标题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无序子标题</span></span><br><span class="line">* 子标题<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有序子标题</span></span><br><span class="line"><span class="number">1.</span> 子标题<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源代码模式下上一级与下一级多敲三个空格即可</span></span><br><span class="line"><span class="comment">#Typora内使用Tab键即可</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-4-代码块"><a href="#1-2-4-代码块" class="headerlink" title="1.2.4 代码块"></a>1.2.4 代码块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&quot;\&quot; 是注释</span></span><br><span class="line">\```源码类型</span><br><span class="line">\```</span><br></pre></td></tr></table></figure>


<h4 id="1-2-5-制表"><a href="#1-2-5-制表" class="headerlink" title="1.2.5 制表"></a>1.2.5 制表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用管道符分割,Typora内可以使用如下</span></span><br><span class="line">|user|passwd|hostname|</span><br><span class="line"></span><br><span class="line"><span class="comment">#源码如下</span></span><br><span class="line">| user | passwd | hostname |</span><br><span class="line">| ---- | :------: | -------- |</span><br><span class="line">|root|<span class="number">123456</span>|test1|</span><br><span class="line"><span class="comment">#::这两个代表着表格内文字整体居中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-6-超链接"><a href="#1-2-6-超链接" class="headerlink" title="1.2.6 超链接"></a>1.2.6 超链接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文本超链接</span></span><br><span class="line">[文本](超链接) <span class="comment">#eg: [测试](www.baidu.com)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片超链接，插入图片</span></span><br><span class="line">![图片](超链接) <span class="comment">#此处超链接可以是本地图片地址或者图片的url</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-7-单选框"><a href="#1-2-7-单选框" class="headerlink" title="1.2.7 单选框"></a>1.2.7 单选框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- [ ] 单选框 <span class="comment">#创建完成后可点</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-8-字体"><a href="#1-2-8-字体" class="headerlink" title="1.2.8 字体"></a>1.2.8 字体</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*斜体*</span><br><span class="line">~~删除线~~</span><br><span class="line">~~***倾斜加粗删除线***~~</span><br></pre></td></tr></table></figure>

<h2 id="2、编程与编程语言"><a href="#2、编程与编程语言" class="headerlink" title="2、编程与编程语言"></a>2、编程与编程语言</h2><h3 id="2-1-语言"><a href="#2-1-语言" class="headerlink" title="2.1 语言"></a>2.1 语言</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中文、日文、韩文等等都是人类的语言，语言是为了人与人沟通的媒介</span><br></pre></td></tr></table></figure>



<h3 id="2-2-编程语言"><a href="#2-2-编程语言" class="headerlink" title="2.2 编程语言"></a>2.2 编程语言</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因此编程语言就是人与计算机之间沟通交流的媒介,为了让计算机代替人力无休止的干活</span><br></pre></td></tr></table></figure>



<h3 id="2-3-编程"><a href="#2-3-编程" class="headerlink" title="2.3 编程"></a>2.3 编程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">编程是程序员使用计算机能够读懂的语言<span class="string">&quot;将自己的思维逻辑和想法&quot;</span>写下来的过程</span><br></pre></td></tr></table></figure>



<h2 id="3、计算机基础"><a href="#3、计算机基础" class="headerlink" title="3、计算机基础"></a>3、计算机基础</h2><h3 id="3-1-计算机五大组成部分"><a href="#3-1-计算机五大组成部分" class="headerlink" title="3.1 计算机五大组成部分"></a>3.1 计算机五大组成部分</h3><h4 id="3-1-1-控制器"><a href="#3-1-1-控制器" class="headerlink" title="3.1.1 控制器"></a>3.1.1 控制器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">控制计算机各个硬件的工作</span><br><span class="line"><span class="comment">#相当于人的大脑</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-2-运算器"><a href="#3-1-2-运算器" class="headerlink" title="3.1.2 运算器"></a>3.1.2 运算器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">控制数学运算与逻辑运算</span><br><span class="line">  数学运算:数字相关的运算</span><br><span class="line">  逻辑运算:根据条件判断是否可行</span><br><span class="line"><span class="comment">#相当于人的大脑</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-3-存储设备"><a href="#3-1-3-存储设备" class="headerlink" title="3.1.3 存储设备"></a>3.1.3 存储设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内存:存取数据的速度很快，但是它是基于电工作的，断电后数据会立刻丢失，不能永久保存数据。<span class="comment">#eg:内存条,相当于人的短期记忆，</span></span><br><span class="line">  </span><br><span class="line">外存:存取数据的速度较慢，但是它断电之后数据也不受影响 可以永久保存数据。<span class="comment">#eg:磁带,磁盘,u盘,硬盘,相当于人的长期记忆</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-4-输入设备"><a href="#3-1-4-输入设备" class="headerlink" title="3.1.4 输入设备"></a>3.1.4 输入设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:将外界的数据传递给计算机</span><br><span class="line"><span class="comment">#eg:鼠标,键盘,麦克风</span></span><br><span class="line"><span class="comment">#相当于人的眼睛,嘴巴,耳朵</span></span><br></pre></td></tr></table></figure>



<h4 id="3-1-5-输出设备"><a href="#3-1-5-输出设备" class="headerlink" title="3.1.5 输出设备"></a>3.1.5 输出设备</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:将计算机内部的数据传递给外部</span><br><span class="line"><span class="comment">#eg:显示屏,音响,打印机</span></span><br><span class="line"><span class="comment">#相当于人的嘴巴...</span></span><br></pre></td></tr></table></figure>





<h3 id="3-2-计算机三大核心硬件"><a href="#3-2-计算机三大核心硬件" class="headerlink" title="3.2 计算机三大核心硬件"></a>3.2 计算机三大核心硬件</h3><h4 id="3-2-1-中央处理器"><a href="#3-2-1-中央处理器" class="headerlink" title="3.2.1 中央处理器"></a>3.2.1 中央处理器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CPU去内存中取程序的指令并运行，相当于控制器+运算器</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-内存"><a href="#3-2-2-内存" class="headerlink" title="3.2.2 内存"></a>3.2.2 内存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">程序要想运行必须先存在于内存中</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-硬盘"><a href="#3-2-3-硬盘" class="headerlink" title="3.2.3 硬盘"></a>3.2.3 硬盘</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">永久保存相应数据</span><br></pre></td></tr></table></figure>



<h3 id="3-3-操作系统"><a href="#3-3-操作系统" class="headerlink" title="3.3 操作系统"></a>3.3 操作系统</h3><h4 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1 概念"></a>3.3.1 概念</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作用:协调、管理、控制计算机各个硬件的工作</span><br><span class="line">计算机硬件--&gt;操作系统--&gt;应用程序</span><br><span class="line">我们日常生活中所使用的 程序员所编写的程序都必须基于操作系统之上</span><br></pre></td></tr></table></figure>



<h4 id="3-3-2-分类"><a href="#3-3-2-分类" class="headerlink" title="3.3.2 分类"></a>3.3.2 分类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PC端：</span><br><span class="line">windows</span><br><span class="line">linux</span><br><span class="line">macos</span><br><span class="line"></span><br><span class="line">移动端：</span><br><span class="line">安卓</span><br><span class="line">ios</span><br><span class="line">鸿蒙</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-命令记录-01</title>
    <url>/afb08e91.html</url>
    <content><![CDATA[<h2 id="Ubuntu扩容lvm"><a href="#Ubuntu扩容lvm" class="headerlink" title="Ubuntu扩容lvm"></a>Ubuntu扩容lvm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line">resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="测试硬盘灯"><a href="#测试硬盘灯" class="headerlink" title="测试硬盘灯"></a>测试硬盘灯</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">time dd if=/dev/sdb of=/dev/null bs=4k</span><br><span class="line"></span><br><span class="line">for i in `lsblk |grep -w sd[a-z] |grep T  |awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">do</span><br><span class="line">	nohup  dd if=/dev/$i of=/dev/null bs=4k &gt; /tmp/$&#123;i&#125;.log   &amp;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="CPU高压测试"><a href="#CPU高压测试" class="headerlink" title="CPU高压测试"></a>CPU高压测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in `seq 1 30`; do dd if=/dev/zero of=/dev/null &amp; done</span><br><span class="line">ps -ef |grep -v grep|grep &#x27;dd if=/dev/zero of=/dev/null&#x27;|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">top</span><br><span class="line">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"></span><br><span class="line">id 前面数值是空闲率</span><br></pre></td></tr></table></figure>


<h2 id="ip排序"><a href="#ip排序" class="headerlink" title="ip排序"></a>ip排序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort -t . -k 4,4n tt</span><br><span class="line">sort -t<span class="string">&#x27;.&#x27;</span> -k1,1n -k2,2n -k3,3n -k4,4n</span><br></pre></td></tr></table></figure>
<h2 id="mdadm软raid"><a href="#mdadm软raid" class="headerlink" title="mdadm软raid"></a>mdadm软raid</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mdadm -C /dev/md1 -l raid0 -n 2 /dev/nvme2n2 /dev/nvme3n1 </span><br></pre></td></tr></table></figure>
<h2 id="dpkg-error"><a href="#dpkg-error" class="headerlink" title="dpkg-error"></a>dpkg-error</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dpkg: error processing package</span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info /var/lib/dpkg/info.bak</span><br><span class="line">mkdir /var/lib/dpkg/info</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install sl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info       /var/lib/dpkg/info.ori</span><br><span class="line">mv /var/lib/dpkg/info.bak   /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line">apt install lrzsz </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CPU温度查看"><a href="#CPU温度查看" class="headerlink" title="CPU温度查看"></a>CPU温度查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt-get install lm-sensors sensors-applet -y</span><br><span class="line">yes| sensors-detect</span><br><span class="line"></span><br><span class="line">cat /sys/class/hwmon/hwmon0/device/hwmon/hwmon0/temp1_input</span><br><span class="line"></span><br><span class="line">sensors</span><br></pre></td></tr></table></figure>
<h2 id="无交互修改密码"><a href="#无交互修改密码" class="headerlink" title="无交互修改密码"></a>无交互修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:test123.&quot;</span>|chpasswd</span><br></pre></td></tr></table></figure>
<h2 id="开启yum缓存"><a href="#开启yum缓存" class="headerlink" title="开启yum缓存"></a>开启yum缓存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">修改为1</span></span><br><span class="line">keepcache=1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认存放目录在/var/cache</span></span><br></pre></td></tr></table></figure>
<h2 id="find找出的移动或删除"><a href="#find找出的移动或删除" class="headerlink" title="find找出的移动或删除"></a>find找出的移动或删除</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -name &#x27;means&#x27;|xargs -i mv &#123;&#125;  /k-means/</span><br><span class="line">find ./ -name &#x27;means&#x27;|xargs -i cp &#123;&#125;  /k-means/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">找出小于90G的文件</span></span><br><span class="line">find ./ -type f   -size -90G</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="bash错误修复"><a href="#bash错误修复" class="headerlink" title="-bash错误修复"></a>-bash错误修复</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash-4.2$</span><br><span class="line">cp /etc/skel/.bashrc  /home/user/</span><br><span class="line">cp /etc/skel/.bash_profile   /home/user</span><br></pre></td></tr></table></figure>
<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定目录</span></span><br><span class="line">-d </span><br></pre></td></tr></table></figure>
<h2 id="设置免密"><a href="#设置免密" class="headerlink" title="设置免密"></a>设置免密</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f ~/.ssh/id_rsa  -P &#x27;&#x27; -q</span><br><span class="line">sshpass -p123456</span><br><span class="line"></span><br><span class="line">ssh-copy-id -f -i ~/.ssh/id_rsa.pub &quot;-o StrictHostKeyChecking=no&quot; 10.0.0.100</span><br></pre></td></tr></table></figure>
<h2 id="rpm管理命令"><a href="#rpm管理命令" class="headerlink" title="rpm管理命令"></a>rpm管理命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ql  nginx		#列出所有相关目录</span><br><span class="line">rpm -qc  nginx		#列出配置目录</span><br><span class="line">rpm -e	 nginx		#单独卸载</span><br></pre></td></tr></table></figure>
<h2 id="输出格式化整理"><a href="#输出格式化整理" class="headerlink" title="输出格式化整理"></a>输出格式化整理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">column -t    <span class="comment">#格式化整理</span></span><br></pre></td></tr></table></figure>
<h2 id="自动补全命令"><a href="#自动补全命令" class="headerlink" title="自动补全命令"></a>自动补全命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install bash-completion #自动补全命令</span><br></pre></td></tr></table></figure>
<h2 id="VMware相关"><a href="#VMware相关" class="headerlink" title="VMware相关"></a>VMware相关</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">VM安装linux在docker中装mysql挂起再启动后无法连接解决方法</span></span><br><span class="line">vim /usr/lib/sysctl.d/00-system.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启网络服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看IPv4转发状态</span></span><br><span class="line">sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>
<h2 id="history设置"><a href="#history设置" class="headerlink" title="history设置"></a>history设置</h2><h3 id="历史命令显示时间"><a href="#历史命令显示时间" class="headerlink" title="历史命令显示时间"></a>历史命令显示时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">写入/etc/bashrc或者/etc/profile</span></span><br><span class="line">HISTFILESIZE=4000 #默认保存命令是1000条，这里修改为4000条</span><br><span class="line">HISTSIZE=4000</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;` #取得登录客户端的IP</span><br><span class="line">if [ -z $USER_IP ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">HISTTIMEFORMAT=&quot;%F %T $USER_IP:`whoami` &quot; #设置新的显示history的格式</span><br><span class="line">export HISTTIMEFORMAT</span><br><span class="line"></span><br><span class="line">. /etc/bashrc</span><br></pre></td></tr></table></figure>
<h3 id="记录用户bash"><a href="#记录用户bash" class="headerlink" title="记录用户bash"></a>记录用户bash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####记录用户bash######################################################</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER=`whoami`</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>|sed -e <span class="string">&#x27;s/[()]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$USER_IP</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line">chmod 777 /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date +<span class="string">&quot;%Y%m%d_%H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">&quot;/var/log/history/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;USER_IP&#125;</span>_<span class="variable">$DT</span>&quot;</span></span><br><span class="line">chmod 600 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span>/*<span class="built_in">history</span>* 2&gt;/dev/null</span><br><span class="line"><span class="comment">#######################################################################</span></span><br></pre></td></tr></table></figure>
<h2 id="vim设置"><a href="#vim设置" class="headerlink" title="vim设置"></a>vim设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">TAB 键为四个空格 永久显示行号</span></span><br><span class="line">vim /etc/vimrc</span><br><span class="line">set ts=4</span><br><span class="line">set sw=4</span><br><span class="line">set number</span><br></pre></td></tr></table></figure>
<h2 id="分区扩容"><a href="#分区扩容" class="headerlink" title="分区扩容"></a>分区扩容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umount /data/</span><br><span class="line">fdisk /dev/vdb</span><br><span class="line">d</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line"></span><br><span class="line">e2fsck -f /dev/vdb1</span><br><span class="line">resize2fs /dev/vdb1 </span><br><span class="line">mount /dev/vdb1 /data/</span><br><span class="line">df -h </span><br><span class="line">cd /data/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 3</span><br></pre></td></tr></table></figure>
<h2 id="tcpdump使用"><a href="#tcpdump使用" class="headerlink" title="tcpdump使用"></a>tcpdump使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">-i 指定网卡</span><br><span class="line">-c 指定抓包数量</span><br></pre></td></tr></table></figure>
<h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果不是北京时间先改成北京时间</span></span><br><span class="line">1.删除自带的localtime</span><br><span class="line">  rm -rf /etc/localtime</span><br><span class="line">2.创建软链接到localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">同步阿里云</span></span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">写入硬件主板</span></span><br><span class="line">hwclock -w</span><br></pre></td></tr></table></figure>
<h2 id="终端颜色"><a href="#终端颜色" class="headerlink" title="终端颜色"></a>终端颜色</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入到环境变量内</span></span><br><span class="line">RED:</span><br><span class="line">PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;31;40m\]\u\[\033[00;00;40m\]@\[\033[01;31;40m\]\h\[\033[00;31;40m\]:\[\033[00;00;40m\]\w \[\033[01;32;40m\]\$ \[\033[01;37;40m\]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">YELLOW:</span><br><span class="line">PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;33;40m\]\u\[\033[00;00;40m\]@\[\033[01;33;40m\]\h\[\033[00;33;40m\]:\[\033[00;00;40m\]\w \[\033[01;32;40m\]\$ \[\033[01;37;40m\]&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="linux格式问题"><a href="#linux格式问题" class="headerlink" title="linux格式问题"></a>linux格式问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查文件格式，如果带M即是Windows，需要使用dosunix转换</span></span><br><span class="line">cat -v filename</span><br><span class="line">apt install dosunix -y</span><br><span class="line">yum install dosunix -y</span><br><span class="line">dos2unix filename</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.cnblogs.com/chuyiwang/p/13823551.html</span><br></pre></td></tr></table></figure>
<h2 id="文件分割"><a href="#文件分割" class="headerlink" title="文件分割"></a>文件分割</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">split</span><br></pre></td></tr></table></figure>

<h2 id="hexo插件"><a href="#hexo插件" class="headerlink" title="hexo插件"></a>hexo插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-cname</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
